// Generated by github.com/greatwing/tabtoy
// DO NOT EDIT!!
// Version: 
export namespace tab {
	export var Data:Table = null;

	export function InitData(json: Object|string) {
		Data = Table.FromJSON(json);
	}

	
	export enum RewardType { 
		RewardType_ItemType = 0, // 道具 
		RewardType_BoxGroupType = 1, // 宝箱组 
		RewardType_BoxType = 2, // 宝箱 
		RewardType_ShopRefreshCard = 3, // 商店刷新卡牌 
		RewardType_BagSpeedUp = 4, // 背包加速 
		RewardType_RoleExp = 5, // 角色经验 
		RewardType_RandomLegendCard = 6, // 随机金卡 
		RewardType_BattleMap = 7, // 战场地图 
		RewardType_Emotion = 8, // 表情 
		RewardType_SelectCardBySelf = 9, // 自选卡牌 
		RewardType_OptionalBox = 10, // 自选宝箱 
	}
	export enum ItemType { 
		ItemType_Tower = 0, // 卡牌 
		ItemType_GiftBag = 1, // 礼包 
		ItemType_Money = 2, // 货币 
		ItemType_Transform = 3, // 变身卡牌 
		ItemType_OptionalBox = 4, // 自选宝箱 
	}
	export enum ItemQuality { 
		ItemQuality_White = 0, // 白 
		ItemQuality_Blue = 1, // 蓝 
		ItemQuality_Violet = 2, // 紫 
		ItemQuality_Golden = 3, // 金 
	}
	export enum EnemyType { 
		EnemyType_Normal = 0, // 小怪 
		EnemyType_Elite = 1, // 精英 
		EnemyType_Boss = 2, // 首领 
	}
	export enum SkillType { 
		SkillType_AddBuffer = 0, // 添加Buffer 
		SkillType_Damage = 1, // 普通攻击 
		SkillType_SplashDamage = 2, // 溅射定值伤害 
		SkillType_RangeEffect = 3, // 光环 
		SkillType_DamageByRangeGain = 4, // 按距离增伤 
		SkillType_InstantKill = 5, // 秒杀攻击 
		SkillType_Buffer = 6, // 增益效果 
		SkillType_Revive = 7, // 复活 
		SkillType_MoveByFlash = 8, // 闪光瞬移 
		SkillType_HitOverly = 9, // 普攻叠加 
		SkillType_FixedDamage = 10, // 定值攻击 
		SkillType_MultiFixedDamage = 11, // 多目标定值攻击 
		SkillType_ZusePunish = 12, // 宙斯裁决 
		SkillType_Transform = 13, // 变身 
		SkillType_AddStar = 14, // 增加星级 
		SkillType_ChangeCardByTeam = 15, // 更换成队伍中任意棋子 
		SkillType_TotalStarOverlayBuffer = 16, // 按总星级叠加Buff 
	}
	export enum SkillCondition { 
		SkillCondition_None = 0, // 不发动 
		SkillCondition_BeforeFight = 1, // 开战前发动 
		SkillCondition_AfterFight = 2, // 战斗结束后发动 
		SkillCondition_TargetInRange = 3, // 目标在技能范围内 
		SkillCondition_TowerMove = 4, // 棋子移动 
		SkillCondition_BeforeAttack = 5, // 攻击准备阶段 
		SkillCondition_Attack = 6, // 攻击阶段 
		SkillCondition_AfterAttack = 7, // 攻击结束阶段 
		SkillCondition_AfterHpBelow = 8, // 血量变化后低于N‰ 
		SkillCondition_AttackCritical = 9, // 攻击暴击 
		SkillCondition_SelfDead = 10, // 自身死亡 
		SkillCondition_TargetDead = 11, // 目标死亡 
		SkillCondition_KillTarget = 12, // 击杀目标 
		SkillCondition_HpBelow = 13, // 血量低于N‰ 
		SkillCondition_OddToCompound = 14, // 开战前星级为偶数 
		SkillCondition_EvenToCompound = 15, // 开战前星级为奇数 
		SkillCondition_SameCompound = 16, // 相同星级 
		SkillCondition_AllyDead = 17, // 友军死亡 
		SkillCondition_PrepareFight = 18, // 开战准备时发动 
		SkillCondition_SameCardCountChanged = 19, // 同棋子数量变化 
	}
	export enum SkillTarget { 
		SkillTarget_Self = 0, // 自身 
		SkillTarget_Enemies = 1, // 敌军 
		SkillTarget_Allies = 2, // 友军 
	}
	export enum SkillHitRegion { 
		SkillHitRegion_Center = 0, // 中心 
		SkillHitRegion_Edge = 1, // 边缘 
	}
	export enum PreviewType { 
		PreviewType_None = 0, // 空 
		PreviewType_Attack = 1, // 攻击 
		PreviewType_Skill = 2, // 技能 
	}
	export enum BulletTrace { 
		BulletTrace_Empty = 0, // 不使用 
		BulletTrace_Straight = 1, // 直线 
		BulletTrace_Curve = 2, // 抛物线 
		BulletTrace_None = 3, // 无轨迹 
		BulletTrace_Self = 4, // 自身 
		BulletTrace_Target = 5, // 目标 
	}
	export enum CalcType { 
		CalcType_Fixed = 0, // 固定值 
		CalcType_Permillage = 1, // 千分比 
	}
	export enum BuffType { 
		BuffType_None = 0, // 无行为 
		BuffType_Taunt = 1, // 嘲讽 
		BuffType_CureFixed = 2, // 治疗固定值 
		BuffType_Range = 3, // 射程 
		BuffType_SpeedPerMille = 4, // 攻速千分比 
		BuffType_AttackPerMille = 5, // 伤害千分比 
		BuffType_MaxHpPerMille = 6, // 血量千分比 
		BuffType_AttackFixed = 7, // 伤害固定值 
		BuffType_Invincible = 8, // 无敌 
		BuffType_DamageCure = 9, // 吸血 
		BuffType_StopAttack = 10, // 禁止攻击 
		BuffType_Shield = 11, // 护盾 
		BuffType_LightningChain = 12, // 闪电链 
		BuffType_OverlayRelease = 13, // 叠满释放技能 
		BuffType_RemoveToRelease = 14, // 结束释放技能 
		BuffType_AddSkill = 15, // 添加技能 
		BuffType_InstantKillPerMille = 16, // 秒杀千分比 
		BuffType_AttackAdd = 17, // 附加攻击力 
	}
	export enum BuffValueType { 
		BuffValueType_Fixed = 0, // 固定值提升 
		BuffValueType_Permillage = 1, // 千分比提升 
	}
	export enum BuffClearType { 
		BuffClearType_None = 0, // 不清除 
		BuffClearType_EndOfRound = 1, // 回合结束 
		BuffClearType_Die = 2, // 死亡 
		BuffClearType_AdderDead = 3, // 添加者死亡 
		BuffClearType_OutOfRange = 4, // 超出影响范围 
		BuffClearType_AffectOnce = 5, // 回合内仅触发一次 
		BuffClearType_SwitchTarget = 6, // 切换目标 
		BuffClearType_OverlayReset = 7, // 叠满清空层数 
	}
	export enum Gender { 
		Gender_Male = 0, // 男 
		Gender_Female = 1, // 女 
	}
	export enum DragType { 
		DragType_Left = 0, // 左侧 
		DragType_Right = 1, // 右侧 
		DragType_Any = 2, // 任意 
	}
	export enum RankFightType { 
		RankFightType_Low = 0, // 竞技场 
		RankFightType_Hight = 1, // 排位赛 
	}
	export enum LordSkillType { 
		LordSkillType_Buff = 0, // 状态赋予 
		LordSkillType_Summon = 1, // 英雄召唤 
		LordSkillType_Change = 2, // 指定变换 
		LordSkillType_Shield = 3, // 护盾 
	}
	export enum FloorBufferColor { 
		FloorBufferColor_None = 0, // 不做处理 
		FloorBufferColor_White = 1, // 白色 
		FloorBufferColor_Red = 2, // 红色 
		FloorBufferColor_Blue = 3, // 蓝色 
	}
	export enum EffectType { 
		EffectType_SkeletonData = 0, // 骨骼动画 
		EffectType_AnimationClip = 1, // 预制体 
		EffectType_SpriteFrame = 2, // 静态图 
		EffectType_Plist = 3, // Plist 
	}
	export enum PullCardType { 
		PullCardType_Free = 0, // 免费 
		PullCardType_Normal = 1, // 普通 
		PullCardType_HighClass = 2, // 高级 
		PullCardType_Honour = 3, // 荣耀 
	}
	export enum CardPoolType { 
		CardPoolType_Normal = 0, // 普通 
		CardPoolType_Legend = 1, // 传说 
		CardPoolType_Rookie = 2, // 新手金 
		CardPoolType_RookieFinal = 3, // 新手最终 
	}
	export enum BoxRewardType { 
		BoxRewardType_Normal = 0, // 普通 
		BoxRewardType_DoubleChoose = 1, // 二选一 
	}
	export enum RankBoxType { 
		RankBoxType_BoxA = 0, // 宝箱A 
		RankBoxType_BoxB = 1, // 宝箱B 
		RankBoxType_BoxC = 2, // 宝箱C 
		RankBoxType_BoxD = 3, // 宝箱D 
	}
	export enum SortType { 
		SortType_CardLevelIncrease = 1, // 按卡牌等级递增 
		SortType_CardLevelDecrease = 2, // 按卡牌等级递减 
		SortType_CardQualityIncrease = 3, // 按卡牌品质递增 
		SortType_CardQualityDecrease = 4, // 按卡牌品质递减 
		SortType_AthleticsLevelDecrease = 5, // 按竞技场等级递减 
		SortType_AthleticsLevelIncrease = 6, // 按竞技场等级递增 
		SortType_EndMark = 7, // 结束标记 
	}
	export enum TaskFinishType { 
		TaskFinishType_FightCount = 0, // 进行对战XX次 
		TaskFinishType_FightWinCount = 1, // 对战胜利XX次 
		TaskFinishType_TeamworkCount = 2, // 进行合作模式XX次 
		TaskFinishType_CallCardCount = 3, // 战斗中召唤卡牌次数 
		TaskFinishType_AddCardCount = 4, // 获得卡牌数量 
		TaskFinishType_OpenBoxCount = 5, // 打开皮箱X个 
		TaskFinishType_UseDevilSkillCount = 6, // 使用魔王卡牌技能次数 
		TaskFinishType_LeagueOfferCardCount = 7, // 联盟支援卡牌数量 
		TaskFinishType_LeagueAskCardCount = 8, // 联盟请求卡牌支援次数 
		TaskFinishType_LeagueAskQualityCount = 9, // 联盟请求特定品质卡牌次数 
		TaskFinishType_OpenRainbowTask = 10, // 打开彩虹任务界面 
		TaskFinishType_TeamworkWave = 11, // 无限防御达到XX波 
		TaskFinishType_SummonStarLvHeroCount = 12, // 召唤特定星级英雄次数 
		TaskFinishType_BossKillCount = 13, // 击杀X次头目 
		TaskFinishType_MonsterKillCount = 14, // 击杀X只怪物 
		TaskFinishType_RoleLevelStatistics = 15, // 人物等级达到X级 
		TaskFinishType_HistoryRankGradeStatistics = 16, // 竞技场等级达到过X级 
		TaskFinishType_CardLevelNumberStatistics = 17, // 拥有X张Y等级的卡牌 
		TaskFinishType_FriendOrAlliancePVPCount = 18, // 好友或联盟中对战xx次 
		TaskFinishType_FriendOrAlliancePVECount = 19, // 好友或联盟中合作xx次 
		TaskFinishType_RechargeCount = 20, // 进行x次充值 
		TaskFinishType_ShopBuySpecialGoodsCount = 21, // 进行X次每日特价商品购买 
		TaskFinishType_ShopBuyCount = 22, // 商店购买X次 
		TaskFinishType_ChessKillCount = 23, // 击杀X个棋子 
	}
	export enum MatchTarget { 
		MatchTarget_MatchAll = 0, // 任意 
		MatchTarget_Robot = 1, // 机器人 
		MatchTarget_Player = 2, // 玩家 
	}
	export enum RobotType { 
		RobotType_Normal = 1, // 普通 
		RobotType_LoseStreak = 2, // 连败 
		RobotType_Rookie = 3, // 新手引导专用 
		RobotType_Training = 4, // 训练场 
	}
	export enum RobotEmojiType { 
		RobotEmojiType_FightStart = 1, // 战斗开始 
		RobotEmojiType_EmojiRsp = 2, // 回应表情 
		RobotEmojiType_ResidualBlood = 3, // 残血 
	}
	export enum ChannelType { 
		ChannelType_None = 0, // 无 
		ChannelType_WechatGame = 1, // 微信小游戏 
		ChannelType_WechatGame_37 = 2, // 微信小游戏_三七 
		ChannelType_Tencent_youxuan = 3, // 腾讯优选 
	}
	export enum GuideType { 
		GuideType_Trunk = 0, // 主线 
		GuideType_Branch = 1, // 支线 
	}
	export enum GuideScene { 
		GuideScene_MainScene = 0, // 主场景 
		GuideScene_FightScene = 1, // 战斗场景 
	}
	export enum GiftBagAwardType { 
		GiftBagAwardType_GetAllAward = 0, // 全部获取 
		GiftBagAwardType_RandomAward = 1, // 随机 
	}
	export enum GiftBagType { 
		GiftBagType_EveryDayGiftBag = 0, // 每日礼包 
		GiftBagType_WeekengGifgBag = 1, // 周末礼包 
		GiftBagType_EXBagGiftBag = 2, // 特惠礼包 
	}
	export enum OffsetType { 
		OffsetType_Top = 0, // 与上方的距离 
		OffsetType_Bottom = 1, // 与下方的距离 
		OffsetType_Absolute = 2, // 绝对坐标 
	}
	export enum SoundType { 
		SoundType_BGM = 0, // 背景音乐 
		SoundType_SE = 1, // 音效 
		SoundType_VOICE = 2, // 对白 
	}
	export enum BoolType { 
		BoolType_False = 0, // 否 
		BoolType_True = 1, // 是 
	}
	export enum TalentType { 
		TalentType_Status = 0, // 状态 
		TalentType_Special = 1, // 特殊 
	}
	export enum AlliancePositionType { 
		AlliancePositionType_Leader = 1, // 首领 
		AlliancePositionType_DeputyLeader = 2, // 副首领 
		AlliancePositionType_Senior = 3, // 元老 
		AlliancePositionType_Member = 4, // 成员 
	}
	export enum ChallengeType { 
		ChallengeType_ManaLimit = 0, // 法力限制 
		ChallengeType_ForbidSpecifiedQualityCard = 1, // 禁用特定品质的卡牌 
		ChallengeType_OutSpecifiedCard = 2, // 携带特定卡牌 
		ChallengeType_ManaDouble = 3, // 法力双倍 
		ChallengeType_OutSpecifiedLord = 4, // 携带特定魔王 
	}
	export enum RechargeGoodsType { 
		RechargeGoodsType_ShopDiamond = 1, // 商城钻石 
		RechargeGoodsType_DailyGiftBag = 2, // 每日礼包 
		RechargeGoodsType_WeekengGifgBag = 3, // 周末礼包 
		RechargeGoodsType_DiscountGiftBag = 4, // 特惠礼包 
		RechargeGoodsType_RookieGiftBag = 5, // 新手礼包 
		RechargeGoodsType_DemonPass = 6, // 赛季通行证 
		RechargeGoodsType_GrowFund = 7, // 成长基金 
		RechargeGoodsType_OneYuanToBuy = 8, // 一元购 
		RechargeGoodsType_EveryDiscountsGiftBag = 9, // 每日特惠礼包 
		RechargeGoodsType_MonthCard = 10, // 月卡 
		RechargeGoodsType_OverBagGift = 13, // 超值礼包 
		RechargeGoodsType_PickedGiftBag = 14, // 精选礼包 
		RechargeGoodsType_ContinuousGift = 15, // 连续折扣礼包 
		RechargeGoodsType_FirstRechargeGift = 16, // 首充礼包 
		RechargeGoodsType_LifetimePass = 17, // 永久卡 
	}
	export enum AdvertPosType { 
		AdvertPosType_RefreshEveryDaySpecialOfferShop = 1, // 每日特价广告刷新 
		AdvertPosType_DevilBox = 2, // 任务广告宝箱 
		AdvertPosType_ResetEveryDayTask = 3, // 重置每日任务 
		AdvertPosType_RefreshRainbowTask = 4, // 彩虹任务刷新 
		AdvertPosType_ChangeEveryDayTask = 5, // 更换每日任务 
		AdvertPosType_CooperationAddCount = 6, // 合作模式增加次数 
		AdvertPosType_AccelerateOpenBox = 7, // 加速打开宝箱 
		AdvertPosType_ChangeEveryDayGiftBag = 8, // 看广告更换每日礼包 
		AdvertPosType_ChallengeResurgence = 9, // 挑战副本看广告复活 
		AdvertPosType_ResumeSeasonScore = 10, // 看广告不掉分 
		AdvertPosType_AddBoxSpeedUpTime = 11, // 看广告增加宝箱加速时长 
		AdvertPosType_HeroLoadADGetAward = 12, // 英雄之路广告领奖 
		AdvertPosType_SpringFestivalSignIn = 13, // 春节签到 
		AdvertPosType_PickedGiftBagAdFresh = 14, // 精选礼包广告刷新 
		AdvertPosType_LuckySupply = 15, // 幸运宝箱 
		AdvertPosType_WinBoxAdCount = 16, // 胜利宝箱广告次数 
	}
	export enum OpenFunctionName { 
		OpenFunctionName_SevenSignIn = 1, // 七日签到 
		OpenFunctionName_CooperationModel = 2, // 合作模式 
		OpenFunctionName_RookieGiftBag = 3, // 新手礼包 
		OpenFunctionName_GiftBag = 4, // 礼包 
		OpenFunctionName_MainPageUnlockBox = 5, // 主界面宝箱解锁加速 
		OpenFunctionName_GrowFund = 6, // 成长基金 
		OpenFunctionName_EveryDayInviteFriend = 7, // 每日好友邀请 
		OpenFunctionName_OneYuanToBuy = 8, // 一元购 
		OpenFunctionName_EveryDayDiscountsGiftBag = 9, // 每日特惠礼包 
		OpenFunctionName_WeekMonthPass = 10, // 特权卡 
		OpenFunctionName_HeroLoad = 11, // 英雄之路 
		OpenFunctionName_UnpackRebate = 12, // 开箱返利 
		OpenFunctionName_QuestionnaireSurvey = 13, // 问卷调查 
		OpenFunctionName_DoubleEnergy = 14, // 能量双倍 
		OpenFunctionName_SpringFestivalSignIn = 15, // 春节签到 
		OpenFunctionName_TextEmotionChat = 16, // 文本表情聊天 
		OpenFunctionName_ShareCardOfChat = 17, // 聊天中的卡组分享 
		OpenFunctionName_PickedGiftBag = 18, // 精选礼包 
		OpenFunctionName_LuckySupply = 19, // 幸运补给 
		OpenFunctionName_WinBoxAd = 20, // 胜利宝箱广告 
		OpenFunctionName_AdSevenDay = 21, // 7日广告宝箱 
		OpenFunctionName_BattleWinShare = 22, // 对战胜利分享 
		OpenFunctionName_BossBox = 23, // 赛季通行证 
		OpenFunctionName_BountyGame = 24, // 赏金赛 
		OpenFunctionName_ContinuousGift = 25, // 连续折扣礼包 
		OpenFunctionName_FirstRechargeGift = 26, // 首充礼包 
	}
	export enum OpenFunctionType { 
		OpenFunctionType_SeasonLevel = 1, // 竞技场等级 
		OpenFunctionType_SeasonScore = 2, // 赛季积分 
	}
	export enum SharedType { 
		SharedType_PVP = 0, // 对战分享 
		SharedType_WinShare = 1, // 胜利分享 
		SharedType_PullCard = 2, // 抽卡分享 
		SharedType_PVE = 3, // 合作模式分享 
		SharedType_EveryDayInviteFriend = 4, // 每日邀请好友分享 
		SharedType_FriendInvite = 5, // 好友邀请分享 
		SharedType_RankingList = 6, // 排行榜分享 
	}
	export enum LimitActivityID { 
		LimitActivityID_GrowFund = 1, // 成长基金 
		LimitActivityID_MonthAndWeekCard = 2, // 月卡周卡 
		LimitActivityID_UnpackRebate = 3, // 开箱返利 
	}
	export enum MembershipCardType { 
		MembershipCardType_MonthlyPass = 1, // 月卡 
		MembershipCardType_LifetimePass = 2, // 永久卡 
	}
	export enum QuestionnaireType { 
		QuestionnaireType_SingleSelect = 1, // 单选 
		QuestionnaireType_MultiSelect = 2, // 多选 
		QuestionnaireType_Filling = 3, // 填空 
		QuestionnaireType_MustFilling = 4, // 必填 
	}
	export enum OverBagGiftType { 
		OverBagGiftType_RoleLvEnough = 0, // 人物等级到达x级 
		OverBagGiftType_RankScoreEnough = 1, // 竞技场积分到达xx分 
	}
	export enum GachaPoolType { 
		GachaPoolType_Ordinary = 0, // 普通 
		GachaPoolType_Rare1 = 1, // 紫卡 
		GachaPoolType_Rare2 = 2, // 金卡 
	}
	export enum OptionalType { 
		OptionalType_Owned = 0, // 已有 
		OptionalType_Any = 1, // 任一 
	}

	
	export class ItemTable { 
		ID : number // ID 
		Name : string // 名称 
		Type : ItemType // 道具类型 
		Icon : string // 图标 
		Desc : string // 描述 
		Quality : ItemQuality // 品质 
		SortId : number // 排序 
		ChessBgBlue : string // 棋子底盘蓝 
		ChessBgRed : string // 棋子底盘红 
		ItemBigIcon : string // 大图标 
	}
	
	export class EnemyTable { 
		ID : number // ID 
		Name : string // 名称 
		EnemyDesc : string // 怪物描述 
		SpineID : number // 骨骼动画 
		Speed : number // 速度 
		HpBarX : number // 血条X坐标 
		HpBarY : number // 血条Y坐标 
		HpBarScaleX : number // 血条X方向缩放 
		HpBarScaleY : number // 血条Y方向缩放 
		Type : EnemyType // 怪物类型 
		MaxSlow : number // 减速上限(百分比) 
		Hurt : number // 伤害 
		SkillID : number // 技能 
		CriticalSkillID : number // 暴击技能 
		CriticalRate : number // 暴击率 
		FirstSkillCD : number // 首次技能时间 
		DeadSkillID : number // 亡语 
		DeadSpineID : number // 死亡特效 
		Portrait : string // 怪物立绘 
		CanReborn : boolean // 可在对面重生 
		Icon : string // 怪物小图标 
		HpRate : number // 血量系数 
		FrameAnim : string // 帧动画 
	}
	
	export class SpineTable { 
		ID : number // ID 
		Url : string // 文件路径 
		ScaleX : number // X方向缩放 
		ScaleY : number // Y方向缩放 
		OffsetX : number // X方向偏移 
		OffsetY : number // Y方向偏移 
		DisablePreAlpha : boolean // 禁用预乘 
	}
	
	export class CardTable { 
		ID : number // ID 
		Name : string // 名称 
		Attack : number // 初始攻击 
		Speed : number // 初始攻速 
		Hp : number // 初始血量 
		AtkLvUp : number // 升级+攻击‰ 
		HpLvUp : number // 升级+血量‰ 
		AtkCompound : number // 合成+攻击‰ 
		SpeedCompound : number // 合成+攻速‰ 
		HpCompound : number // 合成+血量‰ 
		SkillList : number[] // 技能ID 
		SpineID : number // 战斗动画 
		PortraitSpineID : number // 立绘(动态) 
		BulletDuration : number // 子弹延迟(毫秒) 
		Describe : string // 描述 
		AttrTypeDes : string // 棋子功能 
		NoFlipX : boolean // 攻击时不转向 
		UnlockRankLevel : number // 对应竞技场等级解锁 
		AppearEffect : number // 出现特效 
		PermanentEffect : number // 常驻特效 
		TransformID : number // 变身ID 
		TransformOdds : number // 变身概率‰ 
	}
	
	export class SkillTable { 
		ID : number // ID 
		Type : SkillType // 类型 
		Condition : SkillCondition // 发动条件 
		ConditionPriority : number // 发动优先级 
		ConditionParams : number[] // 发动条件参数 
		ConditionParams2 : number // 发动条件附加参数 
		Range : number // 技能范围 
		Preview : PreviewType // 预览范围 
		Target : SkillTarget // 作用目标 
		TargetCount : number // 目标数量 
		SkillCalcType : CalcType // 计算规则 
		SkillParams : number[] // 技能参数 
		BuffList : number[] // BuffList 
		CanBeTaunt : boolean // 能够嘲讽 
		CantInstantKill : boolean // 不能秒杀 
		Trace : BulletTrace // 子弹轨迹 
		BulletEffectID : number // 子弹特效 
		BulletX : number // 子弹X偏移 
		BulletY : number // 子弹Y偏移 
		HitRegion : SkillHitRegion // 受击部位 
		HitEffectID : number // 受击特效 
		PrepareEffectID : number // 前摇特效 
	}
	
	export class BuffTable { 
		ID : number // ID 
		Type : BuffType // 类型 
		Duration : number[] // 持续时间 
		Trigger : number[] // 触发间隔 
		CID : number // 叠加ID 
		Overlay : number // 叠加次数 
		ValueType : BuffValueType // 数值类型 
		Value : number[] // 数值 
		SkillID : number // 技能ID 
		EffectID : number // 特效 
		ClearType : BuffClearType[] // 清除Buff的条件 
	}
	
	export class TipsTable { 
		Key : string // 键 
		Value : string // 值 
	}
	
	export class RandomNameTable { 
		ID : number // ID 
		Gender : Gender // 性别 
		LastName : string // 姓 
		FirstName : string // 名 
	}
	
	export class EnemyWaveTable { 
		WaveID : number // 波数 
		EnemyID : number // 怪物ID 
		Timestamp : number // 出兵时间(毫秒) 
		Hp : number // 血量 
		Money : number // 银币 
	}
	
	export class GuideEnemyWaveTable { 
		ID : number // 引导ID 
		LeftCardID : number // 左侧棋子ID 
		RightCardID : number // 右侧棋子ID 
		DragType : DragType // 可拖动侧 
		Row : number // Row 
		Column : number // Column 
	}
	
	export class PveEnemyWaveTable { 
		WaveID : number // 波数 
		EnemyID : number // 怪物ID 
		Timestamp : number // 出兵时间(毫秒) 
		Hp : number // 血量 
		Money : number // 银币 
	}
	
	export class BossBoxTable { 
		ID : number // ID 
		BelongSeasonID : number // 赛季id 
		BossBoxLv : number // 通行证等级 
		ItemType : RewardType // 免费奖励类型 
		ItemId : number // 免费奖励ID 
		ItemCnt : number // 免费奖励数量 
		PassItemType : RewardType // 付费奖励类型 
		PassItemId : number // 付费奖励ID 
		PassItemCnt : number // 付费奖励数量 
		PreviewFlag : number // 是否预告 
		indexIcon : string // 序号底图路径 
	}
	
	export class BagSpeedUpTable { 
		ID : number // ID 
		BagSpeedUpTime : number // 背包加速时间 
		BagSpeedUpTimeName : string // 名称 
		BagSpeedUpTimeIcon : string // 图标 
	}
	
	export class RankGradeTable { 
		Grade : number // 竞技场等级 
		BoxLevel : number // 宝箱组等级 
		Type : RankFightType // 赛制类型 
	}
	
	export class RankScoreRewardTable { 
		Score : number // 天梯积分 
		RewardID1 : number // 奖励道具id1 
		RewardType1 : RewardType // 奖励类型1 
		RewardCount1 : number // 奖励数量1 
		RewardID2 : number // 奖励道具id2 
		RewardType2 : RewardType // 奖励类型2 
		RewardCount2 : number // 奖励数量2 
		FightNum : number // 段位 
		RankName : string // 段位名称 
		RankIcon : string // 段位图标 
	}
	
	export class LordSkillTable { 
		LordID : number // 魔王ID 
		Type : LordSkillType // 技能类型 
		ActiveCD : number // 技能CD 
		CDLevel : number // 升级CD减少 
		ActiveBuffID : number // 主动技能Buff 
		SummonCount : number // 召唤数量 
		ExtraSummonCount : number // 追加召唤数量 
		ExtraSummonRateID : number // 追加召唤概率ID 
		TipType : string[] // 提示文字 
		TipPortrait : string // 提示头像 
		ShowPortrait : string // 展示头像 
		EffectID : number // 释放特效 
		CostDownID : number // 消耗减少ID 
	}
	
	export class HeadTable { 
		headId : string // 头像id 
		headDir : string // 头像位置 
	}
	
	export class HeadFramTable { 
		headFramId : number // 头像框id 
		headFramDir : string // 头像框位置 
	}
	
	export class ServerlistTable { 
		ID : number // ID 
		Name : string // 名称 
		Address : string // 登录地址 
		SvcGroup : string // 服务器分组 
		GMAddress : string // GM服务器地址 
		ReviewSvcGroup : string // 提审服分组 
		NoticeAddr : string // 公告地址 
		NoticeVerAddr : string // 公告版本地址 
		AllowCORS : boolean // 是否允许跨域 
	}
	
	export class CardUpLevelTable { 
		Quality : ItemQuality // 品质 
		Count : number[] // 升到当前等级消耗卡牌数量 
		GoldCount : number[] // 升到当前等级消耗金币数量 
		ExpCount : number[] // 经验 
		ExtraAddLv : number // 高品质要额外加的等级 
	}
	
	export class QualityTable { 
		Quality : ItemQuality // 品质 
		QualityDescrible : string // 品质文本 
		QualityFrame : string // 棋子类型背景底框 
		QualityBG : string // 棋子等级背景 
		PullCardFile : string // 抽卡品质图 
		ColorRGB : string // 品质RGB颜色 
		CriticalDamageAdd : number // 获得增加暴伤 
		CriticalDamageMul : number // 升级增加暴伤 
		CardQualityEffectBg : string // 卡牌品质底座 
		CardQualityEffectLighting : number // 卡牌底座发光 
		CardQualityEffectStar : number // 卡牌底座星星 
		QualityFile : string // 商店背景 
		NameBG : string // 名称底图 
		CardBG : string // 卡牌底图 
		CardDetailsBG : string // 卡牌详情背景图 
		ItemBg : string // 道具背景框 
		TimeBoxIcon : string // 时间宝箱的品质图 
		TimeBoxName : string // 时间宝箱的品质名字 
		PullCardBgAniName : string // 抽卡背景动画 
		PullCardBg : string // 抽卡展示背景图 
	}
	
	export class EffectTable { 
		ID : number // ID 
		Type : EffectType // 特效类型 
		Loop : boolean // 循环播放 
		SpineID : number // 骨骼动画ID 
		Url : string // 资源路径 
		AnimationName : string[] // 动画名称 
		FPS : number // 每秒帧数 
		Sound : string // 音效 
		Zindex : number // 层级 
		RandomRotate : boolean // 随机旋转 
	}
	
	export class PullCardTable { 
		PullType : PullCardType // 抽卡类型 
		CostDiamond : number // 消耗钻石 
		BoxGroupID : number // 宝箱组ID 
	}
	
	export class SkillAtkTargetDesTable { 
		ID : number // ID 
		TargetString : string // 目标描述 
	}
	
	export class PullCardWeightTable { 
		ID : number // ID 
		CardId : number // 卡牌id 
		CardWeight : number // 卡牌权重 
		PullType : PullCardType // 抽卡类型 
	}
	
	export class ShopSpecialGoodsTable { 
		Pos : number // 位置 
		RankGradeButtom : number // 段位a 
		RankGradeTop : number // 段位b 
		RewardType : RewardType // 奖励类型 
		RewardId : number // 奖励ID 
		RewardCount : number // 奖励数量 
		CostItemId : number // 消耗物品ID 
		CostItemCount : number // 消耗数量 
		Weight : number // 随机权重 
	}
	
	export class ShopSpecialCardTable { 
		RankGrade : number // 竞技场等级 
		Quality : ItemQuality // 卡牌品质 
		Count : number // 数量 
		CostItemId : number // 消耗道具ID 
		CostItemCount : number // 消耗数量 
		Weight : number // 权重 
	}
	
	export class ShopGoldGoodsTable { 
		Pos : number // 位置 
		ItemId : number // 获得道具ID 
		ItemCount : number // 获得道具数量 
		CostItemId : number // 消耗道具ID 
		CostItemCount : number // 消耗道具数量 
		ShowName : string // 显示名称 
		IconUrl : string // 图标路径 
	}
	
	export class ShopDiamondGoodsTable { 
		Pos : number // 位置 
		ShowName : string // 显示的名称 
		IconUrl : string // 图标的路径 
		RechargeID : number // 充值表ID 
		ItemId : number // 物品ID 
		ItemCount : number // 物品数量 
		DiamondFirstAdd : number // 首充赠送 
		DiamondAdd : number // 后续赠送 
	}
	
	export class ShopEmotionGoodsTable { 
		EmotionID : number // 表情ID 
	}
	
	export class FightCupTable { 
		CupLv : number // 段位 
		CupMin : number // 杯数起始 
		CupMax : number // 杯数结束(开区间) 
	}
	
	export class DropCardTable { 
		LoopID : number // 循环id 
		BoxTypeID : PullCardType // 对应pullcardtabledata中的宝箱类型 
	}
	
	export class BoxTable { 
		BoxID : number // 宝箱ID 
		Quality : ItemQuality // 品质 
		ItemIcon : string // 宝箱图标 
		SortId : number // 排序 
		CardPoolType : CardPoolType // 卡池类型 
		GoldCount : number // 金币下限 
		GoldMaxCount : number // 金币上限 
		CardType : ItemQuality[] // 卡牌品质 
		CardCount : number[] // 卡牌数量 
		IsSplit : boolean[] // 是否拆分 
		CardWeight : number[] // 卡的概率 
		ItemBigIcon : string // 宝箱大图 
		BoxName : string // 宝箱名字 
		MinDiamond : number // 钻石下限 
		MaxDiamond : number // 钻石上限 
		DiamondWeight : number // 钻石概率 
		UnlockSeconds : number // 解锁时长(秒) 
		BoxSpineActionName : string // 宝箱的spine动作名 
		BoxRewardType : BoxRewardType // 宝箱类型 
		BoxOpenAnimType : number // 开箱是否播放动画 
	}
	
	export class BoxCardWeightTable { 
		CardPoolType : CardPoolType // 卡池类型 
		CardId : number // 卡牌id 
		CardWeight : number // 卡牌权重 
		UnlockRankLevel : number // 竞技场等级解锁 
	}
	
	export class RankBoxLoopTable { 
		LoopID : number // 循环ID 
		NextLoopID : number // 下一ID 
		BoxGroupID : number // 宝箱组id 
	}
	
	export class RankBoxTable { 
		BoxGroupID : number // 宝箱组id 
		BoxLevel : number[] // 宝箱等级 
	}
	
	export class CardStrengthLvTable { 
		Level : number // 强化等级 
		IconPath : string // 等级图标路径 
	}
	
	export class CardSynthesisLvTable { 
		Level : number // 合成等级 
		IconPath : string // 等级图标路径 
	}
	
	export class CardSortTypeTable { 
		SortType : SortType // 排序类型 
		TypeText : string // 类型文本 
	}
	
	export class RankFightTable { 
		Id : number // 赛季ID 
		Name : string // 赛季名字 
		StartTime : number // 赛季开始时间 
		EndTime : number // 赛季结束时间 
		Ranking : number[] // 名次 
		RewardType1 : RewardType[] // 奖励类型1 
		RewardID1 : number[] // 奖励ID1 
		RewardCount1 : number[] // 奖励数量1 
		RewardType2 : RewardType[] // 奖励类型2 
		RewardID2 : number[] // 奖励ID2 
		RewardCount2 : number[] // 奖励数量2 
		RewardType3 : RewardType[] // 奖励类型3 
		RewardID3 : number[] // 奖励ID3 
		RewardCount3 : number[] // 奖励数量3 
		RewardType4 : RewardType[] // 奖励类型4 
		RewardID4 : number[] // 奖励ID4 
		RewardCount4 : number[] // 奖励数量4 
		RewardType5 : RewardType[] // 奖励类型5 
		RewardID5 : number[] // 奖励ID5 
		RewardCount5 : number[] // 奖励数量5 
	}
	
	export class RoleLevelTable { 
		RoleLv : number // 玩家等级 
		ExpLv : number // 等级经验 
	}
	
	export class TaskTable { 
		TaskId : number // 任务ID 
		Title : string // 标题 
		Describe : string // 文字描述 
		TaskType : TaskFinishType // 任务type 
		Param : number // 参数 
		Param1 : number // 参数1 
		TaskRewardType : RewardType // 任务奖励类型 
		TaskRewardId : number // 任务奖励id 
		TaskRewardCount : number // 任务奖励数量 
		Score : number // 获得积分 
		Weight : number // 权重 
		AthleticsLevel : number // 竞技场等级限制 
	}
	
	export class TaskGoalBoxTable { 
		GoalBoxId : number // 宝箱序号 
		NextGoalBoxId : number // 下一个序号 
		BoxGroupId : number // 宝箱组ID 
	}
	
	export class TaskGiftTable { 
		GiftId : number // 礼物ID 
		GiftRewardType : RewardType // 礼物奖励类型 
		GiftTaskRewardId : number // 礼物奖励id 
		GiftTaskRewardCount : number // 礼物奖励数量 
		Score : number // 获得积分 
		LeftSec : number // 领取倒计时 
		Weight : number // 权重 
	}
	
	export class TaskBoxGroupTable { 
		BoxGroupId : number // 宝箱组ID 
		Score : number // 积分 
		Weight : number // 权重 
	}
	
	export class MatchTable { 
		Score : number // 玩家积分 
		MatchTarget : MatchTarget // 匹配目标 
		ChangeTime : number[] // 匹配范围时间点 
		MatchRange1 : number[] // 匹配范围1 
		MatchRange2 : number[] // 匹配范围2 
		MatchRange3 : number[] // 匹配范围3 
		TimeLimit : number // 匹配机器人时间 
		AI : number[] // 匹配机器人组 
		LoseCount : number[] // 连败场数 
		LoseAI : number[] // 连败机器人组 
		WinCount : number[] // 连胜场数 
		WinAI : number[] // 连胜机器人组 
		MinScore : number // 最低分数 
	}
	
	export class RobotTable { 
		RobotID : number // 机器人ID 
		Group : number // 机器人分组 
		CardList : number[] // 棋子ID 
		LevelList : number[] // 棋子等级组 
		DisposeID : number // 操作方式 
		Score : number // 机器人积分 
		AICriticalDamage : number // 机器人暴伤 
	}
	
	export class RobotManualTable { 
		DisposeID : number // 操作ID 
		CardIndex : number // 棋子序号 
		Column : number // X坐标 
		Row : number // Y坐标 
	}
	
	export class GuideTable { 
		GuidID : number // 引导ID 
		Describe : string // 描述 
		ScriptName : string // 脚本名 
		PreGuide : number[] // 前置引导 
		Type : GuideType // 引导类型 
		FightDropID : number // 战斗奖励 
		Scene : GuideScene // 引导所在场景 
	}
	
	export class GiftBagTable { 
		GiftBagID : number // ID 
		GiftBType : GiftBagType // 礼包类型 
		GiftBAwardType : GiftBagAwardType // 礼包奖励类型 
		BackGround : string // 背景图 
		Title : string // 标题 
		Desc : string // 描述 
		AvdRefreshTimes : number // 广告刷新次数限制 
		AwardTypeSet : RewardType[] // 奖励物品类型集合 
		AwardIDSet : number[] // 奖励ID集合 
		AwardCountSet : number[] // 奖励数量集合 
		WorthNumber : string // 优惠折扣 
		LimitBuyTimes : number // 购买次数 
		RechargeID : number // 充值ID 
	}
	
	export class GuideDialogueTable { 
		DialogueID : number // 对话ID 
		Content : string // 对话内容 
		OffsetType : OffsetType // Y坐标偏移类型 
		YOffset : number // Y坐标偏移量 
	}
	
	export class RobotNameTable { 
		ID : number // ID 
		Name : string // 名字 
	}
	
	export class SoundTable { 
		Key : string // 标识 
		File : string // 路径 
		Type : SoundType // 类型 
		Loop : BoolType // 循环播放 
		Volume : number // 音量 
	}
	
	export class TalentTierTable { 
		Tier : number // 层 
		Item : number[] // 天赋 
		MaxPoint : number // 分配点数 
	}
	
	export class TalentTable { 
		ID : number // ID 
		Icon : string // 图标 
		Type : TalentType // 类型 
		AttrDesc : string // 属性描述 
		Tips : string // 描述 
		AtkDamage : number // 伤害 
		CriticalRate : number // 暴击率 
		AtkSpeed : number // 攻击速度 
		CriticalDamage : number // 暴击伤害 
		FirstSummonLv : number // 首次召唤等级 
		InitMana : number // 初始银币增加 
		FreeSkil : number // 免费大招次数 
		CompoundRate : number // 合成加钱概率 
		CompoundMana : number // 合成加钱数量 
		AddManaTime : number // 加钱时间 
		AddMana : number // 耗时加钱数量 
		CriticalMana : number // 暴击加钱 
		LowLvAtk : number // 1~4级伤害 
		HightLvAtk : number // 5~7级伤害 
	}
	
	export class AllianceIconTable { 
		ID : number // ID 
		IconPath : string // 图标路径 
	}
	
	export class AllianceJoinConditonTable { 
		ID : number // ID 
		JoinConditionDes : string // 加入联盟条件 
	}
	
	export class AllianceJoinMinScoreTable { 
		MinSeasonScore : number // 加入联盟最小赛季积分 
	}
	
	export class RankingIconTable { 
		ID : number // 排名 
		AllianceRankingIcon : string // 联盟排名图标路径 
		RankingListIcon : string // 排行榜排名图标路径 
	}
	
	export class PveRewardTable { 
		Wave : number // 波次 
		Gold : number // 金币 
		Soul : number // 灵魂 
		Box : number // 宝箱 
	}
	
	export class PveClearRewardTable { 
		Wave : number // 波次 
		Gold : number // 金币 
	}
	
	export class HelpHintTable { 
		ID : number // ID 
		Content : string // 内容 
	}
	
	export class EmojiTable { 
		ID : number // ID 
		Name : string // 名称 
		Quality : ItemQuality // 品质 
		SortId : number // 排序 
		SpineID : number // 动画ID 
		SoundKey : string // 音效 
		StaticIcon : string // 静态图 
	}
	
	export class AllianceSupportCardLimitTable { 
		SeasonLv : number // 赛季等级 
		NormalCardRequestCount : number // 普通卡牌请求数 
		UnCommonCardRequestCount : number // 稀有卡牌请求数 
		EpicCardRequestCount : number // 史诗卡牌请求数 
		NormalCardSupportLimitCount : number // 普通卡牌支援上限数 
		UnCommonCardSupportLimitCount : number // 稀有卡牌支援上限数 
		EpicCardSupportLimitCount : number // 史诗卡牌支援上限数 
		NormalSupportGetScore : number // 普通卡牌支援一次产生的分数 
		UnCommonSupportGetScore : number // 稀有卡牌支援一次产生的分数 
		EpicSupportGetScore : number // 史诗卡牌支援一次产生的分数 
		SupportScoreUpper : number // 支援分数上限 
	}
	
	export class AllianceInnerMsgTable { 
		MsgType : number // 消息类型 
		DecText : string // 描述文本 
	}
	
	export class ChallengeTable { 
		ID : number // ID 
		Season : number // 赛季 
		StartDay : number // 开始时间（赛季某天） 
		EndDay : number // 结束时间（赛季某天） 
		Type : ChallengeType[] // 挑战类型 
		TypeParam : number[] // 挑战参数 
		HeroLv : number // 英雄等级 
		TalentPoint : number // 天赋点 
		ChalAward : string[] // 奖励 
		ChalTitle : string // 标题 
		ChalIcon : string // 图标 
		ChalBg : string // 背景图 
		ChalDesc : string // 描述 
		ChallengeInfoDesc : string // 挑战信息的描述 
		ChalGetInDesc : string // 进场描述 
	}
	
	export class DevilPanelIconTable { 
		ID : number // ID 
		QualityFrameIcon : string // 品质框ICON 
		BgIcon : string // 背景图ICON 
	}
	
	export class InitMailTable { 
		MailTitle : string // 邮件标题 
		MailContent : string // 邮件内容 
		Type : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
	}
	
	export class FightTypeInfoTable { 
		FightType : number // 战斗类型 
		Title : string // 标题 
		Icon : string // 图标 
		Desc : string // 描述 
	}
	
	export class RecommendDeckTable { 
		ID : number // ID 
		DeckName : string // 阵容名称 
		Hard : string // 难度 
		FitPeople : string // 适用人群 
		DeckIntro : string // 阵容介绍 
		CardIDList : number[] // 卡组ID 
		Img : string // 展示图片 
		LordID : number // 魔王ID 
	}
	
	export class GameHelpTipsTable { 
		ID : number // ID 
		GameHelpTips : string // 游戏提示 
	}
	
	export class RainbowTaskTable { 
		ID : number // 任务ID 
		Title : string // 任务标题 
		Desc : string // 文字描述 
		Type : TaskFinishType // 任务类型 
		FinishCondition : number // 完成任务的条件 
		Param1 : number // 参数1 
		UseSection : number[] // 任务出现的区间 
	}
	
	export class RainbowTaskRewardTable { 
		ID : number // 任务星级 
		LeftRewardType : RewardType // 付费奖励类型 
		LeftRewardID : number // 付费奖励ID 
		LeftRewardCount : number // 付费奖励数量 
		RightRewardType : RewardType // 免费奖励类型 
		RightRewardID : number // 免费奖励ID 
		RightRewardCount : number // 免费奖励数量 
	}
	
	export class EnemyOnlyShowTable { 
		ID : number // ID 
		EnemyTypes : EnemyType // 怪物类型 
		Name1 : string // 名称 
		Name2 : string // 昵称 
		Icon : string // 图标 
		pating : string // 立绘 
		EnemyDesc : string // 敌人介绍 
	}
	
	export class RainbowTaskPeriodTable { 
		ID : number // 周期ID 
		StartTime : number // 开始时间 
		EndTime : number // 结束时间 
	}
	
	export class ShieldCountTable { 
		CardLv : number // 卡牌等级 
		CompoundLv : number[] // 合成等级 
	}
	
	export class SevenDaySignInRewardTable { 
		ID : number // ID 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
	}
	
	export class SevenSignInDayTable { 
		Day : number // 第几天 
		IconPath : string // 图标路径 
	}
	
	export class GroutStepTable { 
		Step : number // 阶段 
		TaskList : number[] // 任务列表 
		RewardID : number // 奖励ID 
		RewardType : RewardType // 奖励类型 
		RewardCount : number // 奖励数量 
	}
	
	export class GroutTaskTable { 
		ID : number // 任务ID 
		Title : string // 任务标题 
		Desc : string // 任务描述 
		Type : TaskFinishType // 任务类型 
		FinishCondition : number // 完成条件 
		Param1 : number // 参数1 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
	}
	
	export class GroutHeroTalkTable { 
		ID : number // ID 
		TalkTip : string // 说话提示 
	}
	
	export class NewPlayerGiftBagTable { 
		ID : number // ID 
		RechargeID : number // 充值表ID 
		AwardTypeSet : RewardType[] // 奖励物品类型集合 
		AwardIDSet : number[] // 奖励ID集合 
		AwardCountSet : number[] // 奖励数量集合 
		LimitBuyTimes : number // 限购次数 
		OriPrice : string // 字符串 
		BackGround : string // 背景图 
	}
	
	export class RechargeTable { 
		ID : number // ID 
		IAP : string // 充值档位IAP 
		Price : number // 价格 
		RechargeOriPrice : number // 原价 
		GoodsType : RechargeGoodsType // 商品类型 
		GoodsID : number // 商品ID 
		GoodsDesc : string // 商品描述 
	}
	
	export class AdvertPosTable { 
		AdvertPos : AdvertPosType // 广告点类型 
		EveryDayAdvertCount : number // 每日可看广告次数 
		AdvertDesc : string // 广告描述 
	}
	
	export class OpenFunctionLimitTable { 
		FunctionName : OpenFunctionName // 功能名称 
		LimitType : OpenFunctionType // 限制类型 
		OpenCondition : number // 开启条件 
	}
	
	export class WechatgameTable { 
		AppID : string // 微信APPID 
		GID : string // GID 
	}
	
	export class SharedAwardTable { 
		ID : number // 分享情况分类ID 
		AwardType : RewardType // 奖励类型 
		AwardID : number // 奖励id 
		AwardCount : number // 奖励数量 
		SharedFriendsCn : number // 需要分享好友的数量 
	}
	
	export class ShareTypeTable { 
		Type : SharedType // 分享类型 
		DiamondCount : number // 钻石数量 
		IconPath : string // 分享图片路径 
		Title : string // 分享标题 
		JumpUrl : string // 链接跳转地址 
	}
	
	export class ShareResultTipsTable { 
		ID : number // ID 
		Tips : string // 分享提示 
	}
	
	export class BattleMapTable { 
		ID : number // ID 
		Name : string // 地图名称 
		SortId : number // 排序 
		TopMapPath : string // Top地图路径 
		BottomMapPath : string // Bottom地图路径 
		SmallIcon : string // 小地图路径 
		BigIcon : string // 大地图路径 
	}
	
	export class BattleMapCycleTable { 
		SeasonID : number // 赛季ID 
		ID : number // ID 
		JumpUIName : string // 跳转到UI的名称 
		Position : number // 位置 
	}
	
	export class NewCardOfStoreTable { 
		ID : number // 卡牌ID 
	}
	
	export class LimitActivityTable { 
		ID : LimitActivityID // 活动ID 
		Title : string // 标题 
		StarTimeUTC : number // 开启时间 
		EndTimeUTC : number // 结束时间 
		Icon : string // 图标 
		SelectIcon : string // 选中图标 
		ActPrefab : string // 预制体路径 
	}
	
	export class LimitActivityGrowFundTable { 
		ID : number // ID 
		NeedRankScore : number // 天梯积分 
		LFreeAwardType : RewardType // 免费奖励类型 
		LFreeAwardID : number // 免费奖励ID 
		LFreeAwardCnt : number // 免费奖励数量 
		PayAwardType : RewardType[] // 付费奖励类型 
		PayFreeAwardID : number[] // 付费奖励ID 
		PayFreeAwardCnt : number[] // 付费奖励数量 
	}
	
	export class GameHelpTipsAreaTable { 
		ID : number // ID 
		Area : number[] // 赛季积分区间 
		TipsID : number[] // 游戏提示ID 
	}
	
	export class BuffSpeedCountTable { 
		CardLv : number // 卡牌等级 
		CompoundLv : number[] // 合成等级 
	}
	
	export class SlimeBossRandomWeightTable { 
		CompoundLv : number // 合成等级 
		RandomWeight : number // 随机权重 
	}
	
	export class RandomTransformWeightTable { 
		CompoundLv : number // 合成等级 
		RandomWeight : number // 随机权重 
	}
	
	export class DailyShareInviteRewardLoopTable { 
		LoopID : number // 奖励循环ID 
		NextLoopID : number // 下一奖励循环ID 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
	}
	
	export class MaxSeasonRewardCycleTable { 
		SeasonID : number // 赛季ID 
		RewardID : number // 奖励ID 
		RewardType : RewardType // 奖励类型 
		RewardCount : number // 奖励数量 
	}
	
	export class OneYuanBuyTable { 
		ID : number // ID 
		AwardType : RewardType[] // 奖励类型 
		AwardID : number[] // 奖励ID 
		AwardCnt : number[] // 奖励数量 
		Duration : number // 持续时间 
	}
	
	export class EnemyBossLimitedTable { 
		ID : number // 首领ID 
		RankGradeUnlock : number // 竞技场等级解锁 
		WaveUnlock : number // 波次解锁 
	}
	
	export class EveryDayDiscountsGiftBagTable { 
		ID : number // ID 
		NextID : number // nextID 
		AwardType : RewardType[] // 奖励类型 
		AwardID : number[] // 奖励ID 
		AwardCnt : number[] // 奖励数量 
		RechargeID : number // 充值档位ID 
		DiscountsNum : number // 优惠力度 
	}
	
	export class MembershipCardTable { 
		MembershipCardType : MembershipCardType // 会员卡类型 
		RechargeID : number // 充值表ID 
		Duration : number // 持续时间 
		BuyRewardType : RewardType[] // 购买奖励类型 
		BuyRewardID : number[] // 购买奖励ID 
		BuyRewardCount : number[] // 购买奖励数量 
		RewardType : RewardType[] // 每日奖励类型 
		RewardID : number[] // 每日奖励ID 
		RewardCount : number[] // 每日奖励数量 
	}
	
	export class HeroLoadTaskStepTable { 
		Day : number // 第几天 
		TaskList : number[] // 任务列表 
	}
	
	export class HeroLoadTaskTable { 
		ID : number // 任务ID 
		BelongToDay : number // 任务归属第几天 
		Title : string // 任务标题 
		Desc : string // 任务描述 
		Type : TaskFinishType // 任务类型 
		FinishCondition : number // 完成条件 
		Param1 : number // 参数1 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
		RewardScore : number // 奖励积分 
		ADRewardType : RewardType // 广告奖励类型 
		ADRewardID : number // 广告奖励ID 
		ADRewardCount : number // 广告奖励数量 
		ADRewardScore : number // 广告奖励积分 
	}
	
	export class HeroLoadTaskScoreTable { 
		ScoreID : number // 积分ID 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
	}
	
	export class UnpackRebateCardTable { 
		CardID : number // 卡牌ID 
	}
	
	export class UnpackRebateExclusiveCardTable { 
		CardID : number // 卡牌ID 
	}
	
	export class QuestionnaireSurveyTable { 
		ID : number // ID 
		QuestionType : QuestionnaireType // 问题类型 
		Question : string // 问题 
		Option : string[] // 选项 
	}
	
	export class QuestionnaireSurveyRewardTable { 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
		RewardType : RewardType // 奖励类型 
	}
	
	export class ProvinceTable { 
		ID : number // ID 
		Name : string // 省份名称 
		FullName : string // 省份全名 
	}
	
	export class PveBannedCardTable { 
		CardID : number // 卡牌ID 
	}
	
	export class OverBagGiftTable { 
		ID : number // ID 
		OBType : OverBagGiftType // 条件类型 
		OBParam : number // 条件参数 
		OBDiscount : string // 折扣比 
		OBRechargeID : number // 充值ID 
		OBAwardType : RewardType[] // 奖励类型 
		OBAwardID : number[] // 奖励ID 
		OBAwardCnt : number[] // 奖励数量 
		OBDuration : number // 持续时间 
		OBSeasonEndReset : boolean // 赛季结束重置 
		OBDesc : string // 描述 
	}
	
	export class SpringFestivalSignInRewardTable { 
		ID : number // ID 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
		DoubleReward : boolean // 可双倍领取 
	}
	
	export class ChatBreviaryTable { 
		MsgType : number // 消息类型 
		Context : string // 文本 
	}
	
	export class PickedGiftBagTable { 
		ID : number // ID 
		RechargeID : number // 充值表ID 
		CardQualitySet : ItemQuality[] // 卡牌品质 
		CardWeightSet : number[] // 品质权重 
		CardCountSet : number[] // 卡牌数量 
		LimitBuyTimes : number // 限购次数 
	}
	
	export class GachaCountTable { 
		GachaType : GachaPoolType // 奖池类型 
		Count : number // 抽卡次数 
		Prob : number // 对应概率 
	}
	
	export class GachaWeightTable { 
		GachaType : GachaPoolType // 奖池类型 
		CardID : number // 卡牌ID 
		CardCount : number // 卡牌数量 
		CardWeight : number // 权重 
	}
	
	export class OptionalCardTable { 
		OptionalBoxID : number // 宝箱ID 
		OptionalBoxType : OptionalType // 选择类型 
		CardID : number // 卡牌ID 
		CardCount : number // 卡牌数量 
	}
	
	export class AdSevenDayTable { 
		ID : number // 奖励序号 
		NextID : number // 下一个序号 
		DemandCount : number // 达成次数 
		RewardType : RewardType // 奖励类型 
		RewardID : number // 奖励ID 
		RewardCount : number // 奖励数量 
	}
	
	export class BountyGameTable { 
		RangeID : number // 房间ID 
		MatchRange : number[] // 分数区间 
		Time : number[] // 时间点T 
		PlayerMin : number[] // 最小人数N 
		RangeID1 : number[] // 房间ID1 
		RangeID2 : number[] // 房间ID2 
		RangeID3 : number[] // 房间ID3 
		RangeID4 : number[] // 房间ID4 
		RangeID5 : number[] // 房间ID5 
		AI : number // 机器人分组 
	}
	
	export class BountyRewardTable { 
		BountyRank : number // 名次 
		BountyRewardType : RewardType[] // 奖励类型 
		RewardID : number[] // 奖励ID 
		RewardCount : number[] // 奖励数量 
	}
	
	export class ServerMailTable { 
		MailType : string // 邮件类型 
		Title : string // 标题 
		Sender : string // 发送者 
		Content : string // 邮件内容 
		AttachmentType : RewardType[] // 物品类型 
		AttachmentID : number[] // 物品ID 
		AttachmentCount : number[] // 物品数量 
	}
	
	export class ErrorTable { 
		Key : string // 键值 
		TipsKey : string // 关联Tips键值 
	}
	
	export class ContinuousGiftTable { 
		GiftID : number // ID 
		RechargeID : number // 充值ID 
		BoxID : number // 宝箱ID 
		DiscountTexts : string // 折扣信息 
		NextTexts : string // 下一档信息 
	}
	
	export class FirstRechargeTable { 
		GiftID : number // ID 
		RechargeID : number // 充值表ID 
		RewardTypeSet : RewardType[] // 奖励物品类型集合 
		RewardIDSet : number[] // 奖励ID集合 
		RewardNumSet : number[] // 奖励数量集合 
		HeadShow : string // 棋子头像显示 
		LimitedTime : number // 限购次数 
		PriceShow : string // 价格显示 
		RateShow : string // 返利显示 
	}
	
	export class RainbowChangeTable { 
		Reason : number // 变化原因 
		Content : string // 对应中文 
	}
	
	export class PopWindowMechanism { 
		IndexID : number // 索引ID 
		PopPriority : number // 弹出优先级 
		MutexID : number[] // 互斥弹出 
	}
	
	export class DecomposeTable { 
		CardQuality : ItemQuality // 棋子品质 
		RewardType : RewardType[] // 分解奖励类型 
		RewardId : number[] // 分解道具ID 
		RewardCount : number[] // 分解道具数量 
	}
	
	export class ConfigTable { 
		noticeversion : string //  
		InitialCards : number[] //  
		InitialLord : number //  
		InitDiamond : number //  
		InitGold : number //  
		InitIndexCard : number //  
		InitHead : string //  
		InitHeadFrame : number //  
		InitRankScore : number //  
		InitBattleMap : number //  
		MinAttackCD : number //  
		AtkSpeedDownMax : number //  
		MatchWait : number //  
		CardSortTypeByLevel : string //  
		CardSortTypeByQuality : string //  
		CooperateBoxOpenProgress : number //  
		SecondText : string //  
		PullCardSplitPercent : number //  
		CommonTextAttack : string //  
		CommonTextHp : string //  
		CommonTextSpeed : string //  
		CommonTextRange : string //  
		GuideFightReward : number[] //  
		GuideFightScore : number //  
		CardSynthesisMaxLv : number //  
		CriticalRate : number //  
		CriticalDamage : number //  
		FightChessRadius : number //  
		ConstructionTime : number //  
		ConstructionWaitTime : number //  
		CombatTime : number //  
		CombatAccelerateTime : number //  
		QuickSettlementTime : number //  
		StartFightWaitSec : number //  
		EndFightWatchSec : number //  
		EndFightWaitSec : number //  
		BuildHandTipsTime : number //  
		ShopSpecialUnlockRankScore : number[] //  
		ShopSpecialRefreshTime : number //  
		ShopSpecialRefreshCount : number //  
		ShopSpecialRefreshCD : number[] //  
		ShopSpecialFreePos : number[] //  
		ShopSpecialPosCount : number //  
		ShopSpecialRefreshBoxNeedRankGrade : number //  
		ShopSpecialRefreshBoxProbability : number //  
		ShopSpecialRefreshBoxPos : number //  
		PickedGiftBagMaxRefreshTimes : number //  
		PickedGiftBagDailyRefreshIDList : number[] //  
		OpenTaskRankLv : number //  
		FreePullCardCount : number //  
		TaskDailyCount : number //  
		TaskRefreshCostDiamond : number //  
		TaskFreeRefreshCount : number //  
		TaskADRefreshSec : number //  
		TaskUpdateMaxCountByAD : number //  
		TaskUpdateCostDiamond : number //  
		TaskDailyGiftCount : number //  
		JinbiItemId : number //  
		PullCardGoldIcon : string //  
		LevelText : string //  
		PullCardDiamonIcon : string //  
		FightWinCup : number //  
		FightLoseCup : number //  
		FightWinGold : number //  
		PreventIndulgeOnlineTime : number //  
		MaxRoleLevelTip : string //  
		RankLevelPromoteTip : string //  
		RankLevelDecreaseTip : string //  
		SeasonEndTip : string //  
		DayTip : string //  
		HourTip : string //  
		MinuteTip : string //  
		ScoreReachTip : string //  
		CanReciveTip : string //  
		LevelTip : string //  
		FightContinuousLoseMatchRobot : number //  
		RankTextTip : string //  
		RankMinScore : number //  
		FightContinuousLoseMinWaitTime : number //  
		FightContinuousLoseMaxWaitTime : number //  
		RookieRobotName : string //  
		ChangeNameDiamondCost : number //  
		FreeChangeNameTimes : number //  
		CreateAllianceCostGold : number //  
		CreateText : string //  
		SearchText : string //  
		AllianceMaxMemberCount : number //  
		AllianceLeaderText : string //  
		AllianceDeputyLeaderText : string //  
		AllianceSeniorText : string //  
		AllianceMemberText : string //  
		AllianceMaxApplyCount : number //  
		TowerInvincibleTime : number //  
		PveInitalGold : number //  
		OnlineText : string //  
		ApplyJoinAllianceText : string //  
		PlayerText : string //  
		RefuseJoinAllianceText : string //  
		ApplyText : string //  
		PveDailyClearWave : number //  
		PveDailyClearGold : number //  
		PveMaxCount : number //  
		PveVipMaxCount : number //  
		PveBuyCountCost : number //  
		PveAdCount : number //  
		NotHaveAllianceTip : string //  
		ControlChineseString : string //  
		InfiniteDefenseTip : string //  
		FriendMatchTip : string //  
		ChallengeActivityOpenLimitLv : number //  
		ChallengeActivityCostToFight : number //  
		ChallengeActivityLoseMax : number //  
		AllianceInvitationTimeLimit : number //  
		MaxMailCount : number //  
		MailExpireTime : number //  
		RankListMaxCount : number //  
		RankListFakeFactor : number //  
		MailGMIcon : number //  
		MailGMName : string //  
		MaxFriendApplyCount : number //  
		MaxFriendCount : number //  
		ReportResetIntervalHour : number //  
		ReportMost : number //  
		ForbidPveHour : number //  
		ReportedMost : number //  
		PullCardDailyMaxCount : number //  
		DragExChangeCardIntervalTime : number //  
		IsOpenDragExChangeCard : number //  
		UpLvRainbowTaskCostDiamond : number //  
		UpdateRainbowTaskAdCount : number //  
		ImmFinishRainbowTaskCostGold : number //  
		ImmFinishRainbowTaskCostDiamond : number //  
		UpdateRainbowTaskFreeCount : number //  
		RainbowTaskMaxStarLevel : number //  
		RainbowTaskBanLevelUpTime : number //  
		OpenRainbowTaskLevel : number //  
		TrainingRobotName : string //  
		SearchingPartnershipTips : string //  
		ActivityAlreadyOver : string //  
		NextResetFirstChargeTime : number //  
		SevenDaySignInStartTime : number //  
		SevenDaySignInEndTime : number //  
		FirstRechargeTip : string //  
		NormalRechargeTip : string //  
		GroutTaskMaxStep : number //  
		DailyGiftBagMaxRefreshTimes : number //  
		DailyGiftBagDiamondRefreshCost : number //  
		RookieGiftBagDuration : number //  
		ShareGamePngURL : string //  
		ShareGameTxt : string //  
		DefaultEmotionID : number[] //  
		BuyEmotionGoodsPrice : number //  
		PlayerDefaultName : string //  
		LoadingProgress1 : string //  
		LoadingProgress2 : string //  
		LoadingProgress3 : string //  
		AllianceLeaderChangeTime : number //  
		FightLogCount : number //  
		AllianceFightRecordLimit : number //  
		LimitActivityGrowFundRechargeID : number //  
		LimitActivityGrowFundPrice : number //  
		WeChatRankSchemeIdx : number //  
		GrowFundVersion : number //  
		PullCardSwapProbability : number //  
		DailyShareInviteAutoMailExpireTime : number //  
		DailyShareInviteAutoMailTitle : string //  
		DailyShareInviteAutoMailContent : string //  
		RankScoreRewardTopScore : number //  
		BoxSpeedUpTimeHour : number //  
		BuyAVDAwardGoldCost : number //  
		AdvertTicketItemID : number //  
		DiscountBagStartUTC : number //  
		MultiFlag : string //  
		MonthlyPassDayLeftTips : number //  
		AdvertWeeklyBoxCount : number //  
		UnpackRebateCount : number //  
		HeroloadCountdowDay : number //  
		UnpackRebateBoxSpineName : string //  
		DailyGiftBagVersion : number //  
		ContinuousGiftVersion : number //  
		QuestionStartUTC : number //  
		QuestionEndUTC : number //  
		AutoPopOneYuanToBuy : boolean //  
		DoubleSoulWeekday : string //  
		DoubleEnergyScheduleCloseTime : number //  
		SpringFestivalSignInStartTime : number //  
		SpringFestivalSignInEndTime : number //  
		PrivateEveryFriendChatSaveNumber : number //  
		AllianceChatMsgSaveNumber : number //  
		AllianceInnerMsgSaveNumber : number //  
		FullScreenShowChatNumber : number //  
		WorldChatChannelTip : string //  
		AllianceChatChannelTip : string //  
		PrivateChatChannelTip : string //  
		ChatTextLimitLen : number //  
		ChatShareCardTitleLimitLen : number //  
		ChatShareCardDefaultTitle : string //  
		WorldChannelChatInterval : number //  
		PVPRankLoserMaxDecScore : number //  
		PVPRankLoserMaxDecScoreCondition : number //  
		OpenFunctionTip1 : string //  
		OpenFunctionTip2 : string //  
		OpenFunctionTip3 : string //  
		OpenFunctionTip4 : string //  
		LuckySupplyTimes : number //  
		LuckySupplyReward : string //  
		WX_APP_ID : string //  
		GachaCostCountOnce : number //  
		GachaCostCountTen : number //  
		GachaBoxCount1 : number //  
		GachaBoxID1 : number //  
		GachaBoxCount2 : number //  
		GachaBoxID2 : number //  
		BossBoxRechargeId : number //  
		FirstDemonPassRechargeId : number //  
		BossBoxDefaultLv : number //  
		BossBoxMaxLv : number //  
		BossBoxEveryLvNeedSoul : number //  
		BossBoxPvpWinAddSoul : number //  
		BossBoxPvpLoseAddSoul : number //  
		BossBoxBountyAddSoul : number[] //  
		BossBoxDiamondUnlockTime : number //  
		BossBoxUnlockLvCost : number //  
		BossBoxTimeLeftMail : number //  
		BossBoxEveryLvGoldNum : number //  
		BossBoxMaxGoldLimit : number //  
		BossBoxWorkDayUnlockLvCnt : number //  
		BossBoxWeekendDayUnlockLvCnt : number //  
		ChessBgPerLoading : string[] //  
		PvPWinerGoldAwardBase : number //  
		PvPWinerGoldAwardMul : number //  
		PvPWinerGoldAwardMin : number //  
		ResetFightInfoCostDiamond : number //  
		WinBoxAdReward : string //  
		WinBoxAdCloseCount : number //  
		BattleWinShareReward : string //  
		BattleWinShareNum : number //  
		BountyGameCost : number //  
		BountyGameHPWeight : number[] //  
		BountyGameCupRate : number[] //  
		BountyGameRecoverCount : number //  
	}
	

	// Combine struct
	export class Table { 
		AdSevenDayTable : AdSevenDayTable[] // table: AdSevenDayTable 
		AdvertPosTable : AdvertPosTable[] // table: AdvertPosTable 
		AllianceIconTable : AllianceIconTable[] // table: AllianceIconTable 
		AllianceInnerMsgTable : AllianceInnerMsgTable[] // table: AllianceInnerMsgTable 
		AllianceJoinConditonTable : AllianceJoinConditonTable[] // table: AllianceJoinConditonTable 
		AllianceJoinMinScoreTable : AllianceJoinMinScoreTable[] // table: AllianceJoinMinScoreTable 
		AllianceSupportCardLimitTable : AllianceSupportCardLimitTable[] // table: AllianceSupportCardLimitTable 
		BagSpeedUpTable : BagSpeedUpTable[] // table: BagSpeedUpTable 
		BattleMapCycleTable : BattleMapCycleTable[] // table: BattleMapCycleTable 
		BattleMapTable : BattleMapTable[] // table: BattleMapTable 
		BossBoxTable : BossBoxTable[] // table: BossBoxTable 
		BountyRewardTable : BountyRewardTable[] // table: BountyRewardTable 
		BoxCardWeightTable : BoxCardWeightTable[] // table: BoxCardWeightTable 
		BoxTable : BoxTable[] // table: BoxTable 
		BuffSpeedCountTable : BuffSpeedCountTable[] // table: BuffSpeedCountTable 
		BuffTable : BuffTable[] // table: BuffTable 
		CardSortTypeTable : CardSortTypeTable[] // table: CardSortTypeTable 
		CardStrengthLvTable : CardStrengthLvTable[] // table: CardStrengthLvTable 
		CardSynthesisLvTable : CardSynthesisLvTable[] // table: CardSynthesisLvTable 
		CardTable : CardTable[] // table: CardTable 
		CardUpLevelTable : CardUpLevelTable[] // table: CardUpLevelTable 
		ChallengeTable : ChallengeTable[] // table: ChallengeTable 
		ChatBreviaryTable : ChatBreviaryTable[] // table: ChatBreviaryTable 
		ContinuousGiftTable : ContinuousGiftTable[] // table: ContinuousGiftTable 
		DevilPanelIconTable : DevilPanelIconTable[] // table: DevilPanelIconTable 
		EffectTable : EffectTable[] // table: EffectTable 
		EmojiTable : EmojiTable[] // table: EmojiTable 
		EnemyOnlyShowTable : EnemyOnlyShowTable[] // table: EnemyOnlyShowTable 
		EnemyTable : EnemyTable[] // table: EnemyTable 
		ErrorTable : ErrorTable[] // table: ErrorTable 
		FightTypeInfoTable : FightTypeInfoTable[] // table: FightTypeInfoTable 
		FirstRechargeTable : FirstRechargeTable[] // table: FirstRechargeTable 
		GameHelpTipsAreaTable : GameHelpTipsAreaTable[] // table: GameHelpTipsAreaTable 
		GameHelpTipsTable : GameHelpTipsTable[] // table: GameHelpTipsTable 
		GiftBagTable : GiftBagTable[] // table: GiftBagTable 
		GroutHeroTalkTable : GroutHeroTalkTable[] // table: GroutHeroTalkTable 
		GroutStepTable : GroutStepTable[] // table: GroutStepTable 
		GroutTaskTable : GroutTaskTable[] // table: GroutTaskTable 
		GuideDialogueTable : GuideDialogueTable[] // table: GuideDialogueTable 
		GuideTable : GuideTable[] // table: GuideTable 
		HeadFramTable : HeadFramTable[] // table: HeadFramTable 
		HeadTable : HeadTable[] // table: HeadTable 
		HelpHintTable : HelpHintTable[] // table: HelpHintTable 
		HeroLoadTaskScoreTable : HeroLoadTaskScoreTable[] // table: HeroLoadTaskScoreTable 
		HeroLoadTaskTable : HeroLoadTaskTable[] // table: HeroLoadTaskTable 
		InitMailTable : InitMailTable[] // table: InitMailTable 
		ItemTable : ItemTable[] // table: ItemTable 
		LimitActivityGrowFundTable : LimitActivityGrowFundTable[] // table: LimitActivityGrowFundTable 
		LimitActivityTable : LimitActivityTable[] // table: LimitActivityTable 
		LordSkillTable : LordSkillTable[] // table: LordSkillTable 
		MaxSeasonRewardCycleTable : MaxSeasonRewardCycleTable[] // table: MaxSeasonRewardCycleTable 
		MembershipCardTable : MembershipCardTable[] // table: MembershipCardTable 
		NewCardOfStoreTable : NewCardOfStoreTable[] // table: NewCardOfStoreTable 
		NewPlayerGiftBagTable : NewPlayerGiftBagTable[] // table: NewPlayerGiftBagTable 
		OneYuanBuyTable : OneYuanBuyTable[] // table: OneYuanBuyTable 
		OpenFunctionLimitTable : OpenFunctionLimitTable[] // table: OpenFunctionLimitTable 
		OptionalCardTable : OptionalCardTable[] // table: OptionalCardTable 
		OverBagGiftTable : OverBagGiftTable[] // table: OverBagGiftTable 
		PickedGiftBagTable : PickedGiftBagTable[] // table: PickedGiftBagTable 
		PopWindowMechanism : PopWindowMechanism[] // table: PopWindowMechanism 
		ProvinceTable : ProvinceTable[] // table: ProvinceTable 
		PullCardTable : PullCardTable[] // table: PullCardTable 
		PveBannedCardTable : PveBannedCardTable[] // table: PveBannedCardTable 
		PveClearRewardTable : PveClearRewardTable[] // table: PveClearRewardTable 
		PveRewardTable : PveRewardTable[] // table: PveRewardTable 
		QualityTable : QualityTable[] // table: QualityTable 
		QuestionnaireSurveyRewardTable : QuestionnaireSurveyRewardTable[] // table: QuestionnaireSurveyRewardTable 
		QuestionnaireSurveyTable : QuestionnaireSurveyTable[] // table: QuestionnaireSurveyTable 
		RainbowTaskRewardTable : RainbowTaskRewardTable[] // table: RainbowTaskRewardTable 
		RainbowTaskTable : RainbowTaskTable[] // table: RainbowTaskTable 
		RankBoxTable : RankBoxTable[] // table: RankBoxTable 
		RankFightTable : RankFightTable[] // table: RankFightTable 
		RankGradeTable : RankGradeTable[] // table: RankGradeTable 
		RankScoreRewardTable : RankScoreRewardTable[] // table: RankScoreRewardTable 
		RankingIconTable : RankingIconTable[] // table: RankingIconTable 
		RechargeTable : RechargeTable[] // table: RechargeTable 
		RecommendDeckTable : RecommendDeckTable[] // table: RecommendDeckTable 
		RoleLevelTable : RoleLevelTable[] // table: RoleLevelTable 
		ServerlistTable : ServerlistTable[] // table: ServerlistTable 
		SevenSignInDayTable : SevenSignInDayTable[] // table: SevenSignInDayTable 
		ShareResultTipsTable : ShareResultTipsTable[] // table: ShareResultTipsTable 
		ShareTypeTable : ShareTypeTable[] // table: ShareTypeTable 
		SharedAwardTable : SharedAwardTable[] // table: SharedAwardTable 
		ShieldCountTable : ShieldCountTable[] // table: ShieldCountTable 
		ShopDiamondGoodsTable : ShopDiamondGoodsTable[] // table: ShopDiamondGoodsTable 
		ShopGoldGoodsTable : ShopGoldGoodsTable[] // table: ShopGoldGoodsTable 
		SkillAtkTargetDesTable : SkillAtkTargetDesTable[] // table: SkillAtkTargetDesTable 
		SkillTable : SkillTable[] // table: SkillTable 
		SoundTable : SoundTable[] // table: SoundTable 
		SpineTable : SpineTable[] // table: SpineTable 
		TalentTable : TalentTable[] // table: TalentTable 
		TalentTierTable : TalentTierTable[] // table: TalentTierTable 
		TaskBoxGroupTable : TaskBoxGroupTable[] // table: TaskBoxGroupTable 
		TaskGiftTable : TaskGiftTable[] // table: TaskGiftTable 
		TaskGoalBoxTable : TaskGoalBoxTable[] // table: TaskGoalBoxTable 
		TaskTable : TaskTable[] // table: TaskTable 
		TipsTable : TipsTable[] // table: TipsTable 
		UnpackRebateCardTable : UnpackRebateCardTable[] // table: UnpackRebateCardTable 
		UnpackRebateExclusiveCardTable : UnpackRebateExclusiveCardTable[] // table: UnpackRebateExclusiveCardTable 
		WechatgameTable : WechatgameTable[] // table: WechatgameTable 
		ConfigTable : ConfigTable[] // table: ConfigTable 

		// Indices 
		AdSevenDayTableByID : Dictionary<number, AdSevenDayTable> // table: AdSevenDayTable 
		AdvertPosTableByAdvertPos : Dictionary<AdvertPosType, AdvertPosTable> // table: AdvertPosTable 
		AllianceIconTableByID : Dictionary<number, AllianceIconTable> // table: AllianceIconTable 
		AllianceInnerMsgTableByMsgType : Dictionary<number, AllianceInnerMsgTable> // table: AllianceInnerMsgTable 
		AllianceJoinConditonTableByID : Dictionary<number, AllianceJoinConditonTable> // table: AllianceJoinConditonTable 
		AllianceJoinMinScoreTableByMinSeasonScore : Dictionary<number, AllianceJoinMinScoreTable> // table: AllianceJoinMinScoreTable 
		AllianceSupportCardLimitTableBySeasonLv : Dictionary<number, AllianceSupportCardLimitTable> // table: AllianceSupportCardLimitTable 
		BagSpeedUpTableByID : Dictionary<number, BagSpeedUpTable> // table: BagSpeedUpTable 
		BattleMapCycleTableBySeasonID : Dictionary<number, BattleMapCycleTable> // table: BattleMapCycleTable 
		BattleMapTableByID : Dictionary<number, BattleMapTable> // table: BattleMapTable 
		BossBoxTableByID : Dictionary<number, BossBoxTable> // table: BossBoxTable 
		BountyRewardTableByBountyRank : Dictionary<number, BountyRewardTable> // table: BountyRewardTable 
		BoxTableByBoxID : Dictionary<number, BoxTable> // table: BoxTable 
		BuffSpeedCountTableByCardLv : Dictionary<number, BuffSpeedCountTable> // table: BuffSpeedCountTable 
		BuffTableByID : Dictionary<number, BuffTable> // table: BuffTable 
		CardSortTypeTableBySortType : Dictionary<SortType, CardSortTypeTable> // table: CardSortTypeTable 
		CardStrengthLvTableByLevel : Dictionary<number, CardStrengthLvTable> // table: CardStrengthLvTable 
		CardSynthesisLvTableByLevel : Dictionary<number, CardSynthesisLvTable> // table: CardSynthesisLvTable 
		CardTableByID : Dictionary<number, CardTable> // table: CardTable 
		CardUpLevelTableByQuality : Dictionary<ItemQuality, CardUpLevelTable> // table: CardUpLevelTable 
		ChallengeTableByID : Dictionary<number, ChallengeTable> // table: ChallengeTable 
		ChatBreviaryTableByMsgType : Dictionary<number, ChatBreviaryTable> // table: ChatBreviaryTable 
		ContinuousGiftTableByGiftID : Dictionary<number, ContinuousGiftTable> // table: ContinuousGiftTable 
		DevilPanelIconTableByID : Dictionary<number, DevilPanelIconTable> // table: DevilPanelIconTable 
		EffectTableByID : Dictionary<number, EffectTable> // table: EffectTable 
		EmojiTableByID : Dictionary<number, EmojiTable> // table: EmojiTable 
		EnemyOnlyShowTableByID : Dictionary<number, EnemyOnlyShowTable> // table: EnemyOnlyShowTable 
		EnemyTableByID : Dictionary<number, EnemyTable> // table: EnemyTable 
		ErrorTableByKey : Dictionary<string, ErrorTable> // table: ErrorTable 
		FightTypeInfoTableByFightType : Dictionary<number, FightTypeInfoTable> // table: FightTypeInfoTable 
		FirstRechargeTableByGiftID : Dictionary<number, FirstRechargeTable> // table: FirstRechargeTable 
		GameHelpTipsAreaTableByID : Dictionary<number, GameHelpTipsAreaTable> // table: GameHelpTipsAreaTable 
		GameHelpTipsTableByID : Dictionary<number, GameHelpTipsTable> // table: GameHelpTipsTable 
		GiftBagTableByGiftBagID : Dictionary<number, GiftBagTable> // table: GiftBagTable 
		GroutHeroTalkTableByID : Dictionary<number, GroutHeroTalkTable> // table: GroutHeroTalkTable 
		GroutStepTableByStep : Dictionary<number, GroutStepTable> // table: GroutStepTable 
		GroutTaskTableByID : Dictionary<number, GroutTaskTable> // table: GroutTaskTable 
		GuideDialogueTableByDialogueID : Dictionary<number, GuideDialogueTable> // table: GuideDialogueTable 
		GuideTableByGuidID : Dictionary<number, GuideTable> // table: GuideTable 
		HeadFramTableByheadFramId : Dictionary<number, HeadFramTable> // table: HeadFramTable 
		HeadTableByheadId : Dictionary<string, HeadTable> // table: HeadTable 
		HelpHintTableByID : Dictionary<number, HelpHintTable> // table: HelpHintTable 
		HeroLoadTaskScoreTableByScoreID : Dictionary<number, HeroLoadTaskScoreTable> // table: HeroLoadTaskScoreTable 
		HeroLoadTaskTableByID : Dictionary<number, HeroLoadTaskTable> // table: HeroLoadTaskTable 
		ItemTableByID : Dictionary<number, ItemTable> // table: ItemTable 
		LimitActivityGrowFundTableByID : Dictionary<number, LimitActivityGrowFundTable> // table: LimitActivityGrowFundTable 
		LimitActivityTableByID : Dictionary<LimitActivityID, LimitActivityTable> // table: LimitActivityTable 
		LordSkillTableByLordID : Dictionary<number, LordSkillTable> // table: LordSkillTable 
		MaxSeasonRewardCycleTableBySeasonID : Dictionary<number, MaxSeasonRewardCycleTable> // table: MaxSeasonRewardCycleTable 
		MembershipCardTableByMembershipCardType : Dictionary<MembershipCardType, MembershipCardTable> // table: MembershipCardTable 
		NewCardOfStoreTableByID : Dictionary<number, NewCardOfStoreTable> // table: NewCardOfStoreTable 
		NewPlayerGiftBagTableByID : Dictionary<number, NewPlayerGiftBagTable> // table: NewPlayerGiftBagTable 
		OneYuanBuyTableByID : Dictionary<number, OneYuanBuyTable> // table: OneYuanBuyTable 
		OpenFunctionLimitTableByFunctionName : Dictionary<OpenFunctionName, OpenFunctionLimitTable> // table: OpenFunctionLimitTable 
		OverBagGiftTableByID : Dictionary<number, OverBagGiftTable> // table: OverBagGiftTable 
		PickedGiftBagTableByID : Dictionary<number, PickedGiftBagTable> // table: PickedGiftBagTable 
		PopWindowMechanismByIndexID : Dictionary<number, PopWindowMechanism> // table: PopWindowMechanism 
		ProvinceTableByID : Dictionary<number, ProvinceTable> // table: ProvinceTable 
		PullCardTableByPullType : Dictionary<PullCardType, PullCardTable> // table: PullCardTable 
		PveBannedCardTableByCardID : Dictionary<number, PveBannedCardTable> // table: PveBannedCardTable 
		PveClearRewardTableByWave : Dictionary<number, PveClearRewardTable> // table: PveClearRewardTable 
		PveRewardTableByWave : Dictionary<number, PveRewardTable> // table: PveRewardTable 
		QualityTableByQuality : Dictionary<ItemQuality, QualityTable> // table: QualityTable 
		QuestionnaireSurveyRewardTableByRewardID : Dictionary<number, QuestionnaireSurveyRewardTable> // table: QuestionnaireSurveyRewardTable 
		QuestionnaireSurveyTableByID : Dictionary<number, QuestionnaireSurveyTable> // table: QuestionnaireSurveyTable 
		RainbowTaskRewardTableByID : Dictionary<number, RainbowTaskRewardTable> // table: RainbowTaskRewardTable 
		RainbowTaskTableByID : Dictionary<number, RainbowTaskTable> // table: RainbowTaskTable 
		RankBoxTableByBoxGroupID : Dictionary<number, RankBoxTable> // table: RankBoxTable 
		RankFightTableById : Dictionary<number, RankFightTable> // table: RankFightTable 
		RankGradeTableByGrade : Dictionary<number, RankGradeTable> // table: RankGradeTable 
		RankScoreRewardTableByScore : Dictionary<number, RankScoreRewardTable> // table: RankScoreRewardTable 
		RankingIconTableByID : Dictionary<number, RankingIconTable> // table: RankingIconTable 
		RechargeTableByID : Dictionary<number, RechargeTable> // table: RechargeTable 
		RecommendDeckTableByID : Dictionary<number, RecommendDeckTable> // table: RecommendDeckTable 
		RoleLevelTableByRoleLv : Dictionary<number, RoleLevelTable> // table: RoleLevelTable 
		ServerlistTableByID : Dictionary<number, ServerlistTable> // table: ServerlistTable 
		SevenSignInDayTableByDay : Dictionary<number, SevenSignInDayTable> // table: SevenSignInDayTable 
		ShareResultTipsTableByID : Dictionary<number, ShareResultTipsTable> // table: ShareResultTipsTable 
		ShareTypeTableByType : Dictionary<SharedType, ShareTypeTable> // table: ShareTypeTable 
		SharedAwardTableByID : Dictionary<number, SharedAwardTable> // table: SharedAwardTable 
		ShieldCountTableByCardLv : Dictionary<number, ShieldCountTable> // table: ShieldCountTable 
		ShopDiamondGoodsTableByPos : Dictionary<number, ShopDiamondGoodsTable> // table: ShopDiamondGoodsTable 
		ShopGoldGoodsTableByPos : Dictionary<number, ShopGoldGoodsTable> // table: ShopGoldGoodsTable 
		SkillAtkTargetDesTableByID : Dictionary<number, SkillAtkTargetDesTable> // table: SkillAtkTargetDesTable 
		SkillTableByID : Dictionary<number, SkillTable> // table: SkillTable 
		SoundTableByKey : Dictionary<string, SoundTable> // table: SoundTable 
		SpineTableByID : Dictionary<number, SpineTable> // table: SpineTable 
		TalentTableByID : Dictionary<number, TalentTable> // table: TalentTable 
		TalentTierTableByTier : Dictionary<number, TalentTierTable> // table: TalentTierTable 
		TaskBoxGroupTableByBoxGroupId : Dictionary<number, TaskBoxGroupTable> // table: TaskBoxGroupTable 
		TaskGiftTableByGiftId : Dictionary<number, TaskGiftTable> // table: TaskGiftTable 
		TaskGoalBoxTableByGoalBoxId : Dictionary<number, TaskGoalBoxTable> // table: TaskGoalBoxTable 
		TaskTableByTaskId : Dictionary<number, TaskTable> // table: TaskTable 
		TipsTableByKey : Dictionary<string, TipsTable> // table: TipsTable 
		UnpackRebateCardTableByCardID : Dictionary<number, UnpackRebateCardTable> // table: UnpackRebateCardTable 
		UnpackRebateExclusiveCardTableByCardID : Dictionary<number, UnpackRebateExclusiveCardTable> // table: UnpackRebateExclusiveCardTable 
		WechatgameTableByAppID : Dictionary<string, WechatgameTable> // table: WechatgameTable 

		
		// table: ConfigTable
		GetKeyValue_ConfigTable(): ConfigTable{
			return this.ConfigTable[0]
		}
		

		//根据json创建Table
		static FromJSON(json: Object|string): Table {
			let result: Table;
            if (typeof json === 'string') {
                // if it's a string, parse it first
                result= JSON.parse(json, Table.reviver);
            } else {
                // create an instance of the Table class
                let tbl = new Table()
                // copy all the fields from the json object
                result = Object.assign(tbl, json);
            }
			result.BuildData();
			return result;
		}

        static reviver(key: string, value: any): any {
            return key === "" ? Table.FromJSON(value) : value;
        }

		// 清除索引和数据
		ResetData() {
			
			this.AdSevenDayTable = [] 
			this.AdvertPosTable = [] 
			this.AllianceIconTable = [] 
			this.AllianceInnerMsgTable = [] 
			this.AllianceJoinConditonTable = [] 
			this.AllianceJoinMinScoreTable = [] 
			this.AllianceSupportCardLimitTable = [] 
			this.BagSpeedUpTable = [] 
			this.BattleMapCycleTable = [] 
			this.BattleMapTable = [] 
			this.BossBoxTable = [] 
			this.BountyRewardTable = [] 
			this.BoxCardWeightTable = [] 
			this.BoxTable = [] 
			this.BuffSpeedCountTable = [] 
			this.BuffTable = [] 
			this.CardSortTypeTable = [] 
			this.CardStrengthLvTable = [] 
			this.CardSynthesisLvTable = [] 
			this.CardTable = [] 
			this.CardUpLevelTable = [] 
			this.ChallengeTable = [] 
			this.ChatBreviaryTable = [] 
			this.ContinuousGiftTable = [] 
			this.DevilPanelIconTable = [] 
			this.EffectTable = [] 
			this.EmojiTable = [] 
			this.EnemyOnlyShowTable = [] 
			this.EnemyTable = [] 
			this.ErrorTable = [] 
			this.FightTypeInfoTable = [] 
			this.FirstRechargeTable = [] 
			this.GameHelpTipsAreaTable = [] 
			this.GameHelpTipsTable = [] 
			this.GiftBagTable = [] 
			this.GroutHeroTalkTable = [] 
			this.GroutStepTable = [] 
			this.GroutTaskTable = [] 
			this.GuideDialogueTable = [] 
			this.GuideTable = [] 
			this.HeadFramTable = [] 
			this.HeadTable = [] 
			this.HelpHintTable = [] 
			this.HeroLoadTaskScoreTable = [] 
			this.HeroLoadTaskTable = [] 
			this.InitMailTable = [] 
			this.ItemTable = [] 
			this.LimitActivityGrowFundTable = [] 
			this.LimitActivityTable = [] 
			this.LordSkillTable = [] 
			this.MaxSeasonRewardCycleTable = [] 
			this.MembershipCardTable = [] 
			this.NewCardOfStoreTable = [] 
			this.NewPlayerGiftBagTable = [] 
			this.OneYuanBuyTable = [] 
			this.OpenFunctionLimitTable = [] 
			this.OptionalCardTable = [] 
			this.OverBagGiftTable = [] 
			this.PickedGiftBagTable = [] 
			this.PopWindowMechanism = [] 
			this.ProvinceTable = [] 
			this.PullCardTable = [] 
			this.PveBannedCardTable = [] 
			this.PveClearRewardTable = [] 
			this.PveRewardTable = [] 
			this.QualityTable = [] 
			this.QuestionnaireSurveyRewardTable = [] 
			this.QuestionnaireSurveyTable = [] 
			this.RainbowTaskRewardTable = [] 
			this.RainbowTaskTable = [] 
			this.RankBoxTable = [] 
			this.RankFightTable = [] 
			this.RankGradeTable = [] 
			this.RankScoreRewardTable = [] 
			this.RankingIconTable = [] 
			this.RechargeTable = [] 
			this.RecommendDeckTable = [] 
			this.RoleLevelTable = [] 
			this.ServerlistTable = [] 
			this.SevenSignInDayTable = [] 
			this.ShareResultTipsTable = [] 
			this.ShareTypeTable = [] 
			this.SharedAwardTable = [] 
			this.ShieldCountTable = [] 
			this.ShopDiamondGoodsTable = [] 
			this.ShopGoldGoodsTable = [] 
			this.SkillAtkTargetDesTable = [] 
			this.SkillTable = [] 
			this.SoundTable = [] 
			this.SpineTable = [] 
			this.TalentTable = [] 
			this.TalentTierTable = [] 
			this.TaskBoxGroupTable = [] 
			this.TaskGiftTable = [] 
			this.TaskGoalBoxTable = [] 
			this.TaskTable = [] 
			this.TipsTable = [] 
			this.UnpackRebateCardTable = [] 
			this.UnpackRebateExclusiveCardTable = [] 
			this.WechatgameTable = [] 
			this.ConfigTable = [] 
			
			this.AdSevenDayTableByID = new Dictionary<number, AdSevenDayTable>() 
			this.AdvertPosTableByAdvertPos = new Dictionary<AdvertPosType, AdvertPosTable>() 
			this.AllianceIconTableByID = new Dictionary<number, AllianceIconTable>() 
			this.AllianceInnerMsgTableByMsgType = new Dictionary<number, AllianceInnerMsgTable>() 
			this.AllianceJoinConditonTableByID = new Dictionary<number, AllianceJoinConditonTable>() 
			this.AllianceJoinMinScoreTableByMinSeasonScore = new Dictionary<number, AllianceJoinMinScoreTable>() 
			this.AllianceSupportCardLimitTableBySeasonLv = new Dictionary<number, AllianceSupportCardLimitTable>() 
			this.BagSpeedUpTableByID = new Dictionary<number, BagSpeedUpTable>() 
			this.BattleMapCycleTableBySeasonID = new Dictionary<number, BattleMapCycleTable>() 
			this.BattleMapTableByID = new Dictionary<number, BattleMapTable>() 
			this.BossBoxTableByID = new Dictionary<number, BossBoxTable>() 
			this.BountyRewardTableByBountyRank = new Dictionary<number, BountyRewardTable>() 
			this.BoxTableByBoxID = new Dictionary<number, BoxTable>() 
			this.BuffSpeedCountTableByCardLv = new Dictionary<number, BuffSpeedCountTable>() 
			this.BuffTableByID = new Dictionary<number, BuffTable>() 
			this.CardSortTypeTableBySortType = new Dictionary<SortType, CardSortTypeTable>() 
			this.CardStrengthLvTableByLevel = new Dictionary<number, CardStrengthLvTable>() 
			this.CardSynthesisLvTableByLevel = new Dictionary<number, CardSynthesisLvTable>() 
			this.CardTableByID = new Dictionary<number, CardTable>() 
			this.CardUpLevelTableByQuality = new Dictionary<ItemQuality, CardUpLevelTable>() 
			this.ChallengeTableByID = new Dictionary<number, ChallengeTable>() 
			this.ChatBreviaryTableByMsgType = new Dictionary<number, ChatBreviaryTable>() 
			this.ContinuousGiftTableByGiftID = new Dictionary<number, ContinuousGiftTable>() 
			this.DevilPanelIconTableByID = new Dictionary<number, DevilPanelIconTable>() 
			this.EffectTableByID = new Dictionary<number, EffectTable>() 
			this.EmojiTableByID = new Dictionary<number, EmojiTable>() 
			this.EnemyOnlyShowTableByID = new Dictionary<number, EnemyOnlyShowTable>() 
			this.EnemyTableByID = new Dictionary<number, EnemyTable>() 
			this.ErrorTableByKey = new Dictionary<string, ErrorTable>() 
			this.FightTypeInfoTableByFightType = new Dictionary<number, FightTypeInfoTable>() 
			this.FirstRechargeTableByGiftID = new Dictionary<number, FirstRechargeTable>() 
			this.GameHelpTipsAreaTableByID = new Dictionary<number, GameHelpTipsAreaTable>() 
			this.GameHelpTipsTableByID = new Dictionary<number, GameHelpTipsTable>() 
			this.GiftBagTableByGiftBagID = new Dictionary<number, GiftBagTable>() 
			this.GroutHeroTalkTableByID = new Dictionary<number, GroutHeroTalkTable>() 
			this.GroutStepTableByStep = new Dictionary<number, GroutStepTable>() 
			this.GroutTaskTableByID = new Dictionary<number, GroutTaskTable>() 
			this.GuideDialogueTableByDialogueID = new Dictionary<number, GuideDialogueTable>() 
			this.GuideTableByGuidID = new Dictionary<number, GuideTable>() 
			this.HeadFramTableByheadFramId = new Dictionary<number, HeadFramTable>() 
			this.HeadTableByheadId = new Dictionary<string, HeadTable>() 
			this.HelpHintTableByID = new Dictionary<number, HelpHintTable>() 
			this.HeroLoadTaskScoreTableByScoreID = new Dictionary<number, HeroLoadTaskScoreTable>() 
			this.HeroLoadTaskTableByID = new Dictionary<number, HeroLoadTaskTable>() 
			this.ItemTableByID = new Dictionary<number, ItemTable>() 
			this.LimitActivityGrowFundTableByID = new Dictionary<number, LimitActivityGrowFundTable>() 
			this.LimitActivityTableByID = new Dictionary<LimitActivityID, LimitActivityTable>() 
			this.LordSkillTableByLordID = new Dictionary<number, LordSkillTable>() 
			this.MaxSeasonRewardCycleTableBySeasonID = new Dictionary<number, MaxSeasonRewardCycleTable>() 
			this.MembershipCardTableByMembershipCardType = new Dictionary<MembershipCardType, MembershipCardTable>() 
			this.NewCardOfStoreTableByID = new Dictionary<number, NewCardOfStoreTable>() 
			this.NewPlayerGiftBagTableByID = new Dictionary<number, NewPlayerGiftBagTable>() 
			this.OneYuanBuyTableByID = new Dictionary<number, OneYuanBuyTable>() 
			this.OpenFunctionLimitTableByFunctionName = new Dictionary<OpenFunctionName, OpenFunctionLimitTable>() 
			this.OverBagGiftTableByID = new Dictionary<number, OverBagGiftTable>() 
			this.PickedGiftBagTableByID = new Dictionary<number, PickedGiftBagTable>() 
			this.PopWindowMechanismByIndexID = new Dictionary<number, PopWindowMechanism>() 
			this.ProvinceTableByID = new Dictionary<number, ProvinceTable>() 
			this.PullCardTableByPullType = new Dictionary<PullCardType, PullCardTable>() 
			this.PveBannedCardTableByCardID = new Dictionary<number, PveBannedCardTable>() 
			this.PveClearRewardTableByWave = new Dictionary<number, PveClearRewardTable>() 
			this.PveRewardTableByWave = new Dictionary<number, PveRewardTable>() 
			this.QualityTableByQuality = new Dictionary<ItemQuality, QualityTable>() 
			this.QuestionnaireSurveyRewardTableByRewardID = new Dictionary<number, QuestionnaireSurveyRewardTable>() 
			this.QuestionnaireSurveyTableByID = new Dictionary<number, QuestionnaireSurveyTable>() 
			this.RainbowTaskRewardTableByID = new Dictionary<number, RainbowTaskRewardTable>() 
			this.RainbowTaskTableByID = new Dictionary<number, RainbowTaskTable>() 
			this.RankBoxTableByBoxGroupID = new Dictionary<number, RankBoxTable>() 
			this.RankFightTableById = new Dictionary<number, RankFightTable>() 
			this.RankGradeTableByGrade = new Dictionary<number, RankGradeTable>() 
			this.RankScoreRewardTableByScore = new Dictionary<number, RankScoreRewardTable>() 
			this.RankingIconTableByID = new Dictionary<number, RankingIconTable>() 
			this.RechargeTableByID = new Dictionary<number, RechargeTable>() 
			this.RecommendDeckTableByID = new Dictionary<number, RecommendDeckTable>() 
			this.RoleLevelTableByRoleLv = new Dictionary<number, RoleLevelTable>() 
			this.ServerlistTableByID = new Dictionary<number, ServerlistTable>() 
			this.SevenSignInDayTableByDay = new Dictionary<number, SevenSignInDayTable>() 
			this.ShareResultTipsTableByID = new Dictionary<number, ShareResultTipsTable>() 
			this.ShareTypeTableByType = new Dictionary<SharedType, ShareTypeTable>() 
			this.SharedAwardTableByID = new Dictionary<number, SharedAwardTable>() 
			this.ShieldCountTableByCardLv = new Dictionary<number, ShieldCountTable>() 
			this.ShopDiamondGoodsTableByPos = new Dictionary<number, ShopDiamondGoodsTable>() 
			this.ShopGoldGoodsTableByPos = new Dictionary<number, ShopGoldGoodsTable>() 
			this.SkillAtkTargetDesTableByID = new Dictionary<number, SkillAtkTargetDesTable>() 
			this.SkillTableByID = new Dictionary<number, SkillTable>() 
			this.SoundTableByKey = new Dictionary<string, SoundTable>() 
			this.SpineTableByID = new Dictionary<number, SpineTable>() 
			this.TalentTableByID = new Dictionary<number, TalentTable>() 
			this.TalentTierTableByTier = new Dictionary<number, TalentTierTable>() 
			this.TaskBoxGroupTableByBoxGroupId = new Dictionary<number, TaskBoxGroupTable>() 
			this.TaskGiftTableByGiftId = new Dictionary<number, TaskGiftTable>() 
			this.TaskGoalBoxTableByGoalBoxId = new Dictionary<number, TaskGoalBoxTable>() 
			this.TaskTableByTaskId = new Dictionary<number, TaskTable>() 
			this.TipsTableByKey = new Dictionary<string, TipsTable>() 
			this.UnpackRebateCardTableByCardID = new Dictionary<number, UnpackRebateCardTable>() 
			this.UnpackRebateExclusiveCardTableByCardID = new Dictionary<number, UnpackRebateExclusiveCardTable>() 
			this.WechatgameTableByAppID = new Dictionary<string, WechatgameTable>() 
		}

		// 构建索引
		BuildData() {
			
			this.AdSevenDayTableByID = new Dictionary<number, AdSevenDayTable>()
			if(this.AdSevenDayTable) {
				for(let v of this.AdSevenDayTable) {
					this.AdSevenDayTableByID.setValue(v.ID, v)
				}
			}
			this.AdvertPosTableByAdvertPos = new Dictionary<AdvertPosType, AdvertPosTable>()
			if(this.AdvertPosTable) {
				for(let v of this.AdvertPosTable) {
					this.AdvertPosTableByAdvertPos.setValue(v.AdvertPos, v)
				}
			}
			this.AllianceIconTableByID = new Dictionary<number, AllianceIconTable>()
			if(this.AllianceIconTable) {
				for(let v of this.AllianceIconTable) {
					this.AllianceIconTableByID.setValue(v.ID, v)
				}
			}
			this.AllianceInnerMsgTableByMsgType = new Dictionary<number, AllianceInnerMsgTable>()
			if(this.AllianceInnerMsgTable) {
				for(let v of this.AllianceInnerMsgTable) {
					this.AllianceInnerMsgTableByMsgType.setValue(v.MsgType, v)
				}
			}
			this.AllianceJoinConditonTableByID = new Dictionary<number, AllianceJoinConditonTable>()
			if(this.AllianceJoinConditonTable) {
				for(let v of this.AllianceJoinConditonTable) {
					this.AllianceJoinConditonTableByID.setValue(v.ID, v)
				}
			}
			this.AllianceJoinMinScoreTableByMinSeasonScore = new Dictionary<number, AllianceJoinMinScoreTable>()
			if(this.AllianceJoinMinScoreTable) {
				for(let v of this.AllianceJoinMinScoreTable) {
					this.AllianceJoinMinScoreTableByMinSeasonScore.setValue(v.MinSeasonScore, v)
				}
			}
			this.AllianceSupportCardLimitTableBySeasonLv = new Dictionary<number, AllianceSupportCardLimitTable>()
			if(this.AllianceSupportCardLimitTable) {
				for(let v of this.AllianceSupportCardLimitTable) {
					this.AllianceSupportCardLimitTableBySeasonLv.setValue(v.SeasonLv, v)
				}
			}
			this.BagSpeedUpTableByID = new Dictionary<number, BagSpeedUpTable>()
			if(this.BagSpeedUpTable) {
				for(let v of this.BagSpeedUpTable) {
					this.BagSpeedUpTableByID.setValue(v.ID, v)
				}
			}
			this.BattleMapCycleTableBySeasonID = new Dictionary<number, BattleMapCycleTable>()
			if(this.BattleMapCycleTable) {
				for(let v of this.BattleMapCycleTable) {
					this.BattleMapCycleTableBySeasonID.setValue(v.SeasonID, v)
				}
			}
			this.BattleMapTableByID = new Dictionary<number, BattleMapTable>()
			if(this.BattleMapTable) {
				for(let v of this.BattleMapTable) {
					this.BattleMapTableByID.setValue(v.ID, v)
				}
			}
			this.BossBoxTableByID = new Dictionary<number, BossBoxTable>()
			if(this.BossBoxTable) {
				for(let v of this.BossBoxTable) {
					this.BossBoxTableByID.setValue(v.ID, v)
				}
			}
			this.BountyRewardTableByBountyRank = new Dictionary<number, BountyRewardTable>()
			if(this.BountyRewardTable) {
				for(let v of this.BountyRewardTable) {
					this.BountyRewardTableByBountyRank.setValue(v.BountyRank, v)
				}
			}
			this.BoxTableByBoxID = new Dictionary<number, BoxTable>()
			if(this.BoxTable) {
				for(let v of this.BoxTable) {
					this.BoxTableByBoxID.setValue(v.BoxID, v)
				}
			}
			this.BuffSpeedCountTableByCardLv = new Dictionary<number, BuffSpeedCountTable>()
			if(this.BuffSpeedCountTable) {
				for(let v of this.BuffSpeedCountTable) {
					this.BuffSpeedCountTableByCardLv.setValue(v.CardLv, v)
				}
			}
			this.BuffTableByID = new Dictionary<number, BuffTable>()
			if(this.BuffTable) {
				for(let v of this.BuffTable) {
					this.BuffTableByID.setValue(v.ID, v)
				}
			}
			this.CardSortTypeTableBySortType = new Dictionary<SortType, CardSortTypeTable>()
			if(this.CardSortTypeTable) {
				for(let v of this.CardSortTypeTable) {
					this.CardSortTypeTableBySortType.setValue(v.SortType, v)
				}
			}
			this.CardStrengthLvTableByLevel = new Dictionary<number, CardStrengthLvTable>()
			if(this.CardStrengthLvTable) {
				for(let v of this.CardStrengthLvTable) {
					this.CardStrengthLvTableByLevel.setValue(v.Level, v)
				}
			}
			this.CardSynthesisLvTableByLevel = new Dictionary<number, CardSynthesisLvTable>()
			if(this.CardSynthesisLvTable) {
				for(let v of this.CardSynthesisLvTable) {
					this.CardSynthesisLvTableByLevel.setValue(v.Level, v)
				}
			}
			this.CardTableByID = new Dictionary<number, CardTable>()
			if(this.CardTable) {
				for(let v of this.CardTable) {
					this.CardTableByID.setValue(v.ID, v)
				}
			}
			this.CardUpLevelTableByQuality = new Dictionary<ItemQuality, CardUpLevelTable>()
			if(this.CardUpLevelTable) {
				for(let v of this.CardUpLevelTable) {
					this.CardUpLevelTableByQuality.setValue(v.Quality, v)
				}
			}
			this.ChallengeTableByID = new Dictionary<number, ChallengeTable>()
			if(this.ChallengeTable) {
				for(let v of this.ChallengeTable) {
					this.ChallengeTableByID.setValue(v.ID, v)
				}
			}
			this.ChatBreviaryTableByMsgType = new Dictionary<number, ChatBreviaryTable>()
			if(this.ChatBreviaryTable) {
				for(let v of this.ChatBreviaryTable) {
					this.ChatBreviaryTableByMsgType.setValue(v.MsgType, v)
				}
			}
			this.ContinuousGiftTableByGiftID = new Dictionary<number, ContinuousGiftTable>()
			if(this.ContinuousGiftTable) {
				for(let v of this.ContinuousGiftTable) {
					this.ContinuousGiftTableByGiftID.setValue(v.GiftID, v)
				}
			}
			this.DevilPanelIconTableByID = new Dictionary<number, DevilPanelIconTable>()
			if(this.DevilPanelIconTable) {
				for(let v of this.DevilPanelIconTable) {
					this.DevilPanelIconTableByID.setValue(v.ID, v)
				}
			}
			this.EffectTableByID = new Dictionary<number, EffectTable>()
			if(this.EffectTable) {
				for(let v of this.EffectTable) {
					this.EffectTableByID.setValue(v.ID, v)
				}
			}
			this.EmojiTableByID = new Dictionary<number, EmojiTable>()
			if(this.EmojiTable) {
				for(let v of this.EmojiTable) {
					this.EmojiTableByID.setValue(v.ID, v)
				}
			}
			this.EnemyOnlyShowTableByID = new Dictionary<number, EnemyOnlyShowTable>()
			if(this.EnemyOnlyShowTable) {
				for(let v of this.EnemyOnlyShowTable) {
					this.EnemyOnlyShowTableByID.setValue(v.ID, v)
				}
			}
			this.EnemyTableByID = new Dictionary<number, EnemyTable>()
			if(this.EnemyTable) {
				for(let v of this.EnemyTable) {
					this.EnemyTableByID.setValue(v.ID, v)
				}
			}
			this.ErrorTableByKey = new Dictionary<string, ErrorTable>()
			if(this.ErrorTable) {
				for(let v of this.ErrorTable) {
					this.ErrorTableByKey.setValue(v.Key, v)
				}
			}
			this.FightTypeInfoTableByFightType = new Dictionary<number, FightTypeInfoTable>()
			if(this.FightTypeInfoTable) {
				for(let v of this.FightTypeInfoTable) {
					this.FightTypeInfoTableByFightType.setValue(v.FightType, v)
				}
			}
			this.FirstRechargeTableByGiftID = new Dictionary<number, FirstRechargeTable>()
			if(this.FirstRechargeTable) {
				for(let v of this.FirstRechargeTable) {
					this.FirstRechargeTableByGiftID.setValue(v.GiftID, v)
				}
			}
			this.GameHelpTipsAreaTableByID = new Dictionary<number, GameHelpTipsAreaTable>()
			if(this.GameHelpTipsAreaTable) {
				for(let v of this.GameHelpTipsAreaTable) {
					this.GameHelpTipsAreaTableByID.setValue(v.ID, v)
				}
			}
			this.GameHelpTipsTableByID = new Dictionary<number, GameHelpTipsTable>()
			if(this.GameHelpTipsTable) {
				for(let v of this.GameHelpTipsTable) {
					this.GameHelpTipsTableByID.setValue(v.ID, v)
				}
			}
			this.GiftBagTableByGiftBagID = new Dictionary<number, GiftBagTable>()
			if(this.GiftBagTable) {
				for(let v of this.GiftBagTable) {
					this.GiftBagTableByGiftBagID.setValue(v.GiftBagID, v)
				}
			}
			this.GroutHeroTalkTableByID = new Dictionary<number, GroutHeroTalkTable>()
			if(this.GroutHeroTalkTable) {
				for(let v of this.GroutHeroTalkTable) {
					this.GroutHeroTalkTableByID.setValue(v.ID, v)
				}
			}
			this.GroutStepTableByStep = new Dictionary<number, GroutStepTable>()
			if(this.GroutStepTable) {
				for(let v of this.GroutStepTable) {
					this.GroutStepTableByStep.setValue(v.Step, v)
				}
			}
			this.GroutTaskTableByID = new Dictionary<number, GroutTaskTable>()
			if(this.GroutTaskTable) {
				for(let v of this.GroutTaskTable) {
					this.GroutTaskTableByID.setValue(v.ID, v)
				}
			}
			this.GuideDialogueTableByDialogueID = new Dictionary<number, GuideDialogueTable>()
			if(this.GuideDialogueTable) {
				for(let v of this.GuideDialogueTable) {
					this.GuideDialogueTableByDialogueID.setValue(v.DialogueID, v)
				}
			}
			this.GuideTableByGuidID = new Dictionary<number, GuideTable>()
			if(this.GuideTable) {
				for(let v of this.GuideTable) {
					this.GuideTableByGuidID.setValue(v.GuidID, v)
				}
			}
			this.HeadFramTableByheadFramId = new Dictionary<number, HeadFramTable>()
			if(this.HeadFramTable) {
				for(let v of this.HeadFramTable) {
					this.HeadFramTableByheadFramId.setValue(v.headFramId, v)
				}
			}
			this.HeadTableByheadId = new Dictionary<string, HeadTable>()
			if(this.HeadTable) {
				for(let v of this.HeadTable) {
					this.HeadTableByheadId.setValue(v.headId, v)
				}
			}
			this.HelpHintTableByID = new Dictionary<number, HelpHintTable>()
			if(this.HelpHintTable) {
				for(let v of this.HelpHintTable) {
					this.HelpHintTableByID.setValue(v.ID, v)
				}
			}
			this.HeroLoadTaskScoreTableByScoreID = new Dictionary<number, HeroLoadTaskScoreTable>()
			if(this.HeroLoadTaskScoreTable) {
				for(let v of this.HeroLoadTaskScoreTable) {
					this.HeroLoadTaskScoreTableByScoreID.setValue(v.ScoreID, v)
				}
			}
			this.HeroLoadTaskTableByID = new Dictionary<number, HeroLoadTaskTable>()
			if(this.HeroLoadTaskTable) {
				for(let v of this.HeroLoadTaskTable) {
					this.HeroLoadTaskTableByID.setValue(v.ID, v)
				}
			}
			this.ItemTableByID = new Dictionary<number, ItemTable>()
			if(this.ItemTable) {
				for(let v of this.ItemTable) {
					this.ItemTableByID.setValue(v.ID, v)
				}
			}
			this.LimitActivityGrowFundTableByID = new Dictionary<number, LimitActivityGrowFundTable>()
			if(this.LimitActivityGrowFundTable) {
				for(let v of this.LimitActivityGrowFundTable) {
					this.LimitActivityGrowFundTableByID.setValue(v.ID, v)
				}
			}
			this.LimitActivityTableByID = new Dictionary<LimitActivityID, LimitActivityTable>()
			if(this.LimitActivityTable) {
				for(let v of this.LimitActivityTable) {
					this.LimitActivityTableByID.setValue(v.ID, v)
				}
			}
			this.LordSkillTableByLordID = new Dictionary<number, LordSkillTable>()
			if(this.LordSkillTable) {
				for(let v of this.LordSkillTable) {
					this.LordSkillTableByLordID.setValue(v.LordID, v)
				}
			}
			this.MaxSeasonRewardCycleTableBySeasonID = new Dictionary<number, MaxSeasonRewardCycleTable>()
			if(this.MaxSeasonRewardCycleTable) {
				for(let v of this.MaxSeasonRewardCycleTable) {
					this.MaxSeasonRewardCycleTableBySeasonID.setValue(v.SeasonID, v)
				}
			}
			this.MembershipCardTableByMembershipCardType = new Dictionary<MembershipCardType, MembershipCardTable>()
			if(this.MembershipCardTable) {
				for(let v of this.MembershipCardTable) {
					this.MembershipCardTableByMembershipCardType.setValue(v.MembershipCardType, v)
				}
			}
			this.NewCardOfStoreTableByID = new Dictionary<number, NewCardOfStoreTable>()
			if(this.NewCardOfStoreTable) {
				for(let v of this.NewCardOfStoreTable) {
					this.NewCardOfStoreTableByID.setValue(v.ID, v)
				}
			}
			this.NewPlayerGiftBagTableByID = new Dictionary<number, NewPlayerGiftBagTable>()
			if(this.NewPlayerGiftBagTable) {
				for(let v of this.NewPlayerGiftBagTable) {
					this.NewPlayerGiftBagTableByID.setValue(v.ID, v)
				}
			}
			this.OneYuanBuyTableByID = new Dictionary<number, OneYuanBuyTable>()
			if(this.OneYuanBuyTable) {
				for(let v of this.OneYuanBuyTable) {
					this.OneYuanBuyTableByID.setValue(v.ID, v)
				}
			}
			this.OpenFunctionLimitTableByFunctionName = new Dictionary<OpenFunctionName, OpenFunctionLimitTable>()
			if(this.OpenFunctionLimitTable) {
				for(let v of this.OpenFunctionLimitTable) {
					this.OpenFunctionLimitTableByFunctionName.setValue(v.FunctionName, v)
				}
			}
			this.OverBagGiftTableByID = new Dictionary<number, OverBagGiftTable>()
			if(this.OverBagGiftTable) {
				for(let v of this.OverBagGiftTable) {
					this.OverBagGiftTableByID.setValue(v.ID, v)
				}
			}
			this.PickedGiftBagTableByID = new Dictionary<number, PickedGiftBagTable>()
			if(this.PickedGiftBagTable) {
				for(let v of this.PickedGiftBagTable) {
					this.PickedGiftBagTableByID.setValue(v.ID, v)
				}
			}
			this.PopWindowMechanismByIndexID = new Dictionary<number, PopWindowMechanism>()
			if(this.PopWindowMechanism) {
				for(let v of this.PopWindowMechanism) {
					this.PopWindowMechanismByIndexID.setValue(v.IndexID, v)
				}
			}
			this.ProvinceTableByID = new Dictionary<number, ProvinceTable>()
			if(this.ProvinceTable) {
				for(let v of this.ProvinceTable) {
					this.ProvinceTableByID.setValue(v.ID, v)
				}
			}
			this.PullCardTableByPullType = new Dictionary<PullCardType, PullCardTable>()
			if(this.PullCardTable) {
				for(let v of this.PullCardTable) {
					this.PullCardTableByPullType.setValue(v.PullType, v)
				}
			}
			this.PveBannedCardTableByCardID = new Dictionary<number, PveBannedCardTable>()
			if(this.PveBannedCardTable) {
				for(let v of this.PveBannedCardTable) {
					this.PveBannedCardTableByCardID.setValue(v.CardID, v)
				}
			}
			this.PveClearRewardTableByWave = new Dictionary<number, PveClearRewardTable>()
			if(this.PveClearRewardTable) {
				for(let v of this.PveClearRewardTable) {
					this.PveClearRewardTableByWave.setValue(v.Wave, v)
				}
			}
			this.PveRewardTableByWave = new Dictionary<number, PveRewardTable>()
			if(this.PveRewardTable) {
				for(let v of this.PveRewardTable) {
					this.PveRewardTableByWave.setValue(v.Wave, v)
				}
			}
			this.QualityTableByQuality = new Dictionary<ItemQuality, QualityTable>()
			if(this.QualityTable) {
				for(let v of this.QualityTable) {
					this.QualityTableByQuality.setValue(v.Quality, v)
				}
			}
			this.QuestionnaireSurveyRewardTableByRewardID = new Dictionary<number, QuestionnaireSurveyRewardTable>()
			if(this.QuestionnaireSurveyRewardTable) {
				for(let v of this.QuestionnaireSurveyRewardTable) {
					this.QuestionnaireSurveyRewardTableByRewardID.setValue(v.RewardID, v)
				}
			}
			this.QuestionnaireSurveyTableByID = new Dictionary<number, QuestionnaireSurveyTable>()
			if(this.QuestionnaireSurveyTable) {
				for(let v of this.QuestionnaireSurveyTable) {
					this.QuestionnaireSurveyTableByID.setValue(v.ID, v)
				}
			}
			this.RainbowTaskRewardTableByID = new Dictionary<number, RainbowTaskRewardTable>()
			if(this.RainbowTaskRewardTable) {
				for(let v of this.RainbowTaskRewardTable) {
					this.RainbowTaskRewardTableByID.setValue(v.ID, v)
				}
			}
			this.RainbowTaskTableByID = new Dictionary<number, RainbowTaskTable>()
			if(this.RainbowTaskTable) {
				for(let v of this.RainbowTaskTable) {
					this.RainbowTaskTableByID.setValue(v.ID, v)
				}
			}
			this.RankBoxTableByBoxGroupID = new Dictionary<number, RankBoxTable>()
			if(this.RankBoxTable) {
				for(let v of this.RankBoxTable) {
					this.RankBoxTableByBoxGroupID.setValue(v.BoxGroupID, v)
				}
			}
			this.RankFightTableById = new Dictionary<number, RankFightTable>()
			if(this.RankFightTable) {
				for(let v of this.RankFightTable) {
					this.RankFightTableById.setValue(v.Id, v)
				}
			}
			this.RankGradeTableByGrade = new Dictionary<number, RankGradeTable>()
			if(this.RankGradeTable) {
				for(let v of this.RankGradeTable) {
					this.RankGradeTableByGrade.setValue(v.Grade, v)
				}
			}
			this.RankScoreRewardTableByScore = new Dictionary<number, RankScoreRewardTable>()
			if(this.RankScoreRewardTable) {
				for(let v of this.RankScoreRewardTable) {
					this.RankScoreRewardTableByScore.setValue(v.Score, v)
				}
			}
			this.RankingIconTableByID = new Dictionary<number, RankingIconTable>()
			if(this.RankingIconTable) {
				for(let v of this.RankingIconTable) {
					this.RankingIconTableByID.setValue(v.ID, v)
				}
			}
			this.RechargeTableByID = new Dictionary<number, RechargeTable>()
			if(this.RechargeTable) {
				for(let v of this.RechargeTable) {
					this.RechargeTableByID.setValue(v.ID, v)
				}
			}
			this.RecommendDeckTableByID = new Dictionary<number, RecommendDeckTable>()
			if(this.RecommendDeckTable) {
				for(let v of this.RecommendDeckTable) {
					this.RecommendDeckTableByID.setValue(v.ID, v)
				}
			}
			this.RoleLevelTableByRoleLv = new Dictionary<number, RoleLevelTable>()
			if(this.RoleLevelTable) {
				for(let v of this.RoleLevelTable) {
					this.RoleLevelTableByRoleLv.setValue(v.RoleLv, v)
				}
			}
			this.ServerlistTableByID = new Dictionary<number, ServerlistTable>()
			if(this.ServerlistTable) {
				for(let v of this.ServerlistTable) {
					this.ServerlistTableByID.setValue(v.ID, v)
				}
			}
			this.SevenSignInDayTableByDay = new Dictionary<number, SevenSignInDayTable>()
			if(this.SevenSignInDayTable) {
				for(let v of this.SevenSignInDayTable) {
					this.SevenSignInDayTableByDay.setValue(v.Day, v)
				}
			}
			this.ShareResultTipsTableByID = new Dictionary<number, ShareResultTipsTable>()
			if(this.ShareResultTipsTable) {
				for(let v of this.ShareResultTipsTable) {
					this.ShareResultTipsTableByID.setValue(v.ID, v)
				}
			}
			this.ShareTypeTableByType = new Dictionary<SharedType, ShareTypeTable>()
			if(this.ShareTypeTable) {
				for(let v of this.ShareTypeTable) {
					this.ShareTypeTableByType.setValue(v.Type, v)
				}
			}
			this.SharedAwardTableByID = new Dictionary<number, SharedAwardTable>()
			if(this.SharedAwardTable) {
				for(let v of this.SharedAwardTable) {
					this.SharedAwardTableByID.setValue(v.ID, v)
				}
			}
			this.ShieldCountTableByCardLv = new Dictionary<number, ShieldCountTable>()
			if(this.ShieldCountTable) {
				for(let v of this.ShieldCountTable) {
					this.ShieldCountTableByCardLv.setValue(v.CardLv, v)
				}
			}
			this.ShopDiamondGoodsTableByPos = new Dictionary<number, ShopDiamondGoodsTable>()
			if(this.ShopDiamondGoodsTable) {
				for(let v of this.ShopDiamondGoodsTable) {
					this.ShopDiamondGoodsTableByPos.setValue(v.Pos, v)
				}
			}
			this.ShopGoldGoodsTableByPos = new Dictionary<number, ShopGoldGoodsTable>()
			if(this.ShopGoldGoodsTable) {
				for(let v of this.ShopGoldGoodsTable) {
					this.ShopGoldGoodsTableByPos.setValue(v.Pos, v)
				}
			}
			this.SkillAtkTargetDesTableByID = new Dictionary<number, SkillAtkTargetDesTable>()
			if(this.SkillAtkTargetDesTable) {
				for(let v of this.SkillAtkTargetDesTable) {
					this.SkillAtkTargetDesTableByID.setValue(v.ID, v)
				}
			}
			this.SkillTableByID = new Dictionary<number, SkillTable>()
			if(this.SkillTable) {
				for(let v of this.SkillTable) {
					this.SkillTableByID.setValue(v.ID, v)
				}
			}
			this.SoundTableByKey = new Dictionary<string, SoundTable>()
			if(this.SoundTable) {
				for(let v of this.SoundTable) {
					this.SoundTableByKey.setValue(v.Key, v)
				}
			}
			this.SpineTableByID = new Dictionary<number, SpineTable>()
			if(this.SpineTable) {
				for(let v of this.SpineTable) {
					this.SpineTableByID.setValue(v.ID, v)
				}
			}
			this.TalentTableByID = new Dictionary<number, TalentTable>()
			if(this.TalentTable) {
				for(let v of this.TalentTable) {
					this.TalentTableByID.setValue(v.ID, v)
				}
			}
			this.TalentTierTableByTier = new Dictionary<number, TalentTierTable>()
			if(this.TalentTierTable) {
				for(let v of this.TalentTierTable) {
					this.TalentTierTableByTier.setValue(v.Tier, v)
				}
			}
			this.TaskBoxGroupTableByBoxGroupId = new Dictionary<number, TaskBoxGroupTable>()
			if(this.TaskBoxGroupTable) {
				for(let v of this.TaskBoxGroupTable) {
					this.TaskBoxGroupTableByBoxGroupId.setValue(v.BoxGroupId, v)
				}
			}
			this.TaskGiftTableByGiftId = new Dictionary<number, TaskGiftTable>()
			if(this.TaskGiftTable) {
				for(let v of this.TaskGiftTable) {
					this.TaskGiftTableByGiftId.setValue(v.GiftId, v)
				}
			}
			this.TaskGoalBoxTableByGoalBoxId = new Dictionary<number, TaskGoalBoxTable>()
			if(this.TaskGoalBoxTable) {
				for(let v of this.TaskGoalBoxTable) {
					this.TaskGoalBoxTableByGoalBoxId.setValue(v.GoalBoxId, v)
				}
			}
			this.TaskTableByTaskId = new Dictionary<number, TaskTable>()
			if(this.TaskTable) {
				for(let v of this.TaskTable) {
					this.TaskTableByTaskId.setValue(v.TaskId, v)
				}
			}
			this.TipsTableByKey = new Dictionary<string, TipsTable>()
			if(this.TipsTable) {
				for(let v of this.TipsTable) {
					this.TipsTableByKey.setValue(v.Key, v)
				}
			}
			this.UnpackRebateCardTableByCardID = new Dictionary<number, UnpackRebateCardTable>()
			if(this.UnpackRebateCardTable) {
				for(let v of this.UnpackRebateCardTable) {
					this.UnpackRebateCardTableByCardID.setValue(v.CardID, v)
				}
			}
			this.UnpackRebateExclusiveCardTableByCardID = new Dictionary<number, UnpackRebateExclusiveCardTable>()
			if(this.UnpackRebateExclusiveCardTable) {
				for(let v of this.UnpackRebateExclusiveCardTable) {
					this.UnpackRebateExclusiveCardTableByCardID.setValue(v.CardID, v)
				}
			}
			this.WechatgameTableByAppID = new Dictionary<string, WechatgameTable>()
			if(this.WechatgameTable) {
				for(let v of this.WechatgameTable) {
					this.WechatgameTableByAppID.setValue(v.AppID, v)
				}
			}
		}
	}

	// Used internally by dictionary
	export interface IDictionaryPair<K, V> {
		key: K;
		value: V;
	}
	
	export class Dictionary<K, V> {
	
		/**
		 * Object holding the key-value pairs.
		 * @type {Object}
		 * @private
		 */
		protected table: { [key: string]: IDictionaryPair<K, V> };
		//: [key: K] will not work since indices can only by strings in javascript and typescript enforces this.
	
		/**
		 * Number of elements in the list.
		 * @type {number}
		 * @private
		 */
		protected nElements: number;
	
		/**
		 * Function used to convert keys to strings.
		 * @type {function(Object):string}
		 * @protected
		 */
		protected toStr: (key: K) => string;
	
	
		/**
		 * Creates an empty dictionary.
		 * @class <p>Dictionaries map keys to values; each key can map to at most one value.
		 * This implementation accepts any kind of objects as keys.</p>
		 *
		 * <p>If the keys are custom objects a function which converts keys to unique
		 * strings must be provided. Example:</p>
		 * <pre>
		 * function petToString(pet) {
		 *  return pet.name;
		 * }
		 * </pre>
		 * @constructor
		 * @param {function(Object):string=} toStrFunction optional function used
		 * to convert keys to strings. If the keys aren't strings or if toString()
		 * is not appropriate, a custom function which receives a key and returns a
		 * unique string must be provided.
		 */
		constructor(toStrFunction?: (key: K) => string) {
			this.table = {};
			this.nElements = 0;
			this.toStr = toStrFunction || defaultToString;
		}
	
	
		/**
		 * Returns the value to which this dictionary maps the specified key.
		 * Returns undefined if this dictionary contains no mapping for this key.
		 * @param {Object} key key whose associated value is to be returned.
		 * @return {*} the value to which this dictionary maps the specified key or
		 * undefined if the map contains no mapping for this key.
		 */
		getValue(key: K): V | undefined {
			const pair: IDictionaryPair<K, V> = this.table['$' + this.toStr(key)];
			if (isUndefined(pair)) {
				return undefined;
			}
			return pair.value;
		}
	
	
		/**
		 * Associates the specified value with the specified key in this dictionary.
		 * If the dictionary previously contained a mapping for this key, the old
		 * value is replaced by the specified value.
		 * @param {Object} key key with which the specified value is to be
		 * associated.
		 * @param {Object} value value to be associated with the specified key.
		 * @return {*} previous value associated with the specified key, or undefined if
		 * there was no mapping for the key or if the key/value are undefined.
		 */
		setValue(key: K, value: V): V | undefined {
	
			if (isUndefined(key) || isUndefined(value)) {
				return undefined;
			}
	
			let ret: V | undefined;
			const k = '$' + this.toStr(key);
			const previousElement: IDictionaryPair<K, V> = this.table[k];
			if (isUndefined(previousElement)) {
				this.nElements++;
				ret = undefined;
			} else {
				ret = previousElement.value;
			}
			this.table[k] = {
				key: key,
				value: value
			};
			return ret;
		}
	
		/**
		 * Removes the mapping for this key from this dictionary if it is present.
		 * @param {Object} key key whose mapping is to be removed from the
		 * dictionary.
		 * @return {*} previous value associated with specified key, or undefined if
		 * there was no mapping for key.
		 */
		remove(key: K): V | undefined {
			const k = '$' + this.toStr(key);
			const previousElement: IDictionaryPair<K, V> = this.table[k];
			if (!isUndefined(previousElement)) {
				delete this.table[k];
				this.nElements--;
				return previousElement.value;
			}
			return undefined;
		}
	
		/**
		 * Returns an array containing all of the keys in this dictionary.
		 * @return {Array} an array containing all of the keys in this dictionary.
		 */
		keys(): K[] {
			const array: K[] = [];
			for (const name in this.table) {
				if (has(this.table, name)) {
					const pair: IDictionaryPair<K, V> = this.table[name];
					array.push(pair.key);
				}
			}
			return array;
		}
	
		/**
		 * Returns an array containing all of the values in this dictionary.
		 * @return {Array} an array containing all of the values in this dictionary.
		 */
		values(): V[] {
			const array: V[] = [];
			for (const name in this.table) {
				if (has(this.table, name)) {
					const pair: IDictionaryPair<K, V> = this.table[name];
					array.push(pair.value);
				}
			}
			return array;
		}
	
		/**
		 * Executes the provided function once for each key-value pair
		 * present in this dictionary.
		 * @param {function(Object,Object):*} callback function to execute, it is
		 * invoked with two arguments: key and value. To break the iteration you can
		 * optionally return false.
		 */
		forEach(callback: (key: K, value: V) => any): void {
			for (const name in this.table) {
				if (has(this.table, name)) {
					const pair: IDictionaryPair<K, V> = this.table[name];
					const ret = callback(pair.key, pair.value);
					if (ret === false) {
						return;
					}
				}
			}
		}
	
		/**
		 * Returns true if this dictionary contains a mapping for the specified key.
		 * @param {Object} key key whose presence in this dictionary is to be
		 * tested.
		 * @return {boolean} true if this dictionary contains a mapping for the
		 * specified key.
		 */
		containsKey(key: K): boolean {
			return !isUndefined(this.getValue(key));
		}
	
		/**
		 * Removes all mappings from this dictionary.
		 * @this {collections.Dictionary}
		 */
		clear() {
			this.table = {};
			this.nElements = 0;
		}
	
		/**
		 * Returns the number of keys in this dictionary.
		 * @return {number} the number of key-value mappings in this dictionary.
		 */
		size(): number {
			return this.nElements;
		}
	
		/**
		 * Returns true if this dictionary contains no mappings.
		 * @return {boolean} true if this dictionary contains no mappings.
		 */
		isEmpty(): boolean {
			return this.nElements <= 0;
		}
	
		toString(): string {
			let toret = '{';
			this.forEach((k, v) => {
				toret += "\n\t" + k.toString() + " : " + v.toString();
			});
			return toret + '\n}';
		}
	} // End of dictionary

	function defaultToString(item: any): string {
		if (item === null) {
			return 'COLLECTION_NULL';
		} else if (isUndefined(item)) {
			return 'COLLECTION_UNDEFINED';
		} else if (isString(item)) {
			return '$s' + item;
		} else {
			return '$o' + item.toString();
		}
	}

	const _hasOwnProperty = Object.prototype.hasOwnProperty;
	const has = function(obj: any, prop: any) {
		return _hasOwnProperty.call(obj, prop);
	};

	function isUndefined(obj: any): obj is undefined {
		return (typeof obj) === 'undefined';
	}

	function isString(obj: any): boolean {
		return Object.prototype.toString.call(obj) === '[object String]';
	}

	//Polyfill
    if (typeof Object.assign !== 'function') {
        // Must be writable: true, enumerable: false, configurable: true
		Object.defineProperty(Object, "assign", {
			value: function assign(target, varArgs) { // .length of function is 2
            	'use strict';
            	if (target === null || target === undefined) {
              		throw new TypeError('Cannot convert undefined or null to object');
            	}
      
            	var to = Object(target);
      
            	for (var index = 1; index < arguments.length; index++) {
              		var nextSource = arguments[index];
      
              		if (nextSource !== null && nextSource !== undefined) { 
                		for (var nextKey in nextSource) {
                  			// Avoid bugs when hasOwnProperty is shadowed
                  			if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                    			to[nextKey] = nextSource[nextKey];
                  			}
						}
              		}
            	}
            	return to;
			},
			writable: true,
			configurable: true
        });
    }
}
