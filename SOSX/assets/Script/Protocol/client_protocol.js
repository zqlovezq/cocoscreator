/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.proto = (function() {

    /**
     * Namespace proto.
     * @exports proto
     * @namespace
     */
    var proto = {};

    /**
     * Ptl enum.
     * @name proto.Ptl
     * @enum {number}
     * @property {number} UNSPECIFIED=0 UNSPECIFIED value
     * @property {number} Ping=10000 Ping value
     * @property {number} Echo=60000 Echo value
     * @property {number} LoginReq=10001 LoginReq value
     * @property {number} LoginRsp=10002 LoginRsp value
     * @property {number} CreatRoleReq=10003 CreatRoleReq value
     * @property {number} CreatRoleRsp=10004 CreatRoleRsp value
     * @property {number} SyncRole=10005 SyncRole value
     * @property {number} ChangeDecksReq=10006 ChangeDecksReq value
     * @property {number} ChangeDecksRsp=10007 ChangeDecksRsp value
     * @property {number} GetRankScoreRewardReq=10008 GetRankScoreRewardReq value
     * @property {number} GetRankScoreRewardRsp=10009 GetRankScoreRewardRsp value
     * @property {number} GetBossBoxRewardReq=10010 GetBossBoxRewardReq value
     * @property {number} GetBossBoxRewardRsp=10011 GetBossBoxRewardRsp value
     * @property {number} CardLevelUpReq=10012 CardLevelUpReq value
     * @property {number} CardLevelUpRsp=10013 CardLevelUpRsp value
     * @property {number} ChangeIndexCardReq=10014 ChangeIndexCardReq value
     * @property {number} ChangeIndexCardRsp=10015 ChangeIndexCardRsp value
     * @property {number} GetCooperateBoxRewardReq=10016 GetCooperateBoxRewardReq value
     * @property {number} GetCooperateBoxRewardRsp=10017 GetCooperateBoxRewardRsp value
     * @property {number} UpdateItemData=10018 UpdateItemData value
     * @property {number} RemoveItemData=10019 RemoveItemData value
     * @property {number} SyncRoleGold=10020 SyncRoleGold value
     * @property {number} SyncRoleDiamond=10021 SyncRoleDiamond value
     * @property {number} GetShopInfoReq=10022 GetShopInfoReq value
     * @property {number} GetShopInfoRsp=10023 GetShopInfoRsp value
     * @property {number} BuyShopGoodsReq=10024 BuyShopGoodsReq value
     * @property {number} BuyShopGoodsRsp=10025 BuyShopGoodsRsp value
     * @property {number} FreeRefreshSpecialGoodsReq=10026 FreeRefreshSpecialGoodsReq value
     * @property {number} FreeRefreshSpecialGoodsRsp=10027 FreeRefreshSpecialGoodsRsp value
     * @property {number} GetRankPackageInfoReq=10028 GetRankPackageInfoReq value
     * @property {number} GetRankPackageInfoRsp=10029 GetRankPackageInfoRsp value
     * @property {number} UnlockRankBoxReq=10030 UnlockRankBoxReq value
     * @property {number} UnlockRankBoxRsp=10031 UnlockRankBoxRsp value
     * @property {number} ReserveRankBoxReq=10032 ReserveRankBoxReq value
     * @property {number} ReserveRankBoxRsp=10033 ReserveRankBoxRsp value
     * @property {number} OpenRankBoxReq=10034 OpenRankBoxReq value
     * @property {number} OpenRankBoxRsp=10035 OpenRankBoxRsp value
     * @property {number} ImmediatelyOpenRankBoxReq=10036 ImmediatelyOpenRankBoxReq value
     * @property {number} ImmediatelyOpenRankBoxRsp=10037 ImmediatelyOpenRankBoxRsp value
     * @property {number} PushPreventIndulge=10038 PushPreventIndulge value
     * @property {number} PushDailyRefresh=10039 PushDailyRefresh value
     * @property {number} SetLordReq=10040 SetLordReq value
     * @property {number} SetLordRsp=10041 SetLordRsp value
     * @property {number} SetTalentReq=10042 SetTalentReq value
     * @property {number} SetTalentRsp=10043 SetTalentRsp value
     * @property {number} GetPveClearRewardReq=10044 GetPveClearRewardReq value
     * @property {number} GetPveClearRewardRsp=10045 GetPveClearRewardRsp value
     * @property {number} GetPveDailyRewardReq=10046 GetPveDailyRewardReq value
     * @property {number} GetPveDailyRewardRsp=10047 GetPveDailyRewardRsp value
     * @property {number} BuyPveCountReq=10048 BuyPveCountReq value
     * @property {number} BuyPveCountRsp=10049 BuyPveCountRsp value
     * @property {number} GetPveStatusReq=10050 GetPveStatusReq value
     * @property {number} GetPveStatusRsp=10051 GetPveStatusRsp value
     * @property {number} GmAddCupReq=10500 GmAddCupReq value
     * @property {number} GmAddCupRsp=10501 GmAddCupRsp value
     * @property {number} ReconnetFightReq=10998 ReconnetFightReq value
     * @property {number} ReconnetFightRsp=10999 ReconnetFightRsp value
     * @property {number} StartMatchFightReq=11000 StartMatchFightReq value
     * @property {number} StartMatchFightRsp=11001 StartMatchFightRsp value
     * @property {number} PullCardInfoReq=11002 PullCardInfoReq value
     * @property {number} PullCardInfoRsp=11003 PullCardInfoRsp value
     * @property {number} PullCardReq=11004 PullCardReq value
     * @property {number} PullCardRsp=11005 PullCardRsp value
     * @property {number} ChangeTeamIndexReq=11006 ChangeTeamIndexReq value
     * @property {number} ChangeTeamIndexRsp=11007 ChangeTeamIndexRsp value
     * @property {number} CheckServerUTCTime=11010 CheckServerUTCTime value
     * @property {number} ChangeNameReq=11011 ChangeNameReq value
     * @property {number} ChangeNameRsp=11012 ChangeNameRsp value
     * @property {number} HowManyTimesChangeNameReq=11013 HowManyTimesChangeNameReq value
     * @property {number} HowManyTimesChangeNameRsp=11014 HowManyTimesChangeNameRsp value
     * @property {number} SyncRoleExpAndLevel=11033 SyncRoleExpAndLevel value
     * @property {number} OpenRankRewardReq=11045 OpenRankRewardReq value
     * @property {number} OpenRankRewardRsp=11046 OpenRankRewardRsp value
     * @property {number} TaskInfoReq=11047 TaskInfoReq value
     * @property {number} TaskInfoRsp=11048 TaskInfoRsp value
     * @property {number} TaskGetGoalBoxReq=11049 TaskGetGoalBoxReq value
     * @property {number} TaskGetGoalBoxRsp=11050 TaskGetGoalBoxRsp value
     * @property {number} TaskGetGiftReq=11051 TaskGetGiftReq value
     * @property {number} TaskGetGiftRsp=11052 TaskGetGiftRsp value
     * @property {number} TaskGetRewardReq=11053 TaskGetRewardReq value
     * @property {number} TaskGetRewardRsp=11054 TaskGetRewardRsp value
     * @property {number} TaskRefreshReq=11055 TaskRefreshReq value
     * @property {number} TaskRefreshRsp=11056 TaskRefreshRsp value
     * @property {number} TaskPushTaskInfo=11057 TaskPushTaskInfo value
     * @property {number} CancelMatchFightReq=11067 CancelMatchFightReq value
     * @property {number} CancelMatchFightRsp=11068 CancelMatchFightRsp value
     * @property {number} PlayerInfoReq=11073 PlayerInfoReq value
     * @property {number} PlayerInfoRsp=11074 PlayerInfoRsp value
     * @property {number} BossBoxInfoReq=11075 BossBoxInfoReq value
     * @property {number} BossBoxInfoRsp=11076 BossBoxInfoRsp value
     * @property {number} BossBoxUnlockLvReq=11077 BossBoxUnlockLvReq value
     * @property {number} BossBoxUnlockLvRsp=11078 BossBoxUnlockLvRsp value
     * @property {number} BossBoxGetLvRewardReq=11079 BossBoxGetLvRewardReq value
     * @property {number} BossBoxGetLvRewardRsp=11080 BossBoxGetLvRewardRsp value
     * @property {number} ResetFightRecordReq=11081 ResetFightRecordReq value
     * @property {number} ResetFightRecordRsp=11082 ResetFightRecordRsp value
     * @property {number} CreateAllianceReq=11201 CreateAllianceReq value
     * @property {number} CreateAllianceRsp=11202 CreateAllianceRsp value
     * @property {number} JoinAllianceReq=11203 JoinAllianceReq value
     * @property {number} JoinAllianceRsp=11204 JoinAllianceRsp value
     * @property {number} QuitAllianceReq=11205 QuitAllianceReq value
     * @property {number} QuitAllianceRsp=11206 QuitAllianceRsp value
     * @property {number} DealAllianceJoinReq=11207 DealAllianceJoinReq value
     * @property {number} DealAllianceJoinRsp=11208 DealAllianceJoinRsp value
     * @property {number} AllianceSetPostRankReq=11209 AllianceSetPostRankReq value
     * @property {number} AllianceSetPostRankRsp=11210 AllianceSetPostRankRsp value
     * @property {number} QueryAllianceInfoReq=11211 QueryAllianceInfoReq value
     * @property {number} QueryAllianceInfoRsp=11212 QueryAllianceInfoRsp value
     * @property {number} SearchAllianceReq=11213 SearchAllianceReq value
     * @property {number} SearchAllianceRsp=11214 SearchAllianceRsp value
     * @property {number} RecommendAllianceReq=11215 RecommendAllianceReq value
     * @property {number} RecommendAllianceRsp=11216 RecommendAllianceRsp value
     * @property {number} ModifyAllianceInfoReq=11217 ModifyAllianceInfoReq value
     * @property {number} ModifyAllianceInfoRsp=11218 ModifyAllianceInfoRsp value
     * @property {number} ExpelMemberReq=11219 ExpelMemberReq value
     * @property {number} ExpelMemberRsp=11220 ExpelMemberRsp value
     * @property {number} AllianceMsgPush=11221 AllianceMsgPush value
     * @property {number} SyncRoleAllianceData=11222 SyncRoleAllianceData value
     * @property {number} AllianceCardRequestDonateReq=11223 AllianceCardRequestDonateReq value
     * @property {number} AllianceCardRequestDonateRsp=11224 AllianceCardRequestDonateRsp value
     * @property {number} AllianceDonateCardReq=11225 AllianceDonateCardReq value
     * @property {number} AllianceDonateCardRsp=11226 AllianceDonateCardRsp value
     * @property {number} AllianceFightInvitationReq=11231 AllianceFightInvitationReq value
     * @property {number} AllianceFightAcceptReq=11233 AllianceFightAcceptReq value
     * @property {number} AllianceFightAcceptRsp=11234 AllianceFightAcceptRsp value
     * @property {number} PushJoinOrExpelAllianceMsg=11252 PushJoinOrExpelAllianceMsg value
     * @property {number} PushSupportInfo=11253 PushSupportInfo value
     * @property {number} PushRequestSupportInfo=11254 PushRequestSupportInfo value
     * @property {number} PushAllianceExpelMember=11255 PushAllianceExpelMember value
     * @property {number} PushAllianceFightInvite=11256 PushAllianceFightInvite value
     * @property {number} PushAllianceFightStart=11257 PushAllianceFightStart value
     * @property {number} PushAllianceFightEnd=11258 PushAllianceFightEnd value
     * @property {number} PushRecentlyAllianceFightInfo=11259 PushRecentlyAllianceFightInfo value
     * @property {number} PushCancelAllianceFightInvite=11260 PushCancelAllianceFightInvite value
     * @property {number} PushAllianceApplyMessage=11261 PushAllianceApplyMessage value
     * @property {number} PushAllianceLeaderChange=11262 PushAllianceLeaderChange value
     * @property {number} BuyDemonPassReq=11301 BuyDemonPassReq value
     * @property {number} BuyDemonPassRsp=11302 BuyDemonPassRsp value
     * @property {number} SimpleGmReq=11303 SimpleGmReq value
     * @property {number} SimpleGmRsp=11304 SimpleGmRsp value
     * @property {number} ChallengeGetInfoReq=11401 ChallengeGetInfoReq value
     * @property {number} ChallengeGetInfoRsp=11402 ChallengeGetInfoRsp value
     * @property {number} ChallengeChangeDeckReq=11403 ChallengeChangeDeckReq value
     * @property {number} ChallengeChangeDeckRsp=11404 ChallengeChangeDeckRsp value
     * @property {number} ChallengeSetLordReq=11405 ChallengeSetLordReq value
     * @property {number} ChallengeSetLordRsp=11406 ChallengeSetLordRsp value
     * @property {number} ChallengeSetTalentReq=11407 ChallengeSetTalentReq value
     * @property {number} ChallengeSetTalentRsp=11408 ChallengeSetTalentRsp value
     * @property {number} ChallengeCountResetReq=11411 ChallengeCountResetReq value
     * @property {number} ChallengeCountResetRsp=11412 ChallengeCountResetRsp value
     * @property {number} ChallengeDoRewardReq=11413 ChallengeDoRewardReq value
     * @property {number} ChallengeDoRewardRsp=11414 ChallengeDoRewardRsp value
     * @property {number} GetPvpRankingListReq=11463 GetPvpRankingListReq value
     * @property {number} GetPvpRankingListRsp=11464 GetPvpRankingListRsp value
     * @property {number} GetCooperationRankingListReq=11465 GetCooperationRankingListReq value
     * @property {number} GetCooperationRankingListRsp=11466 GetCooperationRankingListRsp value
     * @property {number} GetAllianceRankingListReq=11467 GetAllianceRankingListReq value
     * @property {number} GetAllianceRankingListRsp=11468 GetAllianceRankingListRsp value
     * @property {number} ExchangeCodeReq=11483 ExchangeCodeReq value
     * @property {number} ExchangeCodeRsp=11484 ExchangeCodeRsp value
     * @property {number} GetMailInfoListReq=11493 GetMailInfoListReq value
     * @property {number} GetMailInfoListRsp=11494 GetMailInfoListRsp value
     * @property {number} ReceiveMailRewardReq=11495 ReceiveMailRewardReq value
     * @property {number} ReceiveMailRewardRsp=11496 ReceiveMailRewardRsp value
     * @property {number} ReadMailReq=11497 ReadMailReq value
     * @property {number} RemoveReadMailReq=11499 RemoveReadMailReq value
     * @property {number} RemoveReadMailRsp=11500 RemoveReadMailRsp value
     * @property {number} PushNewMailTip=11501 PushNewMailTip value
     * @property {number} WriteAllianceMailReq=11503 WriteAllianceMailReq value
     * @property {number} WriteAllianceMailRsp=11504 WriteAllianceMailRsp value
     * @property {number} GetFriendInfoListReq=11513 GetFriendInfoListReq value
     * @property {number} GetFriendInfoListRsp=11514 GetFriendInfoListRsp value
     * @property {number} GetFriendApplyListReq=11515 GetFriendApplyListReq value
     * @property {number} GetFriendApplyListRsp=11516 GetFriendApplyListRsp value
     * @property {number} PushNewFriendApplyInfo=11517 PushNewFriendApplyInfo value
     * @property {number} OperatorFriendApplyReq=11518 OperatorFriendApplyReq value
     * @property {number} OperatorFriendApplyRsp=11519 OperatorFriendApplyRsp value
     * @property {number} AddFriendReq=11520 AddFriendReq value
     * @property {number} AddFriendRsp=11521 AddFriendRsp value
     * @property {number} DeleteFriendReq=11522 DeleteFriendReq value
     * @property {number} DeleteFriendRsp=11523 DeleteFriendRsp value
     * @property {number} ChangeFriendInfo=11524 ChangeFriendInfo value
     * @property {number} InvitationFriendFightReq=11525 InvitationFriendFightReq value
     * @property {number} InvitationFriendFightRsp=11526 InvitationFriendFightRsp value
     * @property {number} PushInvitationFriendFight=11527 PushInvitationFriendFight value
     * @property {number} OperatorFriendFightInvitationReq=11528 OperatorFriendFightInvitationReq value
     * @property {number} OperatorFriendFightInvitationRsp=11529 OperatorFriendFightInvitationRsp value
     * @property {number} FightLogReq=11530 FightLogReq value
     * @property {number} FightLogRsp=11531 FightLogRsp value
     * @property {number} CopyDeckReq=11532 CopyDeckReq value
     * @property {number} CopyDeckRsp=11533 CopyDeckRsp value
     * @property {number} ReportReq=11534 ReportReq value
     * @property {number} ReportRsp=11535 ReportRsp value
     * @property {number} PushCancelFriendFight=11540 PushCancelFriendFight value
     * @property {number} PushPveForbidInfo=11551 PushPveForbidInfo value
     * @property {number} RainbowTaskListReq=11561 RainbowTaskListReq value
     * @property {number} RainbowTaskListRsp=11562 RainbowTaskListRsp value
     * @property {number} UpLvRainbowReq=11563 UpLvRainbowReq value
     * @property {number} UpLvRainbowRsp=11564 UpLvRainbowRsp value
     * @property {number} ImmFinishRainbowTaskReq=11565 ImmFinishRainbowTaskReq value
     * @property {number} ImmFinishRainbowTaskRsp=11566 ImmFinishRainbowTaskRsp value
     * @property {number} RefreshRainbowTaskReq=11567 RefreshRainbowTaskReq value
     * @property {number} RefreshRainbowTaskRsp=11568 RefreshRainbowTaskRsp value
     * @property {number} ReceiveRainbowRewardReq=11569 ReceiveRainbowRewardReq value
     * @property {number} ReceiveRainbowRewardRsp=11570 ReceiveRainbowRewardRsp value
     * @property {number} PushRainbowTaskUpdate=11571 PushRainbowTaskUpdate value
     * @property {number} PushRainbowTaskExpireRefresh=11572 PushRainbowTaskExpireRefresh value
     * @property {number} PushRainbowTaskRedDotStatus=11573 PushRainbowTaskRedDotStatus value
     * @property {number} GroutTaskListReq=11583 GroutTaskListReq value
     * @property {number} GroutTaskListRsp=11584 GroutTaskListRsp value
     * @property {number} ReceiveGroutTaskRewardReq=11585 ReceiveGroutTaskRewardReq value
     * @property {number} ReceiveGroutTaskRewardRsp=11586 ReceiveGroutTaskRewardRsp value
     * @property {number} ReceiveGroutTaskStepRewardReq=11587 ReceiveGroutTaskStepRewardReq value
     * @property {number} ReceiveGroutTaskStepRewardRsp=11588 ReceiveGroutTaskStepRewardRsp value
     * @property {number} PushGroutTaskUpate=11589 PushGroutTaskUpate value
     * @property {number} PushSevenDaySignInData=11673 PushSevenDaySignInData value
     * @property {number} ReceiveSevenDaySignInRewardReq=11674 ReceiveSevenDaySignInRewardReq value
     * @property {number} ReceiveSevenDaySignInRewardRsp=11675 ReceiveSevenDaySignInRewardRsp value
     * @property {number} GetGiftBagReq=11676 GetGiftBagReq value
     * @property {number} GetGiftBagRsp=11677 GetGiftBagRsp value
     * @property {number} RefreshDayGiftBagReq=11678 RefreshDayGiftBagReq value
     * @property {number} RefreshDayGiftBagRsp=11679 RefreshDayGiftBagRsp value
     * @property {number} BuyGiftDayReq=11680 BuyGiftDayReq value
     * @property {number} BuyGiftDayRsp=11681 BuyGiftDayRsp value
     * @property {number} NewPlayerGiftBagReq=11682 NewPlayerGiftBagReq value
     * @property {number} NewPlayerGiftBagRsp=11683 NewPlayerGiftBagRsp value
     * @property {number} BuyNewPlayerGiftBagReq=11684 BuyNewPlayerGiftBagReq value
     * @property {number} BuyNewPlayerGiftBagRsp=11685 BuyNewPlayerGiftBagRsp value
     * @property {number} PushNewExGiftBag=11686 PushNewExGiftBag value
     * @property {number} PayStartReq=11687 PayStartReq value
     * @property {number} PayStartRsp=11688 PayStartRsp value
     * @property {number} PayEndReq=11689 PayEndReq value
     * @property {number} PayEndRsp=11690 PayEndRsp value
     * @property {number} SetGid=11691 SetGid value
     * @property {number} KickOff=11692 KickOff value
     * @property {number} SetWechatUserInfo=11693 SetWechatUserInfo value
     * @property {number} PrePayWechatRsp=11694 PrePayWechatRsp value
     * @property {number} ReportedAdvertTypeReq=11700 ReportedAdvertTypeReq value
     * @property {number} SharedGameReq=11701 SharedGameReq value
     * @property {number} SharedGameRsp=11702 SharedGameRsp value
     * @property {number} GetSharedAwardReq=11703 GetSharedAwardReq value
     * @property {number} GetSharedAwardRsp=11704 GetSharedAwardRsp value
     * @property {number} PushSharedOfToday=11705 PushSharedOfToday value
     * @property {number} SharedListReq=11706 SharedListReq value
     * @property {number} SharedListRsp=11707 SharedListRsp value
     * @property {number} AfterSharedRewardReq=11708 AfterSharedRewardReq value
     * @property {number} AfterSharedRewardRsp=11709 AfterSharedRewardRsp value
     * @property {number} WatchAdResumeSeasonScoreReq=11710 WatchAdResumeSeasonScoreReq value
     * @property {number} WatchAdResumeSeasonScoreRsp=11711 WatchAdResumeSeasonScoreRsp value
     * @property {number} SwitchEmotionReq=11728 SwitchEmotionReq value
     * @property {number} SwitchEmotionRsp=11729 SwitchEmotionRsp value
     * @property {number} BuyEmotionReq=11730 BuyEmotionReq value
     * @property {number} BuyEmotionRsp=11731 BuyEmotionRsp value
     * @property {number} GetBattleMapReq=11732 GetBattleMapReq value
     * @property {number} GetBattleMapRsp=11733 GetBattleMapRsp value
     * @property {number} ReplaceBattleMapReq=11734 ReplaceBattleMapReq value
     * @property {number} ReplaceBattleMapRsp=11735 ReplaceBattleMapRsp value
     * @property {number} ScrollNoticeReq=11736 ScrollNoticeReq value
     * @property {number} ScrollNoticeRsp=11737 ScrollNoticeRsp value
     * @property {number} LimitActivityReq=11738 LimitActivityReq value
     * @property {number} LimitActivityRsp=11739 LimitActivityRsp value
     * @property {number} GrowFundGetAwardReq=11740 GrowFundGetAwardReq value
     * @property {number} GrowFundGetAwardRsp=11741 GrowFundGetAwardRsp value
     * @property {number} ActivityRechargeRsp=11742 ActivityRechargeRsp value
     * @property {number} ChangeActivityRsp=11743 ChangeActivityRsp value
     * @property {number} BoxAwardSelectReq=11744 BoxAwardSelectReq value
     * @property {number} BoxAwardSelectRsp=11745 BoxAwardSelectRsp value
     * @property {number} DailyShareInviteReq=11756 DailyShareInviteReq value
     * @property {number} DailyShareInviteRsp=11757 DailyShareInviteRsp value
     * @property {number} GetDailyShareInviteRewardReq=11758 GetDailyShareInviteRewardReq value
     * @property {number} GetDailyShareInviteRewardRsp=11759 GetDailyShareInviteRewardRsp value
     * @property {number} PushDailyShareInviteTips=11760 PushDailyShareInviteTips value
     * @property {number} LookADAddBoxSpeedUpTimeInfoReq=11761 LookADAddBoxSpeedUpTimeInfoReq value
     * @property {number} LookADAddBoxSpeedUpTimeInfoRsp=11762 LookADAddBoxSpeedUpTimeInfoRsp value
     * @property {number} LookADAddBoxSpeedUpTimeReq=11763 LookADAddBoxSpeedUpTimeReq value
     * @property {number} LookADAddBoxSpeedUpTimeRsp=11764 LookADAddBoxSpeedUpTimeRsp value
     * @property {number} GetOneYuanToBuyInfoReq=11765 GetOneYuanToBuyInfoReq value
     * @property {number} GetOneYuanToBuyInfoRsp=11766 GetOneYuanToBuyInfoRsp value
     * @property {number} ReceiveOneYuanRewardReq=11767 ReceiveOneYuanRewardReq value
     * @property {number} ReceiveOneYuanRewardRsp=11768 ReceiveOneYuanRewardRsp value
     * @property {number} CostSomeThingToGetAvdRewardReq=11769 CostSomeThingToGetAvdRewardReq value
     * @property {number} CostSomeThingToGetAvdRewardRsp=11770 CostSomeThingToGetAvdRewardRsp value
     * @property {number} SharePointEventReported=11771 SharePointEventReported value
     * @property {number} GetDiscountsGiftBagInfoReq=11772 GetDiscountsGiftBagInfoReq value
     * @property {number} GetDiscountsGiftBagInfoRsp=11773 GetDiscountsGiftBagInfoRsp value
     * @property {number} ReceiveDiscountsGiftBagRewardReq=11774 ReceiveDiscountsGiftBagRewardReq value
     * @property {number} ReceiveDiscountsGiftBagRewardRsp=11775 ReceiveDiscountsGiftBagRewardRsp value
     * @property {number} GetMembershipRewardReq=11776 GetMembershipRewardReq value
     * @property {number} GetMembershipRewardRsp=11777 GetMembershipRewardRsp value
     * @property {number} HeroLoadTaskListReq=11778 HeroLoadTaskListReq value
     * @property {number} HeroLoadTaskListRsp=11779 HeroLoadTaskListRsp value
     * @property {number} ReceiveHeroLoadTaskRewardReq=11780 ReceiveHeroLoadTaskRewardReq value
     * @property {number} ReceiveHeroLoadTaskRewardRsp=11781 ReceiveHeroLoadTaskRewardRsp value
     * @property {number} ReceiveHeroLoadTaskStepRewardReq=11782 ReceiveHeroLoadTaskStepRewardReq value
     * @property {number} ReceiveHeroLoadTaskStepRewardRsp=11783 ReceiveHeroLoadTaskStepRewardRsp value
     * @property {number} PushHeroLoadTaskUpate=11784 PushHeroLoadTaskUpate value
     * @property {number} ReceiveUnpackRebateCardReq=11785 ReceiveUnpackRebateCardReq value
     * @property {number} ReceiveUnpackRebateCardRsp=11786 ReceiveUnpackRebateCardRsp value
     * @property {number} GetQuestionReq=11787 GetQuestionReq value
     * @property {number} GetQuestionRsp=11788 GetQuestionRsp value
     * @property {number} SubmitQuestionReceiveRewardReq=11789 SubmitQuestionReceiveRewardReq value
     * @property {number} SubmitQuestionReceiveRewardRsp=11790 SubmitQuestionReceiveRewardRsp value
     * @property {number} ReportedFirstCreateRoleReq=11791 ReportedFirstCreateRoleReq value
     * @property {number} SearchDoubleEnergyInfoReq=11792 SearchDoubleEnergyInfoReq value
     * @property {number} SearchDoubleEnergyInfoRsp=11793 SearchDoubleEnergyInfoRsp value
     * @property {number} SearchSpringFestivalInfoReq=11794 SearchSpringFestivalInfoReq value
     * @property {number} SearchSpringFestivalInfoRsp=11795 SearchSpringFestivalInfoRsp value
     * @property {number} ReceiveSpringFestivalRewardReq=11796 ReceiveSpringFestivalRewardReq value
     * @property {number} ReceiveSpringFestivalRewardRsp=11797 ReceiveSpringFestivalRewardRsp value
     * @property {number} OverBagGiftReq=11798 OverBagGiftReq value
     * @property {number} OverBagGiftRsp=11799 OverBagGiftRsp value
     * @property {number} BuyOverBagGiftReq=11800 BuyOverBagGiftReq value
     * @property {number} BuyOverBagGiftRsp=11801 BuyOverBagGiftRsp value
     * @property {number} PushOverBagGift=11802 PushOverBagGift value
     * @property {number} PushSelectCardBySelfRsp=11803 PushSelectCardBySelfRsp value
     * @property {number} SelectCardBySelfReq=11804 SelectCardBySelfReq value
     * @property {number} SelectCardBySelfRsp=11805 SelectCardBySelfRsp value
     * @property {number} ChatStartPlaceHolder=11815 ChatStartPlaceHolder value
     * @property {number} ChatMsgPush=11816 ChatMsgPush value
     * @property {number} ChatSendMessageReq=11817 ChatSendMessageReq value
     * @property {number} ChatSendMessageRsp=11818 ChatSendMessageRsp value
     * @property {number} ChatSendEmojiReq=11819 ChatSendEmojiReq value
     * @property {number} ChatSendEmojiRsp=11820 ChatSendEmojiRsp value
     * @property {number} GetChatCdReq=11821 GetChatCdReq value
     * @property {number} GetChatCdRsp=11822 GetChatCdRsp value
     * @property {number} ChatSendShareCardsReq=11823 ChatSendShareCardsReq value
     * @property {number} ChatSendShareCardsRsp=11824 ChatSendShareCardsRsp value
     * @property {number} GetFriendOnlineStateListReq=11825 GetFriendOnlineStateListReq value
     * @property {number} GetFriendOnlineStateListRsp=11826 GetFriendOnlineStateListRsp value
     * @property {number} CheckPlayerIsMyFriendReq=11827 CheckPlayerIsMyFriendReq value
     * @property {number} CheckPlayerIsMyFriendRsp=11828 CheckPlayerIsMyFriendRsp value
     * @property {number} ChatEndPlaceHolder=11839 ChatEndPlaceHolder value
     * @property {number} GetPickedGiftBagInfoReq=11840 GetPickedGiftBagInfoReq value
     * @property {number} GetPickedGiftBagInfoRsp=11841 GetPickedGiftBagInfoRsp value
     * @property {number} RefreshPickedGiftBagReq=11842 RefreshPickedGiftBagReq value
     * @property {number} RefreshPickedGiftBagRsp=11843 RefreshPickedGiftBagRsp value
     * @property {number} BuyPickedGiftBagReq=11844 BuyPickedGiftBagReq value
     * @property {number} BuyPickedGiftBagRsp=11845 BuyPickedGiftBagRsp value
     * @property {number} PickedGiftBagEndPlaceHolder=11850 PickedGiftBagEndPlaceHolder value
     * @property {number} LuckySupplyReq=11851 LuckySupplyReq value
     * @property {number} LuckySupplyRsp=11852 LuckySupplyRsp value
     * @property {number} LuckySupplyGetAwardReq=11853 LuckySupplyGetAwardReq value
     * @property {number} LuckySupplyGetAwardRsp=11854 LuckySupplyGetAwardRsp value
     * @property {number} GachaReq=11855 GachaReq value
     * @property {number} GachaRsp=11856 GachaRsp value
     * @property {number} GachaBoxReq=11857 GachaBoxReq value
     * @property {number} GachaBoxRsp=11858 GachaBoxRsp value
     * @property {number} VictoryBoxInfoReq=11859 VictoryBoxInfoReq value
     * @property {number} VictoryBoxInfoRsp=11860 VictoryBoxInfoRsp value
     * @property {number} VictoryBoxGetAwardReq=11861 VictoryBoxGetAwardReq value
     * @property {number} VictoryBoxGetAwardRsp=11862 VictoryBoxGetAwardRsp value
     * @property {number} VictoryBoxRefuseReq=11863 VictoryBoxRefuseReq value
     * @property {number} VictoryBoxRefuseRsp=11864 VictoryBoxRefuseRsp value
     * @property {number} WeeklyAdBoxInfoReq=11865 WeeklyAdBoxInfoReq value
     * @property {number} WeeklyAdBoxInfoRsp=11866 WeeklyAdBoxInfoRsp value
     * @property {number} WeeklyAdBoxGetAwardReq=11867 WeeklyAdBoxGetAwardReq value
     * @property {number} WeeklyAdBoxGetAwardRsp=11868 WeeklyAdBoxGetAwardRsp value
     * @property {number} CretePrivateRoomReq=11871 CretePrivateRoomReq value
     * @property {number} CretePrivateRoomRsp=11872 CretePrivateRoomRsp value
     * @property {number} JoinPrivateRoomReq=11873 JoinPrivateRoomReq value
     * @property {number} JoinPrivateRoomRsp=11874 JoinPrivateRoomRsp value
     * @property {number} SeasonOverRsp=11875 SeasonOverRsp value
     * @property {number} SeasonResetRsp=11876 SeasonResetRsp value
     * @property {number} SeasonRewardMsgRsp=11877 SeasonRewardMsgRsp value
     * @property {number} GetSeasonRewardReq=11878 GetSeasonRewardReq value
     * @property {number} GetSeasonRewardRsp=11879 GetSeasonRewardRsp value
     * @property {number} BountyPlayerNumberChangedPush=11880 BountyPlayerNumberChangedPush value
     * @property {number} BountyRewardPush=11881 BountyRewardPush value
     * @property {number} RetrieveBountyRewardReq=11882 RetrieveBountyRewardReq value
     * @property {number} RetrieveBountyRewardRsp=11883 RetrieveBountyRewardRsp value
     * @property {number} GetBountyStatReq=11884 GetBountyStatReq value
     * @property {number} GetBountyStatRsp=11885 GetBountyStatRsp value
     * @property {number} ClearBountyStatReq=11886 ClearBountyStatReq value
     * @property {number} ClearBountyStatRsp=11887 ClearBountyStatRsp value
     * @property {number} GetContinuousGiftReq=11888 GetContinuousGiftReq value
     * @property {number} GetContinuousGiftRsp=11889 GetContinuousGiftRsp value
     * @property {number} BuyContinuousGiftReq=11890 BuyContinuousGiftReq value
     * @property {number} BuyContinuousGiftRsp=11891 BuyContinuousGiftRsp value
     * @property {number} GetFirstRechargeGiftReq=11892 GetFirstRechargeGiftReq value
     * @property {number} GetFirstRechargeGiftRsp=11893 GetFirstRechargeGiftRsp value
     * @property {number} BuyFirstRechargeGiftPush=11894 BuyFirstRechargeGiftPush value
     */
    proto.Ptl = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "UNSPECIFIED"] = 0;
        values[valuesById[10000] = "Ping"] = 10000;
        values[valuesById[60000] = "Echo"] = 60000;
        values[valuesById[10001] = "LoginReq"] = 10001;
        values[valuesById[10002] = "LoginRsp"] = 10002;
        values[valuesById[10003] = "CreatRoleReq"] = 10003;
        values[valuesById[10004] = "CreatRoleRsp"] = 10004;
        values[valuesById[10005] = "SyncRole"] = 10005;
        values[valuesById[10006] = "ChangeDecksReq"] = 10006;
        values[valuesById[10007] = "ChangeDecksRsp"] = 10007;
        values[valuesById[10008] = "GetRankScoreRewardReq"] = 10008;
        values[valuesById[10009] = "GetRankScoreRewardRsp"] = 10009;
        values[valuesById[10010] = "GetBossBoxRewardReq"] = 10010;
        values[valuesById[10011] = "GetBossBoxRewardRsp"] = 10011;
        values[valuesById[10012] = "CardLevelUpReq"] = 10012;
        values[valuesById[10013] = "CardLevelUpRsp"] = 10013;
        values[valuesById[10014] = "ChangeIndexCardReq"] = 10014;
        values[valuesById[10015] = "ChangeIndexCardRsp"] = 10015;
        values[valuesById[10016] = "GetCooperateBoxRewardReq"] = 10016;
        values[valuesById[10017] = "GetCooperateBoxRewardRsp"] = 10017;
        values[valuesById[10018] = "UpdateItemData"] = 10018;
        values[valuesById[10019] = "RemoveItemData"] = 10019;
        values[valuesById[10020] = "SyncRoleGold"] = 10020;
        values[valuesById[10021] = "SyncRoleDiamond"] = 10021;
        values[valuesById[10022] = "GetShopInfoReq"] = 10022;
        values[valuesById[10023] = "GetShopInfoRsp"] = 10023;
        values[valuesById[10024] = "BuyShopGoodsReq"] = 10024;
        values[valuesById[10025] = "BuyShopGoodsRsp"] = 10025;
        values[valuesById[10026] = "FreeRefreshSpecialGoodsReq"] = 10026;
        values[valuesById[10027] = "FreeRefreshSpecialGoodsRsp"] = 10027;
        values[valuesById[10028] = "GetRankPackageInfoReq"] = 10028;
        values[valuesById[10029] = "GetRankPackageInfoRsp"] = 10029;
        values[valuesById[10030] = "UnlockRankBoxReq"] = 10030;
        values[valuesById[10031] = "UnlockRankBoxRsp"] = 10031;
        values[valuesById[10032] = "ReserveRankBoxReq"] = 10032;
        values[valuesById[10033] = "ReserveRankBoxRsp"] = 10033;
        values[valuesById[10034] = "OpenRankBoxReq"] = 10034;
        values[valuesById[10035] = "OpenRankBoxRsp"] = 10035;
        values[valuesById[10036] = "ImmediatelyOpenRankBoxReq"] = 10036;
        values[valuesById[10037] = "ImmediatelyOpenRankBoxRsp"] = 10037;
        values[valuesById[10038] = "PushPreventIndulge"] = 10038;
        values[valuesById[10039] = "PushDailyRefresh"] = 10039;
        values[valuesById[10040] = "SetLordReq"] = 10040;
        values[valuesById[10041] = "SetLordRsp"] = 10041;
        values[valuesById[10042] = "SetTalentReq"] = 10042;
        values[valuesById[10043] = "SetTalentRsp"] = 10043;
        values[valuesById[10044] = "GetPveClearRewardReq"] = 10044;
        values[valuesById[10045] = "GetPveClearRewardRsp"] = 10045;
        values[valuesById[10046] = "GetPveDailyRewardReq"] = 10046;
        values[valuesById[10047] = "GetPveDailyRewardRsp"] = 10047;
        values[valuesById[10048] = "BuyPveCountReq"] = 10048;
        values[valuesById[10049] = "BuyPveCountRsp"] = 10049;
        values[valuesById[10050] = "GetPveStatusReq"] = 10050;
        values[valuesById[10051] = "GetPveStatusRsp"] = 10051;
        values[valuesById[10500] = "GmAddCupReq"] = 10500;
        values[valuesById[10501] = "GmAddCupRsp"] = 10501;
        values[valuesById[10998] = "ReconnetFightReq"] = 10998;
        values[valuesById[10999] = "ReconnetFightRsp"] = 10999;
        values[valuesById[11000] = "StartMatchFightReq"] = 11000;
        values[valuesById[11001] = "StartMatchFightRsp"] = 11001;
        values[valuesById[11002] = "PullCardInfoReq"] = 11002;
        values[valuesById[11003] = "PullCardInfoRsp"] = 11003;
        values[valuesById[11004] = "PullCardReq"] = 11004;
        values[valuesById[11005] = "PullCardRsp"] = 11005;
        values[valuesById[11006] = "ChangeTeamIndexReq"] = 11006;
        values[valuesById[11007] = "ChangeTeamIndexRsp"] = 11007;
        values[valuesById[11010] = "CheckServerUTCTime"] = 11010;
        values[valuesById[11011] = "ChangeNameReq"] = 11011;
        values[valuesById[11012] = "ChangeNameRsp"] = 11012;
        values[valuesById[11013] = "HowManyTimesChangeNameReq"] = 11013;
        values[valuesById[11014] = "HowManyTimesChangeNameRsp"] = 11014;
        values[valuesById[11033] = "SyncRoleExpAndLevel"] = 11033;
        values[valuesById[11045] = "OpenRankRewardReq"] = 11045;
        values[valuesById[11046] = "OpenRankRewardRsp"] = 11046;
        values[valuesById[11047] = "TaskInfoReq"] = 11047;
        values[valuesById[11048] = "TaskInfoRsp"] = 11048;
        values[valuesById[11049] = "TaskGetGoalBoxReq"] = 11049;
        values[valuesById[11050] = "TaskGetGoalBoxRsp"] = 11050;
        values[valuesById[11051] = "TaskGetGiftReq"] = 11051;
        values[valuesById[11052] = "TaskGetGiftRsp"] = 11052;
        values[valuesById[11053] = "TaskGetRewardReq"] = 11053;
        values[valuesById[11054] = "TaskGetRewardRsp"] = 11054;
        values[valuesById[11055] = "TaskRefreshReq"] = 11055;
        values[valuesById[11056] = "TaskRefreshRsp"] = 11056;
        values[valuesById[11057] = "TaskPushTaskInfo"] = 11057;
        values[valuesById[11067] = "CancelMatchFightReq"] = 11067;
        values[valuesById[11068] = "CancelMatchFightRsp"] = 11068;
        values[valuesById[11073] = "PlayerInfoReq"] = 11073;
        values[valuesById[11074] = "PlayerInfoRsp"] = 11074;
        values[valuesById[11075] = "BossBoxInfoReq"] = 11075;
        values[valuesById[11076] = "BossBoxInfoRsp"] = 11076;
        values[valuesById[11077] = "BossBoxUnlockLvReq"] = 11077;
        values[valuesById[11078] = "BossBoxUnlockLvRsp"] = 11078;
        values[valuesById[11079] = "BossBoxGetLvRewardReq"] = 11079;
        values[valuesById[11080] = "BossBoxGetLvRewardRsp"] = 11080;
        values[valuesById[11081] = "ResetFightRecordReq"] = 11081;
        values[valuesById[11082] = "ResetFightRecordRsp"] = 11082;
        values[valuesById[11201] = "CreateAllianceReq"] = 11201;
        values[valuesById[11202] = "CreateAllianceRsp"] = 11202;
        values[valuesById[11203] = "JoinAllianceReq"] = 11203;
        values[valuesById[11204] = "JoinAllianceRsp"] = 11204;
        values[valuesById[11205] = "QuitAllianceReq"] = 11205;
        values[valuesById[11206] = "QuitAllianceRsp"] = 11206;
        values[valuesById[11207] = "DealAllianceJoinReq"] = 11207;
        values[valuesById[11208] = "DealAllianceJoinRsp"] = 11208;
        values[valuesById[11209] = "AllianceSetPostRankReq"] = 11209;
        values[valuesById[11210] = "AllianceSetPostRankRsp"] = 11210;
        values[valuesById[11211] = "QueryAllianceInfoReq"] = 11211;
        values[valuesById[11212] = "QueryAllianceInfoRsp"] = 11212;
        values[valuesById[11213] = "SearchAllianceReq"] = 11213;
        values[valuesById[11214] = "SearchAllianceRsp"] = 11214;
        values[valuesById[11215] = "RecommendAllianceReq"] = 11215;
        values[valuesById[11216] = "RecommendAllianceRsp"] = 11216;
        values[valuesById[11217] = "ModifyAllianceInfoReq"] = 11217;
        values[valuesById[11218] = "ModifyAllianceInfoRsp"] = 11218;
        values[valuesById[11219] = "ExpelMemberReq"] = 11219;
        values[valuesById[11220] = "ExpelMemberRsp"] = 11220;
        values[valuesById[11221] = "AllianceMsgPush"] = 11221;
        values[valuesById[11222] = "SyncRoleAllianceData"] = 11222;
        values[valuesById[11223] = "AllianceCardRequestDonateReq"] = 11223;
        values[valuesById[11224] = "AllianceCardRequestDonateRsp"] = 11224;
        values[valuesById[11225] = "AllianceDonateCardReq"] = 11225;
        values[valuesById[11226] = "AllianceDonateCardRsp"] = 11226;
        values[valuesById[11231] = "AllianceFightInvitationReq"] = 11231;
        values[valuesById[11233] = "AllianceFightAcceptReq"] = 11233;
        values[valuesById[11234] = "AllianceFightAcceptRsp"] = 11234;
        values[valuesById[11252] = "PushJoinOrExpelAllianceMsg"] = 11252;
        values[valuesById[11253] = "PushSupportInfo"] = 11253;
        values[valuesById[11254] = "PushRequestSupportInfo"] = 11254;
        values[valuesById[11255] = "PushAllianceExpelMember"] = 11255;
        values[valuesById[11256] = "PushAllianceFightInvite"] = 11256;
        values[valuesById[11257] = "PushAllianceFightStart"] = 11257;
        values[valuesById[11258] = "PushAllianceFightEnd"] = 11258;
        values[valuesById[11259] = "PushRecentlyAllianceFightInfo"] = 11259;
        values[valuesById[11260] = "PushCancelAllianceFightInvite"] = 11260;
        values[valuesById[11261] = "PushAllianceApplyMessage"] = 11261;
        values[valuesById[11262] = "PushAllianceLeaderChange"] = 11262;
        values[valuesById[11301] = "BuyDemonPassReq"] = 11301;
        values[valuesById[11302] = "BuyDemonPassRsp"] = 11302;
        values[valuesById[11303] = "SimpleGmReq"] = 11303;
        values[valuesById[11304] = "SimpleGmRsp"] = 11304;
        values[valuesById[11401] = "ChallengeGetInfoReq"] = 11401;
        values[valuesById[11402] = "ChallengeGetInfoRsp"] = 11402;
        values[valuesById[11403] = "ChallengeChangeDeckReq"] = 11403;
        values[valuesById[11404] = "ChallengeChangeDeckRsp"] = 11404;
        values[valuesById[11405] = "ChallengeSetLordReq"] = 11405;
        values[valuesById[11406] = "ChallengeSetLordRsp"] = 11406;
        values[valuesById[11407] = "ChallengeSetTalentReq"] = 11407;
        values[valuesById[11408] = "ChallengeSetTalentRsp"] = 11408;
        values[valuesById[11411] = "ChallengeCountResetReq"] = 11411;
        values[valuesById[11412] = "ChallengeCountResetRsp"] = 11412;
        values[valuesById[11413] = "ChallengeDoRewardReq"] = 11413;
        values[valuesById[11414] = "ChallengeDoRewardRsp"] = 11414;
        values[valuesById[11463] = "GetPvpRankingListReq"] = 11463;
        values[valuesById[11464] = "GetPvpRankingListRsp"] = 11464;
        values[valuesById[11465] = "GetCooperationRankingListReq"] = 11465;
        values[valuesById[11466] = "GetCooperationRankingListRsp"] = 11466;
        values[valuesById[11467] = "GetAllianceRankingListReq"] = 11467;
        values[valuesById[11468] = "GetAllianceRankingListRsp"] = 11468;
        values[valuesById[11483] = "ExchangeCodeReq"] = 11483;
        values[valuesById[11484] = "ExchangeCodeRsp"] = 11484;
        values[valuesById[11493] = "GetMailInfoListReq"] = 11493;
        values[valuesById[11494] = "GetMailInfoListRsp"] = 11494;
        values[valuesById[11495] = "ReceiveMailRewardReq"] = 11495;
        values[valuesById[11496] = "ReceiveMailRewardRsp"] = 11496;
        values[valuesById[11497] = "ReadMailReq"] = 11497;
        values[valuesById[11499] = "RemoveReadMailReq"] = 11499;
        values[valuesById[11500] = "RemoveReadMailRsp"] = 11500;
        values[valuesById[11501] = "PushNewMailTip"] = 11501;
        values[valuesById[11503] = "WriteAllianceMailReq"] = 11503;
        values[valuesById[11504] = "WriteAllianceMailRsp"] = 11504;
        values[valuesById[11513] = "GetFriendInfoListReq"] = 11513;
        values[valuesById[11514] = "GetFriendInfoListRsp"] = 11514;
        values[valuesById[11515] = "GetFriendApplyListReq"] = 11515;
        values[valuesById[11516] = "GetFriendApplyListRsp"] = 11516;
        values[valuesById[11517] = "PushNewFriendApplyInfo"] = 11517;
        values[valuesById[11518] = "OperatorFriendApplyReq"] = 11518;
        values[valuesById[11519] = "OperatorFriendApplyRsp"] = 11519;
        values[valuesById[11520] = "AddFriendReq"] = 11520;
        values[valuesById[11521] = "AddFriendRsp"] = 11521;
        values[valuesById[11522] = "DeleteFriendReq"] = 11522;
        values[valuesById[11523] = "DeleteFriendRsp"] = 11523;
        values[valuesById[11524] = "ChangeFriendInfo"] = 11524;
        values[valuesById[11525] = "InvitationFriendFightReq"] = 11525;
        values[valuesById[11526] = "InvitationFriendFightRsp"] = 11526;
        values[valuesById[11527] = "PushInvitationFriendFight"] = 11527;
        values[valuesById[11528] = "OperatorFriendFightInvitationReq"] = 11528;
        values[valuesById[11529] = "OperatorFriendFightInvitationRsp"] = 11529;
        values[valuesById[11530] = "FightLogReq"] = 11530;
        values[valuesById[11531] = "FightLogRsp"] = 11531;
        values[valuesById[11532] = "CopyDeckReq"] = 11532;
        values[valuesById[11533] = "CopyDeckRsp"] = 11533;
        values[valuesById[11534] = "ReportReq"] = 11534;
        values[valuesById[11535] = "ReportRsp"] = 11535;
        values[valuesById[11540] = "PushCancelFriendFight"] = 11540;
        values[valuesById[11551] = "PushPveForbidInfo"] = 11551;
        values[valuesById[11561] = "RainbowTaskListReq"] = 11561;
        values[valuesById[11562] = "RainbowTaskListRsp"] = 11562;
        values[valuesById[11563] = "UpLvRainbowReq"] = 11563;
        values[valuesById[11564] = "UpLvRainbowRsp"] = 11564;
        values[valuesById[11565] = "ImmFinishRainbowTaskReq"] = 11565;
        values[valuesById[11566] = "ImmFinishRainbowTaskRsp"] = 11566;
        values[valuesById[11567] = "RefreshRainbowTaskReq"] = 11567;
        values[valuesById[11568] = "RefreshRainbowTaskRsp"] = 11568;
        values[valuesById[11569] = "ReceiveRainbowRewardReq"] = 11569;
        values[valuesById[11570] = "ReceiveRainbowRewardRsp"] = 11570;
        values[valuesById[11571] = "PushRainbowTaskUpdate"] = 11571;
        values[valuesById[11572] = "PushRainbowTaskExpireRefresh"] = 11572;
        values[valuesById[11573] = "PushRainbowTaskRedDotStatus"] = 11573;
        values[valuesById[11583] = "GroutTaskListReq"] = 11583;
        values[valuesById[11584] = "GroutTaskListRsp"] = 11584;
        values[valuesById[11585] = "ReceiveGroutTaskRewardReq"] = 11585;
        values[valuesById[11586] = "ReceiveGroutTaskRewardRsp"] = 11586;
        values[valuesById[11587] = "ReceiveGroutTaskStepRewardReq"] = 11587;
        values[valuesById[11588] = "ReceiveGroutTaskStepRewardRsp"] = 11588;
        values[valuesById[11589] = "PushGroutTaskUpate"] = 11589;
        values[valuesById[11673] = "PushSevenDaySignInData"] = 11673;
        values[valuesById[11674] = "ReceiveSevenDaySignInRewardReq"] = 11674;
        values[valuesById[11675] = "ReceiveSevenDaySignInRewardRsp"] = 11675;
        values[valuesById[11676] = "GetGiftBagReq"] = 11676;
        values[valuesById[11677] = "GetGiftBagRsp"] = 11677;
        values[valuesById[11678] = "RefreshDayGiftBagReq"] = 11678;
        values[valuesById[11679] = "RefreshDayGiftBagRsp"] = 11679;
        values[valuesById[11680] = "BuyGiftDayReq"] = 11680;
        values[valuesById[11681] = "BuyGiftDayRsp"] = 11681;
        values[valuesById[11682] = "NewPlayerGiftBagReq"] = 11682;
        values[valuesById[11683] = "NewPlayerGiftBagRsp"] = 11683;
        values[valuesById[11684] = "BuyNewPlayerGiftBagReq"] = 11684;
        values[valuesById[11685] = "BuyNewPlayerGiftBagRsp"] = 11685;
        values[valuesById[11686] = "PushNewExGiftBag"] = 11686;
        values[valuesById[11687] = "PayStartReq"] = 11687;
        values[valuesById[11688] = "PayStartRsp"] = 11688;
        values[valuesById[11689] = "PayEndReq"] = 11689;
        values[valuesById[11690] = "PayEndRsp"] = 11690;
        values[valuesById[11691] = "SetGid"] = 11691;
        values[valuesById[11692] = "KickOff"] = 11692;
        values[valuesById[11693] = "SetWechatUserInfo"] = 11693;
        values[valuesById[11694] = "PrePayWechatRsp"] = 11694;
        values[valuesById[11700] = "ReportedAdvertTypeReq"] = 11700;
        values[valuesById[11701] = "SharedGameReq"] = 11701;
        values[valuesById[11702] = "SharedGameRsp"] = 11702;
        values[valuesById[11703] = "GetSharedAwardReq"] = 11703;
        values[valuesById[11704] = "GetSharedAwardRsp"] = 11704;
        values[valuesById[11705] = "PushSharedOfToday"] = 11705;
        values[valuesById[11706] = "SharedListReq"] = 11706;
        values[valuesById[11707] = "SharedListRsp"] = 11707;
        values[valuesById[11708] = "AfterSharedRewardReq"] = 11708;
        values[valuesById[11709] = "AfterSharedRewardRsp"] = 11709;
        values[valuesById[11710] = "WatchAdResumeSeasonScoreReq"] = 11710;
        values[valuesById[11711] = "WatchAdResumeSeasonScoreRsp"] = 11711;
        values[valuesById[11728] = "SwitchEmotionReq"] = 11728;
        values[valuesById[11729] = "SwitchEmotionRsp"] = 11729;
        values[valuesById[11730] = "BuyEmotionReq"] = 11730;
        values[valuesById[11731] = "BuyEmotionRsp"] = 11731;
        values[valuesById[11732] = "GetBattleMapReq"] = 11732;
        values[valuesById[11733] = "GetBattleMapRsp"] = 11733;
        values[valuesById[11734] = "ReplaceBattleMapReq"] = 11734;
        values[valuesById[11735] = "ReplaceBattleMapRsp"] = 11735;
        values[valuesById[11736] = "ScrollNoticeReq"] = 11736;
        values[valuesById[11737] = "ScrollNoticeRsp"] = 11737;
        values[valuesById[11738] = "LimitActivityReq"] = 11738;
        values[valuesById[11739] = "LimitActivityRsp"] = 11739;
        values[valuesById[11740] = "GrowFundGetAwardReq"] = 11740;
        values[valuesById[11741] = "GrowFundGetAwardRsp"] = 11741;
        values[valuesById[11742] = "ActivityRechargeRsp"] = 11742;
        values[valuesById[11743] = "ChangeActivityRsp"] = 11743;
        values[valuesById[11744] = "BoxAwardSelectReq"] = 11744;
        values[valuesById[11745] = "BoxAwardSelectRsp"] = 11745;
        values[valuesById[11756] = "DailyShareInviteReq"] = 11756;
        values[valuesById[11757] = "DailyShareInviteRsp"] = 11757;
        values[valuesById[11758] = "GetDailyShareInviteRewardReq"] = 11758;
        values[valuesById[11759] = "GetDailyShareInviteRewardRsp"] = 11759;
        values[valuesById[11760] = "PushDailyShareInviteTips"] = 11760;
        values[valuesById[11761] = "LookADAddBoxSpeedUpTimeInfoReq"] = 11761;
        values[valuesById[11762] = "LookADAddBoxSpeedUpTimeInfoRsp"] = 11762;
        values[valuesById[11763] = "LookADAddBoxSpeedUpTimeReq"] = 11763;
        values[valuesById[11764] = "LookADAddBoxSpeedUpTimeRsp"] = 11764;
        values[valuesById[11765] = "GetOneYuanToBuyInfoReq"] = 11765;
        values[valuesById[11766] = "GetOneYuanToBuyInfoRsp"] = 11766;
        values[valuesById[11767] = "ReceiveOneYuanRewardReq"] = 11767;
        values[valuesById[11768] = "ReceiveOneYuanRewardRsp"] = 11768;
        values[valuesById[11769] = "CostSomeThingToGetAvdRewardReq"] = 11769;
        values[valuesById[11770] = "CostSomeThingToGetAvdRewardRsp"] = 11770;
        values[valuesById[11771] = "SharePointEventReported"] = 11771;
        values[valuesById[11772] = "GetDiscountsGiftBagInfoReq"] = 11772;
        values[valuesById[11773] = "GetDiscountsGiftBagInfoRsp"] = 11773;
        values[valuesById[11774] = "ReceiveDiscountsGiftBagRewardReq"] = 11774;
        values[valuesById[11775] = "ReceiveDiscountsGiftBagRewardRsp"] = 11775;
        values[valuesById[11776] = "GetMembershipRewardReq"] = 11776;
        values[valuesById[11777] = "GetMembershipRewardRsp"] = 11777;
        values[valuesById[11778] = "HeroLoadTaskListReq"] = 11778;
        values[valuesById[11779] = "HeroLoadTaskListRsp"] = 11779;
        values[valuesById[11780] = "ReceiveHeroLoadTaskRewardReq"] = 11780;
        values[valuesById[11781] = "ReceiveHeroLoadTaskRewardRsp"] = 11781;
        values[valuesById[11782] = "ReceiveHeroLoadTaskStepRewardReq"] = 11782;
        values[valuesById[11783] = "ReceiveHeroLoadTaskStepRewardRsp"] = 11783;
        values[valuesById[11784] = "PushHeroLoadTaskUpate"] = 11784;
        values[valuesById[11785] = "ReceiveUnpackRebateCardReq"] = 11785;
        values[valuesById[11786] = "ReceiveUnpackRebateCardRsp"] = 11786;
        values[valuesById[11787] = "GetQuestionReq"] = 11787;
        values[valuesById[11788] = "GetQuestionRsp"] = 11788;
        values[valuesById[11789] = "SubmitQuestionReceiveRewardReq"] = 11789;
        values[valuesById[11790] = "SubmitQuestionReceiveRewardRsp"] = 11790;
        values[valuesById[11791] = "ReportedFirstCreateRoleReq"] = 11791;
        values[valuesById[11792] = "SearchDoubleEnergyInfoReq"] = 11792;
        values[valuesById[11793] = "SearchDoubleEnergyInfoRsp"] = 11793;
        values[valuesById[11794] = "SearchSpringFestivalInfoReq"] = 11794;
        values[valuesById[11795] = "SearchSpringFestivalInfoRsp"] = 11795;
        values[valuesById[11796] = "ReceiveSpringFestivalRewardReq"] = 11796;
        values[valuesById[11797] = "ReceiveSpringFestivalRewardRsp"] = 11797;
        values[valuesById[11798] = "OverBagGiftReq"] = 11798;
        values[valuesById[11799] = "OverBagGiftRsp"] = 11799;
        values[valuesById[11800] = "BuyOverBagGiftReq"] = 11800;
        values[valuesById[11801] = "BuyOverBagGiftRsp"] = 11801;
        values[valuesById[11802] = "PushOverBagGift"] = 11802;
        values[valuesById[11803] = "PushSelectCardBySelfRsp"] = 11803;
        values[valuesById[11804] = "SelectCardBySelfReq"] = 11804;
        values[valuesById[11805] = "SelectCardBySelfRsp"] = 11805;
        values[valuesById[11815] = "ChatStartPlaceHolder"] = 11815;
        values[valuesById[11816] = "ChatMsgPush"] = 11816;
        values[valuesById[11817] = "ChatSendMessageReq"] = 11817;
        values[valuesById[11818] = "ChatSendMessageRsp"] = 11818;
        values[valuesById[11819] = "ChatSendEmojiReq"] = 11819;
        values[valuesById[11820] = "ChatSendEmojiRsp"] = 11820;
        values[valuesById[11821] = "GetChatCdReq"] = 11821;
        values[valuesById[11822] = "GetChatCdRsp"] = 11822;
        values[valuesById[11823] = "ChatSendShareCardsReq"] = 11823;
        values[valuesById[11824] = "ChatSendShareCardsRsp"] = 11824;
        values[valuesById[11825] = "GetFriendOnlineStateListReq"] = 11825;
        values[valuesById[11826] = "GetFriendOnlineStateListRsp"] = 11826;
        values[valuesById[11827] = "CheckPlayerIsMyFriendReq"] = 11827;
        values[valuesById[11828] = "CheckPlayerIsMyFriendRsp"] = 11828;
        values[valuesById[11839] = "ChatEndPlaceHolder"] = 11839;
        values[valuesById[11840] = "GetPickedGiftBagInfoReq"] = 11840;
        values[valuesById[11841] = "GetPickedGiftBagInfoRsp"] = 11841;
        values[valuesById[11842] = "RefreshPickedGiftBagReq"] = 11842;
        values[valuesById[11843] = "RefreshPickedGiftBagRsp"] = 11843;
        values[valuesById[11844] = "BuyPickedGiftBagReq"] = 11844;
        values[valuesById[11845] = "BuyPickedGiftBagRsp"] = 11845;
        values[valuesById[11850] = "PickedGiftBagEndPlaceHolder"] = 11850;
        values[valuesById[11851] = "LuckySupplyReq"] = 11851;
        values[valuesById[11852] = "LuckySupplyRsp"] = 11852;
        values[valuesById[11853] = "LuckySupplyGetAwardReq"] = 11853;
        values[valuesById[11854] = "LuckySupplyGetAwardRsp"] = 11854;
        values[valuesById[11855] = "GachaReq"] = 11855;
        values[valuesById[11856] = "GachaRsp"] = 11856;
        values[valuesById[11857] = "GachaBoxReq"] = 11857;
        values[valuesById[11858] = "GachaBoxRsp"] = 11858;
        values[valuesById[11859] = "VictoryBoxInfoReq"] = 11859;
        values[valuesById[11860] = "VictoryBoxInfoRsp"] = 11860;
        values[valuesById[11861] = "VictoryBoxGetAwardReq"] = 11861;
        values[valuesById[11862] = "VictoryBoxGetAwardRsp"] = 11862;
        values[valuesById[11863] = "VictoryBoxRefuseReq"] = 11863;
        values[valuesById[11864] = "VictoryBoxRefuseRsp"] = 11864;
        values[valuesById[11865] = "WeeklyAdBoxInfoReq"] = 11865;
        values[valuesById[11866] = "WeeklyAdBoxInfoRsp"] = 11866;
        values[valuesById[11867] = "WeeklyAdBoxGetAwardReq"] = 11867;
        values[valuesById[11868] = "WeeklyAdBoxGetAwardRsp"] = 11868;
        values[valuesById[11871] = "CretePrivateRoomReq"] = 11871;
        values[valuesById[11872] = "CretePrivateRoomRsp"] = 11872;
        values[valuesById[11873] = "JoinPrivateRoomReq"] = 11873;
        values[valuesById[11874] = "JoinPrivateRoomRsp"] = 11874;
        values[valuesById[11875] = "SeasonOverRsp"] = 11875;
        values[valuesById[11876] = "SeasonResetRsp"] = 11876;
        values[valuesById[11877] = "SeasonRewardMsgRsp"] = 11877;
        values[valuesById[11878] = "GetSeasonRewardReq"] = 11878;
        values[valuesById[11879] = "GetSeasonRewardRsp"] = 11879;
        values[valuesById[11880] = "BountyPlayerNumberChangedPush"] = 11880;
        values[valuesById[11881] = "BountyRewardPush"] = 11881;
        values[valuesById[11882] = "RetrieveBountyRewardReq"] = 11882;
        values[valuesById[11883] = "RetrieveBountyRewardRsp"] = 11883;
        values[valuesById[11884] = "GetBountyStatReq"] = 11884;
        values[valuesById[11885] = "GetBountyStatRsp"] = 11885;
        values[valuesById[11886] = "ClearBountyStatReq"] = 11886;
        values[valuesById[11887] = "ClearBountyStatRsp"] = 11887;
        values[valuesById[11888] = "GetContinuousGiftReq"] = 11888;
        values[valuesById[11889] = "GetContinuousGiftRsp"] = 11889;
        values[valuesById[11890] = "BuyContinuousGiftReq"] = 11890;
        values[valuesById[11891] = "BuyContinuousGiftRsp"] = 11891;
        values[valuesById[11892] = "GetFirstRechargeGiftReq"] = 11892;
        values[valuesById[11893] = "GetFirstRechargeGiftRsp"] = 11893;
        values[valuesById[11894] = "BuyFirstRechargeGiftPush"] = 11894;
        return values;
    })();

    /**
     * FightPtl enum.
     * @name proto.FightPtl
     * @enum {number}
     * @property {number} FIGHT_UNSPECIFIED=0 FIGHT_UNSPECIFIED value
     * @property {number} FightReadyReq=60001 FightReadyReq value
     * @property {number} FightReadyRsp=60002 FightReadyRsp value
     * @property {number} FightRandomNum=60004 FightRandomNum value
     * @property {number} FightSyncRandomReq=60005 FightSyncRandomReq value
     * @property {number} FightSyncRandomRsp=60006 FightSyncRandomRsp value
     * @property {number} FightSurrender=60007 FightSurrender value
     * @property {number} FightEnd=60008 FightEnd value
     * @property {number} FightBuildReq=60010 FightBuildReq value
     * @property {number} FightBuildRsp=60011 FightBuildRsp value
     * @property {number} FightCompoundReq=60012 FightCompoundReq value
     * @property {number} FightCompoundRsp=60013 FightCompoundRsp value
     * @property {number} FightStrengthReq=60014 FightStrengthReq value
     * @property {number} FightStrengthRsp=60015 FightStrengthRsp value
     * @property {number} FightSnapshotReq=60016 FightSnapshotReq value
     * @property {number} FightSnapshotRsp=60017 FightSnapshotRsp value
     * @property {number} FightLordSkillReq=60018 FightLordSkillReq value
     * @property {number} FightLordSkillRsp=60019 FightLordSkillRsp value
     * @property {number} FightEmoji=60020 FightEmoji value
     * @property {number} FightEmojiSync=60021 FightEmojiSync value
     * @property {number} FightGmWin=60300 FightGmWin value
     * @property {number} ConstructionPhase=61000 ConstructionPhase value
     * @property {number} CombatPhase=61001 CombatPhase value
     * @property {number} ClientConstructionEnd=61002 ClientConstructionEnd value
     * @property {number} ClientCombatEnd=61003 ClientCombatEnd value
     * @property {number} BountyAllFightDataPush=61004 BountyAllFightDataPush value
     */
    proto.FightPtl = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "FIGHT_UNSPECIFIED"] = 0;
        values[valuesById[60001] = "FightReadyReq"] = 60001;
        values[valuesById[60002] = "FightReadyRsp"] = 60002;
        values[valuesById[60004] = "FightRandomNum"] = 60004;
        values[valuesById[60005] = "FightSyncRandomReq"] = 60005;
        values[valuesById[60006] = "FightSyncRandomRsp"] = 60006;
        values[valuesById[60007] = "FightSurrender"] = 60007;
        values[valuesById[60008] = "FightEnd"] = 60008;
        values[valuesById[60010] = "FightBuildReq"] = 60010;
        values[valuesById[60011] = "FightBuildRsp"] = 60011;
        values[valuesById[60012] = "FightCompoundReq"] = 60012;
        values[valuesById[60013] = "FightCompoundRsp"] = 60013;
        values[valuesById[60014] = "FightStrengthReq"] = 60014;
        values[valuesById[60015] = "FightStrengthRsp"] = 60015;
        values[valuesById[60016] = "FightSnapshotReq"] = 60016;
        values[valuesById[60017] = "FightSnapshotRsp"] = 60017;
        values[valuesById[60018] = "FightLordSkillReq"] = 60018;
        values[valuesById[60019] = "FightLordSkillRsp"] = 60019;
        values[valuesById[60020] = "FightEmoji"] = 60020;
        values[valuesById[60021] = "FightEmojiSync"] = 60021;
        values[valuesById[60300] = "FightGmWin"] = 60300;
        values[valuesById[61000] = "ConstructionPhase"] = 61000;
        values[valuesById[61001] = "CombatPhase"] = 61001;
        values[valuesById[61002] = "ClientConstructionEnd"] = 61002;
        values[valuesById[61003] = "ClientCombatEnd"] = 61003;
        values[valuesById[61004] = "BountyAllFightDataPush"] = 61004;
        return values;
    })();

    /**
     * CommonErrorCode enum.
     * @name proto.CommonErrorCode
     * @enum {number}
     * @property {number} Succeed=0 Succeed value
     * @property {number} Failed=1 Failed value
     */
    proto.CommonErrorCode = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Succeed"] = 0;
        values[valuesById[1] = "Failed"] = 1;
        return values;
    })();

    /**
     * Gender enum.
     * @name proto.Gender
     * @enum {number}
     * @property {number} Male=0 Male value
     * @property {number} Female=1 Female value
     */
    proto.Gender = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Male"] = 0;
        values[valuesById[1] = "Female"] = 1;
        return values;
    })();

    /**
     * ConstItemID enum.
     * @name proto.ConstItemID
     * @enum {number}
     * @property {number} CTI_None=0 CTI_None value
     * @property {number} CTI_Gold=1 CTI_Gold value
     * @property {number} CTI_Diamond=2 CTI_Diamond value
     * @property {number} CTI_Lightning=3 CTI_Lightning value
     * @property {number} CTI_RoleExp=4 CTI_RoleExp value
     */
    proto.ConstItemID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CTI_None"] = 0;
        values[valuesById[1] = "CTI_Gold"] = 1;
        values[valuesById[2] = "CTI_Diamond"] = 2;
        values[valuesById[3] = "CTI_Lightning"] = 3;
        values[valuesById[4] = "CTI_RoleExp"] = 4;
        return values;
    })();

    proto.ItemSimpleInfo = (function() {

        /**
         * Properties of an ItemSimpleInfo.
         * @memberof proto
         * @interface IItemSimpleInfo
         * @property {number|null} [itemId] ItemSimpleInfo itemId
         * @property {number|null} [itemCount] ItemSimpleInfo itemCount
         */

        /**
         * Constructs a new ItemSimpleInfo.
         * @memberof proto
         * @classdesc Represents an ItemSimpleInfo.
         * @implements IItemSimpleInfo
         * @constructor
         * @param {proto.IItemSimpleInfo=} [p] Properties to set
         */
        function ItemSimpleInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ItemSimpleInfo itemId.
         * @member {number} itemId
         * @memberof proto.ItemSimpleInfo
         * @instance
         */
        ItemSimpleInfo.prototype.itemId = 0;

        /**
         * ItemSimpleInfo itemCount.
         * @member {number} itemCount
         * @memberof proto.ItemSimpleInfo
         * @instance
         */
        ItemSimpleInfo.prototype.itemCount = 0;

        /**
         * Encodes the specified ItemSimpleInfo message. Does not implicitly {@link proto.ItemSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.ItemSimpleInfo
         * @static
         * @param {proto.IItemSimpleInfo} m ItemSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemSimpleInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.itemId != null && Object.hasOwnProperty.call(m, "itemId"))
                w.uint32(8).int32(m.itemId);
            if (m.itemCount != null && Object.hasOwnProperty.call(m, "itemCount"))
                w.uint32(16).int32(m.itemCount);
            return w;
        };

        /**
         * Decodes an ItemSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ItemSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ItemSimpleInfo} ItemSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemSimpleInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ItemSimpleInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.itemId = r.int32();
                    break;
                case 2:
                    m.itemCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ItemSimpleInfo;
    })();

    proto.RewardSimpleInfo = (function() {

        /**
         * Properties of a RewardSimpleInfo.
         * @memberof proto
         * @interface IRewardSimpleInfo
         * @property {number|null} [rewardType] RewardSimpleInfo rewardType
         * @property {number|null} [rewardId] RewardSimpleInfo rewardId
         * @property {number|null} [rewardCount] RewardSimpleInfo rewardCount
         * @property {Array.<proto.IRewardSimpleInfo>|null} [transformedRewards] RewardSimpleInfo transformedRewards
         */

        /**
         * Constructs a new RewardSimpleInfo.
         * @memberof proto
         * @classdesc Represents a RewardSimpleInfo.
         * @implements IRewardSimpleInfo
         * @constructor
         * @param {proto.IRewardSimpleInfo=} [p] Properties to set
         */
        function RewardSimpleInfo(p) {
            this.transformedRewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RewardSimpleInfo rewardType.
         * @member {number} rewardType
         * @memberof proto.RewardSimpleInfo
         * @instance
         */
        RewardSimpleInfo.prototype.rewardType = 0;

        /**
         * RewardSimpleInfo rewardId.
         * @member {number} rewardId
         * @memberof proto.RewardSimpleInfo
         * @instance
         */
        RewardSimpleInfo.prototype.rewardId = 0;

        /**
         * RewardSimpleInfo rewardCount.
         * @member {number} rewardCount
         * @memberof proto.RewardSimpleInfo
         * @instance
         */
        RewardSimpleInfo.prototype.rewardCount = 0;

        /**
         * RewardSimpleInfo transformedRewards.
         * @member {Array.<proto.IRewardSimpleInfo>} transformedRewards
         * @memberof proto.RewardSimpleInfo
         * @instance
         */
        RewardSimpleInfo.prototype.transformedRewards = $util.emptyArray;

        /**
         * Encodes the specified RewardSimpleInfo message. Does not implicitly {@link proto.RewardSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.RewardSimpleInfo
         * @static
         * @param {proto.IRewardSimpleInfo} m RewardSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RewardSimpleInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardType != null && Object.hasOwnProperty.call(m, "rewardType"))
                w.uint32(8).int32(m.rewardType);
            if (m.rewardId != null && Object.hasOwnProperty.call(m, "rewardId"))
                w.uint32(16).int32(m.rewardId);
            if (m.rewardCount != null && Object.hasOwnProperty.call(m, "rewardCount"))
                w.uint32(24).int32(m.rewardCount);
            if (m.transformedRewards != null && m.transformedRewards.length) {
                for (var i = 0; i < m.transformedRewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.transformedRewards[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a RewardSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RewardSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RewardSimpleInfo} RewardSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RewardSimpleInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RewardSimpleInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardType = r.int32();
                    break;
                case 2:
                    m.rewardId = r.int32();
                    break;
                case 3:
                    m.rewardCount = r.int32();
                    break;
                case 4:
                    if (!(m.transformedRewards && m.transformedRewards.length))
                        m.transformedRewards = [];
                    m.transformedRewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RewardSimpleInfo;
    })();

    proto.VecRewardSimpleInfo = (function() {

        /**
         * Properties of a VecRewardSimpleInfo.
         * @memberof proto
         * @interface IVecRewardSimpleInfo
         * @property {Array.<proto.IRewardSimpleInfo>|null} [awards] VecRewardSimpleInfo awards
         */

        /**
         * Constructs a new VecRewardSimpleInfo.
         * @memberof proto
         * @classdesc Represents a VecRewardSimpleInfo.
         * @implements IVecRewardSimpleInfo
         * @constructor
         * @param {proto.IVecRewardSimpleInfo=} [p] Properties to set
         */
        function VecRewardSimpleInfo(p) {
            this.awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * VecRewardSimpleInfo awards.
         * @member {Array.<proto.IRewardSimpleInfo>} awards
         * @memberof proto.VecRewardSimpleInfo
         * @instance
         */
        VecRewardSimpleInfo.prototype.awards = $util.emptyArray;

        /**
         * Encodes the specified VecRewardSimpleInfo message. Does not implicitly {@link proto.VecRewardSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.VecRewardSimpleInfo
         * @static
         * @param {proto.IVecRewardSimpleInfo} m VecRewardSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VecRewardSimpleInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.awards != null && m.awards.length) {
                for (var i = 0; i < m.awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.awards[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a VecRewardSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.VecRewardSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.VecRewardSimpleInfo} VecRewardSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VecRewardSimpleInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.VecRewardSimpleInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.awards && m.awards.length))
                        m.awards = [];
                    m.awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return VecRewardSimpleInfo;
    })();

    /**
     * ItemSource enum.
     * @name proto.ItemSource
     * @enum {number}
     * @property {number} Default=0 Default value
     * @property {number} Recharge=1 Recharge value
     * @property {number} Shop=2 Shop value
     * @property {number} BossBox=3 BossBox value
     * @property {number} CooperateBox=4 CooperateBox value
     * @property {number} PullCard=5 PullCard value
     * @property {number} RankScoreReward=6 RankScoreReward value
     * @property {number} CardLevelUp=7 CardLevelUp value
     * @property {number} RankBox=8 RankBox value
     * @property {number} TaskGoalBox=9 TaskGoalBox value
     * @property {number} TaskGift=10 TaskGift value
     * @property {number} TaskReward=11 TaskReward value
     * @property {number} Rookie=12 Rookie value
     * @property {number} AllianceDonate=13 AllianceDonate value
     * @property {number} ChallengeAward=14 ChallengeAward value
     * @property {number} GM=15 GM value
     * @property {number} RainbowTask=16 RainbowTask value
     * @property {number} SevenDaySignIn=17 SevenDaySignIn value
     * @property {number} CreateAlliance=18 CreateAlliance value
     * @property {number} TaskRefresh=19 TaskRefresh value
     * @property {number} ChangeName=20 ChangeName value
     * @property {number} Pve=21 Pve value
     * @property {number} RefreshDayGiftBag=22 RefreshDayGiftBag value
     * @property {number} ResetChallengeCount=23 ResetChallengeCount value
     * @property {number} ExchangeCode=24 ExchangeCode value
     * @property {number} BuyPveCount=25 BuyPveCount value
     * @property {number} BuyGiftBag=26 BuyGiftBag value
     * @property {number} MailReward=27 MailReward value
     * @property {number} RainbowTaskLevelUp=28 RainbowTaskLevelUp value
     * @property {number} ShopGold1=29 ShopGold1 value
     * @property {number} ShopGold2=30 ShopGold2 value
     * @property {number} ShopGold3=31 ShopGold3 value
     * @property {number} PullCard1=32 PullCard1 value
     * @property {number} PullCard2=33 PullCard2 value
     * @property {number} PullCard3=34 PullCard3 value
     * @property {number} GroutTask=35 GroutTask value
     * @property {number} GrowFundAward=36 GrowFundAward value
     * @property {number} OneYuanBuy=37 OneYuanBuy value
     * @property {number} DiscountsGiftBag=38 DiscountsGiftBag value
     * @property {number} WaitChooseReward=39 WaitChooseReward value
     * @property {number} SkipAdvert=40 SkipAdvert value
     * @property {number} MonthlyPass=41 MonthlyPass value
     * @property {number} LifetimePass=42 LifetimePass value
     * @property {number} InviteRecommend=43 InviteRecommend value
     * @property {number} DailyShare=44 DailyShare value
     * @property {number} BoxRebateCard=45 BoxRebateCard value
     * @property {number} WatchAdvertBagSpeedUp=46 WatchAdvertBagSpeedUp value
     * @property {number} Question=47 Question value
     * @property {number} SpringFestivalSignIn=48 SpringFestivalSignIn value
     * @property {number} OverflowBagGift=49 OverflowBagGift value
     * @property {number} OptionalCard=50 OptionalCard value
     * @property {number} LuckySupply=51 LuckySupply value
     * @property {number} Gacha=52 Gacha value
     * @property {number} GachaBox=53 GachaBox value
     * @property {number} Pvp=54 Pvp value
     * @property {number} ResetFightRecord=55 ResetFightRecord value
     * @property {number} VictoryBox=56 VictoryBox value
     * @property {number} WeeklyAdBox=57 WeeklyAdBox value
     * @property {number} RankOverReward=58 RankOverReward value
     * @property {number} BountyGame=59 BountyGame value
     * @property {number} BuyContinusGift=60 BuyContinusGift value
     */
    proto.ItemSource = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Default"] = 0;
        values[valuesById[1] = "Recharge"] = 1;
        values[valuesById[2] = "Shop"] = 2;
        values[valuesById[3] = "BossBox"] = 3;
        values[valuesById[4] = "CooperateBox"] = 4;
        values[valuesById[5] = "PullCard"] = 5;
        values[valuesById[6] = "RankScoreReward"] = 6;
        values[valuesById[7] = "CardLevelUp"] = 7;
        values[valuesById[8] = "RankBox"] = 8;
        values[valuesById[9] = "TaskGoalBox"] = 9;
        values[valuesById[10] = "TaskGift"] = 10;
        values[valuesById[11] = "TaskReward"] = 11;
        values[valuesById[12] = "Rookie"] = 12;
        values[valuesById[13] = "AllianceDonate"] = 13;
        values[valuesById[14] = "ChallengeAward"] = 14;
        values[valuesById[15] = "GM"] = 15;
        values[valuesById[16] = "RainbowTask"] = 16;
        values[valuesById[17] = "SevenDaySignIn"] = 17;
        values[valuesById[18] = "CreateAlliance"] = 18;
        values[valuesById[19] = "TaskRefresh"] = 19;
        values[valuesById[20] = "ChangeName"] = 20;
        values[valuesById[21] = "Pve"] = 21;
        values[valuesById[22] = "RefreshDayGiftBag"] = 22;
        values[valuesById[23] = "ResetChallengeCount"] = 23;
        values[valuesById[24] = "ExchangeCode"] = 24;
        values[valuesById[25] = "BuyPveCount"] = 25;
        values[valuesById[26] = "BuyGiftBag"] = 26;
        values[valuesById[27] = "MailReward"] = 27;
        values[valuesById[28] = "RainbowTaskLevelUp"] = 28;
        values[valuesById[29] = "ShopGold1"] = 29;
        values[valuesById[30] = "ShopGold2"] = 30;
        values[valuesById[31] = "ShopGold3"] = 31;
        values[valuesById[32] = "PullCard1"] = 32;
        values[valuesById[33] = "PullCard2"] = 33;
        values[valuesById[34] = "PullCard3"] = 34;
        values[valuesById[35] = "GroutTask"] = 35;
        values[valuesById[36] = "GrowFundAward"] = 36;
        values[valuesById[37] = "OneYuanBuy"] = 37;
        values[valuesById[38] = "DiscountsGiftBag"] = 38;
        values[valuesById[39] = "WaitChooseReward"] = 39;
        values[valuesById[40] = "SkipAdvert"] = 40;
        values[valuesById[41] = "MonthlyPass"] = 41;
        values[valuesById[42] = "LifetimePass"] = 42;
        values[valuesById[43] = "InviteRecommend"] = 43;
        values[valuesById[44] = "DailyShare"] = 44;
        values[valuesById[45] = "BoxRebateCard"] = 45;
        values[valuesById[46] = "WatchAdvertBagSpeedUp"] = 46;
        values[valuesById[47] = "Question"] = 47;
        values[valuesById[48] = "SpringFestivalSignIn"] = 48;
        values[valuesById[49] = "OverflowBagGift"] = 49;
        values[valuesById[50] = "OptionalCard"] = 50;
        values[valuesById[51] = "LuckySupply"] = 51;
        values[valuesById[52] = "Gacha"] = 52;
        values[valuesById[53] = "GachaBox"] = 53;
        values[valuesById[54] = "Pvp"] = 54;
        values[valuesById[55] = "ResetFightRecord"] = 55;
        values[valuesById[56] = "VictoryBox"] = 56;
        values[valuesById[57] = "WeeklyAdBox"] = 57;
        values[valuesById[58] = "RankOverReward"] = 58;
        values[valuesById[59] = "BountyGame"] = 59;
        values[valuesById[60] = "BuyContinusGift"] = 60;
        return values;
    })();

    proto.PreventIndulgeData = (function() {

        /**
         * Properties of a PreventIndulgeData.
         * @memberof proto
         * @interface IPreventIndulgeData
         * @property {number|null} [todayOnlineDuration] PreventIndulgeData todayOnlineDuration
         */

        /**
         * Constructs a new PreventIndulgeData.
         * @memberof proto
         * @classdesc Represents a PreventIndulgeData.
         * @implements IPreventIndulgeData
         * @constructor
         * @param {proto.IPreventIndulgeData=} [p] Properties to set
         */
        function PreventIndulgeData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PreventIndulgeData todayOnlineDuration.
         * @member {number} todayOnlineDuration
         * @memberof proto.PreventIndulgeData
         * @instance
         */
        PreventIndulgeData.prototype.todayOnlineDuration = 0;

        /**
         * Encodes the specified PreventIndulgeData message. Does not implicitly {@link proto.PreventIndulgeData.verify|verify} messages.
         * @function encode
         * @memberof proto.PreventIndulgeData
         * @static
         * @param {proto.IPreventIndulgeData} m PreventIndulgeData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PreventIndulgeData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.todayOnlineDuration != null && Object.hasOwnProperty.call(m, "todayOnlineDuration"))
                w.uint32(8).int32(m.todayOnlineDuration);
            return w;
        };

        /**
         * Decodes a PreventIndulgeData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PreventIndulgeData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PreventIndulgeData} PreventIndulgeData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PreventIndulgeData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PreventIndulgeData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.todayOnlineDuration = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PreventIndulgeData;
    })();

    proto.RoleData = (function() {

        /**
         * Properties of a RoleData.
         * @memberof proto
         * @interface IRoleData
         * @property {string|null} [id] RoleData id
         * @property {string|null} [uid] RoleData uid
         * @property {string|null} [name] RoleData name
         * @property {proto.Gender|null} [gender] RoleData gender
         * @property {Array.<proto.IItemData>|null} [items] RoleData items
         * @property {Array.<proto.IDeckData>|null} [decks] RoleData decks
         * @property {string|null} [head] RoleData head
         * @property {number|null} [headFrame] RoleData headFrame
         * @property {number|null} [diamond] RoleData diamond
         * @property {number|null} [gold] RoleData gold
         * @property {number|null} [indexCard] RoleData indexCard
         * @property {proto.IRankData|null} [rankData] RoleData rankData
         * @property {proto.IBossBoxData|null} [bossBox] RoleData bossBox
         * @property {proto.ICooperateBoxData|null} [cooperateBox] RoleData cooperateBox
         * @property {number|null} [deckIndex] RoleData deckIndex
         * @property {number|null} [level] RoleData level
         * @property {number|null} [exp] RoleData exp
         * @property {number|null} [guideTrunk] RoleData guideTrunk
         * @property {Array.<number>|null} [guideBranch] RoleData guideBranch
         * @property {proto.IRoleAllianceData|null} [allianceData] RoleData allianceData
         * @property {boolean|null} [isDemonPass] RoleData isDemonPass
         * @property {proto.IAllianceDonateData|null} [donateData] RoleData donateData
         * @property {proto.IRainbowTaskPushData|null} [runningRainbowTask] RoleData runningRainbowTask
         * @property {number|null} [createRoleUTC] RoleData createRoleUTC
         * @property {Array.<number>|null} [emotions] RoleData emotions
         * @property {number|null} [usedBattleMapID] RoleData usedBattleMapID
         * @property {number|null} [maxWaveNum] RoleData maxWaveNum
         * @property {boolean|null} [bFirstPayEvilPass] RoleData bFirstPayEvilPass
         * @property {number|null} [gachaHitCount] RoleData gachaHitCount
         * @property {number|null} [gachaOpenCount] RoleData gachaOpenCount
         * @property {number|null} [gachaOpenStatus] RoleData gachaOpenStatus
         * @property {number|null} [RoomID] RoleData RoomID
         * @property {number|null} [RoomType] RoleData RoomType
         * @property {number|Long|null} [RoomCreateTime] RoleData RoomCreateTime
         * @property {proto.IMembershipData|null} [membershipData] RoleData membershipData
         */

        /**
         * Constructs a new RoleData.
         * @memberof proto
         * @classdesc Represents a RoleData.
         * @implements IRoleData
         * @constructor
         * @param {proto.IRoleData=} [p] Properties to set
         */
        function RoleData(p) {
            this.items = [];
            this.decks = [];
            this.guideBranch = [];
            this.emotions = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RoleData id.
         * @member {string} id
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.id = "";

        /**
         * RoleData uid.
         * @member {string} uid
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.uid = "";

        /**
         * RoleData name.
         * @member {string} name
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.name = "";

        /**
         * RoleData gender.
         * @member {proto.Gender} gender
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.gender = 0;

        /**
         * RoleData items.
         * @member {Array.<proto.IItemData>} items
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.items = $util.emptyArray;

        /**
         * RoleData decks.
         * @member {Array.<proto.IDeckData>} decks
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.decks = $util.emptyArray;

        /**
         * RoleData head.
         * @member {string} head
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.head = "";

        /**
         * RoleData headFrame.
         * @member {number} headFrame
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.headFrame = 0;

        /**
         * RoleData diamond.
         * @member {number} diamond
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.diamond = 0;

        /**
         * RoleData gold.
         * @member {number} gold
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.gold = 0;

        /**
         * RoleData indexCard.
         * @member {number} indexCard
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.indexCard = 0;

        /**
         * RoleData rankData.
         * @member {proto.IRankData|null|undefined} rankData
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.rankData = null;

        /**
         * RoleData bossBox.
         * @member {proto.IBossBoxData|null|undefined} bossBox
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.bossBox = null;

        /**
         * RoleData cooperateBox.
         * @member {proto.ICooperateBoxData|null|undefined} cooperateBox
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.cooperateBox = null;

        /**
         * RoleData deckIndex.
         * @member {number} deckIndex
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.deckIndex = 0;

        /**
         * RoleData level.
         * @member {number} level
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.level = 0;

        /**
         * RoleData exp.
         * @member {number} exp
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.exp = 0;

        /**
         * RoleData guideTrunk.
         * @member {number} guideTrunk
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.guideTrunk = 0;

        /**
         * RoleData guideBranch.
         * @member {Array.<number>} guideBranch
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.guideBranch = $util.emptyArray;

        /**
         * RoleData allianceData.
         * @member {proto.IRoleAllianceData|null|undefined} allianceData
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.allianceData = null;

        /**
         * RoleData isDemonPass.
         * @member {boolean} isDemonPass
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.isDemonPass = false;

        /**
         * RoleData donateData.
         * @member {proto.IAllianceDonateData|null|undefined} donateData
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.donateData = null;

        /**
         * RoleData runningRainbowTask.
         * @member {proto.IRainbowTaskPushData|null|undefined} runningRainbowTask
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.runningRainbowTask = null;

        /**
         * RoleData createRoleUTC.
         * @member {number} createRoleUTC
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.createRoleUTC = 0;

        /**
         * RoleData emotions.
         * @member {Array.<number>} emotions
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.emotions = $util.emptyArray;

        /**
         * RoleData usedBattleMapID.
         * @member {number} usedBattleMapID
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.usedBattleMapID = 0;

        /**
         * RoleData maxWaveNum.
         * @member {number} maxWaveNum
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.maxWaveNum = 0;

        /**
         * RoleData bFirstPayEvilPass.
         * @member {boolean} bFirstPayEvilPass
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.bFirstPayEvilPass = false;

        /**
         * RoleData gachaHitCount.
         * @member {number} gachaHitCount
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.gachaHitCount = 0;

        /**
         * RoleData gachaOpenCount.
         * @member {number} gachaOpenCount
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.gachaOpenCount = 0;

        /**
         * RoleData gachaOpenStatus.
         * @member {number} gachaOpenStatus
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.gachaOpenStatus = 0;

        /**
         * RoleData RoomID.
         * @member {number} RoomID
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.RoomID = 0;

        /**
         * RoleData RoomType.
         * @member {number} RoomType
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.RoomType = 0;

        /**
         * RoleData RoomCreateTime.
         * @member {number|Long} RoomCreateTime
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.RoomCreateTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RoleData membershipData.
         * @member {proto.IMembershipData|null|undefined} membershipData
         * @memberof proto.RoleData
         * @instance
         */
        RoleData.prototype.membershipData = null;

        /**
         * Encodes the specified RoleData message. Does not implicitly {@link proto.RoleData.verify|verify} messages.
         * @function encode
         * @memberof proto.RoleData
         * @static
         * @param {proto.IRoleData} m RoleData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoleData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(10).string(m.id);
            if (m.uid != null && Object.hasOwnProperty.call(m, "uid"))
                w.uint32(18).string(m.uid);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(26).string(m.name);
            if (m.gender != null && Object.hasOwnProperty.call(m, "gender"))
                w.uint32(32).int32(m.gender);
            if (m.items != null && m.items.length) {
                for (var i = 0; i < m.items.length; ++i)
                    $root.proto.ItemData.encode(m.items[i], w.uint32(42).fork()).ldelim();
            }
            if (m.decks != null && m.decks.length) {
                for (var i = 0; i < m.decks.length; ++i)
                    $root.proto.DeckData.encode(m.decks[i], w.uint32(50).fork()).ldelim();
            }
            if (m.head != null && Object.hasOwnProperty.call(m, "head"))
                w.uint32(58).string(m.head);
            if (m.headFrame != null && Object.hasOwnProperty.call(m, "headFrame"))
                w.uint32(64).int32(m.headFrame);
            if (m.diamond != null && Object.hasOwnProperty.call(m, "diamond"))
                w.uint32(72).int32(m.diamond);
            if (m.gold != null && Object.hasOwnProperty.call(m, "gold"))
                w.uint32(80).int32(m.gold);
            if (m.indexCard != null && Object.hasOwnProperty.call(m, "indexCard"))
                w.uint32(88).int32(m.indexCard);
            if (m.rankData != null && Object.hasOwnProperty.call(m, "rankData"))
                $root.proto.RankData.encode(m.rankData, w.uint32(98).fork()).ldelim();
            if (m.bossBox != null && Object.hasOwnProperty.call(m, "bossBox"))
                $root.proto.BossBoxData.encode(m.bossBox, w.uint32(106).fork()).ldelim();
            if (m.cooperateBox != null && Object.hasOwnProperty.call(m, "cooperateBox"))
                $root.proto.CooperateBoxData.encode(m.cooperateBox, w.uint32(114).fork()).ldelim();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(120).int32(m.deckIndex);
            if (m.level != null && Object.hasOwnProperty.call(m, "level"))
                w.uint32(128).int32(m.level);
            if (m.exp != null && Object.hasOwnProperty.call(m, "exp"))
                w.uint32(136).int32(m.exp);
            if (m.guideTrunk != null && Object.hasOwnProperty.call(m, "guideTrunk"))
                w.uint32(144).int32(m.guideTrunk);
            if (m.guideBranch != null && m.guideBranch.length) {
                w.uint32(154).fork();
                for (var i = 0; i < m.guideBranch.length; ++i)
                    w.int32(m.guideBranch[i]);
                w.ldelim();
            }
            if (m.allianceData != null && Object.hasOwnProperty.call(m, "allianceData"))
                $root.proto.RoleAllianceData.encode(m.allianceData, w.uint32(162).fork()).ldelim();
            if (m.isDemonPass != null && Object.hasOwnProperty.call(m, "isDemonPass"))
                w.uint32(168).bool(m.isDemonPass);
            if (m.donateData != null && Object.hasOwnProperty.call(m, "donateData"))
                $root.proto.AllianceDonateData.encode(m.donateData, w.uint32(178).fork()).ldelim();
            if (m.runningRainbowTask != null && Object.hasOwnProperty.call(m, "runningRainbowTask"))
                $root.proto.RainbowTaskPushData.encode(m.runningRainbowTask, w.uint32(186).fork()).ldelim();
            if (m.createRoleUTC != null && Object.hasOwnProperty.call(m, "createRoleUTC"))
                w.uint32(192).int32(m.createRoleUTC);
            if (m.emotions != null && m.emotions.length) {
                w.uint32(202).fork();
                for (var i = 0; i < m.emotions.length; ++i)
                    w.int32(m.emotions[i]);
                w.ldelim();
            }
            if (m.usedBattleMapID != null && Object.hasOwnProperty.call(m, "usedBattleMapID"))
                w.uint32(208).int32(m.usedBattleMapID);
            if (m.maxWaveNum != null && Object.hasOwnProperty.call(m, "maxWaveNum"))
                w.uint32(216).int32(m.maxWaveNum);
            if (m.bFirstPayEvilPass != null && Object.hasOwnProperty.call(m, "bFirstPayEvilPass"))
                w.uint32(224).bool(m.bFirstPayEvilPass);
            if (m.gachaHitCount != null && Object.hasOwnProperty.call(m, "gachaHitCount"))
                w.uint32(232).int32(m.gachaHitCount);
            if (m.gachaOpenCount != null && Object.hasOwnProperty.call(m, "gachaOpenCount"))
                w.uint32(240).int32(m.gachaOpenCount);
            if (m.gachaOpenStatus != null && Object.hasOwnProperty.call(m, "gachaOpenStatus"))
                w.uint32(248).int32(m.gachaOpenStatus);
            if (m.RoomID != null && Object.hasOwnProperty.call(m, "RoomID"))
                w.uint32(256).int32(m.RoomID);
            if (m.RoomType != null && Object.hasOwnProperty.call(m, "RoomType"))
                w.uint32(264).int32(m.RoomType);
            if (m.RoomCreateTime != null && Object.hasOwnProperty.call(m, "RoomCreateTime"))
                w.uint32(272).int64(m.RoomCreateTime);
            if (m.membershipData != null && Object.hasOwnProperty.call(m, "membershipData"))
                $root.proto.MembershipData.encode(m.membershipData, w.uint32(282).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a RoleData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RoleData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RoleData} RoleData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoleData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RoleData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.id = r.string();
                    break;
                case 2:
                    m.uid = r.string();
                    break;
                case 3:
                    m.name = r.string();
                    break;
                case 4:
                    m.gender = r.int32();
                    break;
                case 5:
                    if (!(m.items && m.items.length))
                        m.items = [];
                    m.items.push($root.proto.ItemData.decode(r, r.uint32()));
                    break;
                case 6:
                    if (!(m.decks && m.decks.length))
                        m.decks = [];
                    m.decks.push($root.proto.DeckData.decode(r, r.uint32()));
                    break;
                case 7:
                    m.head = r.string();
                    break;
                case 8:
                    m.headFrame = r.int32();
                    break;
                case 9:
                    m.diamond = r.int32();
                    break;
                case 10:
                    m.gold = r.int32();
                    break;
                case 11:
                    m.indexCard = r.int32();
                    break;
                case 12:
                    m.rankData = $root.proto.RankData.decode(r, r.uint32());
                    break;
                case 13:
                    m.bossBox = $root.proto.BossBoxData.decode(r, r.uint32());
                    break;
                case 14:
                    m.cooperateBox = $root.proto.CooperateBoxData.decode(r, r.uint32());
                    break;
                case 15:
                    m.deckIndex = r.int32();
                    break;
                case 16:
                    m.level = r.int32();
                    break;
                case 17:
                    m.exp = r.int32();
                    break;
                case 18:
                    m.guideTrunk = r.int32();
                    break;
                case 19:
                    if (!(m.guideBranch && m.guideBranch.length))
                        m.guideBranch = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.guideBranch.push(r.int32());
                    } else
                        m.guideBranch.push(r.int32());
                    break;
                case 20:
                    m.allianceData = $root.proto.RoleAllianceData.decode(r, r.uint32());
                    break;
                case 21:
                    m.isDemonPass = r.bool();
                    break;
                case 22:
                    m.donateData = $root.proto.AllianceDonateData.decode(r, r.uint32());
                    break;
                case 23:
                    m.runningRainbowTask = $root.proto.RainbowTaskPushData.decode(r, r.uint32());
                    break;
                case 24:
                    m.createRoleUTC = r.int32();
                    break;
                case 25:
                    if (!(m.emotions && m.emotions.length))
                        m.emotions = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.emotions.push(r.int32());
                    } else
                        m.emotions.push(r.int32());
                    break;
                case 26:
                    m.usedBattleMapID = r.int32();
                    break;
                case 27:
                    m.maxWaveNum = r.int32();
                    break;
                case 28:
                    m.bFirstPayEvilPass = r.bool();
                    break;
                case 29:
                    m.gachaHitCount = r.int32();
                    break;
                case 30:
                    m.gachaOpenCount = r.int32();
                    break;
                case 31:
                    m.gachaOpenStatus = r.int32();
                    break;
                case 32:
                    m.RoomID = r.int32();
                    break;
                case 33:
                    m.RoomType = r.int32();
                    break;
                case 34:
                    m.RoomCreateTime = r.int64();
                    break;
                case 35:
                    m.membershipData = $root.proto.MembershipData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RoleData;
    })();

    /**
     * GachaOpenType enum.
     * @name proto.GachaOpenType
     * @enum {number}
     * @property {number} Unknown=0 Unknown value
     * @property {number} Box1=1 Box1 value
     * @property {number} Box2=2 Box2 value
     */
    proto.GachaOpenType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Unknown"] = 0;
        values[valuesById[1] = "Box1"] = 1;
        values[valuesById[2] = "Box2"] = 2;
        return values;
    })();

    proto.ItemData = (function() {

        /**
         * Properties of an ItemData.
         * @memberof proto
         * @interface IItemData
         * @property {string|null} [id] ItemData id
         * @property {number|null} [staticId] ItemData staticId
         * @property {number|null} [count] ItemData count
         * @property {number|null} [level] ItemData level
         */

        /**
         * Constructs a new ItemData.
         * @memberof proto
         * @classdesc Represents an ItemData.
         * @implements IItemData
         * @constructor
         * @param {proto.IItemData=} [p] Properties to set
         */
        function ItemData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ItemData id.
         * @member {string} id
         * @memberof proto.ItemData
         * @instance
         */
        ItemData.prototype.id = "";

        /**
         * ItemData staticId.
         * @member {number} staticId
         * @memberof proto.ItemData
         * @instance
         */
        ItemData.prototype.staticId = 0;

        /**
         * ItemData count.
         * @member {number} count
         * @memberof proto.ItemData
         * @instance
         */
        ItemData.prototype.count = 0;

        /**
         * ItemData level.
         * @member {number} level
         * @memberof proto.ItemData
         * @instance
         */
        ItemData.prototype.level = 0;

        /**
         * Encodes the specified ItemData message. Does not implicitly {@link proto.ItemData.verify|verify} messages.
         * @function encode
         * @memberof proto.ItemData
         * @static
         * @param {proto.IItemData} m ItemData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(10).string(m.id);
            if (m.staticId != null && Object.hasOwnProperty.call(m, "staticId"))
                w.uint32(16).int32(m.staticId);
            if (m.count != null && Object.hasOwnProperty.call(m, "count"))
                w.uint32(24).int32(m.count);
            if (m.level != null && Object.hasOwnProperty.call(m, "level"))
                w.uint32(32).int32(m.level);
            return w;
        };

        /**
         * Decodes an ItemData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ItemData} ItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ItemData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.id = r.string();
                    break;
                case 2:
                    m.staticId = r.int32();
                    break;
                case 3:
                    m.count = r.int32();
                    break;
                case 4:
                    m.level = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ItemData;
    })();

    proto.DeckData = (function() {

        /**
         * Properties of a DeckData.
         * @memberof proto
         * @interface IDeckData
         * @property {Array.<string>|null} [deckItems] DeckData deckItems
         * @property {string|null} [lord] DeckData lord
         * @property {proto.ITalentData|null} [talent] DeckData talent
         */

        /**
         * Constructs a new DeckData.
         * @memberof proto
         * @classdesc Represents a DeckData.
         * @implements IDeckData
         * @constructor
         * @param {proto.IDeckData=} [p] Properties to set
         */
        function DeckData(p) {
            this.deckItems = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * DeckData deckItems.
         * @member {Array.<string>} deckItems
         * @memberof proto.DeckData
         * @instance
         */
        DeckData.prototype.deckItems = $util.emptyArray;

        /**
         * DeckData lord.
         * @member {string} lord
         * @memberof proto.DeckData
         * @instance
         */
        DeckData.prototype.lord = "";

        /**
         * DeckData talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.DeckData
         * @instance
         */
        DeckData.prototype.talent = null;

        /**
         * Encodes the specified DeckData message. Does not implicitly {@link proto.DeckData.verify|verify} messages.
         * @function encode
         * @memberof proto.DeckData
         * @static
         * @param {proto.IDeckData} m DeckData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeckData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.deckItems != null && m.deckItems.length) {
                for (var i = 0; i < m.deckItems.length; ++i)
                    w.uint32(10).string(m.deckItems[i]);
            }
            if (m.lord != null && Object.hasOwnProperty.call(m, "lord"))
                w.uint32(18).string(m.lord);
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a DeckData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.DeckData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.DeckData} DeckData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeckData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DeckData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.deckItems && m.deckItems.length))
                        m.deckItems = [];
                    m.deckItems.push(r.string());
                    break;
                case 2:
                    m.lord = r.string();
                    break;
                case 3:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return DeckData;
    })();

    proto.TalenItem = (function() {

        /**
         * Properties of a TalenItem.
         * @memberof proto
         * @interface ITalenItem
         * @property {Array.<number>|null} [points] TalenItem points
         */

        /**
         * Constructs a new TalenItem.
         * @memberof proto
         * @classdesc Represents a TalenItem.
         * @implements ITalenItem
         * @constructor
         * @param {proto.ITalenItem=} [p] Properties to set
         */
        function TalenItem(p) {
            this.points = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * TalenItem points.
         * @member {Array.<number>} points
         * @memberof proto.TalenItem
         * @instance
         */
        TalenItem.prototype.points = $util.emptyArray;

        /**
         * Encodes the specified TalenItem message. Does not implicitly {@link proto.TalenItem.verify|verify} messages.
         * @function encode
         * @memberof proto.TalenItem
         * @static
         * @param {proto.ITalenItem} m TalenItem message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TalenItem.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.points != null && m.points.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.points.length; ++i)
                    w.int32(m.points[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a TalenItem message from the specified reader or buffer.
         * @function decode
         * @memberof proto.TalenItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.TalenItem} TalenItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TalenItem.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TalenItem();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.points && m.points.length))
                        m.points = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.points.push(r.int32());
                    } else
                        m.points.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return TalenItem;
    })();

    proto.TalentData = (function() {

        /**
         * Properties of a TalentData.
         * @memberof proto
         * @interface ITalentData
         * @property {Array.<proto.ITalenItem>|null} [talentItems] TalentData talentItems
         */

        /**
         * Constructs a new TalentData.
         * @memberof proto
         * @classdesc Represents a TalentData.
         * @implements ITalentData
         * @constructor
         * @param {proto.ITalentData=} [p] Properties to set
         */
        function TalentData(p) {
            this.talentItems = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * TalentData talentItems.
         * @member {Array.<proto.ITalenItem>} talentItems
         * @memberof proto.TalentData
         * @instance
         */
        TalentData.prototype.talentItems = $util.emptyArray;

        /**
         * Encodes the specified TalentData message. Does not implicitly {@link proto.TalentData.verify|verify} messages.
         * @function encode
         * @memberof proto.TalentData
         * @static
         * @param {proto.ITalentData} m TalentData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TalentData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.talentItems != null && m.talentItems.length) {
                for (var i = 0; i < m.talentItems.length; ++i)
                    $root.proto.TalenItem.encode(m.talentItems[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a TalentData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.TalentData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.TalentData} TalentData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TalentData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TalentData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.talentItems && m.talentItems.length))
                        m.talentItems = [];
                    m.talentItems.push($root.proto.TalenItem.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return TalentData;
    })();

    proto.FightCardData = (function() {

        /**
         * Properties of a FightCardData.
         * @memberof proto
         * @interface IFightCardData
         * @property {number|null} [staticId] FightCardData staticId
         * @property {number|null} [level] FightCardData level
         */

        /**
         * Constructs a new FightCardData.
         * @memberof proto
         * @classdesc Represents a FightCardData.
         * @implements IFightCardData
         * @constructor
         * @param {proto.IFightCardData=} [p] Properties to set
         */
        function FightCardData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FightCardData staticId.
         * @member {number} staticId
         * @memberof proto.FightCardData
         * @instance
         */
        FightCardData.prototype.staticId = 0;

        /**
         * FightCardData level.
         * @member {number} level
         * @memberof proto.FightCardData
         * @instance
         */
        FightCardData.prototype.level = 0;

        /**
         * Encodes the specified FightCardData message. Does not implicitly {@link proto.FightCardData.verify|verify} messages.
         * @function encode
         * @memberof proto.FightCardData
         * @static
         * @param {proto.IFightCardData} m FightCardData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FightCardData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.staticId != null && Object.hasOwnProperty.call(m, "staticId"))
                w.uint32(8).int32(m.staticId);
            if (m.level != null && Object.hasOwnProperty.call(m, "level"))
                w.uint32(16).int32(m.level);
            return w;
        };

        /**
         * Decodes a FightCardData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FightCardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FightCardData} FightCardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FightCardData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FightCardData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.staticId = r.int32();
                    break;
                case 2:
                    m.level = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FightCardData;
    })();

    proto.MailData = (function() {

        /**
         * Properties of a MailData.
         * @memberof proto
         * @interface IMailData
         * @property {Array.<proto.IMailInfoData>|null} [mailList] MailData mailList
         * @property {number|null} [serverMailUtc] MailData serverMailUtc
         */

        /**
         * Constructs a new MailData.
         * @memberof proto
         * @classdesc Represents a MailData.
         * @implements IMailData
         * @constructor
         * @param {proto.IMailData=} [p] Properties to set
         */
        function MailData(p) {
            this.mailList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * MailData mailList.
         * @member {Array.<proto.IMailInfoData>} mailList
         * @memberof proto.MailData
         * @instance
         */
        MailData.prototype.mailList = $util.emptyArray;

        /**
         * MailData serverMailUtc.
         * @member {number} serverMailUtc
         * @memberof proto.MailData
         * @instance
         */
        MailData.prototype.serverMailUtc = 0;

        /**
         * Encodes the specified MailData message. Does not implicitly {@link proto.MailData.verify|verify} messages.
         * @function encode
         * @memberof proto.MailData
         * @static
         * @param {proto.IMailData} m MailData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MailData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mailList != null && m.mailList.length) {
                for (var i = 0; i < m.mailList.length; ++i)
                    $root.proto.MailInfoData.encode(m.mailList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.serverMailUtc != null && Object.hasOwnProperty.call(m, "serverMailUtc"))
                w.uint32(16).int32(m.serverMailUtc);
            return w;
        };

        /**
         * Decodes a MailData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.MailData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.MailData} MailData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MailData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.MailData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.mailList && m.mailList.length))
                        m.mailList = [];
                    m.mailList.push($root.proto.MailInfoData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.serverMailUtc = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return MailData;
    })();

    proto.FightData = (function() {

        /**
         * Properties of a FightData.
         * @memberof proto
         * @interface IFightData
         * @property {string|null} [roleId] FightData roleId
         * @property {string|null} [name] FightData name
         * @property {Array.<proto.IFightCardData>|null} [deckData] FightData deckData
         * @property {number|null} [criticalDamage] FightData criticalDamage
         * @property {number|null} [rankScore] FightData rankScore
         * @property {number|null} [rankGrade] FightData rankGrade
         * @property {number|null} [continuousWin] FightData continuousWin
         * @property {number|null} [continuousLose] FightData continuousLose
         * @property {number|null} [roleLv] FightData roleLv
         * @property {string|null} [allianceName] FightData allianceName
         * @property {number|null} [allianceIcon] FightData allianceIcon
         * @property {number|null} [usedBattleMapID] FightData usedBattleMapID
         * @property {number|null} [pvpCount] FightData pvpCount
         * @property {number|null} [pvpWinCount] FightData pvpWinCount
         * @property {number|null} [disposeId] FightData disposeId
         * @property {Array.<number>|null} [robotIndices] FightData robotIndices
         */

        /**
         * Constructs a new FightData.
         * @memberof proto
         * @classdesc Represents a FightData.
         * @implements IFightData
         * @constructor
         * @param {proto.IFightData=} [p] Properties to set
         */
        function FightData(p) {
            this.deckData = [];
            this.robotIndices = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FightData roleId.
         * @member {string} roleId
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.roleId = "";

        /**
         * FightData name.
         * @member {string} name
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.name = "";

        /**
         * FightData deckData.
         * @member {Array.<proto.IFightCardData>} deckData
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.deckData = $util.emptyArray;

        /**
         * FightData criticalDamage.
         * @member {number} criticalDamage
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.criticalDamage = 0;

        /**
         * FightData rankScore.
         * @member {number} rankScore
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.rankScore = 0;

        /**
         * FightData rankGrade.
         * @member {number} rankGrade
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.rankGrade = 0;

        /**
         * FightData continuousWin.
         * @member {number} continuousWin
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.continuousWin = 0;

        /**
         * FightData continuousLose.
         * @member {number} continuousLose
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.continuousLose = 0;

        /**
         * FightData roleLv.
         * @member {number} roleLv
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.roleLv = 0;

        /**
         * FightData allianceName.
         * @member {string} allianceName
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.allianceName = "";

        /**
         * FightData allianceIcon.
         * @member {number} allianceIcon
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.allianceIcon = 0;

        /**
         * FightData usedBattleMapID.
         * @member {number} usedBattleMapID
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.usedBattleMapID = 0;

        /**
         * FightData pvpCount.
         * @member {number} pvpCount
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.pvpCount = 0;

        /**
         * FightData pvpWinCount.
         * @member {number} pvpWinCount
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.pvpWinCount = 0;

        /**
         * FightData disposeId.
         * @member {number} disposeId
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.disposeId = 0;

        /**
         * FightData robotIndices.
         * @member {Array.<number>} robotIndices
         * @memberof proto.FightData
         * @instance
         */
        FightData.prototype.robotIndices = $util.emptyArray;

        /**
         * Encodes the specified FightData message. Does not implicitly {@link proto.FightData.verify|verify} messages.
         * @function encode
         * @memberof proto.FightData
         * @static
         * @param {proto.IFightData} m FightData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FightData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(10).string(m.roleId);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.deckData != null && m.deckData.length) {
                for (var i = 0; i < m.deckData.length; ++i)
                    $root.proto.FightCardData.encode(m.deckData[i], w.uint32(26).fork()).ldelim();
            }
            if (m.criticalDamage != null && Object.hasOwnProperty.call(m, "criticalDamage"))
                w.uint32(37).float(m.criticalDamage);
            if (m.rankScore != null && Object.hasOwnProperty.call(m, "rankScore"))
                w.uint32(40).int32(m.rankScore);
            if (m.rankGrade != null && Object.hasOwnProperty.call(m, "rankGrade"))
                w.uint32(48).int32(m.rankGrade);
            if (m.continuousWin != null && Object.hasOwnProperty.call(m, "continuousWin"))
                w.uint32(56).int32(m.continuousWin);
            if (m.continuousLose != null && Object.hasOwnProperty.call(m, "continuousLose"))
                w.uint32(64).int32(m.continuousLose);
            if (m.roleLv != null && Object.hasOwnProperty.call(m, "roleLv"))
                w.uint32(72).int32(m.roleLv);
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(82).string(m.allianceName);
            if (m.allianceIcon != null && Object.hasOwnProperty.call(m, "allianceIcon"))
                w.uint32(88).int32(m.allianceIcon);
            if (m.usedBattleMapID != null && Object.hasOwnProperty.call(m, "usedBattleMapID"))
                w.uint32(96).int32(m.usedBattleMapID);
            if (m.pvpCount != null && Object.hasOwnProperty.call(m, "pvpCount"))
                w.uint32(104).int32(m.pvpCount);
            if (m.pvpWinCount != null && Object.hasOwnProperty.call(m, "pvpWinCount"))
                w.uint32(112).int32(m.pvpWinCount);
            if (m.disposeId != null && Object.hasOwnProperty.call(m, "disposeId"))
                w.uint32(120).int32(m.disposeId);
            if (m.robotIndices != null && m.robotIndices.length) {
                w.uint32(130).fork();
                for (var i = 0; i < m.robotIndices.length; ++i)
                    w.int32(m.robotIndices[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a FightData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FightData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FightData} FightData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FightData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FightData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleId = r.string();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    if (!(m.deckData && m.deckData.length))
                        m.deckData = [];
                    m.deckData.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                case 4:
                    m.criticalDamage = r.float();
                    break;
                case 5:
                    m.rankScore = r.int32();
                    break;
                case 6:
                    m.rankGrade = r.int32();
                    break;
                case 7:
                    m.continuousWin = r.int32();
                    break;
                case 8:
                    m.continuousLose = r.int32();
                    break;
                case 9:
                    m.roleLv = r.int32();
                    break;
                case 10:
                    m.allianceName = r.string();
                    break;
                case 11:
                    m.allianceIcon = r.int32();
                    break;
                case 12:
                    m.usedBattleMapID = r.int32();
                    break;
                case 13:
                    m.pvpCount = r.int32();
                    break;
                case 14:
                    m.pvpWinCount = r.int32();
                    break;
                case 15:
                    m.disposeId = r.int32();
                    break;
                case 16:
                    if (!(m.robotIndices && m.robotIndices.length))
                        m.robotIndices = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.robotIndices.push(r.int32());
                    } else
                        m.robotIndices.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FightData;
    })();

    proto.BountyFightData = (function() {

        /**
         * Properties of a BountyFightData.
         * @memberof proto
         * @interface IBountyFightData
         * @property {string|null} [roleId] BountyFightData roleId
         * @property {string|null} [name] BountyFightData name
         * @property {Array.<proto.IFightCardData>|null} [deckData] BountyFightData deckData
         * @property {number|null} [rankScore] BountyFightData rankScore
         * @property {number|null} [rankGrade] BountyFightData rankGrade
         * @property {number|null} [hp] BountyFightData hp
         * @property {boolean|null} [isCombating] BountyFightData isCombating
         * @property {number|null} [playerTag] BountyFightData playerTag
         */

        /**
         * Constructs a new BountyFightData.
         * @memberof proto
         * @classdesc Represents a BountyFightData.
         * @implements IBountyFightData
         * @constructor
         * @param {proto.IBountyFightData=} [p] Properties to set
         */
        function BountyFightData(p) {
            this.deckData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * BountyFightData roleId.
         * @member {string} roleId
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.roleId = "";

        /**
         * BountyFightData name.
         * @member {string} name
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.name = "";

        /**
         * BountyFightData deckData.
         * @member {Array.<proto.IFightCardData>} deckData
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.deckData = $util.emptyArray;

        /**
         * BountyFightData rankScore.
         * @member {number} rankScore
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.rankScore = 0;

        /**
         * BountyFightData rankGrade.
         * @member {number} rankGrade
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.rankGrade = 0;

        /**
         * BountyFightData hp.
         * @member {number} hp
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.hp = 0;

        /**
         * BountyFightData isCombating.
         * @member {boolean} isCombating
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.isCombating = false;

        /**
         * BountyFightData playerTag.
         * @member {number} playerTag
         * @memberof proto.BountyFightData
         * @instance
         */
        BountyFightData.prototype.playerTag = 0;

        /**
         * Encodes the specified BountyFightData message. Does not implicitly {@link proto.BountyFightData.verify|verify} messages.
         * @function encode
         * @memberof proto.BountyFightData
         * @static
         * @param {proto.IBountyFightData} m BountyFightData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BountyFightData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(10).string(m.roleId);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.deckData != null && m.deckData.length) {
                for (var i = 0; i < m.deckData.length; ++i)
                    $root.proto.FightCardData.encode(m.deckData[i], w.uint32(26).fork()).ldelim();
            }
            if (m.rankScore != null && Object.hasOwnProperty.call(m, "rankScore"))
                w.uint32(32).int32(m.rankScore);
            if (m.rankGrade != null && Object.hasOwnProperty.call(m, "rankGrade"))
                w.uint32(40).int32(m.rankGrade);
            if (m.hp != null && Object.hasOwnProperty.call(m, "hp"))
                w.uint32(48).int32(m.hp);
            if (m.isCombating != null && Object.hasOwnProperty.call(m, "isCombating"))
                w.uint32(56).bool(m.isCombating);
            if (m.playerTag != null && Object.hasOwnProperty.call(m, "playerTag"))
                w.uint32(64).int32(m.playerTag);
            return w;
        };

        /**
         * Decodes a BountyFightData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.BountyFightData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.BountyFightData} BountyFightData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BountyFightData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BountyFightData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleId = r.string();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    if (!(m.deckData && m.deckData.length))
                        m.deckData = [];
                    m.deckData.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                case 4:
                    m.rankScore = r.int32();
                    break;
                case 5:
                    m.rankGrade = r.int32();
                    break;
                case 6:
                    m.hp = r.int32();
                    break;
                case 7:
                    m.isCombating = r.bool();
                    break;
                case 8:
                    m.playerTag = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return BountyFightData;
    })();

    proto.Msg_Ping = (function() {

        /**
         * Properties of a Msg_Ping.
         * @memberof proto
         * @interface IMsg_Ping
         */

        /**
         * Constructs a new Msg_Ping.
         * @memberof proto
         * @classdesc Represents a Msg_Ping.
         * @implements IMsg_Ping
         * @constructor
         * @param {proto.IMsg_Ping=} [p] Properties to set
         */
        function Msg_Ping(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_Ping message. Does not implicitly {@link proto.Msg_Ping.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_Ping
         * @static
         * @param {proto.IMsg_Ping} m Msg_Ping message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_Ping.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_Ping message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_Ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_Ping} Msg_Ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_Ping.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_Ping();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_Ping;
    })();

    proto.Msg_LoginReq = (function() {

        /**
         * Properties of a Msg_LoginReq.
         * @memberof proto
         * @interface IMsg_LoginReq
         * @property {string|null} [uid] Msg_LoginReq uid
         * @property {string|null} [token] Msg_LoginReq token
         * @property {string|null} [group] Msg_LoginReq group
         * @property {number|null} [PlatID] Msg_LoginReq PlatID
         * @property {string|null} [sharedrid] Msg_LoginReq sharedrid
         * @property {string|null} [RainbowDistinctID] Msg_LoginReq RainbowDistinctID
         */

        /**
         * Constructs a new Msg_LoginReq.
         * @memberof proto
         * @classdesc Represents a Msg_LoginReq.
         * @implements IMsg_LoginReq
         * @constructor
         * @param {proto.IMsg_LoginReq=} [p] Properties to set
         */
        function Msg_LoginReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LoginReq uid.
         * @member {string} uid
         * @memberof proto.Msg_LoginReq
         * @instance
         */
        Msg_LoginReq.prototype.uid = "";

        /**
         * Msg_LoginReq token.
         * @member {string} token
         * @memberof proto.Msg_LoginReq
         * @instance
         */
        Msg_LoginReq.prototype.token = "";

        /**
         * Msg_LoginReq group.
         * @member {string} group
         * @memberof proto.Msg_LoginReq
         * @instance
         */
        Msg_LoginReq.prototype.group = "";

        /**
         * Msg_LoginReq PlatID.
         * @member {number} PlatID
         * @memberof proto.Msg_LoginReq
         * @instance
         */
        Msg_LoginReq.prototype.PlatID = 0;

        /**
         * Msg_LoginReq sharedrid.
         * @member {string} sharedrid
         * @memberof proto.Msg_LoginReq
         * @instance
         */
        Msg_LoginReq.prototype.sharedrid = "";

        /**
         * Msg_LoginReq RainbowDistinctID.
         * @member {string} RainbowDistinctID
         * @memberof proto.Msg_LoginReq
         * @instance
         */
        Msg_LoginReq.prototype.RainbowDistinctID = "";

        /**
         * Encodes the specified Msg_LoginReq message. Does not implicitly {@link proto.Msg_LoginReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LoginReq
         * @static
         * @param {proto.IMsg_LoginReq} m Msg_LoginReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LoginReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.uid != null && Object.hasOwnProperty.call(m, "uid"))
                w.uint32(10).string(m.uid);
            if (m.token != null && Object.hasOwnProperty.call(m, "token"))
                w.uint32(18).string(m.token);
            if (m.group != null && Object.hasOwnProperty.call(m, "group"))
                w.uint32(26).string(m.group);
            if (m.PlatID != null && Object.hasOwnProperty.call(m, "PlatID"))
                w.uint32(32).int32(m.PlatID);
            if (m.sharedrid != null && Object.hasOwnProperty.call(m, "sharedrid"))
                w.uint32(42).string(m.sharedrid);
            if (m.RainbowDistinctID != null && Object.hasOwnProperty.call(m, "RainbowDistinctID"))
                w.uint32(50).string(m.RainbowDistinctID);
            return w;
        };

        /**
         * Decodes a Msg_LoginReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LoginReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LoginReq} Msg_LoginReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LoginReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LoginReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.uid = r.string();
                    break;
                case 2:
                    m.token = r.string();
                    break;
                case 3:
                    m.group = r.string();
                    break;
                case 4:
                    m.PlatID = r.int32();
                    break;
                case 5:
                    m.sharedrid = r.string();
                    break;
                case 6:
                    m.RainbowDistinctID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LoginReq;
    })();

    proto.Msg_LoginRsp = (function() {

        /**
         * Properties of a Msg_LoginRsp.
         * @memberof proto
         * @interface IMsg_LoginRsp
         * @property {proto.Msg_LoginRsp.ErrorCode|null} [result] Msg_LoginRsp result
         * @property {boolean|null} [isFighting] Msg_LoginRsp isFighting
         */

        /**
         * Constructs a new Msg_LoginRsp.
         * @memberof proto
         * @classdesc Represents a Msg_LoginRsp.
         * @implements IMsg_LoginRsp
         * @constructor
         * @param {proto.IMsg_LoginRsp=} [p] Properties to set
         */
        function Msg_LoginRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LoginRsp result.
         * @member {proto.Msg_LoginRsp.ErrorCode} result
         * @memberof proto.Msg_LoginRsp
         * @instance
         */
        Msg_LoginRsp.prototype.result = 0;

        /**
         * Msg_LoginRsp isFighting.
         * @member {boolean} isFighting
         * @memberof proto.Msg_LoginRsp
         * @instance
         */
        Msg_LoginRsp.prototype.isFighting = false;

        /**
         * Encodes the specified Msg_LoginRsp message. Does not implicitly {@link proto.Msg_LoginRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LoginRsp
         * @static
         * @param {proto.IMsg_LoginRsp} m Msg_LoginRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LoginRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.isFighting != null && Object.hasOwnProperty.call(m, "isFighting"))
                w.uint32(16).bool(m.isFighting);
            return w;
        };

        /**
         * Decodes a Msg_LoginRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LoginRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LoginRsp} Msg_LoginRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LoginRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LoginRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.isFighting = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_LoginRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Failed=1 Failed value
         * @property {number} NoRole=2 NoRole value
         * @property {number} PreventIndulgeTime=3 PreventIndulgeTime value
         * @property {number} PreventIndulgeSpecialTime=4 PreventIndulgeSpecialTime value
         */
        Msg_LoginRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Failed"] = 1;
            values[valuesById[2] = "NoRole"] = 2;
            values[valuesById[3] = "PreventIndulgeTime"] = 3;
            values[valuesById[4] = "PreventIndulgeSpecialTime"] = 4;
            return values;
        })();

        return Msg_LoginRsp;
    })();

    proto.Msg_CreatRoleReq = (function() {

        /**
         * Properties of a Msg_CreatRoleReq.
         * @memberof proto
         * @interface IMsg_CreatRoleReq
         * @property {string|null} [name] Msg_CreatRoleReq name
         * @property {proto.Gender|null} [gender] Msg_CreatRoleReq gender
         * @property {number|null} [PlatId] Msg_CreatRoleReq PlatId
         * @property {string|null} [recommendRoleID] Msg_CreatRoleReq recommendRoleID
         * @property {string|null} [idNumber] Msg_CreatRoleReq idNumber
         * @property {string|null} [relayMsg] Msg_CreatRoleReq relayMsg
         */

        /**
         * Constructs a new Msg_CreatRoleReq.
         * @memberof proto
         * @classdesc Represents a Msg_CreatRoleReq.
         * @implements IMsg_CreatRoleReq
         * @constructor
         * @param {proto.IMsg_CreatRoleReq=} [p] Properties to set
         */
        function Msg_CreatRoleReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CreatRoleReq name.
         * @member {string} name
         * @memberof proto.Msg_CreatRoleReq
         * @instance
         */
        Msg_CreatRoleReq.prototype.name = "";

        /**
         * Msg_CreatRoleReq gender.
         * @member {proto.Gender} gender
         * @memberof proto.Msg_CreatRoleReq
         * @instance
         */
        Msg_CreatRoleReq.prototype.gender = 0;

        /**
         * Msg_CreatRoleReq PlatId.
         * @member {number} PlatId
         * @memberof proto.Msg_CreatRoleReq
         * @instance
         */
        Msg_CreatRoleReq.prototype.PlatId = 0;

        /**
         * Msg_CreatRoleReq recommendRoleID.
         * @member {string} recommendRoleID
         * @memberof proto.Msg_CreatRoleReq
         * @instance
         */
        Msg_CreatRoleReq.prototype.recommendRoleID = "";

        /**
         * Msg_CreatRoleReq idNumber.
         * @member {string} idNumber
         * @memberof proto.Msg_CreatRoleReq
         * @instance
         */
        Msg_CreatRoleReq.prototype.idNumber = "";

        /**
         * Msg_CreatRoleReq relayMsg.
         * @member {string} relayMsg
         * @memberof proto.Msg_CreatRoleReq
         * @instance
         */
        Msg_CreatRoleReq.prototype.relayMsg = "";

        /**
         * Encodes the specified Msg_CreatRoleReq message. Does not implicitly {@link proto.Msg_CreatRoleReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CreatRoleReq
         * @static
         * @param {proto.IMsg_CreatRoleReq} m Msg_CreatRoleReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CreatRoleReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(10).string(m.name);
            if (m.gender != null && Object.hasOwnProperty.call(m, "gender"))
                w.uint32(16).int32(m.gender);
            if (m.PlatId != null && Object.hasOwnProperty.call(m, "PlatId"))
                w.uint32(24).int32(m.PlatId);
            if (m.recommendRoleID != null && Object.hasOwnProperty.call(m, "recommendRoleID"))
                w.uint32(34).string(m.recommendRoleID);
            if (m.idNumber != null && Object.hasOwnProperty.call(m, "idNumber"))
                w.uint32(42).string(m.idNumber);
            if (m.relayMsg != null && Object.hasOwnProperty.call(m, "relayMsg"))
                w.uint32(50).string(m.relayMsg);
            return w;
        };

        /**
         * Decodes a Msg_CreatRoleReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CreatRoleReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CreatRoleReq} Msg_CreatRoleReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CreatRoleReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CreatRoleReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.name = r.string();
                    break;
                case 2:
                    m.gender = r.int32();
                    break;
                case 3:
                    m.PlatId = r.int32();
                    break;
                case 4:
                    m.recommendRoleID = r.string();
                    break;
                case 5:
                    m.idNumber = r.string();
                    break;
                case 6:
                    m.relayMsg = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CreatRoleReq;
    })();

    proto.Msg_CreatRoleRsp = (function() {

        /**
         * Properties of a Msg_CreatRoleRsp.
         * @memberof proto
         * @interface IMsg_CreatRoleRsp
         * @property {proto.Msg_CreatRoleRsp.ErrorCode|null} [result] Msg_CreatRoleRsp result
         */

        /**
         * Constructs a new Msg_CreatRoleRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CreatRoleRsp.
         * @implements IMsg_CreatRoleRsp
         * @constructor
         * @param {proto.IMsg_CreatRoleRsp=} [p] Properties to set
         */
        function Msg_CreatRoleRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CreatRoleRsp result.
         * @member {proto.Msg_CreatRoleRsp.ErrorCode} result
         * @memberof proto.Msg_CreatRoleRsp
         * @instance
         */
        Msg_CreatRoleRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_CreatRoleRsp message. Does not implicitly {@link proto.Msg_CreatRoleRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CreatRoleRsp
         * @static
         * @param {proto.IMsg_CreatRoleRsp} m Msg_CreatRoleRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CreatRoleRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_CreatRoleRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CreatRoleRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CreatRoleRsp} Msg_CreatRoleRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CreatRoleRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CreatRoleRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_CreatRoleRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} InvalidName=1 InvalidName value
         * @property {number} DuplicatedName=2 DuplicatedName value
         * @property {number} MaxRoleCount=3 MaxRoleCount value
         */
        Msg_CreatRoleRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "InvalidName"] = 1;
            values[valuesById[2] = "DuplicatedName"] = 2;
            values[valuesById[3] = "MaxRoleCount"] = 3;
            return values;
        })();

        return Msg_CreatRoleRsp;
    })();

    proto.RankData = (function() {

        /**
         * Properties of a RankData.
         * @memberof proto
         * @interface IRankData
         * @property {number|null} [score] RankData score
         * @property {Array.<number>|null} [gotSocreRewardId] RankData gotSocreRewardId
         * @property {number|null} [historyMaxScore] RankData historyMaxScore
         * @property {number|null} [fightId] RankData fightId
         * @property {number|null} [buffEndUTC] RankData buffEndUTC
         * @property {number|null} [maxScore] RankData maxScore
         * @property {number|null} [oldScore] RankData oldScore
         * @property {number|null} [oldMaxScore] RankData oldMaxScore
         * @property {boolean|null} [isLastWin] RankData isLastWin
         * @property {number|null} [continuousWin] RankData continuousWin
         * @property {number|null} [continuousLose] RankData continuousLose
         * @property {number|null} [oldFakeRank] RankData oldFakeRank
         * @property {number|null} [scoreChangeTime] RankData scoreChangeTime
         * @property {boolean|null} [Matching] RankData Matching
         */

        /**
         * Constructs a new RankData.
         * @memberof proto
         * @classdesc Represents a RankData.
         * @implements IRankData
         * @constructor
         * @param {proto.IRankData=} [p] Properties to set
         */
        function RankData(p) {
            this.gotSocreRewardId = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RankData score.
         * @member {number} score
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.score = 0;

        /**
         * RankData gotSocreRewardId.
         * @member {Array.<number>} gotSocreRewardId
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.gotSocreRewardId = $util.emptyArray;

        /**
         * RankData historyMaxScore.
         * @member {number} historyMaxScore
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.historyMaxScore = 0;

        /**
         * RankData fightId.
         * @member {number} fightId
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.fightId = 0;

        /**
         * RankData buffEndUTC.
         * @member {number} buffEndUTC
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.buffEndUTC = 0;

        /**
         * RankData maxScore.
         * @member {number} maxScore
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.maxScore = 0;

        /**
         * RankData oldScore.
         * @member {number} oldScore
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.oldScore = 0;

        /**
         * RankData oldMaxScore.
         * @member {number} oldMaxScore
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.oldMaxScore = 0;

        /**
         * RankData isLastWin.
         * @member {boolean} isLastWin
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.isLastWin = false;

        /**
         * RankData continuousWin.
         * @member {number} continuousWin
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.continuousWin = 0;

        /**
         * RankData continuousLose.
         * @member {number} continuousLose
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.continuousLose = 0;

        /**
         * RankData oldFakeRank.
         * @member {number} oldFakeRank
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.oldFakeRank = 0;

        /**
         * RankData scoreChangeTime.
         * @member {number} scoreChangeTime
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.scoreChangeTime = 0;

        /**
         * RankData Matching.
         * @member {boolean} Matching
         * @memberof proto.RankData
         * @instance
         */
        RankData.prototype.Matching = false;

        /**
         * Encodes the specified RankData message. Does not implicitly {@link proto.RankData.verify|verify} messages.
         * @function encode
         * @memberof proto.RankData
         * @static
         * @param {proto.IRankData} m RankData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(8).int32(m.score);
            if (m.gotSocreRewardId != null && m.gotSocreRewardId.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.gotSocreRewardId.length; ++i)
                    w.int32(m.gotSocreRewardId[i]);
                w.ldelim();
            }
            if (m.historyMaxScore != null && Object.hasOwnProperty.call(m, "historyMaxScore"))
                w.uint32(24).int32(m.historyMaxScore);
            if (m.fightId != null && Object.hasOwnProperty.call(m, "fightId"))
                w.uint32(32).int32(m.fightId);
            if (m.buffEndUTC != null && Object.hasOwnProperty.call(m, "buffEndUTC"))
                w.uint32(40).int32(m.buffEndUTC);
            if (m.maxScore != null && Object.hasOwnProperty.call(m, "maxScore"))
                w.uint32(48).int32(m.maxScore);
            if (m.oldScore != null && Object.hasOwnProperty.call(m, "oldScore"))
                w.uint32(56).int32(m.oldScore);
            if (m.oldMaxScore != null && Object.hasOwnProperty.call(m, "oldMaxScore"))
                w.uint32(64).int32(m.oldMaxScore);
            if (m.isLastWin != null && Object.hasOwnProperty.call(m, "isLastWin"))
                w.uint32(72).bool(m.isLastWin);
            if (m.continuousWin != null && Object.hasOwnProperty.call(m, "continuousWin"))
                w.uint32(80).int32(m.continuousWin);
            if (m.continuousLose != null && Object.hasOwnProperty.call(m, "continuousLose"))
                w.uint32(88).int32(m.continuousLose);
            if (m.oldFakeRank != null && Object.hasOwnProperty.call(m, "oldFakeRank"))
                w.uint32(96).int32(m.oldFakeRank);
            if (m.scoreChangeTime != null && Object.hasOwnProperty.call(m, "scoreChangeTime"))
                w.uint32(104).int32(m.scoreChangeTime);
            if (m.Matching != null && Object.hasOwnProperty.call(m, "Matching"))
                w.uint32(112).bool(m.Matching);
            return w;
        };

        /**
         * Decodes a RankData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RankData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RankData} RankData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RankData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.score = r.int32();
                    break;
                case 2:
                    if (!(m.gotSocreRewardId && m.gotSocreRewardId.length))
                        m.gotSocreRewardId = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.gotSocreRewardId.push(r.int32());
                    } else
                        m.gotSocreRewardId.push(r.int32());
                    break;
                case 3:
                    m.historyMaxScore = r.int32();
                    break;
                case 4:
                    m.fightId = r.int32();
                    break;
                case 5:
                    m.buffEndUTC = r.int32();
                    break;
                case 6:
                    m.maxScore = r.int32();
                    break;
                case 7:
                    m.oldScore = r.int32();
                    break;
                case 8:
                    m.oldMaxScore = r.int32();
                    break;
                case 9:
                    m.isLastWin = r.bool();
                    break;
                case 10:
                    m.continuousWin = r.int32();
                    break;
                case 11:
                    m.continuousLose = r.int32();
                    break;
                case 12:
                    m.oldFakeRank = r.int32();
                    break;
                case 13:
                    m.scoreChangeTime = r.int32();
                    break;
                case 14:
                    m.Matching = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RankData;
    })();

    proto.Msg_BossBoxInfoReq = (function() {

        /**
         * Properties of a Msg_BossBoxInfoReq.
         * @memberof proto
         * @interface IMsg_BossBoxInfoReq
         */

        /**
         * Constructs a new Msg_BossBoxInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_BossBoxInfoReq.
         * @implements IMsg_BossBoxInfoReq
         * @constructor
         * @param {proto.IMsg_BossBoxInfoReq=} [p] Properties to set
         */
        function Msg_BossBoxInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_BossBoxInfoReq message. Does not implicitly {@link proto.Msg_BossBoxInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BossBoxInfoReq
         * @static
         * @param {proto.IMsg_BossBoxInfoReq} m Msg_BossBoxInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BossBoxInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_BossBoxInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BossBoxInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BossBoxInfoReq} Msg_BossBoxInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BossBoxInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BossBoxInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BossBoxInfoReq;
    })();

    proto.Msg_BossBoxInfoRsp = (function() {

        /**
         * Properties of a Msg_BossBoxInfoRsp.
         * @memberof proto
         * @interface IMsg_BossBoxInfoRsp
         * @property {proto.IBossBoxData|null} [data] Msg_BossBoxInfoRsp data
         * @property {number|null} [nextDayUnLockLv] Msg_BossBoxInfoRsp nextDayUnLockLv
         */

        /**
         * Constructs a new Msg_BossBoxInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BossBoxInfoRsp.
         * @implements IMsg_BossBoxInfoRsp
         * @constructor
         * @param {proto.IMsg_BossBoxInfoRsp=} [p] Properties to set
         */
        function Msg_BossBoxInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BossBoxInfoRsp data.
         * @member {proto.IBossBoxData|null|undefined} data
         * @memberof proto.Msg_BossBoxInfoRsp
         * @instance
         */
        Msg_BossBoxInfoRsp.prototype.data = null;

        /**
         * Msg_BossBoxInfoRsp nextDayUnLockLv.
         * @member {number} nextDayUnLockLv
         * @memberof proto.Msg_BossBoxInfoRsp
         * @instance
         */
        Msg_BossBoxInfoRsp.prototype.nextDayUnLockLv = 0;

        /**
         * Encodes the specified Msg_BossBoxInfoRsp message. Does not implicitly {@link proto.Msg_BossBoxInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BossBoxInfoRsp
         * @static
         * @param {proto.IMsg_BossBoxInfoRsp} m Msg_BossBoxInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BossBoxInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.proto.BossBoxData.encode(m.data, w.uint32(10).fork()).ldelim();
            if (m.nextDayUnLockLv != null && Object.hasOwnProperty.call(m, "nextDayUnLockLv"))
                w.uint32(16).int32(m.nextDayUnLockLv);
            return w;
        };

        /**
         * Decodes a Msg_BossBoxInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BossBoxInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BossBoxInfoRsp} Msg_BossBoxInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BossBoxInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BossBoxInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.data = $root.proto.BossBoxData.decode(r, r.uint32());
                    break;
                case 2:
                    m.nextDayUnLockLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BossBoxInfoRsp;
    })();

    proto.Msg_BossBoxUnlockLvReq = (function() {

        /**
         * Properties of a Msg_BossBoxUnlockLvReq.
         * @memberof proto
         * @interface IMsg_BossBoxUnlockLvReq
         * @property {number|null} [lv] Msg_BossBoxUnlockLvReq lv
         */

        /**
         * Constructs a new Msg_BossBoxUnlockLvReq.
         * @memberof proto
         * @classdesc Represents a Msg_BossBoxUnlockLvReq.
         * @implements IMsg_BossBoxUnlockLvReq
         * @constructor
         * @param {proto.IMsg_BossBoxUnlockLvReq=} [p] Properties to set
         */
        function Msg_BossBoxUnlockLvReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BossBoxUnlockLvReq lv.
         * @member {number} lv
         * @memberof proto.Msg_BossBoxUnlockLvReq
         * @instance
         */
        Msg_BossBoxUnlockLvReq.prototype.lv = 0;

        /**
         * Encodes the specified Msg_BossBoxUnlockLvReq message. Does not implicitly {@link proto.Msg_BossBoxUnlockLvReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BossBoxUnlockLvReq
         * @static
         * @param {proto.IMsg_BossBoxUnlockLvReq} m Msg_BossBoxUnlockLvReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BossBoxUnlockLvReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.lv != null && Object.hasOwnProperty.call(m, "lv"))
                w.uint32(8).int32(m.lv);
            return w;
        };

        /**
         * Decodes a Msg_BossBoxUnlockLvReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BossBoxUnlockLvReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BossBoxUnlockLvReq} Msg_BossBoxUnlockLvReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BossBoxUnlockLvReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BossBoxUnlockLvReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.lv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BossBoxUnlockLvReq;
    })();

    proto.Msg_BossBoxUnlockLvRsp = (function() {

        /**
         * Properties of a Msg_BossBoxUnlockLvRsp.
         * @memberof proto
         * @interface IMsg_BossBoxUnlockLvRsp
         * @property {proto.Msg_BossBoxUnlockLvRsp.ErrorCode|null} [result] Msg_BossBoxUnlockLvRsp result
         * @property {number|null} [lv] Msg_BossBoxUnlockLvRsp lv
         */

        /**
         * Constructs a new Msg_BossBoxUnlockLvRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BossBoxUnlockLvRsp.
         * @implements IMsg_BossBoxUnlockLvRsp
         * @constructor
         * @param {proto.IMsg_BossBoxUnlockLvRsp=} [p] Properties to set
         */
        function Msg_BossBoxUnlockLvRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BossBoxUnlockLvRsp result.
         * @member {proto.Msg_BossBoxUnlockLvRsp.ErrorCode} result
         * @memberof proto.Msg_BossBoxUnlockLvRsp
         * @instance
         */
        Msg_BossBoxUnlockLvRsp.prototype.result = 0;

        /**
         * Msg_BossBoxUnlockLvRsp lv.
         * @member {number} lv
         * @memberof proto.Msg_BossBoxUnlockLvRsp
         * @instance
         */
        Msg_BossBoxUnlockLvRsp.prototype.lv = 0;

        /**
         * Encodes the specified Msg_BossBoxUnlockLvRsp message. Does not implicitly {@link proto.Msg_BossBoxUnlockLvRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BossBoxUnlockLvRsp
         * @static
         * @param {proto.IMsg_BossBoxUnlockLvRsp} m Msg_BossBoxUnlockLvRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BossBoxUnlockLvRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.lv != null && Object.hasOwnProperty.call(m, "lv"))
                w.uint32(16).int32(m.lv);
            return w;
        };

        /**
         * Decodes a Msg_BossBoxUnlockLvRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BossBoxUnlockLvRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BossBoxUnlockLvRsp} Msg_BossBoxUnlockLvRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BossBoxUnlockLvRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BossBoxUnlockLvRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.lv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BossBoxUnlockLvRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} MaxLevel=1 MaxLevel value
         * @property {number} DiamondLack=2 DiamondLack value
         * @property {number} LvError=3 LvError value
         * @property {number} TimeLimit=4 TimeLimit value
         */
        Msg_BossBoxUnlockLvRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "MaxLevel"] = 1;
            values[valuesById[2] = "DiamondLack"] = 2;
            values[valuesById[3] = "LvError"] = 3;
            values[valuesById[4] = "TimeLimit"] = 4;
            return values;
        })();

        return Msg_BossBoxUnlockLvRsp;
    })();

    proto.Msg_BossBoxGetLvRewardReq = (function() {

        /**
         * Properties of a Msg_BossBoxGetLvRewardReq.
         * @memberof proto
         * @interface IMsg_BossBoxGetLvRewardReq
         * @property {number|null} [bossBoxId] Msg_BossBoxGetLvRewardReq bossBoxId
         * @property {number|null} [optionalId] Msg_BossBoxGetLvRewardReq optionalId
         */

        /**
         * Constructs a new Msg_BossBoxGetLvRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_BossBoxGetLvRewardReq.
         * @implements IMsg_BossBoxGetLvRewardReq
         * @constructor
         * @param {proto.IMsg_BossBoxGetLvRewardReq=} [p] Properties to set
         */
        function Msg_BossBoxGetLvRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BossBoxGetLvRewardReq bossBoxId.
         * @member {number} bossBoxId
         * @memberof proto.Msg_BossBoxGetLvRewardReq
         * @instance
         */
        Msg_BossBoxGetLvRewardReq.prototype.bossBoxId = 0;

        /**
         * Msg_BossBoxGetLvRewardReq optionalId.
         * @member {number} optionalId
         * @memberof proto.Msg_BossBoxGetLvRewardReq
         * @instance
         */
        Msg_BossBoxGetLvRewardReq.prototype.optionalId = 0;

        /**
         * Encodes the specified Msg_BossBoxGetLvRewardReq message. Does not implicitly {@link proto.Msg_BossBoxGetLvRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BossBoxGetLvRewardReq
         * @static
         * @param {proto.IMsg_BossBoxGetLvRewardReq} m Msg_BossBoxGetLvRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BossBoxGetLvRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bossBoxId != null && Object.hasOwnProperty.call(m, "bossBoxId"))
                w.uint32(8).int32(m.bossBoxId);
            if (m.optionalId != null && Object.hasOwnProperty.call(m, "optionalId"))
                w.uint32(16).int32(m.optionalId);
            return w;
        };

        /**
         * Decodes a Msg_BossBoxGetLvRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BossBoxGetLvRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BossBoxGetLvRewardReq} Msg_BossBoxGetLvRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BossBoxGetLvRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BossBoxGetLvRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bossBoxId = r.int32();
                    break;
                case 2:
                    m.optionalId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BossBoxGetLvRewardReq;
    })();

    proto.Msg_BossBoxGetLvRewardRsp = (function() {

        /**
         * Properties of a Msg_BossBoxGetLvRewardRsp.
         * @memberof proto
         * @interface IMsg_BossBoxGetLvRewardRsp
         * @property {proto.Msg_BossBoxGetLvRewardRsp.ErrorCode|null} [result] Msg_BossBoxGetLvRewardRsp result
         * @property {number|null} [bossBoxId] Msg_BossBoxGetLvRewardRsp bossBoxId
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_BossBoxGetLvRewardRsp reward
         */

        /**
         * Constructs a new Msg_BossBoxGetLvRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BossBoxGetLvRewardRsp.
         * @implements IMsg_BossBoxGetLvRewardRsp
         * @constructor
         * @param {proto.IMsg_BossBoxGetLvRewardRsp=} [p] Properties to set
         */
        function Msg_BossBoxGetLvRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BossBoxGetLvRewardRsp result.
         * @member {proto.Msg_BossBoxGetLvRewardRsp.ErrorCode} result
         * @memberof proto.Msg_BossBoxGetLvRewardRsp
         * @instance
         */
        Msg_BossBoxGetLvRewardRsp.prototype.result = 0;

        /**
         * Msg_BossBoxGetLvRewardRsp bossBoxId.
         * @member {number} bossBoxId
         * @memberof proto.Msg_BossBoxGetLvRewardRsp
         * @instance
         */
        Msg_BossBoxGetLvRewardRsp.prototype.bossBoxId = 0;

        /**
         * Msg_BossBoxGetLvRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_BossBoxGetLvRewardRsp
         * @instance
         */
        Msg_BossBoxGetLvRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Encodes the specified Msg_BossBoxGetLvRewardRsp message. Does not implicitly {@link proto.Msg_BossBoxGetLvRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BossBoxGetLvRewardRsp
         * @static
         * @param {proto.IMsg_BossBoxGetLvRewardRsp} m Msg_BossBoxGetLvRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BossBoxGetLvRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.bossBoxId != null && Object.hasOwnProperty.call(m, "bossBoxId"))
                w.uint32(16).int32(m.bossBoxId);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BossBoxGetLvRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BossBoxGetLvRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BossBoxGetLvRewardRsp} Msg_BossBoxGetLvRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BossBoxGetLvRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BossBoxGetLvRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.bossBoxId = r.int32();
                    break;
                case 3:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BossBoxGetLvRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyGotReward=1 AlreadyGotReward value
         * @property {number} LevelNotEnough=2 LevelNotEnough value
         * @property {number} LevleIsLock=3 LevleIsLock value
         * @property {number} OperatorFailed=4 OperatorFailed value
         */
        Msg_BossBoxGetLvRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyGotReward"] = 1;
            values[valuesById[2] = "LevelNotEnough"] = 2;
            values[valuesById[3] = "LevleIsLock"] = 3;
            values[valuesById[4] = "OperatorFailed"] = 4;
            return values;
        })();

        return Msg_BossBoxGetLvRewardRsp;
    })();

    proto.BossBoxData = (function() {

        /**
         * Properties of a BossBoxData.
         * @memberof proto
         * @interface IBossBoxData
         * @property {number|null} [level] BossBoxData level
         * @property {number|null} [exp] BossBoxData exp
         * @property {Array.<number>|null} [gotBossBoxRewardLevels] BossBoxData gotBossBoxRewardLevels
         * @property {Array.<number>|null} [gotBossBoxVipRewardLevels] BossBoxData gotBossBoxVipRewardLevels
         */

        /**
         * Constructs a new BossBoxData.
         * @memberof proto
         * @classdesc Represents a BossBoxData.
         * @implements IBossBoxData
         * @constructor
         * @param {proto.IBossBoxData=} [p] Properties to set
         */
        function BossBoxData(p) {
            this.gotBossBoxRewardLevels = [];
            this.gotBossBoxVipRewardLevels = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * BossBoxData level.
         * @member {number} level
         * @memberof proto.BossBoxData
         * @instance
         */
        BossBoxData.prototype.level = 0;

        /**
         * BossBoxData exp.
         * @member {number} exp
         * @memberof proto.BossBoxData
         * @instance
         */
        BossBoxData.prototype.exp = 0;

        /**
         * BossBoxData gotBossBoxRewardLevels.
         * @member {Array.<number>} gotBossBoxRewardLevels
         * @memberof proto.BossBoxData
         * @instance
         */
        BossBoxData.prototype.gotBossBoxRewardLevels = $util.emptyArray;

        /**
         * BossBoxData gotBossBoxVipRewardLevels.
         * @member {Array.<number>} gotBossBoxVipRewardLevels
         * @memberof proto.BossBoxData
         * @instance
         */
        BossBoxData.prototype.gotBossBoxVipRewardLevels = $util.emptyArray;

        /**
         * Encodes the specified BossBoxData message. Does not implicitly {@link proto.BossBoxData.verify|verify} messages.
         * @function encode
         * @memberof proto.BossBoxData
         * @static
         * @param {proto.IBossBoxData} m BossBoxData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BossBoxData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.level != null && Object.hasOwnProperty.call(m, "level"))
                w.uint32(8).int32(m.level);
            if (m.exp != null && Object.hasOwnProperty.call(m, "exp"))
                w.uint32(16).int32(m.exp);
            if (m.gotBossBoxRewardLevels != null && m.gotBossBoxRewardLevels.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.gotBossBoxRewardLevels.length; ++i)
                    w.int32(m.gotBossBoxRewardLevels[i]);
                w.ldelim();
            }
            if (m.gotBossBoxVipRewardLevels != null && m.gotBossBoxVipRewardLevels.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.gotBossBoxVipRewardLevels.length; ++i)
                    w.int32(m.gotBossBoxVipRewardLevels[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a BossBoxData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.BossBoxData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.BossBoxData} BossBoxData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BossBoxData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BossBoxData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.level = r.int32();
                    break;
                case 2:
                    m.exp = r.int32();
                    break;
                case 3:
                    if (!(m.gotBossBoxRewardLevels && m.gotBossBoxRewardLevels.length))
                        m.gotBossBoxRewardLevels = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.gotBossBoxRewardLevels.push(r.int32());
                    } else
                        m.gotBossBoxRewardLevels.push(r.int32());
                    break;
                case 4:
                    if (!(m.gotBossBoxVipRewardLevels && m.gotBossBoxVipRewardLevels.length))
                        m.gotBossBoxVipRewardLevels = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.gotBossBoxVipRewardLevels.push(r.int32());
                    } else
                        m.gotBossBoxVipRewardLevels.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return BossBoxData;
    })();

    proto.CooperateBoxData = (function() {

        /**
         * Properties of a CooperateBoxData.
         * @memberof proto
         * @interface ICooperateBoxData
         * @property {number|null} [progress] CooperateBoxData progress
         */

        /**
         * Constructs a new CooperateBoxData.
         * @memberof proto
         * @classdesc Represents a CooperateBoxData.
         * @implements ICooperateBoxData
         * @constructor
         * @param {proto.ICooperateBoxData=} [p] Properties to set
         */
        function CooperateBoxData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CooperateBoxData progress.
         * @member {number} progress
         * @memberof proto.CooperateBoxData
         * @instance
         */
        CooperateBoxData.prototype.progress = 0;

        /**
         * Encodes the specified CooperateBoxData message. Does not implicitly {@link proto.CooperateBoxData.verify|verify} messages.
         * @function encode
         * @memberof proto.CooperateBoxData
         * @static
         * @param {proto.ICooperateBoxData} m CooperateBoxData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CooperateBoxData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.progress != null && Object.hasOwnProperty.call(m, "progress"))
                w.uint32(8).int32(m.progress);
            return w;
        };

        /**
         * Decodes a CooperateBoxData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CooperateBoxData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CooperateBoxData} CooperateBoxData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CooperateBoxData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CooperateBoxData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.progress = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CooperateBoxData;
    })();

    proto.Msg_SyncRole = (function() {

        /**
         * Properties of a Msg_SyncRole.
         * @memberof proto
         * @interface IMsg_SyncRole
         * @property {proto.IRoleData|null} [data] Msg_SyncRole data
         */

        /**
         * Constructs a new Msg_SyncRole.
         * @memberof proto
         * @classdesc Represents a Msg_SyncRole.
         * @implements IMsg_SyncRole
         * @constructor
         * @param {proto.IMsg_SyncRole=} [p] Properties to set
         */
        function Msg_SyncRole(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SyncRole data.
         * @member {proto.IRoleData|null|undefined} data
         * @memberof proto.Msg_SyncRole
         * @instance
         */
        Msg_SyncRole.prototype.data = null;

        /**
         * Encodes the specified Msg_SyncRole message. Does not implicitly {@link proto.Msg_SyncRole.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SyncRole
         * @static
         * @param {proto.IMsg_SyncRole} m Msg_SyncRole message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SyncRole.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.proto.RoleData.encode(m.data, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_SyncRole message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SyncRole
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SyncRole} Msg_SyncRole
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SyncRole.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SyncRole();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.data = $root.proto.RoleData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SyncRole;
    })();

    proto.Msg_ChangeDecksReq = (function() {

        /**
         * Properties of a Msg_ChangeDecksReq.
         * @memberof proto
         * @interface IMsg_ChangeDecksReq
         * @property {number|null} [deckIndex] Msg_ChangeDecksReq deckIndex
         * @property {number|null} [cardIndex] Msg_ChangeDecksReq cardIndex
         * @property {string|null} [cardUuid] Msg_ChangeDecksReq cardUuid
         */

        /**
         * Constructs a new Msg_ChangeDecksReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeDecksReq.
         * @implements IMsg_ChangeDecksReq
         * @constructor
         * @param {proto.IMsg_ChangeDecksReq=} [p] Properties to set
         */
        function Msg_ChangeDecksReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeDecksReq deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_ChangeDecksReq
         * @instance
         */
        Msg_ChangeDecksReq.prototype.deckIndex = 0;

        /**
         * Msg_ChangeDecksReq cardIndex.
         * @member {number} cardIndex
         * @memberof proto.Msg_ChangeDecksReq
         * @instance
         */
        Msg_ChangeDecksReq.prototype.cardIndex = 0;

        /**
         * Msg_ChangeDecksReq cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_ChangeDecksReq
         * @instance
         */
        Msg_ChangeDecksReq.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_ChangeDecksReq message. Does not implicitly {@link proto.Msg_ChangeDecksReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeDecksReq
         * @static
         * @param {proto.IMsg_ChangeDecksReq} m Msg_ChangeDecksReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeDecksReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(8).int32(m.deckIndex);
            if (m.cardIndex != null && Object.hasOwnProperty.call(m, "cardIndex"))
                w.uint32(16).int32(m.cardIndex);
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(26).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_ChangeDecksReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeDecksReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeDecksReq} Msg_ChangeDecksReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeDecksReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeDecksReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.deckIndex = r.int32();
                    break;
                case 2:
                    m.cardIndex = r.int32();
                    break;
                case 3:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeDecksReq;
    })();

    proto.Msg_ChangeDecksRsp = (function() {

        /**
         * Properties of a Msg_ChangeDecksRsp.
         * @memberof proto
         * @interface IMsg_ChangeDecksRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ChangeDecksRsp result
         * @property {number|null} [deckIndex] Msg_ChangeDecksRsp deckIndex
         * @property {Array.<string>|null} [deckItems] Msg_ChangeDecksRsp deckItems
         */

        /**
         * Constructs a new Msg_ChangeDecksRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeDecksRsp.
         * @implements IMsg_ChangeDecksRsp
         * @constructor
         * @param {proto.IMsg_ChangeDecksRsp=} [p] Properties to set
         */
        function Msg_ChangeDecksRsp(p) {
            this.deckItems = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeDecksRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ChangeDecksRsp
         * @instance
         */
        Msg_ChangeDecksRsp.prototype.result = 0;

        /**
         * Msg_ChangeDecksRsp deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_ChangeDecksRsp
         * @instance
         */
        Msg_ChangeDecksRsp.prototype.deckIndex = 0;

        /**
         * Msg_ChangeDecksRsp deckItems.
         * @member {Array.<string>} deckItems
         * @memberof proto.Msg_ChangeDecksRsp
         * @instance
         */
        Msg_ChangeDecksRsp.prototype.deckItems = $util.emptyArray;

        /**
         * Encodes the specified Msg_ChangeDecksRsp message. Does not implicitly {@link proto.Msg_ChangeDecksRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeDecksRsp
         * @static
         * @param {proto.IMsg_ChangeDecksRsp} m Msg_ChangeDecksRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeDecksRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(16).int32(m.deckIndex);
            if (m.deckItems != null && m.deckItems.length) {
                for (var i = 0; i < m.deckItems.length; ++i)
                    w.uint32(26).string(m.deckItems[i]);
            }
            return w;
        };

        /**
         * Decodes a Msg_ChangeDecksRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeDecksRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeDecksRsp} Msg_ChangeDecksRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeDecksRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeDecksRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.deckIndex = r.int32();
                    break;
                case 3:
                    if (!(m.deckItems && m.deckItems.length))
                        m.deckItems = [];
                    m.deckItems.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeDecksRsp;
    })();

    proto.Msg_SetLordReq = (function() {

        /**
         * Properties of a Msg_SetLordReq.
         * @memberof proto
         * @interface IMsg_SetLordReq
         * @property {number|null} [deckIndex] Msg_SetLordReq deckIndex
         * @property {string|null} [cardUUID] Msg_SetLordReq cardUUID
         */

        /**
         * Constructs a new Msg_SetLordReq.
         * @memberof proto
         * @classdesc Represents a Msg_SetLordReq.
         * @implements IMsg_SetLordReq
         * @constructor
         * @param {proto.IMsg_SetLordReq=} [p] Properties to set
         */
        function Msg_SetLordReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SetLordReq deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_SetLordReq
         * @instance
         */
        Msg_SetLordReq.prototype.deckIndex = 0;

        /**
         * Msg_SetLordReq cardUUID.
         * @member {string} cardUUID
         * @memberof proto.Msg_SetLordReq
         * @instance
         */
        Msg_SetLordReq.prototype.cardUUID = "";

        /**
         * Encodes the specified Msg_SetLordReq message. Does not implicitly {@link proto.Msg_SetLordReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SetLordReq
         * @static
         * @param {proto.IMsg_SetLordReq} m Msg_SetLordReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SetLordReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(8).int32(m.deckIndex);
            if (m.cardUUID != null && Object.hasOwnProperty.call(m, "cardUUID"))
                w.uint32(18).string(m.cardUUID);
            return w;
        };

        /**
         * Decodes a Msg_SetLordReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SetLordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SetLordReq} Msg_SetLordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SetLordReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SetLordReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.deckIndex = r.int32();
                    break;
                case 2:
                    m.cardUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SetLordReq;
    })();

    proto.Msg_SetLordRsp = (function() {

        /**
         * Properties of a Msg_SetLordRsp.
         * @memberof proto
         * @interface IMsg_SetLordRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_SetLordRsp result
         * @property {number|null} [deckIndex] Msg_SetLordRsp deckIndex
         * @property {string|null} [lord] Msg_SetLordRsp lord
         */

        /**
         * Constructs a new Msg_SetLordRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SetLordRsp.
         * @implements IMsg_SetLordRsp
         * @constructor
         * @param {proto.IMsg_SetLordRsp=} [p] Properties to set
         */
        function Msg_SetLordRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SetLordRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_SetLordRsp
         * @instance
         */
        Msg_SetLordRsp.prototype.result = 0;

        /**
         * Msg_SetLordRsp deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_SetLordRsp
         * @instance
         */
        Msg_SetLordRsp.prototype.deckIndex = 0;

        /**
         * Msg_SetLordRsp lord.
         * @member {string} lord
         * @memberof proto.Msg_SetLordRsp
         * @instance
         */
        Msg_SetLordRsp.prototype.lord = "";

        /**
         * Encodes the specified Msg_SetLordRsp message. Does not implicitly {@link proto.Msg_SetLordRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SetLordRsp
         * @static
         * @param {proto.IMsg_SetLordRsp} m Msg_SetLordRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SetLordRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(16).int32(m.deckIndex);
            if (m.lord != null && Object.hasOwnProperty.call(m, "lord"))
                w.uint32(26).string(m.lord);
            return w;
        };

        /**
         * Decodes a Msg_SetLordRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SetLordRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SetLordRsp} Msg_SetLordRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SetLordRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SetLordRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.deckIndex = r.int32();
                    break;
                case 3:
                    m.lord = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SetLordRsp;
    })();

    proto.Msg_SetTalentReq = (function() {

        /**
         * Properties of a Msg_SetTalentReq.
         * @memberof proto
         * @interface IMsg_SetTalentReq
         * @property {number|null} [deckIndex] Msg_SetTalentReq deckIndex
         * @property {proto.ITalentData|null} [talent] Msg_SetTalentReq talent
         */

        /**
         * Constructs a new Msg_SetTalentReq.
         * @memberof proto
         * @classdesc Represents a Msg_SetTalentReq.
         * @implements IMsg_SetTalentReq
         * @constructor
         * @param {proto.IMsg_SetTalentReq=} [p] Properties to set
         */
        function Msg_SetTalentReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SetTalentReq deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_SetTalentReq
         * @instance
         */
        Msg_SetTalentReq.prototype.deckIndex = 0;

        /**
         * Msg_SetTalentReq talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.Msg_SetTalentReq
         * @instance
         */
        Msg_SetTalentReq.prototype.talent = null;

        /**
         * Encodes the specified Msg_SetTalentReq message. Does not implicitly {@link proto.Msg_SetTalentReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SetTalentReq
         * @static
         * @param {proto.IMsg_SetTalentReq} m Msg_SetTalentReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SetTalentReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(8).int32(m.deckIndex);
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_SetTalentReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SetTalentReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SetTalentReq} Msg_SetTalentReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SetTalentReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SetTalentReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.deckIndex = r.int32();
                    break;
                case 2:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SetTalentReq;
    })();

    proto.Msg_SetTalentRsp = (function() {

        /**
         * Properties of a Msg_SetTalentRsp.
         * @memberof proto
         * @interface IMsg_SetTalentRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_SetTalentRsp result
         * @property {number|null} [deckIndex] Msg_SetTalentRsp deckIndex
         * @property {proto.ITalentData|null} [talent] Msg_SetTalentRsp talent
         */

        /**
         * Constructs a new Msg_SetTalentRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SetTalentRsp.
         * @implements IMsg_SetTalentRsp
         * @constructor
         * @param {proto.IMsg_SetTalentRsp=} [p] Properties to set
         */
        function Msg_SetTalentRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SetTalentRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_SetTalentRsp
         * @instance
         */
        Msg_SetTalentRsp.prototype.result = 0;

        /**
         * Msg_SetTalentRsp deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_SetTalentRsp
         * @instance
         */
        Msg_SetTalentRsp.prototype.deckIndex = 0;

        /**
         * Msg_SetTalentRsp talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.Msg_SetTalentRsp
         * @instance
         */
        Msg_SetTalentRsp.prototype.talent = null;

        /**
         * Encodes the specified Msg_SetTalentRsp message. Does not implicitly {@link proto.Msg_SetTalentRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SetTalentRsp
         * @static
         * @param {proto.IMsg_SetTalentRsp} m Msg_SetTalentRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SetTalentRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(16).int32(m.deckIndex);
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_SetTalentRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SetTalentRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SetTalentRsp} Msg_SetTalentRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SetTalentRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SetTalentRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.deckIndex = r.int32();
                    break;
                case 3:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SetTalentRsp;
    })();

    proto.Msg_OpenRankRewardReq = (function() {

        /**
         * Properties of a Msg_OpenRankRewardReq.
         * @memberof proto
         * @interface IMsg_OpenRankRewardReq
         */

        /**
         * Constructs a new Msg_OpenRankRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_OpenRankRewardReq.
         * @implements IMsg_OpenRankRewardReq
         * @constructor
         * @param {proto.IMsg_OpenRankRewardReq=} [p] Properties to set
         */
        function Msg_OpenRankRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_OpenRankRewardReq message. Does not implicitly {@link proto.Msg_OpenRankRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OpenRankRewardReq
         * @static
         * @param {proto.IMsg_OpenRankRewardReq} m Msg_OpenRankRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OpenRankRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_OpenRankRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OpenRankRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OpenRankRewardReq} Msg_OpenRankRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OpenRankRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OpenRankRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OpenRankRewardReq;
    })();

    proto.Msg_OpenRankRewardRsp = (function() {

        /**
         * Properties of a Msg_OpenRankRewardRsp.
         * @memberof proto
         * @interface IMsg_OpenRankRewardRsp
         * @property {proto.IRankData|null} [rankData] Msg_OpenRankRewardRsp rankData
         * @property {number|null} [fightId] Msg_OpenRankRewardRsp fightId
         * @property {number|null} [boxId] Msg_OpenRankRewardRsp boxId
         * @property {Array.<proto.IRewardSimpleInfo>|null} [seasonBoxRewards] Msg_OpenRankRewardRsp seasonBoxRewards
         * @property {boolean|null} [isDemonPass] Msg_OpenRankRewardRsp isDemonPass
         */

        /**
         * Constructs a new Msg_OpenRankRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_OpenRankRewardRsp.
         * @implements IMsg_OpenRankRewardRsp
         * @constructor
         * @param {proto.IMsg_OpenRankRewardRsp=} [p] Properties to set
         */
        function Msg_OpenRankRewardRsp(p) {
            this.seasonBoxRewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OpenRankRewardRsp rankData.
         * @member {proto.IRankData|null|undefined} rankData
         * @memberof proto.Msg_OpenRankRewardRsp
         * @instance
         */
        Msg_OpenRankRewardRsp.prototype.rankData = null;

        /**
         * Msg_OpenRankRewardRsp fightId.
         * @member {number} fightId
         * @memberof proto.Msg_OpenRankRewardRsp
         * @instance
         */
        Msg_OpenRankRewardRsp.prototype.fightId = 0;

        /**
         * Msg_OpenRankRewardRsp boxId.
         * @member {number} boxId
         * @memberof proto.Msg_OpenRankRewardRsp
         * @instance
         */
        Msg_OpenRankRewardRsp.prototype.boxId = 0;

        /**
         * Msg_OpenRankRewardRsp seasonBoxRewards.
         * @member {Array.<proto.IRewardSimpleInfo>} seasonBoxRewards
         * @memberof proto.Msg_OpenRankRewardRsp
         * @instance
         */
        Msg_OpenRankRewardRsp.prototype.seasonBoxRewards = $util.emptyArray;

        /**
         * Msg_OpenRankRewardRsp isDemonPass.
         * @member {boolean} isDemonPass
         * @memberof proto.Msg_OpenRankRewardRsp
         * @instance
         */
        Msg_OpenRankRewardRsp.prototype.isDemonPass = false;

        /**
         * Encodes the specified Msg_OpenRankRewardRsp message. Does not implicitly {@link proto.Msg_OpenRankRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OpenRankRewardRsp
         * @static
         * @param {proto.IMsg_OpenRankRewardRsp} m Msg_OpenRankRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OpenRankRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankData != null && Object.hasOwnProperty.call(m, "rankData"))
                $root.proto.RankData.encode(m.rankData, w.uint32(10).fork()).ldelim();
            if (m.fightId != null && Object.hasOwnProperty.call(m, "fightId"))
                w.uint32(16).int32(m.fightId);
            if (m.boxId != null && Object.hasOwnProperty.call(m, "boxId"))
                w.uint32(24).int32(m.boxId);
            if (m.seasonBoxRewards != null && m.seasonBoxRewards.length) {
                for (var i = 0; i < m.seasonBoxRewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.seasonBoxRewards[i], w.uint32(34).fork()).ldelim();
            }
            if (m.isDemonPass != null && Object.hasOwnProperty.call(m, "isDemonPass"))
                w.uint32(40).bool(m.isDemonPass);
            return w;
        };

        /**
         * Decodes a Msg_OpenRankRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OpenRankRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OpenRankRewardRsp} Msg_OpenRankRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OpenRankRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OpenRankRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rankData = $root.proto.RankData.decode(r, r.uint32());
                    break;
                case 2:
                    m.fightId = r.int32();
                    break;
                case 3:
                    m.boxId = r.int32();
                    break;
                case 4:
                    if (!(m.seasonBoxRewards && m.seasonBoxRewards.length))
                        m.seasonBoxRewards = [];
                    m.seasonBoxRewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 5:
                    m.isDemonPass = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OpenRankRewardRsp;
    })();

    proto.Msg_GetRankScoreRewardReq = (function() {

        /**
         * Properties of a Msg_GetRankScoreRewardReq.
         * @memberof proto
         * @interface IMsg_GetRankScoreRewardReq
         * @property {number|null} [rewardId] Msg_GetRankScoreRewardReq rewardId
         * @property {number|null} [itemIdx] Msg_GetRankScoreRewardReq itemIdx
         */

        /**
         * Constructs a new Msg_GetRankScoreRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetRankScoreRewardReq.
         * @implements IMsg_GetRankScoreRewardReq
         * @constructor
         * @param {proto.IMsg_GetRankScoreRewardReq=} [p] Properties to set
         */
        function Msg_GetRankScoreRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetRankScoreRewardReq rewardId.
         * @member {number} rewardId
         * @memberof proto.Msg_GetRankScoreRewardReq
         * @instance
         */
        Msg_GetRankScoreRewardReq.prototype.rewardId = 0;

        /**
         * Msg_GetRankScoreRewardReq itemIdx.
         * @member {number} itemIdx
         * @memberof proto.Msg_GetRankScoreRewardReq
         * @instance
         */
        Msg_GetRankScoreRewardReq.prototype.itemIdx = 0;

        /**
         * Encodes the specified Msg_GetRankScoreRewardReq message. Does not implicitly {@link proto.Msg_GetRankScoreRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetRankScoreRewardReq
         * @static
         * @param {proto.IMsg_GetRankScoreRewardReq} m Msg_GetRankScoreRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetRankScoreRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardId != null && Object.hasOwnProperty.call(m, "rewardId"))
                w.uint32(8).int32(m.rewardId);
            if (m.itemIdx != null && Object.hasOwnProperty.call(m, "itemIdx"))
                w.uint32(16).int32(m.itemIdx);
            return w;
        };

        /**
         * Decodes a Msg_GetRankScoreRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetRankScoreRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetRankScoreRewardReq} Msg_GetRankScoreRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetRankScoreRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetRankScoreRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardId = r.int32();
                    break;
                case 2:
                    m.itemIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetRankScoreRewardReq;
    })();

    proto.Msg_GetRankScoreRewardRsp = (function() {

        /**
         * Properties of a Msg_GetRankScoreRewardRsp.
         * @memberof proto
         * @interface IMsg_GetRankScoreRewardRsp
         * @property {proto.Msg_GetRankScoreRewardRsp.ErrorCode|null} [result] Msg_GetRankScoreRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_GetRankScoreRewardRsp rewards
         * @property {number|null} [rewardId] Msg_GetRankScoreRewardRsp rewardId
         */

        /**
         * Constructs a new Msg_GetRankScoreRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetRankScoreRewardRsp.
         * @implements IMsg_GetRankScoreRewardRsp
         * @constructor
         * @param {proto.IMsg_GetRankScoreRewardRsp=} [p] Properties to set
         */
        function Msg_GetRankScoreRewardRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetRankScoreRewardRsp result.
         * @member {proto.Msg_GetRankScoreRewardRsp.ErrorCode} result
         * @memberof proto.Msg_GetRankScoreRewardRsp
         * @instance
         */
        Msg_GetRankScoreRewardRsp.prototype.result = 0;

        /**
         * Msg_GetRankScoreRewardRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_GetRankScoreRewardRsp
         * @instance
         */
        Msg_GetRankScoreRewardRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_GetRankScoreRewardRsp rewardId.
         * @member {number} rewardId
         * @memberof proto.Msg_GetRankScoreRewardRsp
         * @instance
         */
        Msg_GetRankScoreRewardRsp.prototype.rewardId = 0;

        /**
         * Encodes the specified Msg_GetRankScoreRewardRsp message. Does not implicitly {@link proto.Msg_GetRankScoreRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetRankScoreRewardRsp
         * @static
         * @param {proto.IMsg_GetRankScoreRewardRsp} m Msg_GetRankScoreRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetRankScoreRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.rewardId != null && Object.hasOwnProperty.call(m, "rewardId"))
                w.uint32(24).int32(m.rewardId);
            return w;
        };

        /**
         * Decodes a Msg_GetRankScoreRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetRankScoreRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetRankScoreRewardRsp} Msg_GetRankScoreRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetRankScoreRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetRankScoreRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.rewardId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GetRankScoreRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyGotReward=1 AlreadyGotReward value
         * @property {number} ScoreNotEnough=2 ScoreNotEnough value
         * @property {number} OperatorFailed=3 OperatorFailed value
         */
        Msg_GetRankScoreRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyGotReward"] = 1;
            values[valuesById[2] = "ScoreNotEnough"] = 2;
            values[valuesById[3] = "OperatorFailed"] = 3;
            return values;
        })();

        return Msg_GetRankScoreRewardRsp;
    })();

    proto.Msg_GetBossBoxRewardReq = (function() {

        /**
         * Properties of a Msg_GetBossBoxRewardReq.
         * @memberof proto
         * @interface IMsg_GetBossBoxRewardReq
         * @property {number|null} [boxLevel] Msg_GetBossBoxRewardReq boxLevel
         * @property {boolean|null} [isVipReward] Msg_GetBossBoxRewardReq isVipReward
         */

        /**
         * Constructs a new Msg_GetBossBoxRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetBossBoxRewardReq.
         * @implements IMsg_GetBossBoxRewardReq
         * @constructor
         * @param {proto.IMsg_GetBossBoxRewardReq=} [p] Properties to set
         */
        function Msg_GetBossBoxRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetBossBoxRewardReq boxLevel.
         * @member {number} boxLevel
         * @memberof proto.Msg_GetBossBoxRewardReq
         * @instance
         */
        Msg_GetBossBoxRewardReq.prototype.boxLevel = 0;

        /**
         * Msg_GetBossBoxRewardReq isVipReward.
         * @member {boolean} isVipReward
         * @memberof proto.Msg_GetBossBoxRewardReq
         * @instance
         */
        Msg_GetBossBoxRewardReq.prototype.isVipReward = false;

        /**
         * Encodes the specified Msg_GetBossBoxRewardReq message. Does not implicitly {@link proto.Msg_GetBossBoxRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetBossBoxRewardReq
         * @static
         * @param {proto.IMsg_GetBossBoxRewardReq} m Msg_GetBossBoxRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetBossBoxRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxLevel != null && Object.hasOwnProperty.call(m, "boxLevel"))
                w.uint32(8).int32(m.boxLevel);
            if (m.isVipReward != null && Object.hasOwnProperty.call(m, "isVipReward"))
                w.uint32(16).bool(m.isVipReward);
            return w;
        };

        /**
         * Decodes a Msg_GetBossBoxRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetBossBoxRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetBossBoxRewardReq} Msg_GetBossBoxRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetBossBoxRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetBossBoxRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxLevel = r.int32();
                    break;
                case 2:
                    m.isVipReward = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetBossBoxRewardReq;
    })();

    proto.Msg_GetBossBoxRewardRsp = (function() {

        /**
         * Properties of a Msg_GetBossBoxRewardRsp.
         * @memberof proto
         * @interface IMsg_GetBossBoxRewardRsp
         * @property {proto.Msg_GetBossBoxRewardRsp.ErrorCode|null} [result] Msg_GetBossBoxRewardRsp result
         * @property {Array.<proto.IItemSimpleInfo>|null} [rewards] Msg_GetBossBoxRewardRsp rewards
         * @property {number|null} [boxLevel] Msg_GetBossBoxRewardRsp boxLevel
         * @property {boolean|null} [isVipReward] Msg_GetBossBoxRewardRsp isVipReward
         */

        /**
         * Constructs a new Msg_GetBossBoxRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetBossBoxRewardRsp.
         * @implements IMsg_GetBossBoxRewardRsp
         * @constructor
         * @param {proto.IMsg_GetBossBoxRewardRsp=} [p] Properties to set
         */
        function Msg_GetBossBoxRewardRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetBossBoxRewardRsp result.
         * @member {proto.Msg_GetBossBoxRewardRsp.ErrorCode} result
         * @memberof proto.Msg_GetBossBoxRewardRsp
         * @instance
         */
        Msg_GetBossBoxRewardRsp.prototype.result = 0;

        /**
         * Msg_GetBossBoxRewardRsp rewards.
         * @member {Array.<proto.IItemSimpleInfo>} rewards
         * @memberof proto.Msg_GetBossBoxRewardRsp
         * @instance
         */
        Msg_GetBossBoxRewardRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_GetBossBoxRewardRsp boxLevel.
         * @member {number} boxLevel
         * @memberof proto.Msg_GetBossBoxRewardRsp
         * @instance
         */
        Msg_GetBossBoxRewardRsp.prototype.boxLevel = 0;

        /**
         * Msg_GetBossBoxRewardRsp isVipReward.
         * @member {boolean} isVipReward
         * @memberof proto.Msg_GetBossBoxRewardRsp
         * @instance
         */
        Msg_GetBossBoxRewardRsp.prototype.isVipReward = false;

        /**
         * Encodes the specified Msg_GetBossBoxRewardRsp message. Does not implicitly {@link proto.Msg_GetBossBoxRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetBossBoxRewardRsp
         * @static
         * @param {proto.IMsg_GetBossBoxRewardRsp} m Msg_GetBossBoxRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetBossBoxRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.ItemSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.boxLevel != null && Object.hasOwnProperty.call(m, "boxLevel"))
                w.uint32(24).int32(m.boxLevel);
            if (m.isVipReward != null && Object.hasOwnProperty.call(m, "isVipReward"))
                w.uint32(32).bool(m.isVipReward);
            return w;
        };

        /**
         * Decodes a Msg_GetBossBoxRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetBossBoxRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetBossBoxRewardRsp} Msg_GetBossBoxRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetBossBoxRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetBossBoxRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.ItemSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.boxLevel = r.int32();
                    break;
                case 4:
                    m.isVipReward = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GetBossBoxRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyGotReward=1 AlreadyGotReward value
         * @property {number} LevelNotEnough=2 LevelNotEnough value
         * @property {number} OperatorFailed=3 OperatorFailed value
         */
        Msg_GetBossBoxRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyGotReward"] = 1;
            values[valuesById[2] = "LevelNotEnough"] = 2;
            values[valuesById[3] = "OperatorFailed"] = 3;
            return values;
        })();

        return Msg_GetBossBoxRewardRsp;
    })();

    proto.Msg_CardLevelUpReq = (function() {

        /**
         * Properties of a Msg_CardLevelUpReq.
         * @memberof proto
         * @interface IMsg_CardLevelUpReq
         * @property {string|null} [cardUuid] Msg_CardLevelUpReq cardUuid
         */

        /**
         * Constructs a new Msg_CardLevelUpReq.
         * @memberof proto
         * @classdesc Represents a Msg_CardLevelUpReq.
         * @implements IMsg_CardLevelUpReq
         * @constructor
         * @param {proto.IMsg_CardLevelUpReq=} [p] Properties to set
         */
        function Msg_CardLevelUpReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CardLevelUpReq cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_CardLevelUpReq
         * @instance
         */
        Msg_CardLevelUpReq.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_CardLevelUpReq message. Does not implicitly {@link proto.Msg_CardLevelUpReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CardLevelUpReq
         * @static
         * @param {proto.IMsg_CardLevelUpReq} m Msg_CardLevelUpReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CardLevelUpReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(10).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_CardLevelUpReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CardLevelUpReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CardLevelUpReq} Msg_CardLevelUpReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CardLevelUpReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CardLevelUpReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CardLevelUpReq;
    })();

    proto.Msg_CardLevelUpRsp = (function() {

        /**
         * Properties of a Msg_CardLevelUpRsp.
         * @memberof proto
         * @interface IMsg_CardLevelUpRsp
         * @property {proto.Msg_CardLevelUpRsp.ErrorCode|null} [result] Msg_CardLevelUpRsp result
         * @property {string|null} [cardUuid] Msg_CardLevelUpRsp cardUuid
         */

        /**
         * Constructs a new Msg_CardLevelUpRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CardLevelUpRsp.
         * @implements IMsg_CardLevelUpRsp
         * @constructor
         * @param {proto.IMsg_CardLevelUpRsp=} [p] Properties to set
         */
        function Msg_CardLevelUpRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CardLevelUpRsp result.
         * @member {proto.Msg_CardLevelUpRsp.ErrorCode} result
         * @memberof proto.Msg_CardLevelUpRsp
         * @instance
         */
        Msg_CardLevelUpRsp.prototype.result = 0;

        /**
         * Msg_CardLevelUpRsp cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_CardLevelUpRsp
         * @instance
         */
        Msg_CardLevelUpRsp.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_CardLevelUpRsp message. Does not implicitly {@link proto.Msg_CardLevelUpRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CardLevelUpRsp
         * @static
         * @param {proto.IMsg_CardLevelUpRsp} m Msg_CardLevelUpRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CardLevelUpRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(18).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_CardLevelUpRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CardLevelUpRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CardLevelUpRsp} Msg_CardLevelUpRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CardLevelUpRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CardLevelUpRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_CardLevelUpRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} NotEnoughMoney=1 NotEnoughMoney value
         * @property {number} NotEnoughPiece=2 NotEnoughPiece value
         * @property {number} MaxLevel=3 MaxLevel value
         * @property {number} OperatorFailed=4 OperatorFailed value
         */
        Msg_CardLevelUpRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "NotEnoughMoney"] = 1;
            values[valuesById[2] = "NotEnoughPiece"] = 2;
            values[valuesById[3] = "MaxLevel"] = 3;
            values[valuesById[4] = "OperatorFailed"] = 4;
            return values;
        })();

        return Msg_CardLevelUpRsp;
    })();

    proto.Msg_ChangeIndexCardReq = (function() {

        /**
         * Properties of a Msg_ChangeIndexCardReq.
         * @memberof proto
         * @interface IMsg_ChangeIndexCardReq
         * @property {number|null} [indexCardId] Msg_ChangeIndexCardReq indexCardId
         */

        /**
         * Constructs a new Msg_ChangeIndexCardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeIndexCardReq.
         * @implements IMsg_ChangeIndexCardReq
         * @constructor
         * @param {proto.IMsg_ChangeIndexCardReq=} [p] Properties to set
         */
        function Msg_ChangeIndexCardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeIndexCardReq indexCardId.
         * @member {number} indexCardId
         * @memberof proto.Msg_ChangeIndexCardReq
         * @instance
         */
        Msg_ChangeIndexCardReq.prototype.indexCardId = 0;

        /**
         * Encodes the specified Msg_ChangeIndexCardReq message. Does not implicitly {@link proto.Msg_ChangeIndexCardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeIndexCardReq
         * @static
         * @param {proto.IMsg_ChangeIndexCardReq} m Msg_ChangeIndexCardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeIndexCardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.indexCardId != null && Object.hasOwnProperty.call(m, "indexCardId"))
                w.uint32(8).int32(m.indexCardId);
            return w;
        };

        /**
         * Decodes a Msg_ChangeIndexCardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeIndexCardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeIndexCardReq} Msg_ChangeIndexCardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeIndexCardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeIndexCardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.indexCardId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeIndexCardReq;
    })();

    proto.Msg_ChangeIndexCardRsp = (function() {

        /**
         * Properties of a Msg_ChangeIndexCardRsp.
         * @memberof proto
         * @interface IMsg_ChangeIndexCardRsp
         * @property {proto.Msg_ChangeIndexCardRsp.ErrorCode|null} [result] Msg_ChangeIndexCardRsp result
         * @property {number|null} [indexCardId] Msg_ChangeIndexCardRsp indexCardId
         */

        /**
         * Constructs a new Msg_ChangeIndexCardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeIndexCardRsp.
         * @implements IMsg_ChangeIndexCardRsp
         * @constructor
         * @param {proto.IMsg_ChangeIndexCardRsp=} [p] Properties to set
         */
        function Msg_ChangeIndexCardRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeIndexCardRsp result.
         * @member {proto.Msg_ChangeIndexCardRsp.ErrorCode} result
         * @memberof proto.Msg_ChangeIndexCardRsp
         * @instance
         */
        Msg_ChangeIndexCardRsp.prototype.result = 0;

        /**
         * Msg_ChangeIndexCardRsp indexCardId.
         * @member {number} indexCardId
         * @memberof proto.Msg_ChangeIndexCardRsp
         * @instance
         */
        Msg_ChangeIndexCardRsp.prototype.indexCardId = 0;

        /**
         * Encodes the specified Msg_ChangeIndexCardRsp message. Does not implicitly {@link proto.Msg_ChangeIndexCardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeIndexCardRsp
         * @static
         * @param {proto.IMsg_ChangeIndexCardRsp} m Msg_ChangeIndexCardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeIndexCardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.indexCardId != null && Object.hasOwnProperty.call(m, "indexCardId"))
                w.uint32(16).int32(m.indexCardId);
            return w;
        };

        /**
         * Decodes a Msg_ChangeIndexCardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeIndexCardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeIndexCardRsp} Msg_ChangeIndexCardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeIndexCardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeIndexCardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.indexCardId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChangeIndexCardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} CardNotExist=1 CardNotExist value
         * @property {number} RepeatedChange=2 RepeatedChange value
         * @property {number} OperatorFailed=3 OperatorFailed value
         */
        Msg_ChangeIndexCardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "CardNotExist"] = 1;
            values[valuesById[2] = "RepeatedChange"] = 2;
            values[valuesById[3] = "OperatorFailed"] = 3;
            return values;
        })();

        return Msg_ChangeIndexCardRsp;
    })();

    proto.Msg_GetCooperateBoxRewardReq = (function() {

        /**
         * Properties of a Msg_GetCooperateBoxRewardReq.
         * @memberof proto
         * @interface IMsg_GetCooperateBoxRewardReq
         */

        /**
         * Constructs a new Msg_GetCooperateBoxRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetCooperateBoxRewardReq.
         * @implements IMsg_GetCooperateBoxRewardReq
         * @constructor
         * @param {proto.IMsg_GetCooperateBoxRewardReq=} [p] Properties to set
         */
        function Msg_GetCooperateBoxRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetCooperateBoxRewardReq message. Does not implicitly {@link proto.Msg_GetCooperateBoxRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetCooperateBoxRewardReq
         * @static
         * @param {proto.IMsg_GetCooperateBoxRewardReq} m Msg_GetCooperateBoxRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetCooperateBoxRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetCooperateBoxRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetCooperateBoxRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetCooperateBoxRewardReq} Msg_GetCooperateBoxRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetCooperateBoxRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetCooperateBoxRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetCooperateBoxRewardReq;
    })();

    proto.Msg_GetCooperateBoxRewardRsp = (function() {

        /**
         * Properties of a Msg_GetCooperateBoxRewardRsp.
         * @memberof proto
         * @interface IMsg_GetCooperateBoxRewardRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_GetCooperateBoxRewardRsp result
         * @property {Array.<proto.IItemSimpleInfo>|null} [rewards] Msg_GetCooperateBoxRewardRsp rewards
         */

        /**
         * Constructs a new Msg_GetCooperateBoxRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetCooperateBoxRewardRsp.
         * @implements IMsg_GetCooperateBoxRewardRsp
         * @constructor
         * @param {proto.IMsg_GetCooperateBoxRewardRsp=} [p] Properties to set
         */
        function Msg_GetCooperateBoxRewardRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetCooperateBoxRewardRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_GetCooperateBoxRewardRsp
         * @instance
         */
        Msg_GetCooperateBoxRewardRsp.prototype.result = 0;

        /**
         * Msg_GetCooperateBoxRewardRsp rewards.
         * @member {Array.<proto.IItemSimpleInfo>} rewards
         * @memberof proto.Msg_GetCooperateBoxRewardRsp
         * @instance
         */
        Msg_GetCooperateBoxRewardRsp.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetCooperateBoxRewardRsp message. Does not implicitly {@link proto.Msg_GetCooperateBoxRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetCooperateBoxRewardRsp
         * @static
         * @param {proto.IMsg_GetCooperateBoxRewardRsp} m Msg_GetCooperateBoxRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetCooperateBoxRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.ItemSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetCooperateBoxRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetCooperateBoxRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetCooperateBoxRewardRsp} Msg_GetCooperateBoxRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetCooperateBoxRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetCooperateBoxRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.ItemSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetCooperateBoxRewardRsp;
    })();

    proto.Msg_UpdateItemData = (function() {

        /**
         * Properties of a Msg_UpdateItemData.
         * @memberof proto
         * @interface IMsg_UpdateItemData
         * @property {Array.<proto.IItemData>|null} [updateItems] Msg_UpdateItemData updateItems
         */

        /**
         * Constructs a new Msg_UpdateItemData.
         * @memberof proto
         * @classdesc Represents a Msg_UpdateItemData.
         * @implements IMsg_UpdateItemData
         * @constructor
         * @param {proto.IMsg_UpdateItemData=} [p] Properties to set
         */
        function Msg_UpdateItemData(p) {
            this.updateItems = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_UpdateItemData updateItems.
         * @member {Array.<proto.IItemData>} updateItems
         * @memberof proto.Msg_UpdateItemData
         * @instance
         */
        Msg_UpdateItemData.prototype.updateItems = $util.emptyArray;

        /**
         * Encodes the specified Msg_UpdateItemData message. Does not implicitly {@link proto.Msg_UpdateItemData.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_UpdateItemData
         * @static
         * @param {proto.IMsg_UpdateItemData} m Msg_UpdateItemData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_UpdateItemData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.updateItems != null && m.updateItems.length) {
                for (var i = 0; i < m.updateItems.length; ++i)
                    $root.proto.ItemData.encode(m.updateItems[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_UpdateItemData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_UpdateItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_UpdateItemData} Msg_UpdateItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_UpdateItemData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_UpdateItemData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.updateItems && m.updateItems.length))
                        m.updateItems = [];
                    m.updateItems.push($root.proto.ItemData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_UpdateItemData;
    })();

    proto.Msg_RemoveItemData = (function() {

        /**
         * Properties of a Msg_RemoveItemData.
         * @memberof proto
         * @interface IMsg_RemoveItemData
         * @property {Array.<string>|null} [removeItemUuids] Msg_RemoveItemData removeItemUuids
         */

        /**
         * Constructs a new Msg_RemoveItemData.
         * @memberof proto
         * @classdesc Represents a Msg_RemoveItemData.
         * @implements IMsg_RemoveItemData
         * @constructor
         * @param {proto.IMsg_RemoveItemData=} [p] Properties to set
         */
        function Msg_RemoveItemData(p) {
            this.removeItemUuids = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RemoveItemData removeItemUuids.
         * @member {Array.<string>} removeItemUuids
         * @memberof proto.Msg_RemoveItemData
         * @instance
         */
        Msg_RemoveItemData.prototype.removeItemUuids = $util.emptyArray;

        /**
         * Encodes the specified Msg_RemoveItemData message. Does not implicitly {@link proto.Msg_RemoveItemData.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RemoveItemData
         * @static
         * @param {proto.IMsg_RemoveItemData} m Msg_RemoveItemData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RemoveItemData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.removeItemUuids != null && m.removeItemUuids.length) {
                for (var i = 0; i < m.removeItemUuids.length; ++i)
                    w.uint32(10).string(m.removeItemUuids[i]);
            }
            return w;
        };

        /**
         * Decodes a Msg_RemoveItemData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RemoveItemData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RemoveItemData} Msg_RemoveItemData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RemoveItemData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RemoveItemData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.removeItemUuids && m.removeItemUuids.length))
                        m.removeItemUuids = [];
                    m.removeItemUuids.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RemoveItemData;
    })();

    proto.Msg_SyncRoleGold = (function() {

        /**
         * Properties of a Msg_SyncRoleGold.
         * @memberof proto
         * @interface IMsg_SyncRoleGold
         * @property {number|null} [gold] Msg_SyncRoleGold gold
         */

        /**
         * Constructs a new Msg_SyncRoleGold.
         * @memberof proto
         * @classdesc Represents a Msg_SyncRoleGold.
         * @implements IMsg_SyncRoleGold
         * @constructor
         * @param {proto.IMsg_SyncRoleGold=} [p] Properties to set
         */
        function Msg_SyncRoleGold(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SyncRoleGold gold.
         * @member {number} gold
         * @memberof proto.Msg_SyncRoleGold
         * @instance
         */
        Msg_SyncRoleGold.prototype.gold = 0;

        /**
         * Encodes the specified Msg_SyncRoleGold message. Does not implicitly {@link proto.Msg_SyncRoleGold.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SyncRoleGold
         * @static
         * @param {proto.IMsg_SyncRoleGold} m Msg_SyncRoleGold message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SyncRoleGold.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.gold != null && Object.hasOwnProperty.call(m, "gold"))
                w.uint32(8).int32(m.gold);
            return w;
        };

        /**
         * Decodes a Msg_SyncRoleGold message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SyncRoleGold
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SyncRoleGold} Msg_SyncRoleGold
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SyncRoleGold.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SyncRoleGold();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.gold = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SyncRoleGold;
    })();

    proto.Msg_SyncRoleDiamond = (function() {

        /**
         * Properties of a Msg_SyncRoleDiamond.
         * @memberof proto
         * @interface IMsg_SyncRoleDiamond
         * @property {number|null} [diamond] Msg_SyncRoleDiamond diamond
         */

        /**
         * Constructs a new Msg_SyncRoleDiamond.
         * @memberof proto
         * @classdesc Represents a Msg_SyncRoleDiamond.
         * @implements IMsg_SyncRoleDiamond
         * @constructor
         * @param {proto.IMsg_SyncRoleDiamond=} [p] Properties to set
         */
        function Msg_SyncRoleDiamond(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SyncRoleDiamond diamond.
         * @member {number} diamond
         * @memberof proto.Msg_SyncRoleDiamond
         * @instance
         */
        Msg_SyncRoleDiamond.prototype.diamond = 0;

        /**
         * Encodes the specified Msg_SyncRoleDiamond message. Does not implicitly {@link proto.Msg_SyncRoleDiamond.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SyncRoleDiamond
         * @static
         * @param {proto.IMsg_SyncRoleDiamond} m Msg_SyncRoleDiamond message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SyncRoleDiamond.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.diamond != null && Object.hasOwnProperty.call(m, "diamond"))
                w.uint32(8).int32(m.diamond);
            return w;
        };

        /**
         * Decodes a Msg_SyncRoleDiamond message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SyncRoleDiamond
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SyncRoleDiamond} Msg_SyncRoleDiamond
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SyncRoleDiamond.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SyncRoleDiamond();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.diamond = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SyncRoleDiamond;
    })();

    proto.Msg_SyncRoleExpAndLevel = (function() {

        /**
         * Properties of a Msg_SyncRoleExpAndLevel.
         * @memberof proto
         * @interface IMsg_SyncRoleExpAndLevel
         * @property {number|null} [exp] Msg_SyncRoleExpAndLevel exp
         * @property {number|null} [level] Msg_SyncRoleExpAndLevel level
         */

        /**
         * Constructs a new Msg_SyncRoleExpAndLevel.
         * @memberof proto
         * @classdesc Represents a Msg_SyncRoleExpAndLevel.
         * @implements IMsg_SyncRoleExpAndLevel
         * @constructor
         * @param {proto.IMsg_SyncRoleExpAndLevel=} [p] Properties to set
         */
        function Msg_SyncRoleExpAndLevel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SyncRoleExpAndLevel exp.
         * @member {number} exp
         * @memberof proto.Msg_SyncRoleExpAndLevel
         * @instance
         */
        Msg_SyncRoleExpAndLevel.prototype.exp = 0;

        /**
         * Msg_SyncRoleExpAndLevel level.
         * @member {number} level
         * @memberof proto.Msg_SyncRoleExpAndLevel
         * @instance
         */
        Msg_SyncRoleExpAndLevel.prototype.level = 0;

        /**
         * Encodes the specified Msg_SyncRoleExpAndLevel message. Does not implicitly {@link proto.Msg_SyncRoleExpAndLevel.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SyncRoleExpAndLevel
         * @static
         * @param {proto.IMsg_SyncRoleExpAndLevel} m Msg_SyncRoleExpAndLevel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SyncRoleExpAndLevel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.exp != null && Object.hasOwnProperty.call(m, "exp"))
                w.uint32(8).int32(m.exp);
            if (m.level != null && Object.hasOwnProperty.call(m, "level"))
                w.uint32(16).int32(m.level);
            return w;
        };

        /**
         * Decodes a Msg_SyncRoleExpAndLevel message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SyncRoleExpAndLevel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SyncRoleExpAndLevel} Msg_SyncRoleExpAndLevel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SyncRoleExpAndLevel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SyncRoleExpAndLevel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.exp = r.int32();
                    break;
                case 2:
                    m.level = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SyncRoleExpAndLevel;
    })();

    /**
     * ShopGoodsType enum.
     * @name proto.ShopGoodsType
     * @enum {number}
     * @property {number} Special=0 Special value
     * @property {number} Gold=1 Gold value
     * @property {number} Diamond=2 Diamond value
     * @property {number} Emotion=3 Emotion value
     */
    proto.ShopGoodsType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Special"] = 0;
        values[valuesById[1] = "Gold"] = 1;
        values[valuesById[2] = "Diamond"] = 2;
        values[valuesById[3] = "Emotion"] = 3;
        return values;
    })();

    proto.EveryDaySpecialShop = (function() {

        /**
         * Properties of an EveryDaySpecialShop.
         * @memberof proto
         * @interface IEveryDaySpecialShop
         * @property {proto.IRewardSimpleInfo|null} [goods] EveryDaySpecialShop goods
         * @property {proto.IItemSimpleInfo|null} [cost] EveryDaySpecialShop cost
         * @property {number|null} [leftBuyTimes] EveryDaySpecialShop leftBuyTimes
         */

        /**
         * Constructs a new EveryDaySpecialShop.
         * @memberof proto
         * @classdesc Represents an EveryDaySpecialShop.
         * @implements IEveryDaySpecialShop
         * @constructor
         * @param {proto.IEveryDaySpecialShop=} [p] Properties to set
         */
        function EveryDaySpecialShop(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * EveryDaySpecialShop goods.
         * @member {proto.IRewardSimpleInfo|null|undefined} goods
         * @memberof proto.EveryDaySpecialShop
         * @instance
         */
        EveryDaySpecialShop.prototype.goods = null;

        /**
         * EveryDaySpecialShop cost.
         * @member {proto.IItemSimpleInfo|null|undefined} cost
         * @memberof proto.EveryDaySpecialShop
         * @instance
         */
        EveryDaySpecialShop.prototype.cost = null;

        /**
         * EveryDaySpecialShop leftBuyTimes.
         * @member {number} leftBuyTimes
         * @memberof proto.EveryDaySpecialShop
         * @instance
         */
        EveryDaySpecialShop.prototype.leftBuyTimes = 0;

        /**
         * Encodes the specified EveryDaySpecialShop message. Does not implicitly {@link proto.EveryDaySpecialShop.verify|verify} messages.
         * @function encode
         * @memberof proto.EveryDaySpecialShop
         * @static
         * @param {proto.IEveryDaySpecialShop} m EveryDaySpecialShop message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EveryDaySpecialShop.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.goods != null && Object.hasOwnProperty.call(m, "goods"))
                $root.proto.RewardSimpleInfo.encode(m.goods, w.uint32(10).fork()).ldelim();
            if (m.cost != null && Object.hasOwnProperty.call(m, "cost"))
                $root.proto.ItemSimpleInfo.encode(m.cost, w.uint32(18).fork()).ldelim();
            if (m.leftBuyTimes != null && Object.hasOwnProperty.call(m, "leftBuyTimes"))
                w.uint32(24).int32(m.leftBuyTimes);
            return w;
        };

        /**
         * Decodes an EveryDaySpecialShop message from the specified reader or buffer.
         * @function decode
         * @memberof proto.EveryDaySpecialShop
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.EveryDaySpecialShop} EveryDaySpecialShop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EveryDaySpecialShop.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.EveryDaySpecialShop();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.goods = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.cost = $root.proto.ItemSimpleInfo.decode(r, r.uint32());
                    break;
                case 3:
                    m.leftBuyTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return EveryDaySpecialShop;
    })();

    proto.ShopNormalGoods = (function() {

        /**
         * Properties of a ShopNormalGoods.
         * @memberof proto
         * @interface IShopNormalGoods
         * @property {proto.IRewardSimpleInfo|null} [goods] ShopNormalGoods goods
         * @property {proto.IItemSimpleInfo|null} [cost] ShopNormalGoods cost
         */

        /**
         * Constructs a new ShopNormalGoods.
         * @memberof proto
         * @classdesc Represents a ShopNormalGoods.
         * @implements IShopNormalGoods
         * @constructor
         * @param {proto.IShopNormalGoods=} [p] Properties to set
         */
        function ShopNormalGoods(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ShopNormalGoods goods.
         * @member {proto.IRewardSimpleInfo|null|undefined} goods
         * @memberof proto.ShopNormalGoods
         * @instance
         */
        ShopNormalGoods.prototype.goods = null;

        /**
         * ShopNormalGoods cost.
         * @member {proto.IItemSimpleInfo|null|undefined} cost
         * @memberof proto.ShopNormalGoods
         * @instance
         */
        ShopNormalGoods.prototype.cost = null;

        /**
         * Encodes the specified ShopNormalGoods message. Does not implicitly {@link proto.ShopNormalGoods.verify|verify} messages.
         * @function encode
         * @memberof proto.ShopNormalGoods
         * @static
         * @param {proto.IShopNormalGoods} m ShopNormalGoods message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopNormalGoods.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.goods != null && Object.hasOwnProperty.call(m, "goods"))
                $root.proto.RewardSimpleInfo.encode(m.goods, w.uint32(10).fork()).ldelim();
            if (m.cost != null && Object.hasOwnProperty.call(m, "cost"))
                $root.proto.ItemSimpleInfo.encode(m.cost, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a ShopNormalGoods message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ShopNormalGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ShopNormalGoods} ShopNormalGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopNormalGoods.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ShopNormalGoods();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.goods = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.cost = $root.proto.ItemSimpleInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ShopNormalGoods;
    })();

    proto.ShopCashGoods = (function() {

        /**
         * Properties of a ShopCashGoods.
         * @memberof proto
         * @interface IShopCashGoods
         * @property {proto.IRewardSimpleInfo|null} [goods] ShopCashGoods goods
         * @property {number|null} [cash] ShopCashGoods cash
         * @property {boolean|null} [bFirstRecharge] ShopCashGoods bFirstRecharge
         * @property {number|null} [rechargeID] ShopCashGoods rechargeID
         * @property {number|null} [cashFirstAdd] ShopCashGoods cashFirstAdd
         * @property {number|null} [cashAdd] ShopCashGoods cashAdd
         */

        /**
         * Constructs a new ShopCashGoods.
         * @memberof proto
         * @classdesc Represents a ShopCashGoods.
         * @implements IShopCashGoods
         * @constructor
         * @param {proto.IShopCashGoods=} [p] Properties to set
         */
        function ShopCashGoods(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ShopCashGoods goods.
         * @member {proto.IRewardSimpleInfo|null|undefined} goods
         * @memberof proto.ShopCashGoods
         * @instance
         */
        ShopCashGoods.prototype.goods = null;

        /**
         * ShopCashGoods cash.
         * @member {number} cash
         * @memberof proto.ShopCashGoods
         * @instance
         */
        ShopCashGoods.prototype.cash = 0;

        /**
         * ShopCashGoods bFirstRecharge.
         * @member {boolean} bFirstRecharge
         * @memberof proto.ShopCashGoods
         * @instance
         */
        ShopCashGoods.prototype.bFirstRecharge = false;

        /**
         * ShopCashGoods rechargeID.
         * @member {number} rechargeID
         * @memberof proto.ShopCashGoods
         * @instance
         */
        ShopCashGoods.prototype.rechargeID = 0;

        /**
         * ShopCashGoods cashFirstAdd.
         * @member {number} cashFirstAdd
         * @memberof proto.ShopCashGoods
         * @instance
         */
        ShopCashGoods.prototype.cashFirstAdd = 0;

        /**
         * ShopCashGoods cashAdd.
         * @member {number} cashAdd
         * @memberof proto.ShopCashGoods
         * @instance
         */
        ShopCashGoods.prototype.cashAdd = 0;

        /**
         * Encodes the specified ShopCashGoods message. Does not implicitly {@link proto.ShopCashGoods.verify|verify} messages.
         * @function encode
         * @memberof proto.ShopCashGoods
         * @static
         * @param {proto.IShopCashGoods} m ShopCashGoods message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopCashGoods.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.goods != null && Object.hasOwnProperty.call(m, "goods"))
                $root.proto.RewardSimpleInfo.encode(m.goods, w.uint32(10).fork()).ldelim();
            if (m.cash != null && Object.hasOwnProperty.call(m, "cash"))
                w.uint32(16).int32(m.cash);
            if (m.bFirstRecharge != null && Object.hasOwnProperty.call(m, "bFirstRecharge"))
                w.uint32(24).bool(m.bFirstRecharge);
            if (m.rechargeID != null && Object.hasOwnProperty.call(m, "rechargeID"))
                w.uint32(32).int32(m.rechargeID);
            if (m.cashFirstAdd != null && Object.hasOwnProperty.call(m, "cashFirstAdd"))
                w.uint32(40).int32(m.cashFirstAdd);
            if (m.cashAdd != null && Object.hasOwnProperty.call(m, "cashAdd"))
                w.uint32(48).int32(m.cashAdd);
            return w;
        };

        /**
         * Decodes a ShopCashGoods message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ShopCashGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ShopCashGoods} ShopCashGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopCashGoods.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ShopCashGoods();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.goods = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.cash = r.int32();
                    break;
                case 3:
                    m.bFirstRecharge = r.bool();
                    break;
                case 4:
                    m.rechargeID = r.int32();
                    break;
                case 5:
                    m.cashFirstAdd = r.int32();
                    break;
                case 6:
                    m.cashAdd = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ShopCashGoods;
    })();

    proto.ShopData = (function() {

        /**
         * Properties of a ShopData.
         * @memberof proto
         * @interface IShopData
         * @property {Array.<proto.IEveryDaySpecialShop>|null} [specialList] ShopData specialList
         * @property {number|null} [specialLastRefreshTime] ShopData specialLastRefreshTime
         * @property {number|null} [specialFreeRefreshLeftTimes] ShopData specialFreeRefreshLeftTimes
         * @property {number|null} [specialNextFreeRefreshTime] ShopData specialNextFreeRefreshTime
         * @property {number|null} [specialSixRefreshTimes] ShopData specialSixRefreshTimes
         * @property {number|null} [lastResetFirstChargeTime] ShopData lastResetFirstChargeTime
         * @property {Array.<boolean>|null} [firstChargeRecord] ShopData firstChargeRecord
         * @property {Array.<proto.IEmotionGoodsInfo>|null} [emotionList] ShopData emotionList
         */

        /**
         * Constructs a new ShopData.
         * @memberof proto
         * @classdesc Represents a ShopData.
         * @implements IShopData
         * @constructor
         * @param {proto.IShopData=} [p] Properties to set
         */
        function ShopData(p) {
            this.specialList = [];
            this.firstChargeRecord = [];
            this.emotionList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ShopData specialList.
         * @member {Array.<proto.IEveryDaySpecialShop>} specialList
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.specialList = $util.emptyArray;

        /**
         * ShopData specialLastRefreshTime.
         * @member {number} specialLastRefreshTime
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.specialLastRefreshTime = 0;

        /**
         * ShopData specialFreeRefreshLeftTimes.
         * @member {number} specialFreeRefreshLeftTimes
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.specialFreeRefreshLeftTimes = 0;

        /**
         * ShopData specialNextFreeRefreshTime.
         * @member {number} specialNextFreeRefreshTime
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.specialNextFreeRefreshTime = 0;

        /**
         * ShopData specialSixRefreshTimes.
         * @member {number} specialSixRefreshTimes
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.specialSixRefreshTimes = 0;

        /**
         * ShopData lastResetFirstChargeTime.
         * @member {number} lastResetFirstChargeTime
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.lastResetFirstChargeTime = 0;

        /**
         * ShopData firstChargeRecord.
         * @member {Array.<boolean>} firstChargeRecord
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.firstChargeRecord = $util.emptyArray;

        /**
         * ShopData emotionList.
         * @member {Array.<proto.IEmotionGoodsInfo>} emotionList
         * @memberof proto.ShopData
         * @instance
         */
        ShopData.prototype.emotionList = $util.emptyArray;

        /**
         * Encodes the specified ShopData message. Does not implicitly {@link proto.ShopData.verify|verify} messages.
         * @function encode
         * @memberof proto.ShopData
         * @static
         * @param {proto.IShopData} m ShopData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.specialList != null && m.specialList.length) {
                for (var i = 0; i < m.specialList.length; ++i)
                    $root.proto.EveryDaySpecialShop.encode(m.specialList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.specialLastRefreshTime != null && Object.hasOwnProperty.call(m, "specialLastRefreshTime"))
                w.uint32(16).int32(m.specialLastRefreshTime);
            if (m.specialFreeRefreshLeftTimes != null && Object.hasOwnProperty.call(m, "specialFreeRefreshLeftTimes"))
                w.uint32(24).int32(m.specialFreeRefreshLeftTimes);
            if (m.specialNextFreeRefreshTime != null && Object.hasOwnProperty.call(m, "specialNextFreeRefreshTime"))
                w.uint32(32).int32(m.specialNextFreeRefreshTime);
            if (m.specialSixRefreshTimes != null && Object.hasOwnProperty.call(m, "specialSixRefreshTimes"))
                w.uint32(40).int32(m.specialSixRefreshTimes);
            if (m.lastResetFirstChargeTime != null && Object.hasOwnProperty.call(m, "lastResetFirstChargeTime"))
                w.uint32(48).int32(m.lastResetFirstChargeTime);
            if (m.firstChargeRecord != null && m.firstChargeRecord.length) {
                w.uint32(58).fork();
                for (var i = 0; i < m.firstChargeRecord.length; ++i)
                    w.bool(m.firstChargeRecord[i]);
                w.ldelim();
            }
            if (m.emotionList != null && m.emotionList.length) {
                for (var i = 0; i < m.emotionList.length; ++i)
                    $root.proto.EmotionGoodsInfo.encode(m.emotionList[i], w.uint32(66).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a ShopData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ShopData} ShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ShopData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.specialList && m.specialList.length))
                        m.specialList = [];
                    m.specialList.push($root.proto.EveryDaySpecialShop.decode(r, r.uint32()));
                    break;
                case 2:
                    m.specialLastRefreshTime = r.int32();
                    break;
                case 3:
                    m.specialFreeRefreshLeftTimes = r.int32();
                    break;
                case 4:
                    m.specialNextFreeRefreshTime = r.int32();
                    break;
                case 5:
                    m.specialSixRefreshTimes = r.int32();
                    break;
                case 6:
                    m.lastResetFirstChargeTime = r.int32();
                    break;
                case 7:
                    if (!(m.firstChargeRecord && m.firstChargeRecord.length))
                        m.firstChargeRecord = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.firstChargeRecord.push(r.bool());
                    } else
                        m.firstChargeRecord.push(r.bool());
                    break;
                case 8:
                    if (!(m.emotionList && m.emotionList.length))
                        m.emotionList = [];
                    m.emotionList.push($root.proto.EmotionGoodsInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ShopData;
    })();

    proto.EmotionGoodsInfo = (function() {

        /**
         * Properties of an EmotionGoodsInfo.
         * @memberof proto
         * @interface IEmotionGoodsInfo
         * @property {number|null} [emotionID] EmotionGoodsInfo emotionID
         * @property {boolean|null} [bBought] EmotionGoodsInfo bBought
         */

        /**
         * Constructs a new EmotionGoodsInfo.
         * @memberof proto
         * @classdesc Represents an EmotionGoodsInfo.
         * @implements IEmotionGoodsInfo
         * @constructor
         * @param {proto.IEmotionGoodsInfo=} [p] Properties to set
         */
        function EmotionGoodsInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * EmotionGoodsInfo emotionID.
         * @member {number} emotionID
         * @memberof proto.EmotionGoodsInfo
         * @instance
         */
        EmotionGoodsInfo.prototype.emotionID = 0;

        /**
         * EmotionGoodsInfo bBought.
         * @member {boolean} bBought
         * @memberof proto.EmotionGoodsInfo
         * @instance
         */
        EmotionGoodsInfo.prototype.bBought = false;

        /**
         * Encodes the specified EmotionGoodsInfo message. Does not implicitly {@link proto.EmotionGoodsInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.EmotionGoodsInfo
         * @static
         * @param {proto.IEmotionGoodsInfo} m EmotionGoodsInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EmotionGoodsInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.emotionID != null && Object.hasOwnProperty.call(m, "emotionID"))
                w.uint32(8).int32(m.emotionID);
            if (m.bBought != null && Object.hasOwnProperty.call(m, "bBought"))
                w.uint32(16).bool(m.bBought);
            return w;
        };

        /**
         * Decodes an EmotionGoodsInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.EmotionGoodsInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.EmotionGoodsInfo} EmotionGoodsInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EmotionGoodsInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.EmotionGoodsInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.emotionID = r.int32();
                    break;
                case 2:
                    m.bBought = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return EmotionGoodsInfo;
    })();

    proto.Msg_GetShopInfoReq = (function() {

        /**
         * Properties of a Msg_GetShopInfoReq.
         * @memberof proto
         * @interface IMsg_GetShopInfoReq
         */

        /**
         * Constructs a new Msg_GetShopInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetShopInfoReq.
         * @implements IMsg_GetShopInfoReq
         * @constructor
         * @param {proto.IMsg_GetShopInfoReq=} [p] Properties to set
         */
        function Msg_GetShopInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetShopInfoReq message. Does not implicitly {@link proto.Msg_GetShopInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetShopInfoReq
         * @static
         * @param {proto.IMsg_GetShopInfoReq} m Msg_GetShopInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetShopInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetShopInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetShopInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetShopInfoReq} Msg_GetShopInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetShopInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetShopInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetShopInfoReq;
    })();

    proto.Msg_GetShopInfoRsp = (function() {

        /**
         * Properties of a Msg_GetShopInfoRsp.
         * @memberof proto
         * @interface IMsg_GetShopInfoRsp
         * @property {Array.<proto.IShopNormalGoods>|null} [commonList] Msg_GetShopInfoRsp commonList
         * @property {Array.<proto.IShopCashGoods>|null} [cashList] Msg_GetShopInfoRsp cashList
         * @property {Array.<proto.IEveryDaySpecialShop>|null} [specialList] Msg_GetShopInfoRsp specialList
         * @property {number|null} [specialNextRefreshTime] Msg_GetShopInfoRsp specialNextRefreshTime
         * @property {number|null} [specialFreeRefreshLeftTimes] Msg_GetShopInfoRsp specialFreeRefreshLeftTimes
         * @property {number|null} [specialNextFreeRefreshTime] Msg_GetShopInfoRsp specialNextFreeRefreshTime
         * @property {number|null} [specialSixRefreshTimes] Msg_GetShopInfoRsp specialSixRefreshTimes
         * @property {Array.<proto.IEmotionGoodsInfo>|null} [emotionList] Msg_GetShopInfoRsp emotionList
         * @property {number|null} [leftBuySuperBoxCount] Msg_GetShopInfoRsp leftBuySuperBoxCount
         */

        /**
         * Constructs a new Msg_GetShopInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetShopInfoRsp.
         * @implements IMsg_GetShopInfoRsp
         * @constructor
         * @param {proto.IMsg_GetShopInfoRsp=} [p] Properties to set
         */
        function Msg_GetShopInfoRsp(p) {
            this.commonList = [];
            this.cashList = [];
            this.specialList = [];
            this.emotionList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetShopInfoRsp commonList.
         * @member {Array.<proto.IShopNormalGoods>} commonList
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.commonList = $util.emptyArray;

        /**
         * Msg_GetShopInfoRsp cashList.
         * @member {Array.<proto.IShopCashGoods>} cashList
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.cashList = $util.emptyArray;

        /**
         * Msg_GetShopInfoRsp specialList.
         * @member {Array.<proto.IEveryDaySpecialShop>} specialList
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.specialList = $util.emptyArray;

        /**
         * Msg_GetShopInfoRsp specialNextRefreshTime.
         * @member {number} specialNextRefreshTime
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.specialNextRefreshTime = 0;

        /**
         * Msg_GetShopInfoRsp specialFreeRefreshLeftTimes.
         * @member {number} specialFreeRefreshLeftTimes
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.specialFreeRefreshLeftTimes = 0;

        /**
         * Msg_GetShopInfoRsp specialNextFreeRefreshTime.
         * @member {number} specialNextFreeRefreshTime
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.specialNextFreeRefreshTime = 0;

        /**
         * Msg_GetShopInfoRsp specialSixRefreshTimes.
         * @member {number} specialSixRefreshTimes
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.specialSixRefreshTimes = 0;

        /**
         * Msg_GetShopInfoRsp emotionList.
         * @member {Array.<proto.IEmotionGoodsInfo>} emotionList
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.emotionList = $util.emptyArray;

        /**
         * Msg_GetShopInfoRsp leftBuySuperBoxCount.
         * @member {number} leftBuySuperBoxCount
         * @memberof proto.Msg_GetShopInfoRsp
         * @instance
         */
        Msg_GetShopInfoRsp.prototype.leftBuySuperBoxCount = 0;

        /**
         * Encodes the specified Msg_GetShopInfoRsp message. Does not implicitly {@link proto.Msg_GetShopInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetShopInfoRsp
         * @static
         * @param {proto.IMsg_GetShopInfoRsp} m Msg_GetShopInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetShopInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.commonList != null && m.commonList.length) {
                for (var i = 0; i < m.commonList.length; ++i)
                    $root.proto.ShopNormalGoods.encode(m.commonList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.cashList != null && m.cashList.length) {
                for (var i = 0; i < m.cashList.length; ++i)
                    $root.proto.ShopCashGoods.encode(m.cashList[i], w.uint32(18).fork()).ldelim();
            }
            if (m.specialList != null && m.specialList.length) {
                for (var i = 0; i < m.specialList.length; ++i)
                    $root.proto.EveryDaySpecialShop.encode(m.specialList[i], w.uint32(26).fork()).ldelim();
            }
            if (m.specialNextRefreshTime != null && Object.hasOwnProperty.call(m, "specialNextRefreshTime"))
                w.uint32(32).int32(m.specialNextRefreshTime);
            if (m.specialFreeRefreshLeftTimes != null && Object.hasOwnProperty.call(m, "specialFreeRefreshLeftTimes"))
                w.uint32(40).int32(m.specialFreeRefreshLeftTimes);
            if (m.specialNextFreeRefreshTime != null && Object.hasOwnProperty.call(m, "specialNextFreeRefreshTime"))
                w.uint32(48).int32(m.specialNextFreeRefreshTime);
            if (m.specialSixRefreshTimes != null && Object.hasOwnProperty.call(m, "specialSixRefreshTimes"))
                w.uint32(56).int32(m.specialSixRefreshTimes);
            if (m.emotionList != null && m.emotionList.length) {
                for (var i = 0; i < m.emotionList.length; ++i)
                    $root.proto.EmotionGoodsInfo.encode(m.emotionList[i], w.uint32(66).fork()).ldelim();
            }
            if (m.leftBuySuperBoxCount != null && Object.hasOwnProperty.call(m, "leftBuySuperBoxCount"))
                w.uint32(72).int32(m.leftBuySuperBoxCount);
            return w;
        };

        /**
         * Decodes a Msg_GetShopInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetShopInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetShopInfoRsp} Msg_GetShopInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetShopInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetShopInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.commonList && m.commonList.length))
                        m.commonList = [];
                    m.commonList.push($root.proto.ShopNormalGoods.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.cashList && m.cashList.length))
                        m.cashList = [];
                    m.cashList.push($root.proto.ShopCashGoods.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.specialList && m.specialList.length))
                        m.specialList = [];
                    m.specialList.push($root.proto.EveryDaySpecialShop.decode(r, r.uint32()));
                    break;
                case 4:
                    m.specialNextRefreshTime = r.int32();
                    break;
                case 5:
                    m.specialFreeRefreshLeftTimes = r.int32();
                    break;
                case 6:
                    m.specialNextFreeRefreshTime = r.int32();
                    break;
                case 7:
                    m.specialSixRefreshTimes = r.int32();
                    break;
                case 8:
                    if (!(m.emotionList && m.emotionList.length))
                        m.emotionList = [];
                    m.emotionList.push($root.proto.EmotionGoodsInfo.decode(r, r.uint32()));
                    break;
                case 9:
                    m.leftBuySuperBoxCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetShopInfoRsp;
    })();

    proto.GiftBagCell = (function() {

        /**
         * Properties of a GiftBagCell.
         * @memberof proto
         * @interface IGiftBagCell
         * @property {number|null} [GiftID] GiftBagCell GiftID
         * @property {number|null} [Price] GiftBagCell Price
         * @property {number|null} [BuyedTimes] GiftBagCell BuyedTimes
         * @property {number|null} [MaxBuyTimes] GiftBagCell MaxBuyTimes
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Reward] GiftBagCell Reward
         */

        /**
         * Constructs a new GiftBagCell.
         * @memberof proto
         * @classdesc Represents a GiftBagCell.
         * @implements IGiftBagCell
         * @constructor
         * @param {proto.IGiftBagCell=} [p] Properties to set
         */
        function GiftBagCell(p) {
            this.Reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GiftBagCell GiftID.
         * @member {number} GiftID
         * @memberof proto.GiftBagCell
         * @instance
         */
        GiftBagCell.prototype.GiftID = 0;

        /**
         * GiftBagCell Price.
         * @member {number} Price
         * @memberof proto.GiftBagCell
         * @instance
         */
        GiftBagCell.prototype.Price = 0;

        /**
         * GiftBagCell BuyedTimes.
         * @member {number} BuyedTimes
         * @memberof proto.GiftBagCell
         * @instance
         */
        GiftBagCell.prototype.BuyedTimes = 0;

        /**
         * GiftBagCell MaxBuyTimes.
         * @member {number} MaxBuyTimes
         * @memberof proto.GiftBagCell
         * @instance
         */
        GiftBagCell.prototype.MaxBuyTimes = 0;

        /**
         * GiftBagCell Reward.
         * @member {Array.<proto.IRewardSimpleInfo>} Reward
         * @memberof proto.GiftBagCell
         * @instance
         */
        GiftBagCell.prototype.Reward = $util.emptyArray;

        /**
         * Encodes the specified GiftBagCell message. Does not implicitly {@link proto.GiftBagCell.verify|verify} messages.
         * @function encode
         * @memberof proto.GiftBagCell
         * @static
         * @param {proto.IGiftBagCell} m GiftBagCell message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftBagCell.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GiftID != null && Object.hasOwnProperty.call(m, "GiftID"))
                w.uint32(8).int32(m.GiftID);
            if (m.Price != null && Object.hasOwnProperty.call(m, "Price"))
                w.uint32(16).int32(m.Price);
            if (m.BuyedTimes != null && Object.hasOwnProperty.call(m, "BuyedTimes"))
                w.uint32(24).int32(m.BuyedTimes);
            if (m.MaxBuyTimes != null && Object.hasOwnProperty.call(m, "MaxBuyTimes"))
                w.uint32(32).int32(m.MaxBuyTimes);
            if (m.Reward != null && m.Reward.length) {
                for (var i = 0; i < m.Reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Reward[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a GiftBagCell message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GiftBagCell
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GiftBagCell} GiftBagCell
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftBagCell.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GiftBagCell();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.GiftID = r.int32();
                    break;
                case 2:
                    m.Price = r.int32();
                    break;
                case 3:
                    m.BuyedTimes = r.int32();
                    break;
                case 4:
                    m.MaxBuyTimes = r.int32();
                    break;
                case 5:
                    if (!(m.Reward && m.Reward.length))
                        m.Reward = [];
                    m.Reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GiftBagCell;
    })();

    proto.DayGiftBagInfo = (function() {

        /**
         * Properties of a DayGiftBagInfo.
         * @memberof proto
         * @interface IDayGiftBagInfo
         * @property {Array.<proto.IGiftBagCell>|null} [GiftBags] DayGiftBagInfo GiftBags
         * @property {number|null} [ResetUTC] DayGiftBagInfo ResetUTC
         * @property {number|null} [AdvRefreshTimes] DayGiftBagInfo AdvRefreshTimes
         */

        /**
         * Constructs a new DayGiftBagInfo.
         * @memberof proto
         * @classdesc Represents a DayGiftBagInfo.
         * @implements IDayGiftBagInfo
         * @constructor
         * @param {proto.IDayGiftBagInfo=} [p] Properties to set
         */
        function DayGiftBagInfo(p) {
            this.GiftBags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * DayGiftBagInfo GiftBags.
         * @member {Array.<proto.IGiftBagCell>} GiftBags
         * @memberof proto.DayGiftBagInfo
         * @instance
         */
        DayGiftBagInfo.prototype.GiftBags = $util.emptyArray;

        /**
         * DayGiftBagInfo ResetUTC.
         * @member {number} ResetUTC
         * @memberof proto.DayGiftBagInfo
         * @instance
         */
        DayGiftBagInfo.prototype.ResetUTC = 0;

        /**
         * DayGiftBagInfo AdvRefreshTimes.
         * @member {number} AdvRefreshTimes
         * @memberof proto.DayGiftBagInfo
         * @instance
         */
        DayGiftBagInfo.prototype.AdvRefreshTimes = 0;

        /**
         * Encodes the specified DayGiftBagInfo message. Does not implicitly {@link proto.DayGiftBagInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.DayGiftBagInfo
         * @static
         * @param {proto.IDayGiftBagInfo} m DayGiftBagInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DayGiftBagInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GiftBags != null && m.GiftBags.length) {
                for (var i = 0; i < m.GiftBags.length; ++i)
                    $root.proto.GiftBagCell.encode(m.GiftBags[i], w.uint32(10).fork()).ldelim();
            }
            if (m.ResetUTC != null && Object.hasOwnProperty.call(m, "ResetUTC"))
                w.uint32(16).int32(m.ResetUTC);
            if (m.AdvRefreshTimes != null && Object.hasOwnProperty.call(m, "AdvRefreshTimes"))
                w.uint32(24).int32(m.AdvRefreshTimes);
            return w;
        };

        /**
         * Decodes a DayGiftBagInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.DayGiftBagInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.DayGiftBagInfo} DayGiftBagInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DayGiftBagInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DayGiftBagInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.GiftBags && m.GiftBags.length))
                        m.GiftBags = [];
                    m.GiftBags.push($root.proto.GiftBagCell.decode(r, r.uint32()));
                    break;
                case 2:
                    m.ResetUTC = r.int32();
                    break;
                case 3:
                    m.AdvRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return DayGiftBagInfo;
    })();

    proto.WeekendGiftBagInfo = (function() {

        /**
         * Properties of a WeekendGiftBagInfo.
         * @memberof proto
         * @interface IWeekendGiftBagInfo
         * @property {Array.<proto.IGiftBagCell>|null} [GiftBags] WeekendGiftBagInfo GiftBags
         * @property {number|null} [ResetUTC] WeekendGiftBagInfo ResetUTC
         */

        /**
         * Constructs a new WeekendGiftBagInfo.
         * @memberof proto
         * @classdesc Represents a WeekendGiftBagInfo.
         * @implements IWeekendGiftBagInfo
         * @constructor
         * @param {proto.IWeekendGiftBagInfo=} [p] Properties to set
         */
        function WeekendGiftBagInfo(p) {
            this.GiftBags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * WeekendGiftBagInfo GiftBags.
         * @member {Array.<proto.IGiftBagCell>} GiftBags
         * @memberof proto.WeekendGiftBagInfo
         * @instance
         */
        WeekendGiftBagInfo.prototype.GiftBags = $util.emptyArray;

        /**
         * WeekendGiftBagInfo ResetUTC.
         * @member {number} ResetUTC
         * @memberof proto.WeekendGiftBagInfo
         * @instance
         */
        WeekendGiftBagInfo.prototype.ResetUTC = 0;

        /**
         * Encodes the specified WeekendGiftBagInfo message. Does not implicitly {@link proto.WeekendGiftBagInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.WeekendGiftBagInfo
         * @static
         * @param {proto.IWeekendGiftBagInfo} m WeekendGiftBagInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WeekendGiftBagInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GiftBags != null && m.GiftBags.length) {
                for (var i = 0; i < m.GiftBags.length; ++i)
                    $root.proto.GiftBagCell.encode(m.GiftBags[i], w.uint32(10).fork()).ldelim();
            }
            if (m.ResetUTC != null && Object.hasOwnProperty.call(m, "ResetUTC"))
                w.uint32(16).int32(m.ResetUTC);
            return w;
        };

        /**
         * Decodes a WeekendGiftBagInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.WeekendGiftBagInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.WeekendGiftBagInfo} WeekendGiftBagInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WeekendGiftBagInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.WeekendGiftBagInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.GiftBags && m.GiftBags.length))
                        m.GiftBags = [];
                    m.GiftBags.push($root.proto.GiftBagCell.decode(r, r.uint32()));
                    break;
                case 2:
                    m.ResetUTC = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return WeekendGiftBagInfo;
    })();

    proto.ExGratiaGiftBagInfo = (function() {

        /**
         * Properties of an ExGratiaGiftBagInfo.
         * @memberof proto
         * @interface IExGratiaGiftBagInfo
         * @property {Array.<proto.IGiftBagCell>|null} [GiftBags] ExGratiaGiftBagInfo GiftBags
         * @property {number|null} [EndTime] ExGratiaGiftBagInfo EndTime
         */

        /**
         * Constructs a new ExGratiaGiftBagInfo.
         * @memberof proto
         * @classdesc Represents an ExGratiaGiftBagInfo.
         * @implements IExGratiaGiftBagInfo
         * @constructor
         * @param {proto.IExGratiaGiftBagInfo=} [p] Properties to set
         */
        function ExGratiaGiftBagInfo(p) {
            this.GiftBags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ExGratiaGiftBagInfo GiftBags.
         * @member {Array.<proto.IGiftBagCell>} GiftBags
         * @memberof proto.ExGratiaGiftBagInfo
         * @instance
         */
        ExGratiaGiftBagInfo.prototype.GiftBags = $util.emptyArray;

        /**
         * ExGratiaGiftBagInfo EndTime.
         * @member {number} EndTime
         * @memberof proto.ExGratiaGiftBagInfo
         * @instance
         */
        ExGratiaGiftBagInfo.prototype.EndTime = 0;

        /**
         * Encodes the specified ExGratiaGiftBagInfo message. Does not implicitly {@link proto.ExGratiaGiftBagInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.ExGratiaGiftBagInfo
         * @static
         * @param {proto.IExGratiaGiftBagInfo} m ExGratiaGiftBagInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ExGratiaGiftBagInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GiftBags != null && m.GiftBags.length) {
                for (var i = 0; i < m.GiftBags.length; ++i)
                    $root.proto.GiftBagCell.encode(m.GiftBags[i], w.uint32(10).fork()).ldelim();
            }
            if (m.EndTime != null && Object.hasOwnProperty.call(m, "EndTime"))
                w.uint32(16).int32(m.EndTime);
            return w;
        };

        /**
         * Decodes an ExGratiaGiftBagInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ExGratiaGiftBagInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ExGratiaGiftBagInfo} ExGratiaGiftBagInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ExGratiaGiftBagInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ExGratiaGiftBagInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.GiftBags && m.GiftBags.length))
                        m.GiftBags = [];
                    m.GiftBags.push($root.proto.GiftBagCell.decode(r, r.uint32()));
                    break;
                case 2:
                    m.EndTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ExGratiaGiftBagInfo;
    })();

    proto.GiftBagData = (function() {

        /**
         * Properties of a GiftBagData.
         * @memberof proto
         * @interface IGiftBagData
         * @property {Array.<proto.IGiftBagCell>|null} [dailyGiftBag] GiftBagData dailyGiftBag
         * @property {Array.<proto.IGiftBagCell>|null} [weekendGiftBag] GiftBagData weekendGiftBag
         * @property {Array.<proto.IGiftBagCell>|null} [exGratiaGiftBag] GiftBagData exGratiaGiftBag
         * @property {number|null} [lastDailyRefreshTime] GiftBagData lastDailyRefreshTime
         * @property {number|null} [lastWeekendRefreshTime] GiftBagData lastWeekendRefreshTime
         * @property {number|null} [lastSaleOffGetTimestamp] GiftBagData lastSaleOffGetTimestamp
         * @property {number|null} [dailyGiftBagAdvRefreshTimes] GiftBagData dailyGiftBagAdvRefreshTimes
         * @property {number|null} [saleOffGiftBagEndTime] GiftBagData saleOffGiftBagEndTime
         */

        /**
         * Constructs a new GiftBagData.
         * @memberof proto
         * @classdesc Represents a GiftBagData.
         * @implements IGiftBagData
         * @constructor
         * @param {proto.IGiftBagData=} [p] Properties to set
         */
        function GiftBagData(p) {
            this.dailyGiftBag = [];
            this.weekendGiftBag = [];
            this.exGratiaGiftBag = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GiftBagData dailyGiftBag.
         * @member {Array.<proto.IGiftBagCell>} dailyGiftBag
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.dailyGiftBag = $util.emptyArray;

        /**
         * GiftBagData weekendGiftBag.
         * @member {Array.<proto.IGiftBagCell>} weekendGiftBag
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.weekendGiftBag = $util.emptyArray;

        /**
         * GiftBagData exGratiaGiftBag.
         * @member {Array.<proto.IGiftBagCell>} exGratiaGiftBag
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.exGratiaGiftBag = $util.emptyArray;

        /**
         * GiftBagData lastDailyRefreshTime.
         * @member {number} lastDailyRefreshTime
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.lastDailyRefreshTime = 0;

        /**
         * GiftBagData lastWeekendRefreshTime.
         * @member {number} lastWeekendRefreshTime
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.lastWeekendRefreshTime = 0;

        /**
         * GiftBagData lastSaleOffGetTimestamp.
         * @member {number} lastSaleOffGetTimestamp
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.lastSaleOffGetTimestamp = 0;

        /**
         * GiftBagData dailyGiftBagAdvRefreshTimes.
         * @member {number} dailyGiftBagAdvRefreshTimes
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.dailyGiftBagAdvRefreshTimes = 0;

        /**
         * GiftBagData saleOffGiftBagEndTime.
         * @member {number} saleOffGiftBagEndTime
         * @memberof proto.GiftBagData
         * @instance
         */
        GiftBagData.prototype.saleOffGiftBagEndTime = 0;

        /**
         * Encodes the specified GiftBagData message. Does not implicitly {@link proto.GiftBagData.verify|verify} messages.
         * @function encode
         * @memberof proto.GiftBagData
         * @static
         * @param {proto.IGiftBagData} m GiftBagData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftBagData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.dailyGiftBag != null && m.dailyGiftBag.length) {
                for (var i = 0; i < m.dailyGiftBag.length; ++i)
                    $root.proto.GiftBagCell.encode(m.dailyGiftBag[i], w.uint32(10).fork()).ldelim();
            }
            if (m.weekendGiftBag != null && m.weekendGiftBag.length) {
                for (var i = 0; i < m.weekendGiftBag.length; ++i)
                    $root.proto.GiftBagCell.encode(m.weekendGiftBag[i], w.uint32(18).fork()).ldelim();
            }
            if (m.exGratiaGiftBag != null && m.exGratiaGiftBag.length) {
                for (var i = 0; i < m.exGratiaGiftBag.length; ++i)
                    $root.proto.GiftBagCell.encode(m.exGratiaGiftBag[i], w.uint32(26).fork()).ldelim();
            }
            if (m.lastDailyRefreshTime != null && Object.hasOwnProperty.call(m, "lastDailyRefreshTime"))
                w.uint32(32).int32(m.lastDailyRefreshTime);
            if (m.lastWeekendRefreshTime != null && Object.hasOwnProperty.call(m, "lastWeekendRefreshTime"))
                w.uint32(40).int32(m.lastWeekendRefreshTime);
            if (m.lastSaleOffGetTimestamp != null && Object.hasOwnProperty.call(m, "lastSaleOffGetTimestamp"))
                w.uint32(48).int32(m.lastSaleOffGetTimestamp);
            if (m.dailyGiftBagAdvRefreshTimes != null && Object.hasOwnProperty.call(m, "dailyGiftBagAdvRefreshTimes"))
                w.uint32(56).int32(m.dailyGiftBagAdvRefreshTimes);
            if (m.saleOffGiftBagEndTime != null && Object.hasOwnProperty.call(m, "saleOffGiftBagEndTime"))
                w.uint32(64).int32(m.saleOffGiftBagEndTime);
            return w;
        };

        /**
         * Decodes a GiftBagData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GiftBagData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GiftBagData} GiftBagData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftBagData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GiftBagData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.dailyGiftBag && m.dailyGiftBag.length))
                        m.dailyGiftBag = [];
                    m.dailyGiftBag.push($root.proto.GiftBagCell.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.weekendGiftBag && m.weekendGiftBag.length))
                        m.weekendGiftBag = [];
                    m.weekendGiftBag.push($root.proto.GiftBagCell.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.exGratiaGiftBag && m.exGratiaGiftBag.length))
                        m.exGratiaGiftBag = [];
                    m.exGratiaGiftBag.push($root.proto.GiftBagCell.decode(r, r.uint32()));
                    break;
                case 4:
                    m.lastDailyRefreshTime = r.int32();
                    break;
                case 5:
                    m.lastWeekendRefreshTime = r.int32();
                    break;
                case 6:
                    m.lastSaleOffGetTimestamp = r.int32();
                    break;
                case 7:
                    m.dailyGiftBagAdvRefreshTimes = r.int32();
                    break;
                case 8:
                    m.saleOffGiftBagEndTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GiftBagData;
    })();

    proto.Msg_GetGiftBagReq = (function() {

        /**
         * Properties of a Msg_GetGiftBagReq.
         * @memberof proto
         * @interface IMsg_GetGiftBagReq
         */

        /**
         * Constructs a new Msg_GetGiftBagReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetGiftBagReq.
         * @implements IMsg_GetGiftBagReq
         * @constructor
         * @param {proto.IMsg_GetGiftBagReq=} [p] Properties to set
         */
        function Msg_GetGiftBagReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetGiftBagReq message. Does not implicitly {@link proto.Msg_GetGiftBagReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetGiftBagReq
         * @static
         * @param {proto.IMsg_GetGiftBagReq} m Msg_GetGiftBagReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetGiftBagReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetGiftBagReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetGiftBagReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetGiftBagReq} Msg_GetGiftBagReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetGiftBagReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetGiftBagReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetGiftBagReq;
    })();

    proto.Msg_GetGiftBagRsp = (function() {

        /**
         * Properties of a Msg_GetGiftBagRsp.
         * @memberof proto
         * @interface IMsg_GetGiftBagRsp
         * @property {proto.IDayGiftBagInfo|null} [dayGiftBag] Msg_GetGiftBagRsp dayGiftBag
         * @property {proto.IWeekendGiftBagInfo|null} [weekendGiftBag] Msg_GetGiftBagRsp weekendGiftBag
         * @property {proto.IExGratiaGiftBagInfo|null} [exGratiaGiftBag] Msg_GetGiftBagRsp exGratiaGiftBag
         */

        /**
         * Constructs a new Msg_GetGiftBagRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetGiftBagRsp.
         * @implements IMsg_GetGiftBagRsp
         * @constructor
         * @param {proto.IMsg_GetGiftBagRsp=} [p] Properties to set
         */
        function Msg_GetGiftBagRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetGiftBagRsp dayGiftBag.
         * @member {proto.IDayGiftBagInfo|null|undefined} dayGiftBag
         * @memberof proto.Msg_GetGiftBagRsp
         * @instance
         */
        Msg_GetGiftBagRsp.prototype.dayGiftBag = null;

        /**
         * Msg_GetGiftBagRsp weekendGiftBag.
         * @member {proto.IWeekendGiftBagInfo|null|undefined} weekendGiftBag
         * @memberof proto.Msg_GetGiftBagRsp
         * @instance
         */
        Msg_GetGiftBagRsp.prototype.weekendGiftBag = null;

        /**
         * Msg_GetGiftBagRsp exGratiaGiftBag.
         * @member {proto.IExGratiaGiftBagInfo|null|undefined} exGratiaGiftBag
         * @memberof proto.Msg_GetGiftBagRsp
         * @instance
         */
        Msg_GetGiftBagRsp.prototype.exGratiaGiftBag = null;

        /**
         * Encodes the specified Msg_GetGiftBagRsp message. Does not implicitly {@link proto.Msg_GetGiftBagRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetGiftBagRsp
         * @static
         * @param {proto.IMsg_GetGiftBagRsp} m Msg_GetGiftBagRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetGiftBagRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.dayGiftBag != null && Object.hasOwnProperty.call(m, "dayGiftBag"))
                $root.proto.DayGiftBagInfo.encode(m.dayGiftBag, w.uint32(10).fork()).ldelim();
            if (m.weekendGiftBag != null && Object.hasOwnProperty.call(m, "weekendGiftBag"))
                $root.proto.WeekendGiftBagInfo.encode(m.weekendGiftBag, w.uint32(18).fork()).ldelim();
            if (m.exGratiaGiftBag != null && Object.hasOwnProperty.call(m, "exGratiaGiftBag"))
                $root.proto.ExGratiaGiftBagInfo.encode(m.exGratiaGiftBag, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_GetGiftBagRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetGiftBagRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetGiftBagRsp} Msg_GetGiftBagRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetGiftBagRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetGiftBagRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.dayGiftBag = $root.proto.DayGiftBagInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.weekendGiftBag = $root.proto.WeekendGiftBagInfo.decode(r, r.uint32());
                    break;
                case 3:
                    m.exGratiaGiftBag = $root.proto.ExGratiaGiftBagInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetGiftBagRsp;
    })();

    proto.Msg_RefreshDayGiftBagReq = (function() {

        /**
         * Properties of a Msg_RefreshDayGiftBagReq.
         * @memberof proto
         * @interface IMsg_RefreshDayGiftBagReq
         * @property {boolean|null} [bAVDRefresh] Msg_RefreshDayGiftBagReq bAVDRefresh
         */

        /**
         * Constructs a new Msg_RefreshDayGiftBagReq.
         * @memberof proto
         * @classdesc Represents a Msg_RefreshDayGiftBagReq.
         * @implements IMsg_RefreshDayGiftBagReq
         * @constructor
         * @param {proto.IMsg_RefreshDayGiftBagReq=} [p] Properties to set
         */
        function Msg_RefreshDayGiftBagReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RefreshDayGiftBagReq bAVDRefresh.
         * @member {boolean} bAVDRefresh
         * @memberof proto.Msg_RefreshDayGiftBagReq
         * @instance
         */
        Msg_RefreshDayGiftBagReq.prototype.bAVDRefresh = false;

        /**
         * Encodes the specified Msg_RefreshDayGiftBagReq message. Does not implicitly {@link proto.Msg_RefreshDayGiftBagReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RefreshDayGiftBagReq
         * @static
         * @param {proto.IMsg_RefreshDayGiftBagReq} m Msg_RefreshDayGiftBagReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RefreshDayGiftBagReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bAVDRefresh != null && Object.hasOwnProperty.call(m, "bAVDRefresh"))
                w.uint32(8).bool(m.bAVDRefresh);
            return w;
        };

        /**
         * Decodes a Msg_RefreshDayGiftBagReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RefreshDayGiftBagReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RefreshDayGiftBagReq} Msg_RefreshDayGiftBagReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RefreshDayGiftBagReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RefreshDayGiftBagReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bAVDRefresh = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RefreshDayGiftBagReq;
    })();

    proto.Msg_RefreshDayGiftBagRsp = (function() {

        /**
         * Properties of a Msg_RefreshDayGiftBagRsp.
         * @memberof proto
         * @interface IMsg_RefreshDayGiftBagRsp
         * @property {proto.Msg_RefreshDayGiftBagRsp.ErrorCode|null} [result] Msg_RefreshDayGiftBagRsp result
         * @property {proto.IDayGiftBagInfo|null} [dayGiftBag] Msg_RefreshDayGiftBagRsp dayGiftBag
         */

        /**
         * Constructs a new Msg_RefreshDayGiftBagRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RefreshDayGiftBagRsp.
         * @implements IMsg_RefreshDayGiftBagRsp
         * @constructor
         * @param {proto.IMsg_RefreshDayGiftBagRsp=} [p] Properties to set
         */
        function Msg_RefreshDayGiftBagRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RefreshDayGiftBagRsp result.
         * @member {proto.Msg_RefreshDayGiftBagRsp.ErrorCode} result
         * @memberof proto.Msg_RefreshDayGiftBagRsp
         * @instance
         */
        Msg_RefreshDayGiftBagRsp.prototype.result = 0;

        /**
         * Msg_RefreshDayGiftBagRsp dayGiftBag.
         * @member {proto.IDayGiftBagInfo|null|undefined} dayGiftBag
         * @memberof proto.Msg_RefreshDayGiftBagRsp
         * @instance
         */
        Msg_RefreshDayGiftBagRsp.prototype.dayGiftBag = null;

        /**
         * Encodes the specified Msg_RefreshDayGiftBagRsp message. Does not implicitly {@link proto.Msg_RefreshDayGiftBagRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RefreshDayGiftBagRsp
         * @static
         * @param {proto.IMsg_RefreshDayGiftBagRsp} m Msg_RefreshDayGiftBagRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RefreshDayGiftBagRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.dayGiftBag != null && Object.hasOwnProperty.call(m, "dayGiftBag"))
                $root.proto.DayGiftBagInfo.encode(m.dayGiftBag, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_RefreshDayGiftBagRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RefreshDayGiftBagRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RefreshDayGiftBagRsp} Msg_RefreshDayGiftBagRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RefreshDayGiftBagRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RefreshDayGiftBagRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.dayGiftBag = $root.proto.DayGiftBagInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_RefreshDayGiftBagRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} GiftNotExist=1 GiftNotExist value
         * @property {number} AdvNotEnough=2 AdvNotEnough value
         * @property {number} DiamondNotEnough=3 DiamondNotEnough value
         */
        Msg_RefreshDayGiftBagRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "GiftNotExist"] = 1;
            values[valuesById[2] = "AdvNotEnough"] = 2;
            values[valuesById[3] = "DiamondNotEnough"] = 3;
            return values;
        })();

        return Msg_RefreshDayGiftBagRsp;
    })();

    /**
     * GiftBagType enum.
     * @name proto.GiftBagType
     * @enum {number}
     * @property {number} DayGift=0 DayGift value
     * @property {number} WeekendGift=1 WeekendGift value
     * @property {number} ExGift=2 ExGift value
     */
    proto.GiftBagType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "DayGift"] = 0;
        values[valuesById[1] = "WeekendGift"] = 1;
        values[valuesById[2] = "ExGift"] = 2;
        return values;
    })();

    proto.Msg_BuyGiftDayReq = (function() {

        /**
         * Properties of a Msg_BuyGiftDayReq.
         * @memberof proto
         * @interface IMsg_BuyGiftDayReq
         * @property {proto.GiftBagType|null} [giftType] Msg_BuyGiftDayReq giftType
         * @property {number|null} [giftID] Msg_BuyGiftDayReq giftID
         */

        /**
         * Constructs a new Msg_BuyGiftDayReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyGiftDayReq.
         * @implements IMsg_BuyGiftDayReq
         * @constructor
         * @param {proto.IMsg_BuyGiftDayReq=} [p] Properties to set
         */
        function Msg_BuyGiftDayReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyGiftDayReq giftType.
         * @member {proto.GiftBagType} giftType
         * @memberof proto.Msg_BuyGiftDayReq
         * @instance
         */
        Msg_BuyGiftDayReq.prototype.giftType = 0;

        /**
         * Msg_BuyGiftDayReq giftID.
         * @member {number} giftID
         * @memberof proto.Msg_BuyGiftDayReq
         * @instance
         */
        Msg_BuyGiftDayReq.prototype.giftID = 0;

        /**
         * Encodes the specified Msg_BuyGiftDayReq message. Does not implicitly {@link proto.Msg_BuyGiftDayReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyGiftDayReq
         * @static
         * @param {proto.IMsg_BuyGiftDayReq} m Msg_BuyGiftDayReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyGiftDayReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.giftType != null && Object.hasOwnProperty.call(m, "giftType"))
                w.uint32(8).int32(m.giftType);
            if (m.giftID != null && Object.hasOwnProperty.call(m, "giftID"))
                w.uint32(16).int32(m.giftID);
            return w;
        };

        /**
         * Decodes a Msg_BuyGiftDayReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyGiftDayReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyGiftDayReq} Msg_BuyGiftDayReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyGiftDayReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyGiftDayReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.giftType = r.int32();
                    break;
                case 2:
                    m.giftID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyGiftDayReq;
    })();

    proto.Msg_BuyGiftDayRsp = (function() {

        /**
         * Properties of a Msg_BuyGiftDayRsp.
         * @memberof proto
         * @interface IMsg_BuyGiftDayRsp
         * @property {proto.Msg_BuyGiftDayRsp.ErrorCode|null} [result] Msg_BuyGiftDayRsp result
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [awards] Msg_BuyGiftDayRsp awards
         */

        /**
         * Constructs a new Msg_BuyGiftDayRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyGiftDayRsp.
         * @implements IMsg_BuyGiftDayRsp
         * @constructor
         * @param {proto.IMsg_BuyGiftDayRsp=} [p] Properties to set
         */
        function Msg_BuyGiftDayRsp(p) {
            this.awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyGiftDayRsp result.
         * @member {proto.Msg_BuyGiftDayRsp.ErrorCode} result
         * @memberof proto.Msg_BuyGiftDayRsp
         * @instance
         */
        Msg_BuyGiftDayRsp.prototype.result = 0;

        /**
         * Msg_BuyGiftDayRsp awards.
         * @member {Array.<proto.IVecRewardSimpleInfo>} awards
         * @memberof proto.Msg_BuyGiftDayRsp
         * @instance
         */
        Msg_BuyGiftDayRsp.prototype.awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_BuyGiftDayRsp message. Does not implicitly {@link proto.Msg_BuyGiftDayRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyGiftDayRsp
         * @static
         * @param {proto.IMsg_BuyGiftDayRsp} m Msg_BuyGiftDayRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyGiftDayRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.awards != null && m.awards.length) {
                for (var i = 0; i < m.awards.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.awards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BuyGiftDayRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyGiftDayRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyGiftDayRsp} Msg_BuyGiftDayRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyGiftDayRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyGiftDayRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.awards && m.awards.length))
                        m.awards = [];
                    m.awards.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyGiftDayRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} GiftNotExist=1 GiftNotExist value
         * @property {number} GiftTimePassed=2 GiftTimePassed value
         * @property {number} GiftBuyTimesNotEnough=3 GiftBuyTimesNotEnough value
         */
        Msg_BuyGiftDayRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "GiftNotExist"] = 1;
            values[valuesById[2] = "GiftTimePassed"] = 2;
            values[valuesById[3] = "GiftBuyTimesNotEnough"] = 3;
            return values;
        })();

        return Msg_BuyGiftDayRsp;
    })();

    proto.RookieGiftBagCell = (function() {

        /**
         * Properties of a RookieGiftBagCell.
         * @memberof proto
         * @interface IRookieGiftBagCell
         * @property {number|null} [ID] RookieGiftBagCell ID
         * @property {number|null} [buyTimes] RookieGiftBagCell buyTimes
         */

        /**
         * Constructs a new RookieGiftBagCell.
         * @memberof proto
         * @classdesc Represents a RookieGiftBagCell.
         * @implements IRookieGiftBagCell
         * @constructor
         * @param {proto.IRookieGiftBagCell=} [p] Properties to set
         */
        function RookieGiftBagCell(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RookieGiftBagCell ID.
         * @member {number} ID
         * @memberof proto.RookieGiftBagCell
         * @instance
         */
        RookieGiftBagCell.prototype.ID = 0;

        /**
         * RookieGiftBagCell buyTimes.
         * @member {number} buyTimes
         * @memberof proto.RookieGiftBagCell
         * @instance
         */
        RookieGiftBagCell.prototype.buyTimes = 0;

        /**
         * Encodes the specified RookieGiftBagCell message. Does not implicitly {@link proto.RookieGiftBagCell.verify|verify} messages.
         * @function encode
         * @memberof proto.RookieGiftBagCell
         * @static
         * @param {proto.IRookieGiftBagCell} m RookieGiftBagCell message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RookieGiftBagCell.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(8).int32(m.ID);
            if (m.buyTimes != null && Object.hasOwnProperty.call(m, "buyTimes"))
                w.uint32(16).int32(m.buyTimes);
            return w;
        };

        /**
         * Decodes a RookieGiftBagCell message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RookieGiftBagCell
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RookieGiftBagCell} RookieGiftBagCell
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RookieGiftBagCell.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RookieGiftBagCell();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.int32();
                    break;
                case 2:
                    m.buyTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RookieGiftBagCell;
    })();

    proto.RookieGiftBagData = (function() {

        /**
         * Properties of a RookieGiftBagData.
         * @memberof proto
         * @interface IRookieGiftBagData
         * @property {Array.<proto.IRookieGiftBagCell>|null} [rookieGiftBag] RookieGiftBagData rookieGiftBag
         * @property {number|null} [rookieGiftBagOpenTime] RookieGiftBagData rookieGiftBagOpenTime
         */

        /**
         * Constructs a new RookieGiftBagData.
         * @memberof proto
         * @classdesc Represents a RookieGiftBagData.
         * @implements IRookieGiftBagData
         * @constructor
         * @param {proto.IRookieGiftBagData=} [p] Properties to set
         */
        function RookieGiftBagData(p) {
            this.rookieGiftBag = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RookieGiftBagData rookieGiftBag.
         * @member {Array.<proto.IRookieGiftBagCell>} rookieGiftBag
         * @memberof proto.RookieGiftBagData
         * @instance
         */
        RookieGiftBagData.prototype.rookieGiftBag = $util.emptyArray;

        /**
         * RookieGiftBagData rookieGiftBagOpenTime.
         * @member {number} rookieGiftBagOpenTime
         * @memberof proto.RookieGiftBagData
         * @instance
         */
        RookieGiftBagData.prototype.rookieGiftBagOpenTime = 0;

        /**
         * Encodes the specified RookieGiftBagData message. Does not implicitly {@link proto.RookieGiftBagData.verify|verify} messages.
         * @function encode
         * @memberof proto.RookieGiftBagData
         * @static
         * @param {proto.IRookieGiftBagData} m RookieGiftBagData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RookieGiftBagData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rookieGiftBag != null && m.rookieGiftBag.length) {
                for (var i = 0; i < m.rookieGiftBag.length; ++i)
                    $root.proto.RookieGiftBagCell.encode(m.rookieGiftBag[i], w.uint32(10).fork()).ldelim();
            }
            if (m.rookieGiftBagOpenTime != null && Object.hasOwnProperty.call(m, "rookieGiftBagOpenTime"))
                w.uint32(16).int32(m.rookieGiftBagOpenTime);
            return w;
        };

        /**
         * Decodes a RookieGiftBagData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RookieGiftBagData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RookieGiftBagData} RookieGiftBagData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RookieGiftBagData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RookieGiftBagData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rookieGiftBag && m.rookieGiftBag.length))
                        m.rookieGiftBag = [];
                    m.rookieGiftBag.push($root.proto.RookieGiftBagCell.decode(r, r.uint32()));
                    break;
                case 2:
                    m.rookieGiftBagOpenTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RookieGiftBagData;
    })();

    proto.NewPlayerGiftBag = (function() {

        /**
         * Properties of a NewPlayerGiftBag.
         * @memberof proto
         * @interface INewPlayerGiftBag
         * @property {number|null} [id] NewPlayerGiftBag id
         * @property {number|null} [buyTimes] NewPlayerGiftBag buyTimes
         * @property {number|null} [maxBuyTimes] NewPlayerGiftBag maxBuyTimes
         * @property {number|null} [price] NewPlayerGiftBag price
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] NewPlayerGiftBag rewards
         */

        /**
         * Constructs a new NewPlayerGiftBag.
         * @memberof proto
         * @classdesc Represents a NewPlayerGiftBag.
         * @implements INewPlayerGiftBag
         * @constructor
         * @param {proto.INewPlayerGiftBag=} [p] Properties to set
         */
        function NewPlayerGiftBag(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * NewPlayerGiftBag id.
         * @member {number} id
         * @memberof proto.NewPlayerGiftBag
         * @instance
         */
        NewPlayerGiftBag.prototype.id = 0;

        /**
         * NewPlayerGiftBag buyTimes.
         * @member {number} buyTimes
         * @memberof proto.NewPlayerGiftBag
         * @instance
         */
        NewPlayerGiftBag.prototype.buyTimes = 0;

        /**
         * NewPlayerGiftBag maxBuyTimes.
         * @member {number} maxBuyTimes
         * @memberof proto.NewPlayerGiftBag
         * @instance
         */
        NewPlayerGiftBag.prototype.maxBuyTimes = 0;

        /**
         * NewPlayerGiftBag price.
         * @member {number} price
         * @memberof proto.NewPlayerGiftBag
         * @instance
         */
        NewPlayerGiftBag.prototype.price = 0;

        /**
         * NewPlayerGiftBag rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.NewPlayerGiftBag
         * @instance
         */
        NewPlayerGiftBag.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified NewPlayerGiftBag message. Does not implicitly {@link proto.NewPlayerGiftBag.verify|verify} messages.
         * @function encode
         * @memberof proto.NewPlayerGiftBag
         * @static
         * @param {proto.INewPlayerGiftBag} m NewPlayerGiftBag message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewPlayerGiftBag.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(8).int32(m.id);
            if (m.buyTimes != null && Object.hasOwnProperty.call(m, "buyTimes"))
                w.uint32(16).int32(m.buyTimes);
            if (m.maxBuyTimes != null && Object.hasOwnProperty.call(m, "maxBuyTimes"))
                w.uint32(24).int32(m.maxBuyTimes);
            if (m.price != null && Object.hasOwnProperty.call(m, "price"))
                w.uint32(32).int32(m.price);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a NewPlayerGiftBag message from the specified reader or buffer.
         * @function decode
         * @memberof proto.NewPlayerGiftBag
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.NewPlayerGiftBag} NewPlayerGiftBag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewPlayerGiftBag.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.NewPlayerGiftBag();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.id = r.int32();
                    break;
                case 2:
                    m.buyTimes = r.int32();
                    break;
                case 3:
                    m.maxBuyTimes = r.int32();
                    break;
                case 4:
                    m.price = r.int32();
                    break;
                case 5:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return NewPlayerGiftBag;
    })();

    proto.Msg_NewPlayerGiftBagReq = (function() {

        /**
         * Properties of a Msg_NewPlayerGiftBagReq.
         * @memberof proto
         * @interface IMsg_NewPlayerGiftBagReq
         */

        /**
         * Constructs a new Msg_NewPlayerGiftBagReq.
         * @memberof proto
         * @classdesc Represents a Msg_NewPlayerGiftBagReq.
         * @implements IMsg_NewPlayerGiftBagReq
         * @constructor
         * @param {proto.IMsg_NewPlayerGiftBagReq=} [p] Properties to set
         */
        function Msg_NewPlayerGiftBagReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_NewPlayerGiftBagReq message. Does not implicitly {@link proto.Msg_NewPlayerGiftBagReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_NewPlayerGiftBagReq
         * @static
         * @param {proto.IMsg_NewPlayerGiftBagReq} m Msg_NewPlayerGiftBagReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_NewPlayerGiftBagReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_NewPlayerGiftBagReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_NewPlayerGiftBagReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_NewPlayerGiftBagReq} Msg_NewPlayerGiftBagReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_NewPlayerGiftBagReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_NewPlayerGiftBagReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_NewPlayerGiftBagReq;
    })();

    proto.Msg_NewPlayerGiftBagRsp = (function() {

        /**
         * Properties of a Msg_NewPlayerGiftBagRsp.
         * @memberof proto
         * @interface IMsg_NewPlayerGiftBagRsp
         * @property {proto.Msg_NewPlayerGiftBagRsp.ErrorCode|null} [result] Msg_NewPlayerGiftBagRsp result
         * @property {Array.<proto.INewPlayerGiftBag>|null} [bagGifts] Msg_NewPlayerGiftBagRsp bagGifts
         * @property {number|null} [endUTC] Msg_NewPlayerGiftBagRsp endUTC
         */

        /**
         * Constructs a new Msg_NewPlayerGiftBagRsp.
         * @memberof proto
         * @classdesc Represents a Msg_NewPlayerGiftBagRsp.
         * @implements IMsg_NewPlayerGiftBagRsp
         * @constructor
         * @param {proto.IMsg_NewPlayerGiftBagRsp=} [p] Properties to set
         */
        function Msg_NewPlayerGiftBagRsp(p) {
            this.bagGifts = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_NewPlayerGiftBagRsp result.
         * @member {proto.Msg_NewPlayerGiftBagRsp.ErrorCode} result
         * @memberof proto.Msg_NewPlayerGiftBagRsp
         * @instance
         */
        Msg_NewPlayerGiftBagRsp.prototype.result = 0;

        /**
         * Msg_NewPlayerGiftBagRsp bagGifts.
         * @member {Array.<proto.INewPlayerGiftBag>} bagGifts
         * @memberof proto.Msg_NewPlayerGiftBagRsp
         * @instance
         */
        Msg_NewPlayerGiftBagRsp.prototype.bagGifts = $util.emptyArray;

        /**
         * Msg_NewPlayerGiftBagRsp endUTC.
         * @member {number} endUTC
         * @memberof proto.Msg_NewPlayerGiftBagRsp
         * @instance
         */
        Msg_NewPlayerGiftBagRsp.prototype.endUTC = 0;

        /**
         * Encodes the specified Msg_NewPlayerGiftBagRsp message. Does not implicitly {@link proto.Msg_NewPlayerGiftBagRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_NewPlayerGiftBagRsp
         * @static
         * @param {proto.IMsg_NewPlayerGiftBagRsp} m Msg_NewPlayerGiftBagRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_NewPlayerGiftBagRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.bagGifts != null && m.bagGifts.length) {
                for (var i = 0; i < m.bagGifts.length; ++i)
                    $root.proto.NewPlayerGiftBag.encode(m.bagGifts[i], w.uint32(18).fork()).ldelim();
            }
            if (m.endUTC != null && Object.hasOwnProperty.call(m, "endUTC"))
                w.uint32(24).int32(m.endUTC);
            return w;
        };

        /**
         * Decodes a Msg_NewPlayerGiftBagRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_NewPlayerGiftBagRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_NewPlayerGiftBagRsp} Msg_NewPlayerGiftBagRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_NewPlayerGiftBagRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_NewPlayerGiftBagRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.bagGifts && m.bagGifts.length))
                        m.bagGifts = [];
                    m.bagGifts.push($root.proto.NewPlayerGiftBag.decode(r, r.uint32()));
                    break;
                case 3:
                    m.endUTC = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_NewPlayerGiftBagRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Error=1 Error value
         */
        Msg_NewPlayerGiftBagRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Error"] = 1;
            return values;
        })();

        return Msg_NewPlayerGiftBagRsp;
    })();

    proto.Msg_BuyNewPlayerGiftBagReq = (function() {

        /**
         * Properties of a Msg_BuyNewPlayerGiftBagReq.
         * @memberof proto
         * @interface IMsg_BuyNewPlayerGiftBagReq
         * @property {number|null} [ID] Msg_BuyNewPlayerGiftBagReq ID
         */

        /**
         * Constructs a new Msg_BuyNewPlayerGiftBagReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyNewPlayerGiftBagReq.
         * @implements IMsg_BuyNewPlayerGiftBagReq
         * @constructor
         * @param {proto.IMsg_BuyNewPlayerGiftBagReq=} [p] Properties to set
         */
        function Msg_BuyNewPlayerGiftBagReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyNewPlayerGiftBagReq ID.
         * @member {number} ID
         * @memberof proto.Msg_BuyNewPlayerGiftBagReq
         * @instance
         */
        Msg_BuyNewPlayerGiftBagReq.prototype.ID = 0;

        /**
         * Encodes the specified Msg_BuyNewPlayerGiftBagReq message. Does not implicitly {@link proto.Msg_BuyNewPlayerGiftBagReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyNewPlayerGiftBagReq
         * @static
         * @param {proto.IMsg_BuyNewPlayerGiftBagReq} m Msg_BuyNewPlayerGiftBagReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyNewPlayerGiftBagReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(8).int32(m.ID);
            return w;
        };

        /**
         * Decodes a Msg_BuyNewPlayerGiftBagReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyNewPlayerGiftBagReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyNewPlayerGiftBagReq} Msg_BuyNewPlayerGiftBagReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyNewPlayerGiftBagReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyNewPlayerGiftBagReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyNewPlayerGiftBagReq;
    })();

    proto.Msg_BuyNewPlayerGiftBagRsp = (function() {

        /**
         * Properties of a Msg_BuyNewPlayerGiftBagRsp.
         * @memberof proto
         * @interface IMsg_BuyNewPlayerGiftBagRsp
         * @property {proto.Msg_BuyNewPlayerGiftBagRsp.ErrorCode|null} [result] Msg_BuyNewPlayerGiftBagRsp result
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [rewards] Msg_BuyNewPlayerGiftBagRsp rewards
         * @property {number|null} [giftID] Msg_BuyNewPlayerGiftBagRsp giftID
         */

        /**
         * Constructs a new Msg_BuyNewPlayerGiftBagRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyNewPlayerGiftBagRsp.
         * @implements IMsg_BuyNewPlayerGiftBagRsp
         * @constructor
         * @param {proto.IMsg_BuyNewPlayerGiftBagRsp=} [p] Properties to set
         */
        function Msg_BuyNewPlayerGiftBagRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyNewPlayerGiftBagRsp result.
         * @member {proto.Msg_BuyNewPlayerGiftBagRsp.ErrorCode} result
         * @memberof proto.Msg_BuyNewPlayerGiftBagRsp
         * @instance
         */
        Msg_BuyNewPlayerGiftBagRsp.prototype.result = 0;

        /**
         * Msg_BuyNewPlayerGiftBagRsp rewards.
         * @member {Array.<proto.IVecRewardSimpleInfo>} rewards
         * @memberof proto.Msg_BuyNewPlayerGiftBagRsp
         * @instance
         */
        Msg_BuyNewPlayerGiftBagRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_BuyNewPlayerGiftBagRsp giftID.
         * @member {number} giftID
         * @memberof proto.Msg_BuyNewPlayerGiftBagRsp
         * @instance
         */
        Msg_BuyNewPlayerGiftBagRsp.prototype.giftID = 0;

        /**
         * Encodes the specified Msg_BuyNewPlayerGiftBagRsp message. Does not implicitly {@link proto.Msg_BuyNewPlayerGiftBagRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyNewPlayerGiftBagRsp
         * @static
         * @param {proto.IMsg_BuyNewPlayerGiftBagRsp} m Msg_BuyNewPlayerGiftBagRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyNewPlayerGiftBagRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.giftID != null && Object.hasOwnProperty.call(m, "giftID"))
                w.uint32(24).int32(m.giftID);
            return w;
        };

        /**
         * Decodes a Msg_BuyNewPlayerGiftBagRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyNewPlayerGiftBagRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyNewPlayerGiftBagRsp} Msg_BuyNewPlayerGiftBagRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyNewPlayerGiftBagRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyNewPlayerGiftBagRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.giftID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyNewPlayerGiftBagRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} IDError=1 IDError value
         */
        Msg_BuyNewPlayerGiftBagRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "IDError"] = 1;
            return values;
        })();

        return Msg_BuyNewPlayerGiftBagRsp;
    })();

    proto.Msg_PushNewExGiftBag = (function() {

        /**
         * Properties of a Msg_PushNewExGiftBag.
         * @memberof proto
         * @interface IMsg_PushNewExGiftBag
         */

        /**
         * Constructs a new Msg_PushNewExGiftBag.
         * @memberof proto
         * @classdesc Represents a Msg_PushNewExGiftBag.
         * @implements IMsg_PushNewExGiftBag
         * @constructor
         * @param {proto.IMsg_PushNewExGiftBag=} [p] Properties to set
         */
        function Msg_PushNewExGiftBag(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_PushNewExGiftBag message. Does not implicitly {@link proto.Msg_PushNewExGiftBag.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushNewExGiftBag
         * @static
         * @param {proto.IMsg_PushNewExGiftBag} m Msg_PushNewExGiftBag message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushNewExGiftBag.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_PushNewExGiftBag message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushNewExGiftBag
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushNewExGiftBag} Msg_PushNewExGiftBag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushNewExGiftBag.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushNewExGiftBag();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushNewExGiftBag;
    })();

    proto.Msg_BuyShopGoodsReq = (function() {

        /**
         * Properties of a Msg_BuyShopGoodsReq.
         * @memberof proto
         * @interface IMsg_BuyShopGoodsReq
         * @property {proto.ShopGoodsType|null} [buyType] Msg_BuyShopGoodsReq buyType
         * @property {number|null} [index] Msg_BuyShopGoodsReq index
         */

        /**
         * Constructs a new Msg_BuyShopGoodsReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyShopGoodsReq.
         * @implements IMsg_BuyShopGoodsReq
         * @constructor
         * @param {proto.IMsg_BuyShopGoodsReq=} [p] Properties to set
         */
        function Msg_BuyShopGoodsReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyShopGoodsReq buyType.
         * @member {proto.ShopGoodsType} buyType
         * @memberof proto.Msg_BuyShopGoodsReq
         * @instance
         */
        Msg_BuyShopGoodsReq.prototype.buyType = 0;

        /**
         * Msg_BuyShopGoodsReq index.
         * @member {number} index
         * @memberof proto.Msg_BuyShopGoodsReq
         * @instance
         */
        Msg_BuyShopGoodsReq.prototype.index = 0;

        /**
         * Encodes the specified Msg_BuyShopGoodsReq message. Does not implicitly {@link proto.Msg_BuyShopGoodsReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyShopGoodsReq
         * @static
         * @param {proto.IMsg_BuyShopGoodsReq} m Msg_BuyShopGoodsReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyShopGoodsReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.buyType != null && Object.hasOwnProperty.call(m, "buyType"))
                w.uint32(8).int32(m.buyType);
            if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                w.uint32(16).int32(m.index);
            return w;
        };

        /**
         * Decodes a Msg_BuyShopGoodsReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyShopGoodsReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyShopGoodsReq} Msg_BuyShopGoodsReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyShopGoodsReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyShopGoodsReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.buyType = r.int32();
                    break;
                case 2:
                    m.index = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyShopGoodsReq;
    })();

    proto.Msg_BuyShopGoodsRsp = (function() {

        /**
         * Properties of a Msg_BuyShopGoodsRsp.
         * @memberof proto
         * @interface IMsg_BuyShopGoodsRsp
         * @property {proto.Msg_BuyShopGoodsRsp.ErrorCode|null} [result] Msg_BuyShopGoodsRsp result
         * @property {proto.ShopGoodsType|null} [buyType] Msg_BuyShopGoodsRsp buyType
         * @property {number|null} [index] Msg_BuyShopGoodsRsp index
         * @property {Array.<proto.IRewardSimpleInfo>|null} [goods] Msg_BuyShopGoodsRsp goods
         */

        /**
         * Constructs a new Msg_BuyShopGoodsRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyShopGoodsRsp.
         * @implements IMsg_BuyShopGoodsRsp
         * @constructor
         * @param {proto.IMsg_BuyShopGoodsRsp=} [p] Properties to set
         */
        function Msg_BuyShopGoodsRsp(p) {
            this.goods = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyShopGoodsRsp result.
         * @member {proto.Msg_BuyShopGoodsRsp.ErrorCode} result
         * @memberof proto.Msg_BuyShopGoodsRsp
         * @instance
         */
        Msg_BuyShopGoodsRsp.prototype.result = 0;

        /**
         * Msg_BuyShopGoodsRsp buyType.
         * @member {proto.ShopGoodsType} buyType
         * @memberof proto.Msg_BuyShopGoodsRsp
         * @instance
         */
        Msg_BuyShopGoodsRsp.prototype.buyType = 0;

        /**
         * Msg_BuyShopGoodsRsp index.
         * @member {number} index
         * @memberof proto.Msg_BuyShopGoodsRsp
         * @instance
         */
        Msg_BuyShopGoodsRsp.prototype.index = 0;

        /**
         * Msg_BuyShopGoodsRsp goods.
         * @member {Array.<proto.IRewardSimpleInfo>} goods
         * @memberof proto.Msg_BuyShopGoodsRsp
         * @instance
         */
        Msg_BuyShopGoodsRsp.prototype.goods = $util.emptyArray;

        /**
         * Encodes the specified Msg_BuyShopGoodsRsp message. Does not implicitly {@link proto.Msg_BuyShopGoodsRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyShopGoodsRsp
         * @static
         * @param {proto.IMsg_BuyShopGoodsRsp} m Msg_BuyShopGoodsRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyShopGoodsRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.buyType != null && Object.hasOwnProperty.call(m, "buyType"))
                w.uint32(16).int32(m.buyType);
            if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                w.uint32(24).int32(m.index);
            if (m.goods != null && m.goods.length) {
                for (var i = 0; i < m.goods.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.goods[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BuyShopGoodsRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyShopGoodsRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyShopGoodsRsp} Msg_BuyShopGoodsRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyShopGoodsRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyShopGoodsRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.buyType = r.int32();
                    break;
                case 3:
                    m.index = r.int32();
                    break;
                case 4:
                    if (!(m.goods && m.goods.length))
                        m.goods = [];
                    m.goods.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyShopGoodsRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} NotEnoughMoney=1 NotEnoughMoney value
         * @property {number} SellOut=2 SellOut value
         * @property {number} OperatorFailed=3 OperatorFailed value
         */
        Msg_BuyShopGoodsRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "NotEnoughMoney"] = 1;
            values[valuesById[2] = "SellOut"] = 2;
            values[valuesById[3] = "OperatorFailed"] = 3;
            return values;
        })();

        return Msg_BuyShopGoodsRsp;
    })();

    proto.Msg_FreeRefreshSpecialGoodsReq = (function() {

        /**
         * Properties of a Msg_FreeRefreshSpecialGoodsReq.
         * @memberof proto
         * @interface IMsg_FreeRefreshSpecialGoodsReq
         */

        /**
         * Constructs a new Msg_FreeRefreshSpecialGoodsReq.
         * @memberof proto
         * @classdesc Represents a Msg_FreeRefreshSpecialGoodsReq.
         * @implements IMsg_FreeRefreshSpecialGoodsReq
         * @constructor
         * @param {proto.IMsg_FreeRefreshSpecialGoodsReq=} [p] Properties to set
         */
        function Msg_FreeRefreshSpecialGoodsReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_FreeRefreshSpecialGoodsReq message. Does not implicitly {@link proto.Msg_FreeRefreshSpecialGoodsReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FreeRefreshSpecialGoodsReq
         * @static
         * @param {proto.IMsg_FreeRefreshSpecialGoodsReq} m Msg_FreeRefreshSpecialGoodsReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FreeRefreshSpecialGoodsReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_FreeRefreshSpecialGoodsReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FreeRefreshSpecialGoodsReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FreeRefreshSpecialGoodsReq} Msg_FreeRefreshSpecialGoodsReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FreeRefreshSpecialGoodsReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FreeRefreshSpecialGoodsReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FreeRefreshSpecialGoodsReq;
    })();

    proto.Msg_FreeRefreshSpecialGoodsRsp = (function() {

        /**
         * Properties of a Msg_FreeRefreshSpecialGoodsRsp.
         * @memberof proto
         * @interface IMsg_FreeRefreshSpecialGoodsRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FreeRefreshSpecialGoodsRsp result
         * @property {number|null} [leftTimes] Msg_FreeRefreshSpecialGoodsRsp leftTimes
         * @property {number|null} [nextRefreshTime] Msg_FreeRefreshSpecialGoodsRsp nextRefreshTime
         * @property {Array.<proto.IEveryDaySpecialShop>|null} [specialList] Msg_FreeRefreshSpecialGoodsRsp specialList
         * @property {number|null} [specialSixRefreshTimes] Msg_FreeRefreshSpecialGoodsRsp specialSixRefreshTimes
         */

        /**
         * Constructs a new Msg_FreeRefreshSpecialGoodsRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FreeRefreshSpecialGoodsRsp.
         * @implements IMsg_FreeRefreshSpecialGoodsRsp
         * @constructor
         * @param {proto.IMsg_FreeRefreshSpecialGoodsRsp=} [p] Properties to set
         */
        function Msg_FreeRefreshSpecialGoodsRsp(p) {
            this.specialList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FreeRefreshSpecialGoodsRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @instance
         */
        Msg_FreeRefreshSpecialGoodsRsp.prototype.result = 0;

        /**
         * Msg_FreeRefreshSpecialGoodsRsp leftTimes.
         * @member {number} leftTimes
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @instance
         */
        Msg_FreeRefreshSpecialGoodsRsp.prototype.leftTimes = 0;

        /**
         * Msg_FreeRefreshSpecialGoodsRsp nextRefreshTime.
         * @member {number} nextRefreshTime
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @instance
         */
        Msg_FreeRefreshSpecialGoodsRsp.prototype.nextRefreshTime = 0;

        /**
         * Msg_FreeRefreshSpecialGoodsRsp specialList.
         * @member {Array.<proto.IEveryDaySpecialShop>} specialList
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @instance
         */
        Msg_FreeRefreshSpecialGoodsRsp.prototype.specialList = $util.emptyArray;

        /**
         * Msg_FreeRefreshSpecialGoodsRsp specialSixRefreshTimes.
         * @member {number} specialSixRefreshTimes
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @instance
         */
        Msg_FreeRefreshSpecialGoodsRsp.prototype.specialSixRefreshTimes = 0;

        /**
         * Encodes the specified Msg_FreeRefreshSpecialGoodsRsp message. Does not implicitly {@link proto.Msg_FreeRefreshSpecialGoodsRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @static
         * @param {proto.IMsg_FreeRefreshSpecialGoodsRsp} m Msg_FreeRefreshSpecialGoodsRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FreeRefreshSpecialGoodsRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.leftTimes != null && Object.hasOwnProperty.call(m, "leftTimes"))
                w.uint32(16).int32(m.leftTimes);
            if (m.nextRefreshTime != null && Object.hasOwnProperty.call(m, "nextRefreshTime"))
                w.uint32(24).int32(m.nextRefreshTime);
            if (m.specialList != null && m.specialList.length) {
                for (var i = 0; i < m.specialList.length; ++i)
                    $root.proto.EveryDaySpecialShop.encode(m.specialList[i], w.uint32(34).fork()).ldelim();
            }
            if (m.specialSixRefreshTimes != null && Object.hasOwnProperty.call(m, "specialSixRefreshTimes"))
                w.uint32(40).int32(m.specialSixRefreshTimes);
            return w;
        };

        /**
         * Decodes a Msg_FreeRefreshSpecialGoodsRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FreeRefreshSpecialGoodsRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FreeRefreshSpecialGoodsRsp} Msg_FreeRefreshSpecialGoodsRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FreeRefreshSpecialGoodsRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FreeRefreshSpecialGoodsRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.leftTimes = r.int32();
                    break;
                case 3:
                    m.nextRefreshTime = r.int32();
                    break;
                case 4:
                    if (!(m.specialList && m.specialList.length))
                        m.specialList = [];
                    m.specialList.push($root.proto.EveryDaySpecialShop.decode(r, r.uint32()));
                    break;
                case 5:
                    m.specialSixRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FreeRefreshSpecialGoodsRsp;
    })();

    proto.Msg_ReconnetFightReq = (function() {

        /**
         * Properties of a Msg_ReconnetFightReq.
         * @memberof proto
         * @interface IMsg_ReconnetFightReq
         */

        /**
         * Constructs a new Msg_ReconnetFightReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReconnetFightReq.
         * @implements IMsg_ReconnetFightReq
         * @constructor
         * @param {proto.IMsg_ReconnetFightReq=} [p] Properties to set
         */
        function Msg_ReconnetFightReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ReconnetFightReq message. Does not implicitly {@link proto.Msg_ReconnetFightReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReconnetFightReq
         * @static
         * @param {proto.IMsg_ReconnetFightReq} m Msg_ReconnetFightReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReconnetFightReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ReconnetFightReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReconnetFightReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReconnetFightReq} Msg_ReconnetFightReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReconnetFightReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReconnetFightReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReconnetFightReq;
    })();

    proto.Msg_ReconnetFightRsp = (function() {

        /**
         * Properties of a Msg_ReconnetFightRsp.
         * @memberof proto
         * @interface IMsg_ReconnetFightRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ReconnetFightRsp result
         * @property {proto.IFightData|null} [myData] Msg_ReconnetFightRsp myData
         * @property {proto.IFightData|null} [otherData] Msg_ReconnetFightRsp otherData
         * @property {number|null} [fightInstanceId] Msg_ReconnetFightRsp fightInstanceId
         * @property {proto.FightType|null} [type] Msg_ReconnetFightRsp type
         * @property {Array.<proto.IBountyFightData>|null} [allData] Msg_ReconnetFightRsp allData
         */

        /**
         * Constructs a new Msg_ReconnetFightRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReconnetFightRsp.
         * @implements IMsg_ReconnetFightRsp
         * @constructor
         * @param {proto.IMsg_ReconnetFightRsp=} [p] Properties to set
         */
        function Msg_ReconnetFightRsp(p) {
            this.allData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReconnetFightRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ReconnetFightRsp
         * @instance
         */
        Msg_ReconnetFightRsp.prototype.result = 0;

        /**
         * Msg_ReconnetFightRsp myData.
         * @member {proto.IFightData|null|undefined} myData
         * @memberof proto.Msg_ReconnetFightRsp
         * @instance
         */
        Msg_ReconnetFightRsp.prototype.myData = null;

        /**
         * Msg_ReconnetFightRsp otherData.
         * @member {proto.IFightData|null|undefined} otherData
         * @memberof proto.Msg_ReconnetFightRsp
         * @instance
         */
        Msg_ReconnetFightRsp.prototype.otherData = null;

        /**
         * Msg_ReconnetFightRsp fightInstanceId.
         * @member {number} fightInstanceId
         * @memberof proto.Msg_ReconnetFightRsp
         * @instance
         */
        Msg_ReconnetFightRsp.prototype.fightInstanceId = 0;

        /**
         * Msg_ReconnetFightRsp type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_ReconnetFightRsp
         * @instance
         */
        Msg_ReconnetFightRsp.prototype.type = 0;

        /**
         * Msg_ReconnetFightRsp allData.
         * @member {Array.<proto.IBountyFightData>} allData
         * @memberof proto.Msg_ReconnetFightRsp
         * @instance
         */
        Msg_ReconnetFightRsp.prototype.allData = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReconnetFightRsp message. Does not implicitly {@link proto.Msg_ReconnetFightRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReconnetFightRsp
         * @static
         * @param {proto.IMsg_ReconnetFightRsp} m Msg_ReconnetFightRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReconnetFightRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.myData != null && Object.hasOwnProperty.call(m, "myData"))
                $root.proto.FightData.encode(m.myData, w.uint32(18).fork()).ldelim();
            if (m.otherData != null && Object.hasOwnProperty.call(m, "otherData"))
                $root.proto.FightData.encode(m.otherData, w.uint32(26).fork()).ldelim();
            if (m.fightInstanceId != null && Object.hasOwnProperty.call(m, "fightInstanceId"))
                w.uint32(32).int32(m.fightInstanceId);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(40).int32(m.type);
            if (m.allData != null && m.allData.length) {
                for (var i = 0; i < m.allData.length; ++i)
                    $root.proto.BountyFightData.encode(m.allData[i], w.uint32(50).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReconnetFightRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReconnetFightRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReconnetFightRsp} Msg_ReconnetFightRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReconnetFightRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReconnetFightRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.myData = $root.proto.FightData.decode(r, r.uint32());
                    break;
                case 3:
                    m.otherData = $root.proto.FightData.decode(r, r.uint32());
                    break;
                case 4:
                    m.fightInstanceId = r.int32();
                    break;
                case 5:
                    m.type = r.int32();
                    break;
                case 6:
                    if (!(m.allData && m.allData.length))
                        m.allData = [];
                    m.allData.push($root.proto.BountyFightData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReconnetFightRsp;
    })();

    /**
     * FightType enum.
     * @name proto.FightType
     * @enum {number}
     * @property {number} PvP=0 PvP value
     * @property {number} RookiePvP=1 RookiePvP value
     * @property {number} PvE=2 PvE value
     * @property {number} Challenge=3 Challenge value
     * @property {number} AlliancePvP=4 AlliancePvP value
     * @property {number} AlliancePvE=5 AlliancePvE value
     * @property {number} FriendPvp=6 FriendPvp value
     * @property {number} FriendPve=7 FriendPve value
     * @property {number} Training=8 Training value
     * @property {number} WorldChannelPvP=9 WorldChannelPvP value
     * @property {number} WorldChannelPvE=10 WorldChannelPvE value
     * @property {number} ChessFight=11 ChessFight value
     * @property {number} Bounty=12 Bounty value
     */
    proto.FightType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PvP"] = 0;
        values[valuesById[1] = "RookiePvP"] = 1;
        values[valuesById[2] = "PvE"] = 2;
        values[valuesById[3] = "Challenge"] = 3;
        values[valuesById[4] = "AlliancePvP"] = 4;
        values[valuesById[5] = "AlliancePvE"] = 5;
        values[valuesById[6] = "FriendPvp"] = 6;
        values[valuesById[7] = "FriendPve"] = 7;
        values[valuesById[8] = "Training"] = 8;
        values[valuesById[9] = "WorldChannelPvP"] = 9;
        values[valuesById[10] = "WorldChannelPvE"] = 10;
        values[valuesById[11] = "ChessFight"] = 11;
        values[valuesById[12] = "Bounty"] = 12;
        return values;
    })();

    proto.Msg_StartMatchFightReq = (function() {

        /**
         * Properties of a Msg_StartMatchFightReq.
         * @memberof proto
         * @interface IMsg_StartMatchFightReq
         * @property {proto.FightType|null} [type] Msg_StartMatchFightReq type
         */

        /**
         * Constructs a new Msg_StartMatchFightReq.
         * @memberof proto
         * @classdesc Represents a Msg_StartMatchFightReq.
         * @implements IMsg_StartMatchFightReq
         * @constructor
         * @param {proto.IMsg_StartMatchFightReq=} [p] Properties to set
         */
        function Msg_StartMatchFightReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_StartMatchFightReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_StartMatchFightReq
         * @instance
         */
        Msg_StartMatchFightReq.prototype.type = 0;

        /**
         * Encodes the specified Msg_StartMatchFightReq message. Does not implicitly {@link proto.Msg_StartMatchFightReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_StartMatchFightReq
         * @static
         * @param {proto.IMsg_StartMatchFightReq} m Msg_StartMatchFightReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_StartMatchFightReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            return w;
        };

        /**
         * Decodes a Msg_StartMatchFightReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_StartMatchFightReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_StartMatchFightReq} Msg_StartMatchFightReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_StartMatchFightReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_StartMatchFightReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_StartMatchFightReq;
    })();

    proto.Msg_StartMatchFightRsp = (function() {

        /**
         * Properties of a Msg_StartMatchFightRsp.
         * @memberof proto
         * @interface IMsg_StartMatchFightRsp
         * @property {proto.Msg_StartMatchFightRsp.ErrorCode|null} [result] Msg_StartMatchFightRsp result
         * @property {proto.IFightData|null} [myData] Msg_StartMatchFightRsp myData
         * @property {proto.IFightData|null} [otherData] Msg_StartMatchFightRsp otherData
         * @property {Array.<proto.IBountyFightData>|null} [allData] Msg_StartMatchFightRsp allData
         * @property {number|null} [fightInstanceId] Msg_StartMatchFightRsp fightInstanceId
         * @property {proto.FightType|null} [type] Msg_StartMatchFightRsp type
         */

        /**
         * Constructs a new Msg_StartMatchFightRsp.
         * @memberof proto
         * @classdesc Represents a Msg_StartMatchFightRsp.
         * @implements IMsg_StartMatchFightRsp
         * @constructor
         * @param {proto.IMsg_StartMatchFightRsp=} [p] Properties to set
         */
        function Msg_StartMatchFightRsp(p) {
            this.allData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_StartMatchFightRsp result.
         * @member {proto.Msg_StartMatchFightRsp.ErrorCode} result
         * @memberof proto.Msg_StartMatchFightRsp
         * @instance
         */
        Msg_StartMatchFightRsp.prototype.result = 0;

        /**
         * Msg_StartMatchFightRsp myData.
         * @member {proto.IFightData|null|undefined} myData
         * @memberof proto.Msg_StartMatchFightRsp
         * @instance
         */
        Msg_StartMatchFightRsp.prototype.myData = null;

        /**
         * Msg_StartMatchFightRsp otherData.
         * @member {proto.IFightData|null|undefined} otherData
         * @memberof proto.Msg_StartMatchFightRsp
         * @instance
         */
        Msg_StartMatchFightRsp.prototype.otherData = null;

        /**
         * Msg_StartMatchFightRsp allData.
         * @member {Array.<proto.IBountyFightData>} allData
         * @memberof proto.Msg_StartMatchFightRsp
         * @instance
         */
        Msg_StartMatchFightRsp.prototype.allData = $util.emptyArray;

        /**
         * Msg_StartMatchFightRsp fightInstanceId.
         * @member {number} fightInstanceId
         * @memberof proto.Msg_StartMatchFightRsp
         * @instance
         */
        Msg_StartMatchFightRsp.prototype.fightInstanceId = 0;

        /**
         * Msg_StartMatchFightRsp type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_StartMatchFightRsp
         * @instance
         */
        Msg_StartMatchFightRsp.prototype.type = 0;

        /**
         * Encodes the specified Msg_StartMatchFightRsp message. Does not implicitly {@link proto.Msg_StartMatchFightRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_StartMatchFightRsp
         * @static
         * @param {proto.IMsg_StartMatchFightRsp} m Msg_StartMatchFightRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_StartMatchFightRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.myData != null && Object.hasOwnProperty.call(m, "myData"))
                $root.proto.FightData.encode(m.myData, w.uint32(18).fork()).ldelim();
            if (m.otherData != null && Object.hasOwnProperty.call(m, "otherData"))
                $root.proto.FightData.encode(m.otherData, w.uint32(26).fork()).ldelim();
            if (m.allData != null && m.allData.length) {
                for (var i = 0; i < m.allData.length; ++i)
                    $root.proto.BountyFightData.encode(m.allData[i], w.uint32(34).fork()).ldelim();
            }
            if (m.fightInstanceId != null && Object.hasOwnProperty.call(m, "fightInstanceId"))
                w.uint32(40).int32(m.fightInstanceId);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(48).int32(m.type);
            return w;
        };

        /**
         * Decodes a Msg_StartMatchFightRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_StartMatchFightRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_StartMatchFightRsp} Msg_StartMatchFightRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_StartMatchFightRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_StartMatchFightRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.myData = $root.proto.FightData.decode(r, r.uint32());
                    break;
                case 3:
                    m.otherData = $root.proto.FightData.decode(r, r.uint32());
                    break;
                case 4:
                    if (!(m.allData && m.allData.length))
                        m.allData = [];
                    m.allData.push($root.proto.BountyFightData.decode(r, r.uint32()));
                    break;
                case 5:
                    m.fightInstanceId = r.int32();
                    break;
                case 6:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_StartMatchFightRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Failed=1 Failed value
         * @property {number} ReportedTooMuch=2 ReportedTooMuch value
         * @property {number} BannedCard=3 BannedCard value
         */
        Msg_StartMatchFightRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Failed"] = 1;
            values[valuesById[2] = "ReportedTooMuch"] = 2;
            values[valuesById[3] = "BannedCard"] = 3;
            return values;
        })();

        return Msg_StartMatchFightRsp;
    })();

    proto.Msg_CancelMatchFightReq = (function() {

        /**
         * Properties of a Msg_CancelMatchFightReq.
         * @memberof proto
         * @interface IMsg_CancelMatchFightReq
         */

        /**
         * Constructs a new Msg_CancelMatchFightReq.
         * @memberof proto
         * @classdesc Represents a Msg_CancelMatchFightReq.
         * @implements IMsg_CancelMatchFightReq
         * @constructor
         * @param {proto.IMsg_CancelMatchFightReq=} [p] Properties to set
         */
        function Msg_CancelMatchFightReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_CancelMatchFightReq message. Does not implicitly {@link proto.Msg_CancelMatchFightReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CancelMatchFightReq
         * @static
         * @param {proto.IMsg_CancelMatchFightReq} m Msg_CancelMatchFightReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CancelMatchFightReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_CancelMatchFightReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CancelMatchFightReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CancelMatchFightReq} Msg_CancelMatchFightReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CancelMatchFightReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CancelMatchFightReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CancelMatchFightReq;
    })();

    proto.Msg_CancelMatchFightRsp = (function() {

        /**
         * Properties of a Msg_CancelMatchFightRsp.
         * @memberof proto
         * @interface IMsg_CancelMatchFightRsp
         * @property {proto.Msg_CancelMatchFightRsp.ErrorCode|null} [result] Msg_CancelMatchFightRsp result
         */

        /**
         * Constructs a new Msg_CancelMatchFightRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CancelMatchFightRsp.
         * @implements IMsg_CancelMatchFightRsp
         * @constructor
         * @param {proto.IMsg_CancelMatchFightRsp=} [p] Properties to set
         */
        function Msg_CancelMatchFightRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CancelMatchFightRsp result.
         * @member {proto.Msg_CancelMatchFightRsp.ErrorCode} result
         * @memberof proto.Msg_CancelMatchFightRsp
         * @instance
         */
        Msg_CancelMatchFightRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_CancelMatchFightRsp message. Does not implicitly {@link proto.Msg_CancelMatchFightRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CancelMatchFightRsp
         * @static
         * @param {proto.IMsg_CancelMatchFightRsp} m Msg_CancelMatchFightRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CancelMatchFightRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_CancelMatchFightRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CancelMatchFightRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CancelMatchFightRsp} Msg_CancelMatchFightRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CancelMatchFightRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CancelMatchFightRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_CancelMatchFightRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} CancelFailed=1 CancelFailed value
         * @property {number} InvalidOperator=2 InvalidOperator value
         */
        Msg_CancelMatchFightRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "CancelFailed"] = 1;
            values[valuesById[2] = "InvalidOperator"] = 2;
            return values;
        })();

        return Msg_CancelMatchFightRsp;
    })();

    proto.Msg_FightReadyReq = (function() {

        /**
         * Properties of a Msg_FightReadyReq.
         * @memberof proto
         * @interface IMsg_FightReadyReq
         * @property {number|null} [fightInstanceId] Msg_FightReadyReq fightInstanceId
         * @property {string|null} [roleId] Msg_FightReadyReq roleId
         */

        /**
         * Constructs a new Msg_FightReadyReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightReadyReq.
         * @implements IMsg_FightReadyReq
         * @constructor
         * @param {proto.IMsg_FightReadyReq=} [p] Properties to set
         */
        function Msg_FightReadyReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightReadyReq fightInstanceId.
         * @member {number} fightInstanceId
         * @memberof proto.Msg_FightReadyReq
         * @instance
         */
        Msg_FightReadyReq.prototype.fightInstanceId = 0;

        /**
         * Msg_FightReadyReq roleId.
         * @member {string} roleId
         * @memberof proto.Msg_FightReadyReq
         * @instance
         */
        Msg_FightReadyReq.prototype.roleId = "";

        /**
         * Encodes the specified Msg_FightReadyReq message. Does not implicitly {@link proto.Msg_FightReadyReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightReadyReq
         * @static
         * @param {proto.IMsg_FightReadyReq} m Msg_FightReadyReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightReadyReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightInstanceId != null && Object.hasOwnProperty.call(m, "fightInstanceId"))
                w.uint32(8).int32(m.fightInstanceId);
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(18).string(m.roleId);
            return w;
        };

        /**
         * Decodes a Msg_FightReadyReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightReadyReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightReadyReq} Msg_FightReadyReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightReadyReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightReadyReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightInstanceId = r.int32();
                    break;
                case 2:
                    m.roleId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightReadyReq;
    })();

    proto.Msg_FightReadyRsp = (function() {

        /**
         * Properties of a Msg_FightReadyRsp.
         * @memberof proto
         * @interface IMsg_FightReadyRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FightReadyRsp result
         * @property {number|null} [playerTag] Msg_FightReadyRsp playerTag
         * @property {number|null} [timestamp] Msg_FightReadyRsp timestamp
         */

        /**
         * Constructs a new Msg_FightReadyRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightReadyRsp.
         * @implements IMsg_FightReadyRsp
         * @constructor
         * @param {proto.IMsg_FightReadyRsp=} [p] Properties to set
         */
        function Msg_FightReadyRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightReadyRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FightReadyRsp
         * @instance
         */
        Msg_FightReadyRsp.prototype.result = 0;

        /**
         * Msg_FightReadyRsp playerTag.
         * @member {number} playerTag
         * @memberof proto.Msg_FightReadyRsp
         * @instance
         */
        Msg_FightReadyRsp.prototype.playerTag = 0;

        /**
         * Msg_FightReadyRsp timestamp.
         * @member {number} timestamp
         * @memberof proto.Msg_FightReadyRsp
         * @instance
         */
        Msg_FightReadyRsp.prototype.timestamp = 0;

        /**
         * Encodes the specified Msg_FightReadyRsp message. Does not implicitly {@link proto.Msg_FightReadyRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightReadyRsp
         * @static
         * @param {proto.IMsg_FightReadyRsp} m Msg_FightReadyRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightReadyRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.playerTag != null && Object.hasOwnProperty.call(m, "playerTag"))
                w.uint32(16).int32(m.playerTag);
            if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                w.uint32(24).int32(m.timestamp);
            return w;
        };

        /**
         * Decodes a Msg_FightReadyRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightReadyRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightReadyRsp} Msg_FightReadyRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightReadyRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightReadyRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.playerTag = r.int32();
                    break;
                case 3:
                    m.timestamp = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightReadyRsp;
    })();

    proto.Msg_ConstructionPhase = (function() {

        /**
         * Properties of a Msg_ConstructionPhase.
         * @memberof proto
         * @interface IMsg_ConstructionPhase
         * @property {number|null} [round] Msg_ConstructionPhase round
         * @property {Array.<number>|null} [nextCards] Msg_ConstructionPhase nextCards
         * @property {number|null} [leftCount] Msg_ConstructionPhase leftCount
         * @property {Array.<proto.IFightTowerData>|null} [towers] Msg_ConstructionPhase towers
         * @property {Array.<proto.ICombatData>|null} [combatData] Msg_ConstructionPhase combatData
         * @property {proto.IBountyFightData|null} [opponentData] Msg_ConstructionPhase opponentData
         * @property {number|null} [playerTag] Msg_ConstructionPhase playerTag
         */

        /**
         * Constructs a new Msg_ConstructionPhase.
         * @memberof proto
         * @classdesc Represents a Msg_ConstructionPhase.
         * @implements IMsg_ConstructionPhase
         * @constructor
         * @param {proto.IMsg_ConstructionPhase=} [p] Properties to set
         */
        function Msg_ConstructionPhase(p) {
            this.nextCards = [];
            this.towers = [];
            this.combatData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ConstructionPhase round.
         * @member {number} round
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.round = 0;

        /**
         * Msg_ConstructionPhase nextCards.
         * @member {Array.<number>} nextCards
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.nextCards = $util.emptyArray;

        /**
         * Msg_ConstructionPhase leftCount.
         * @member {number} leftCount
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.leftCount = 0;

        /**
         * Msg_ConstructionPhase towers.
         * @member {Array.<proto.IFightTowerData>} towers
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.towers = $util.emptyArray;

        /**
         * Msg_ConstructionPhase combatData.
         * @member {Array.<proto.ICombatData>} combatData
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.combatData = $util.emptyArray;

        /**
         * Msg_ConstructionPhase opponentData.
         * @member {proto.IBountyFightData|null|undefined} opponentData
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.opponentData = null;

        /**
         * Msg_ConstructionPhase playerTag.
         * @member {number} playerTag
         * @memberof proto.Msg_ConstructionPhase
         * @instance
         */
        Msg_ConstructionPhase.prototype.playerTag = 0;

        /**
         * Encodes the specified Msg_ConstructionPhase message. Does not implicitly {@link proto.Msg_ConstructionPhase.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ConstructionPhase
         * @static
         * @param {proto.IMsg_ConstructionPhase} m Msg_ConstructionPhase message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ConstructionPhase.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.round != null && Object.hasOwnProperty.call(m, "round"))
                w.uint32(8).int32(m.round);
            if (m.nextCards != null && m.nextCards.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.nextCards.length; ++i)
                    w.int32(m.nextCards[i]);
                w.ldelim();
            }
            if (m.leftCount != null && Object.hasOwnProperty.call(m, "leftCount"))
                w.uint32(24).int32(m.leftCount);
            if (m.towers != null && m.towers.length) {
                for (var i = 0; i < m.towers.length; ++i)
                    $root.proto.FightTowerData.encode(m.towers[i], w.uint32(34).fork()).ldelim();
            }
            if (m.combatData != null && m.combatData.length) {
                for (var i = 0; i < m.combatData.length; ++i)
                    $root.proto.CombatData.encode(m.combatData[i], w.uint32(42).fork()).ldelim();
            }
            if (m.opponentData != null && Object.hasOwnProperty.call(m, "opponentData"))
                $root.proto.BountyFightData.encode(m.opponentData, w.uint32(50).fork()).ldelim();
            if (m.playerTag != null && Object.hasOwnProperty.call(m, "playerTag"))
                w.uint32(56).int32(m.playerTag);
            return w;
        };

        /**
         * Decodes a Msg_ConstructionPhase message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ConstructionPhase
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ConstructionPhase} Msg_ConstructionPhase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ConstructionPhase.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ConstructionPhase();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.round = r.int32();
                    break;
                case 2:
                    if (!(m.nextCards && m.nextCards.length))
                        m.nextCards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.nextCards.push(r.int32());
                    } else
                        m.nextCards.push(r.int32());
                    break;
                case 3:
                    m.leftCount = r.int32();
                    break;
                case 4:
                    if (!(m.towers && m.towers.length))
                        m.towers = [];
                    m.towers.push($root.proto.FightTowerData.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.combatData && m.combatData.length))
                        m.combatData = [];
                    m.combatData.push($root.proto.CombatData.decode(r, r.uint32()));
                    break;
                case 6:
                    m.opponentData = $root.proto.BountyFightData.decode(r, r.uint32());
                    break;
                case 7:
                    m.playerTag = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ConstructionPhase;
    })();

    /**
     * CombatEvent enum.
     * @name proto.CombatEvent
     * @enum {number}
     * @property {number} Attack=0 Attack value
     * @property {number} Cure=1 Cure value
     * @property {number} AddBuffer=2 AddBuffer value
     * @property {number} RemoveBuffer=3 RemoveBuffer value
     * @property {number} Shield=4 Shield value
     * @property {number} Revive=5 Revive value
     * @property {number} Dead=6 Dead value
     * @property {number} Move=7 Move value
     * @property {number} Hp=8 Hp value
     * @property {number} Transform=9 Transform value
     */
    proto.CombatEvent = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Attack"] = 0;
        values[valuesById[1] = "Cure"] = 1;
        values[valuesById[2] = "AddBuffer"] = 2;
        values[valuesById[3] = "RemoveBuffer"] = 3;
        values[valuesById[4] = "Shield"] = 4;
        values[valuesById[5] = "Revive"] = 5;
        values[valuesById[6] = "Dead"] = 6;
        values[valuesById[7] = "Move"] = 7;
        values[valuesById[8] = "Hp"] = 8;
        values[valuesById[9] = "Transform"] = 9;
        return values;
    })();

    proto.CombatData = (function() {

        /**
         * Properties of a CombatData.
         * @memberof proto
         * @interface ICombatData
         * @property {number|null} [timestamp] CombatData timestamp
         * @property {proto.CombatEvent|null} [ev] CombatData ev
         * @property {proto.ICombatEventAttack|null} [attack] CombatData attack
         * @property {proto.ICombatEventCure|null} [cure] CombatData cure
         * @property {proto.ICombatEventAddBuffer|null} [addBuffer] CombatData addBuffer
         * @property {proto.ICombatEventRemoveBuffer|null} [removeBuffer] CombatData removeBuffer
         * @property {proto.ICombatEventShield|null} [shield] CombatData shield
         * @property {proto.ICombatEventRevive|null} [revive] CombatData revive
         * @property {proto.ICombatEventDead|null} [dead] CombatData dead
         * @property {proto.ICombatEventMove|null} [move] CombatData move
         * @property {proto.ICombatEventHp|null} [hp] CombatData hp
         * @property {proto.ICombatEventTransform|null} [transform] CombatData transform
         */

        /**
         * Constructs a new CombatData.
         * @memberof proto
         * @classdesc Represents a CombatData.
         * @implements ICombatData
         * @constructor
         * @param {proto.ICombatData=} [p] Properties to set
         */
        function CombatData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatData timestamp.
         * @member {number} timestamp
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.timestamp = 0;

        /**
         * CombatData ev.
         * @member {proto.CombatEvent} ev
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.ev = 0;

        /**
         * CombatData attack.
         * @member {proto.ICombatEventAttack|null|undefined} attack
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.attack = null;

        /**
         * CombatData cure.
         * @member {proto.ICombatEventCure|null|undefined} cure
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.cure = null;

        /**
         * CombatData addBuffer.
         * @member {proto.ICombatEventAddBuffer|null|undefined} addBuffer
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.addBuffer = null;

        /**
         * CombatData removeBuffer.
         * @member {proto.ICombatEventRemoveBuffer|null|undefined} removeBuffer
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.removeBuffer = null;

        /**
         * CombatData shield.
         * @member {proto.ICombatEventShield|null|undefined} shield
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.shield = null;

        /**
         * CombatData revive.
         * @member {proto.ICombatEventRevive|null|undefined} revive
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.revive = null;

        /**
         * CombatData dead.
         * @member {proto.ICombatEventDead|null|undefined} dead
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.dead = null;

        /**
         * CombatData move.
         * @member {proto.ICombatEventMove|null|undefined} move
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.move = null;

        /**
         * CombatData hp.
         * @member {proto.ICombatEventHp|null|undefined} hp
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.hp = null;

        /**
         * CombatData transform.
         * @member {proto.ICombatEventTransform|null|undefined} transform
         * @memberof proto.CombatData
         * @instance
         */
        CombatData.prototype.transform = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * CombatData EventData.
         * @member {"attack"|"cure"|"addBuffer"|"removeBuffer"|"shield"|"revive"|"dead"|"move"|"hp"|"transform"|undefined} EventData
         * @memberof proto.CombatData
         * @instance
         */
        Object.defineProperty(CombatData.prototype, "EventData", {
            get: $util.oneOfGetter($oneOfFields = ["attack", "cure", "addBuffer", "removeBuffer", "shield", "revive", "dead", "move", "hp", "transform"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified CombatData message. Does not implicitly {@link proto.CombatData.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatData
         * @static
         * @param {proto.ICombatData} m CombatData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                w.uint32(13).float(m.timestamp);
            if (m.ev != null && Object.hasOwnProperty.call(m, "ev"))
                w.uint32(16).int32(m.ev);
            if (m.attack != null && Object.hasOwnProperty.call(m, "attack"))
                $root.proto.CombatEventAttack.encode(m.attack, w.uint32(26).fork()).ldelim();
            if (m.cure != null && Object.hasOwnProperty.call(m, "cure"))
                $root.proto.CombatEventCure.encode(m.cure, w.uint32(34).fork()).ldelim();
            if (m.addBuffer != null && Object.hasOwnProperty.call(m, "addBuffer"))
                $root.proto.CombatEventAddBuffer.encode(m.addBuffer, w.uint32(42).fork()).ldelim();
            if (m.removeBuffer != null && Object.hasOwnProperty.call(m, "removeBuffer"))
                $root.proto.CombatEventRemoveBuffer.encode(m.removeBuffer, w.uint32(50).fork()).ldelim();
            if (m.shield != null && Object.hasOwnProperty.call(m, "shield"))
                $root.proto.CombatEventShield.encode(m.shield, w.uint32(58).fork()).ldelim();
            if (m.revive != null && Object.hasOwnProperty.call(m, "revive"))
                $root.proto.CombatEventRevive.encode(m.revive, w.uint32(66).fork()).ldelim();
            if (m.dead != null && Object.hasOwnProperty.call(m, "dead"))
                $root.proto.CombatEventDead.encode(m.dead, w.uint32(74).fork()).ldelim();
            if (m.move != null && Object.hasOwnProperty.call(m, "move"))
                $root.proto.CombatEventMove.encode(m.move, w.uint32(82).fork()).ldelim();
            if (m.hp != null && Object.hasOwnProperty.call(m, "hp"))
                $root.proto.CombatEventHp.encode(m.hp, w.uint32(90).fork()).ldelim();
            if (m.transform != null && Object.hasOwnProperty.call(m, "transform"))
                $root.proto.CombatEventTransform.encode(m.transform, w.uint32(98).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a CombatData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatData} CombatData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.timestamp = r.float();
                    break;
                case 2:
                    m.ev = r.int32();
                    break;
                case 3:
                    m.attack = $root.proto.CombatEventAttack.decode(r, r.uint32());
                    break;
                case 4:
                    m.cure = $root.proto.CombatEventCure.decode(r, r.uint32());
                    break;
                case 5:
                    m.addBuffer = $root.proto.CombatEventAddBuffer.decode(r, r.uint32());
                    break;
                case 6:
                    m.removeBuffer = $root.proto.CombatEventRemoveBuffer.decode(r, r.uint32());
                    break;
                case 7:
                    m.shield = $root.proto.CombatEventShield.decode(r, r.uint32());
                    break;
                case 8:
                    m.revive = $root.proto.CombatEventRevive.decode(r, r.uint32());
                    break;
                case 9:
                    m.dead = $root.proto.CombatEventDead.decode(r, r.uint32());
                    break;
                case 10:
                    m.move = $root.proto.CombatEventMove.decode(r, r.uint32());
                    break;
                case 11:
                    m.hp = $root.proto.CombatEventHp.decode(r, r.uint32());
                    break;
                case 12:
                    m.transform = $root.proto.CombatEventTransform.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatData;
    })();

    proto.Msg_CombatPhase = (function() {

        /**
         * Properties of a Msg_CombatPhase.
         * @memberof proto
         * @interface IMsg_CombatPhase
         * @property {Array.<proto.ICombatData>|null} [data] Msg_CombatPhase data
         * @property {Array.<proto.IFightTowerData>|null} [towers] Msg_CombatPhase towers
         * @property {number|null} [loseTag] Msg_CombatPhase loseTag
         */

        /**
         * Constructs a new Msg_CombatPhase.
         * @memberof proto
         * @classdesc Represents a Msg_CombatPhase.
         * @implements IMsg_CombatPhase
         * @constructor
         * @param {proto.IMsg_CombatPhase=} [p] Properties to set
         */
        function Msg_CombatPhase(p) {
            this.data = [];
            this.towers = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CombatPhase data.
         * @member {Array.<proto.ICombatData>} data
         * @memberof proto.Msg_CombatPhase
         * @instance
         */
        Msg_CombatPhase.prototype.data = $util.emptyArray;

        /**
         * Msg_CombatPhase towers.
         * @member {Array.<proto.IFightTowerData>} towers
         * @memberof proto.Msg_CombatPhase
         * @instance
         */
        Msg_CombatPhase.prototype.towers = $util.emptyArray;

        /**
         * Msg_CombatPhase loseTag.
         * @member {number} loseTag
         * @memberof proto.Msg_CombatPhase
         * @instance
         */
        Msg_CombatPhase.prototype.loseTag = 0;

        /**
         * Encodes the specified Msg_CombatPhase message. Does not implicitly {@link proto.Msg_CombatPhase.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CombatPhase
         * @static
         * @param {proto.IMsg_CombatPhase} m Msg_CombatPhase message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CombatPhase.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && m.data.length) {
                for (var i = 0; i < m.data.length; ++i)
                    $root.proto.CombatData.encode(m.data[i], w.uint32(10).fork()).ldelim();
            }
            if (m.towers != null && m.towers.length) {
                for (var i = 0; i < m.towers.length; ++i)
                    $root.proto.FightTowerData.encode(m.towers[i], w.uint32(18).fork()).ldelim();
            }
            if (m.loseTag != null && Object.hasOwnProperty.call(m, "loseTag"))
                w.uint32(24).int32(m.loseTag);
            return w;
        };

        /**
         * Decodes a Msg_CombatPhase message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CombatPhase
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CombatPhase} Msg_CombatPhase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CombatPhase.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CombatPhase();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.data && m.data.length))
                        m.data = [];
                    m.data.push($root.proto.CombatData.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.towers && m.towers.length))
                        m.towers = [];
                    m.towers.push($root.proto.FightTowerData.decode(r, r.uint32()));
                    break;
                case 3:
                    m.loseTag = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CombatPhase;
    })();

    proto.DamageDataBuffer = (function() {

        /**
         * Properties of a DamageDataBuffer.
         * @memberof proto
         * @interface IDamageDataBuffer
         * @property {number|null} [bufferID] DamageDataBuffer bufferID
         * @property {number|null} [index] DamageDataBuffer index
         * @property {number|null} [layer] DamageDataBuffer layer
         */

        /**
         * Constructs a new DamageDataBuffer.
         * @memberof proto
         * @classdesc Represents a DamageDataBuffer.
         * @implements IDamageDataBuffer
         * @constructor
         * @param {proto.IDamageDataBuffer=} [p] Properties to set
         */
        function DamageDataBuffer(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * DamageDataBuffer bufferID.
         * @member {number} bufferID
         * @memberof proto.DamageDataBuffer
         * @instance
         */
        DamageDataBuffer.prototype.bufferID = 0;

        /**
         * DamageDataBuffer index.
         * @member {number} index
         * @memberof proto.DamageDataBuffer
         * @instance
         */
        DamageDataBuffer.prototype.index = 0;

        /**
         * DamageDataBuffer layer.
         * @member {number} layer
         * @memberof proto.DamageDataBuffer
         * @instance
         */
        DamageDataBuffer.prototype.layer = 0;

        /**
         * Encodes the specified DamageDataBuffer message. Does not implicitly {@link proto.DamageDataBuffer.verify|verify} messages.
         * @function encode
         * @memberof proto.DamageDataBuffer
         * @static
         * @param {proto.IDamageDataBuffer} m DamageDataBuffer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DamageDataBuffer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bufferID != null && Object.hasOwnProperty.call(m, "bufferID"))
                w.uint32(56).int32(m.bufferID);
            if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                w.uint32(64).int32(m.index);
            if (m.layer != null && Object.hasOwnProperty.call(m, "layer"))
                w.uint32(72).int32(m.layer);
            return w;
        };

        /**
         * Decodes a DamageDataBuffer message from the specified reader or buffer.
         * @function decode
         * @memberof proto.DamageDataBuffer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.DamageDataBuffer} DamageDataBuffer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DamageDataBuffer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DamageDataBuffer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 7:
                    m.bufferID = r.int32();
                    break;
                case 8:
                    m.index = r.int32();
                    break;
                case 9:
                    m.layer = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return DamageDataBuffer;
    })();

    proto.DamageData = (function() {

        /**
         * Properties of a DamageData.
         * @memberof proto
         * @interface IDamageData
         * @property {number|null} [enmeyId] DamageData enmeyId
         * @property {number|Long|null} [damage] DamageData damage
         * @property {number|Long|null} [cure] DamageData cure
         * @property {number|Long|null} [shieldReduce] DamageData shieldReduce
         * @property {boolean|null} [isCritical] DamageData isCritical
         * @property {boolean|null} [isInstantKill] DamageData isInstantKill
         * @property {Array.<proto.IDamageDataBuffer>|null} [bufferList] DamageData bufferList
         */

        /**
         * Constructs a new DamageData.
         * @memberof proto
         * @classdesc Represents a DamageData.
         * @implements IDamageData
         * @constructor
         * @param {proto.IDamageData=} [p] Properties to set
         */
        function DamageData(p) {
            this.bufferList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * DamageData enmeyId.
         * @member {number} enmeyId
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.enmeyId = 0;

        /**
         * DamageData damage.
         * @member {number|Long} damage
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.damage = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * DamageData cure.
         * @member {number|Long} cure
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.cure = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * DamageData shieldReduce.
         * @member {number|Long} shieldReduce
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.shieldReduce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * DamageData isCritical.
         * @member {boolean} isCritical
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.isCritical = false;

        /**
         * DamageData isInstantKill.
         * @member {boolean} isInstantKill
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.isInstantKill = false;

        /**
         * DamageData bufferList.
         * @member {Array.<proto.IDamageDataBuffer>} bufferList
         * @memberof proto.DamageData
         * @instance
         */
        DamageData.prototype.bufferList = $util.emptyArray;

        /**
         * Encodes the specified DamageData message. Does not implicitly {@link proto.DamageData.verify|verify} messages.
         * @function encode
         * @memberof proto.DamageData
         * @static
         * @param {proto.IDamageData} m DamageData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DamageData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.enmeyId != null && Object.hasOwnProperty.call(m, "enmeyId"))
                w.uint32(8).int32(m.enmeyId);
            if (m.damage != null && Object.hasOwnProperty.call(m, "damage"))
                w.uint32(16).int64(m.damage);
            if (m.cure != null && Object.hasOwnProperty.call(m, "cure"))
                w.uint32(24).int64(m.cure);
            if (m.shieldReduce != null && Object.hasOwnProperty.call(m, "shieldReduce"))
                w.uint32(32).int64(m.shieldReduce);
            if (m.isCritical != null && Object.hasOwnProperty.call(m, "isCritical"))
                w.uint32(40).bool(m.isCritical);
            if (m.isInstantKill != null && Object.hasOwnProperty.call(m, "isInstantKill"))
                w.uint32(48).bool(m.isInstantKill);
            if (m.bufferList != null && m.bufferList.length) {
                for (var i = 0; i < m.bufferList.length; ++i)
                    $root.proto.DamageDataBuffer.encode(m.bufferList[i], w.uint32(58).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a DamageData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.DamageData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.DamageData} DamageData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DamageData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DamageData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.enmeyId = r.int32();
                    break;
                case 2:
                    m.damage = r.int64();
                    break;
                case 3:
                    m.cure = r.int64();
                    break;
                case 4:
                    m.shieldReduce = r.int64();
                    break;
                case 5:
                    m.isCritical = r.bool();
                    break;
                case 6:
                    m.isInstantKill = r.bool();
                    break;
                case 7:
                    if (!(m.bufferList && m.bufferList.length))
                        m.bufferList = [];
                    m.bufferList.push($root.proto.DamageDataBuffer.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return DamageData;
    })();

    proto.CombatEventAttack = (function() {

        /**
         * Properties of a CombatEventAttack.
         * @memberof proto
         * @interface ICombatEventAttack
         * @property {number|null} [towerId] CombatEventAttack towerId
         * @property {number|null} [skillID] CombatEventAttack skillID
         * @property {Array.<proto.IDamageData>|null} [damages] CombatEventAttack damages
         */

        /**
         * Constructs a new CombatEventAttack.
         * @memberof proto
         * @classdesc Represents a CombatEventAttack.
         * @implements ICombatEventAttack
         * @constructor
         * @param {proto.ICombatEventAttack=} [p] Properties to set
         */
        function CombatEventAttack(p) {
            this.damages = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventAttack towerId.
         * @member {number} towerId
         * @memberof proto.CombatEventAttack
         * @instance
         */
        CombatEventAttack.prototype.towerId = 0;

        /**
         * CombatEventAttack skillID.
         * @member {number} skillID
         * @memberof proto.CombatEventAttack
         * @instance
         */
        CombatEventAttack.prototype.skillID = 0;

        /**
         * CombatEventAttack damages.
         * @member {Array.<proto.IDamageData>} damages
         * @memberof proto.CombatEventAttack
         * @instance
         */
        CombatEventAttack.prototype.damages = $util.emptyArray;

        /**
         * Encodes the specified CombatEventAttack message. Does not implicitly {@link proto.CombatEventAttack.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventAttack
         * @static
         * @param {proto.ICombatEventAttack} m CombatEventAttack message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventAttack.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerId != null && Object.hasOwnProperty.call(m, "towerId"))
                w.uint32(8).int32(m.towerId);
            if (m.skillID != null && Object.hasOwnProperty.call(m, "skillID"))
                w.uint32(16).int32(m.skillID);
            if (m.damages != null && m.damages.length) {
                for (var i = 0; i < m.damages.length; ++i)
                    $root.proto.DamageData.encode(m.damages[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a CombatEventAttack message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventAttack
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventAttack} CombatEventAttack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventAttack.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventAttack();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerId = r.int32();
                    break;
                case 2:
                    m.skillID = r.int32();
                    break;
                case 3:
                    if (!(m.damages && m.damages.length))
                        m.damages = [];
                    m.damages.push($root.proto.DamageData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventAttack;
    })();

    proto.CombatEventCure = (function() {

        /**
         * Properties of a CombatEventCure.
         * @memberof proto
         * @interface ICombatEventCure
         * @property {number|null} [towerId] CombatEventCure towerId
         * @property {number|Long|null} [hp] CombatEventCure hp
         */

        /**
         * Constructs a new CombatEventCure.
         * @memberof proto
         * @classdesc Represents a CombatEventCure.
         * @implements ICombatEventCure
         * @constructor
         * @param {proto.ICombatEventCure=} [p] Properties to set
         */
        function CombatEventCure(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventCure towerId.
         * @member {number} towerId
         * @memberof proto.CombatEventCure
         * @instance
         */
        CombatEventCure.prototype.towerId = 0;

        /**
         * CombatEventCure hp.
         * @member {number|Long} hp
         * @memberof proto.CombatEventCure
         * @instance
         */
        CombatEventCure.prototype.hp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified CombatEventCure message. Does not implicitly {@link proto.CombatEventCure.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventCure
         * @static
         * @param {proto.ICombatEventCure} m CombatEventCure message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventCure.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerId != null && Object.hasOwnProperty.call(m, "towerId"))
                w.uint32(8).int32(m.towerId);
            if (m.hp != null && Object.hasOwnProperty.call(m, "hp"))
                w.uint32(16).int64(m.hp);
            return w;
        };

        /**
         * Decodes a CombatEventCure message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventCure
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventCure} CombatEventCure
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventCure.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventCure();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerId = r.int32();
                    break;
                case 2:
                    m.hp = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventCure;
    })();

    proto.CombatEventAddBuffer = (function() {

        /**
         * Properties of a CombatEventAddBuffer.
         * @memberof proto
         * @interface ICombatEventAddBuffer
         * @property {number|null} [towerID] CombatEventAddBuffer towerID
         * @property {number|null} [bufferID] CombatEventAddBuffer bufferID
         * @property {number|null} [index] CombatEventAddBuffer index
         * @property {number|null} [layer] CombatEventAddBuffer layer
         */

        /**
         * Constructs a new CombatEventAddBuffer.
         * @memberof proto
         * @classdesc Represents a CombatEventAddBuffer.
         * @implements ICombatEventAddBuffer
         * @constructor
         * @param {proto.ICombatEventAddBuffer=} [p] Properties to set
         */
        function CombatEventAddBuffer(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventAddBuffer towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventAddBuffer
         * @instance
         */
        CombatEventAddBuffer.prototype.towerID = 0;

        /**
         * CombatEventAddBuffer bufferID.
         * @member {number} bufferID
         * @memberof proto.CombatEventAddBuffer
         * @instance
         */
        CombatEventAddBuffer.prototype.bufferID = 0;

        /**
         * CombatEventAddBuffer index.
         * @member {number} index
         * @memberof proto.CombatEventAddBuffer
         * @instance
         */
        CombatEventAddBuffer.prototype.index = 0;

        /**
         * CombatEventAddBuffer layer.
         * @member {number} layer
         * @memberof proto.CombatEventAddBuffer
         * @instance
         */
        CombatEventAddBuffer.prototype.layer = 0;

        /**
         * Encodes the specified CombatEventAddBuffer message. Does not implicitly {@link proto.CombatEventAddBuffer.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventAddBuffer
         * @static
         * @param {proto.ICombatEventAddBuffer} m CombatEventAddBuffer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventAddBuffer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.bufferID != null && Object.hasOwnProperty.call(m, "bufferID"))
                w.uint32(16).int32(m.bufferID);
            if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                w.uint32(24).int32(m.index);
            if (m.layer != null && Object.hasOwnProperty.call(m, "layer"))
                w.uint32(32).int32(m.layer);
            return w;
        };

        /**
         * Decodes a CombatEventAddBuffer message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventAddBuffer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventAddBuffer} CombatEventAddBuffer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventAddBuffer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventAddBuffer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.bufferID = r.int32();
                    break;
                case 3:
                    m.index = r.int32();
                    break;
                case 4:
                    m.layer = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventAddBuffer;
    })();

    proto.CombatEventRemoveBuffer = (function() {

        /**
         * Properties of a CombatEventRemoveBuffer.
         * @memberof proto
         * @interface ICombatEventRemoveBuffer
         * @property {number|null} [towerID] CombatEventRemoveBuffer towerID
         * @property {number|null} [index] CombatEventRemoveBuffer index
         */

        /**
         * Constructs a new CombatEventRemoveBuffer.
         * @memberof proto
         * @classdesc Represents a CombatEventRemoveBuffer.
         * @implements ICombatEventRemoveBuffer
         * @constructor
         * @param {proto.ICombatEventRemoveBuffer=} [p] Properties to set
         */
        function CombatEventRemoveBuffer(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventRemoveBuffer towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventRemoveBuffer
         * @instance
         */
        CombatEventRemoveBuffer.prototype.towerID = 0;

        /**
         * CombatEventRemoveBuffer index.
         * @member {number} index
         * @memberof proto.CombatEventRemoveBuffer
         * @instance
         */
        CombatEventRemoveBuffer.prototype.index = 0;

        /**
         * Encodes the specified CombatEventRemoveBuffer message. Does not implicitly {@link proto.CombatEventRemoveBuffer.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventRemoveBuffer
         * @static
         * @param {proto.ICombatEventRemoveBuffer} m CombatEventRemoveBuffer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventRemoveBuffer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                w.uint32(16).int32(m.index);
            return w;
        };

        /**
         * Decodes a CombatEventRemoveBuffer message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventRemoveBuffer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventRemoveBuffer} CombatEventRemoveBuffer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventRemoveBuffer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventRemoveBuffer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.index = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventRemoveBuffer;
    })();

    proto.CombatEventShield = (function() {

        /**
         * Properties of a CombatEventShield.
         * @memberof proto
         * @interface ICombatEventShield
         * @property {number|null} [towerID] CombatEventShield towerID
         * @property {number|Long|null} [shield] CombatEventShield shield
         */

        /**
         * Constructs a new CombatEventShield.
         * @memberof proto
         * @classdesc Represents a CombatEventShield.
         * @implements ICombatEventShield
         * @constructor
         * @param {proto.ICombatEventShield=} [p] Properties to set
         */
        function CombatEventShield(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventShield towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventShield
         * @instance
         */
        CombatEventShield.prototype.towerID = 0;

        /**
         * CombatEventShield shield.
         * @member {number|Long} shield
         * @memberof proto.CombatEventShield
         * @instance
         */
        CombatEventShield.prototype.shield = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified CombatEventShield message. Does not implicitly {@link proto.CombatEventShield.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventShield
         * @static
         * @param {proto.ICombatEventShield} m CombatEventShield message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventShield.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.shield != null && Object.hasOwnProperty.call(m, "shield"))
                w.uint32(16).int64(m.shield);
            return w;
        };

        /**
         * Decodes a CombatEventShield message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventShield
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventShield} CombatEventShield
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventShield.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventShield();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.shield = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventShield;
    })();

    proto.CombatEventRevive = (function() {

        /**
         * Properties of a CombatEventRevive.
         * @memberof proto
         * @interface ICombatEventRevive
         * @property {number|null} [towerID] CombatEventRevive towerID
         * @property {number|null} [targetID] CombatEventRevive targetID
         * @property {number|null} [skillID] CombatEventRevive skillID
         * @property {number|Long|null} [hp] CombatEventRevive hp
         * @property {number|Long|null} [shield] CombatEventRevive shield
         */

        /**
         * Constructs a new CombatEventRevive.
         * @memberof proto
         * @classdesc Represents a CombatEventRevive.
         * @implements ICombatEventRevive
         * @constructor
         * @param {proto.ICombatEventRevive=} [p] Properties to set
         */
        function CombatEventRevive(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventRevive towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventRevive
         * @instance
         */
        CombatEventRevive.prototype.towerID = 0;

        /**
         * CombatEventRevive targetID.
         * @member {number} targetID
         * @memberof proto.CombatEventRevive
         * @instance
         */
        CombatEventRevive.prototype.targetID = 0;

        /**
         * CombatEventRevive skillID.
         * @member {number} skillID
         * @memberof proto.CombatEventRevive
         * @instance
         */
        CombatEventRevive.prototype.skillID = 0;

        /**
         * CombatEventRevive hp.
         * @member {number|Long} hp
         * @memberof proto.CombatEventRevive
         * @instance
         */
        CombatEventRevive.prototype.hp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * CombatEventRevive shield.
         * @member {number|Long} shield
         * @memberof proto.CombatEventRevive
         * @instance
         */
        CombatEventRevive.prototype.shield = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified CombatEventRevive message. Does not implicitly {@link proto.CombatEventRevive.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventRevive
         * @static
         * @param {proto.ICombatEventRevive} m CombatEventRevive message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventRevive.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.targetID != null && Object.hasOwnProperty.call(m, "targetID"))
                w.uint32(16).int32(m.targetID);
            if (m.skillID != null && Object.hasOwnProperty.call(m, "skillID"))
                w.uint32(24).int32(m.skillID);
            if (m.hp != null && Object.hasOwnProperty.call(m, "hp"))
                w.uint32(32).int64(m.hp);
            if (m.shield != null && Object.hasOwnProperty.call(m, "shield"))
                w.uint32(40).int64(m.shield);
            return w;
        };

        /**
         * Decodes a CombatEventRevive message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventRevive
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventRevive} CombatEventRevive
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventRevive.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventRevive();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.targetID = r.int32();
                    break;
                case 3:
                    m.skillID = r.int32();
                    break;
                case 4:
                    m.hp = r.int64();
                    break;
                case 5:
                    m.shield = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventRevive;
    })();

    proto.CombatEventDead = (function() {

        /**
         * Properties of a CombatEventDead.
         * @memberof proto
         * @interface ICombatEventDead
         * @property {number|null} [towerID] CombatEventDead towerID
         */

        /**
         * Constructs a new CombatEventDead.
         * @memberof proto
         * @classdesc Represents a CombatEventDead.
         * @implements ICombatEventDead
         * @constructor
         * @param {proto.ICombatEventDead=} [p] Properties to set
         */
        function CombatEventDead(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventDead towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventDead
         * @instance
         */
        CombatEventDead.prototype.towerID = 0;

        /**
         * Encodes the specified CombatEventDead message. Does not implicitly {@link proto.CombatEventDead.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventDead
         * @static
         * @param {proto.ICombatEventDead} m CombatEventDead message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventDead.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            return w;
        };

        /**
         * Decodes a CombatEventDead message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventDead
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventDead} CombatEventDead
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventDead.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventDead();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventDead;
    })();

    proto.CombatEventMove = (function() {

        /**
         * Properties of a CombatEventMove.
         * @memberof proto
         * @interface ICombatEventMove
         * @property {number|null} [towerID] CombatEventMove towerID
         * @property {number|null} [row] CombatEventMove row
         * @property {number|null} [column] CombatEventMove column
         * @property {number|null} [skillID] CombatEventMove skillID
         */

        /**
         * Constructs a new CombatEventMove.
         * @memberof proto
         * @classdesc Represents a CombatEventMove.
         * @implements ICombatEventMove
         * @constructor
         * @param {proto.ICombatEventMove=} [p] Properties to set
         */
        function CombatEventMove(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventMove towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventMove
         * @instance
         */
        CombatEventMove.prototype.towerID = 0;

        /**
         * CombatEventMove row.
         * @member {number} row
         * @memberof proto.CombatEventMove
         * @instance
         */
        CombatEventMove.prototype.row = 0;

        /**
         * CombatEventMove column.
         * @member {number} column
         * @memberof proto.CombatEventMove
         * @instance
         */
        CombatEventMove.prototype.column = 0;

        /**
         * CombatEventMove skillID.
         * @member {number} skillID
         * @memberof proto.CombatEventMove
         * @instance
         */
        CombatEventMove.prototype.skillID = 0;

        /**
         * Encodes the specified CombatEventMove message. Does not implicitly {@link proto.CombatEventMove.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventMove
         * @static
         * @param {proto.ICombatEventMove} m CombatEventMove message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventMove.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.row != null && Object.hasOwnProperty.call(m, "row"))
                w.uint32(16).int32(m.row);
            if (m.column != null && Object.hasOwnProperty.call(m, "column"))
                w.uint32(24).int32(m.column);
            if (m.skillID != null && Object.hasOwnProperty.call(m, "skillID"))
                w.uint32(32).int32(m.skillID);
            return w;
        };

        /**
         * Decodes a CombatEventMove message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventMove
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventMove} CombatEventMove
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventMove.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventMove();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.row = r.int32();
                    break;
                case 3:
                    m.column = r.int32();
                    break;
                case 4:
                    m.skillID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventMove;
    })();

    proto.CombatEventHp = (function() {

        /**
         * Properties of a CombatEventHp.
         * @memberof proto
         * @interface ICombatEventHp
         * @property {number|null} [towerID] CombatEventHp towerID
         * @property {number|Long|null} [hp] CombatEventHp hp
         * @property {number|Long|null} [maxHp] CombatEventHp maxHp
         */

        /**
         * Constructs a new CombatEventHp.
         * @memberof proto
         * @classdesc Represents a CombatEventHp.
         * @implements ICombatEventHp
         * @constructor
         * @param {proto.ICombatEventHp=} [p] Properties to set
         */
        function CombatEventHp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventHp towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventHp
         * @instance
         */
        CombatEventHp.prototype.towerID = 0;

        /**
         * CombatEventHp hp.
         * @member {number|Long} hp
         * @memberof proto.CombatEventHp
         * @instance
         */
        CombatEventHp.prototype.hp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * CombatEventHp maxHp.
         * @member {number|Long} maxHp
         * @memberof proto.CombatEventHp
         * @instance
         */
        CombatEventHp.prototype.maxHp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified CombatEventHp message. Does not implicitly {@link proto.CombatEventHp.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventHp
         * @static
         * @param {proto.ICombatEventHp} m CombatEventHp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventHp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.hp != null && Object.hasOwnProperty.call(m, "hp"))
                w.uint32(16).int64(m.hp);
            if (m.maxHp != null && Object.hasOwnProperty.call(m, "maxHp"))
                w.uint32(24).int64(m.maxHp);
            return w;
        };

        /**
         * Decodes a CombatEventHp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventHp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventHp} CombatEventHp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventHp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventHp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.hp = r.int64();
                    break;
                case 3:
                    m.maxHp = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventHp;
    })();

    proto.CombatEventTransform = (function() {

        /**
         * Properties of a CombatEventTransform.
         * @memberof proto
         * @interface ICombatEventTransform
         * @property {number|null} [towerID] CombatEventTransform towerID
         * @property {number|null} [cardID] CombatEventTransform cardID
         * @property {number|Long|null} [maxHp] CombatEventTransform maxHp
         */

        /**
         * Constructs a new CombatEventTransform.
         * @memberof proto
         * @classdesc Represents a CombatEventTransform.
         * @implements ICombatEventTransform
         * @constructor
         * @param {proto.ICombatEventTransform=} [p] Properties to set
         */
        function CombatEventTransform(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CombatEventTransform towerID.
         * @member {number} towerID
         * @memberof proto.CombatEventTransform
         * @instance
         */
        CombatEventTransform.prototype.towerID = 0;

        /**
         * CombatEventTransform cardID.
         * @member {number} cardID
         * @memberof proto.CombatEventTransform
         * @instance
         */
        CombatEventTransform.prototype.cardID = 0;

        /**
         * CombatEventTransform maxHp.
         * @member {number|Long} maxHp
         * @memberof proto.CombatEventTransform
         * @instance
         */
        CombatEventTransform.prototype.maxHp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified CombatEventTransform message. Does not implicitly {@link proto.CombatEventTransform.verify|verify} messages.
         * @function encode
         * @memberof proto.CombatEventTransform
         * @static
         * @param {proto.ICombatEventTransform} m CombatEventTransform message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CombatEventTransform.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.towerID != null && Object.hasOwnProperty.call(m, "towerID"))
                w.uint32(8).int32(m.towerID);
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(16).int32(m.cardID);
            if (m.maxHp != null && Object.hasOwnProperty.call(m, "maxHp"))
                w.uint32(24).int64(m.maxHp);
            return w;
        };

        /**
         * Decodes a CombatEventTransform message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CombatEventTransform
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CombatEventTransform} CombatEventTransform
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CombatEventTransform.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CombatEventTransform();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.towerID = r.int32();
                    break;
                case 2:
                    m.cardID = r.int32();
                    break;
                case 3:
                    m.maxHp = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CombatEventTransform;
    })();

    proto.FightTowerData = (function() {

        /**
         * Properties of a FightTowerData.
         * @memberof proto
         * @interface IFightTowerData
         * @property {number|null} [instanceID] FightTowerData instanceID
         * @property {number|null} [row] FightTowerData row
         * @property {number|null} [column] FightTowerData column
         * @property {number|null} [cardID] FightTowerData cardID
         * @property {number|null} [cardLv] FightTowerData cardLv
         * @property {number|null} [towerLv] FightTowerData towerLv
         * @property {number|null} [playerTag] FightTowerData playerTag
         * @property {number|Long|null} [maxHp] FightTowerData maxHp
         */

        /**
         * Constructs a new FightTowerData.
         * @memberof proto
         * @classdesc Represents a FightTowerData.
         * @implements IFightTowerData
         * @constructor
         * @param {proto.IFightTowerData=} [p] Properties to set
         */
        function FightTowerData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FightTowerData instanceID.
         * @member {number} instanceID
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.instanceID = 0;

        /**
         * FightTowerData row.
         * @member {number} row
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.row = 0;

        /**
         * FightTowerData column.
         * @member {number} column
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.column = 0;

        /**
         * FightTowerData cardID.
         * @member {number} cardID
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.cardID = 0;

        /**
         * FightTowerData cardLv.
         * @member {number} cardLv
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.cardLv = 0;

        /**
         * FightTowerData towerLv.
         * @member {number} towerLv
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.towerLv = 0;

        /**
         * FightTowerData playerTag.
         * @member {number} playerTag
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.playerTag = 0;

        /**
         * FightTowerData maxHp.
         * @member {number|Long} maxHp
         * @memberof proto.FightTowerData
         * @instance
         */
        FightTowerData.prototype.maxHp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified FightTowerData message. Does not implicitly {@link proto.FightTowerData.verify|verify} messages.
         * @function encode
         * @memberof proto.FightTowerData
         * @static
         * @param {proto.IFightTowerData} m FightTowerData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FightTowerData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.instanceID != null && Object.hasOwnProperty.call(m, "instanceID"))
                w.uint32(8).int32(m.instanceID);
            if (m.row != null && Object.hasOwnProperty.call(m, "row"))
                w.uint32(16).uint32(m.row);
            if (m.column != null && Object.hasOwnProperty.call(m, "column"))
                w.uint32(24).uint32(m.column);
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(32).int32(m.cardID);
            if (m.cardLv != null && Object.hasOwnProperty.call(m, "cardLv"))
                w.uint32(40).int32(m.cardLv);
            if (m.towerLv != null && Object.hasOwnProperty.call(m, "towerLv"))
                w.uint32(48).int32(m.towerLv);
            if (m.playerTag != null && Object.hasOwnProperty.call(m, "playerTag"))
                w.uint32(56).int32(m.playerTag);
            if (m.maxHp != null && Object.hasOwnProperty.call(m, "maxHp"))
                w.uint32(64).int64(m.maxHp);
            return w;
        };

        /**
         * Decodes a FightTowerData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FightTowerData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FightTowerData} FightTowerData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FightTowerData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FightTowerData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.instanceID = r.int32();
                    break;
                case 2:
                    m.row = r.uint32();
                    break;
                case 3:
                    m.column = r.uint32();
                    break;
                case 4:
                    m.cardID = r.int32();
                    break;
                case 5:
                    m.cardLv = r.int32();
                    break;
                case 6:
                    m.towerLv = r.int32();
                    break;
                case 7:
                    m.playerTag = r.int32();
                    break;
                case 8:
                    m.maxHp = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FightTowerData;
    })();

    proto.Msg_FightRandomNum = (function() {

        /**
         * Properties of a Msg_FightRandomNum.
         * @memberof proto
         * @interface IMsg_FightRandomNum
         * @property {Array.<number>|null} [num] Msg_FightRandomNum num
         */

        /**
         * Constructs a new Msg_FightRandomNum.
         * @memberof proto
         * @classdesc Represents a Msg_FightRandomNum.
         * @implements IMsg_FightRandomNum
         * @constructor
         * @param {proto.IMsg_FightRandomNum=} [p] Properties to set
         */
        function Msg_FightRandomNum(p) {
            this.num = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightRandomNum num.
         * @member {Array.<number>} num
         * @memberof proto.Msg_FightRandomNum
         * @instance
         */
        Msg_FightRandomNum.prototype.num = $util.emptyArray;

        /**
         * Encodes the specified Msg_FightRandomNum message. Does not implicitly {@link proto.Msg_FightRandomNum.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightRandomNum
         * @static
         * @param {proto.IMsg_FightRandomNum} m Msg_FightRandomNum message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightRandomNum.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.num != null && m.num.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.num.length; ++i)
                    w.int32(m.num[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_FightRandomNum message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightRandomNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightRandomNum} Msg_FightRandomNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightRandomNum.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightRandomNum();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.num && m.num.length))
                        m.num = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.num.push(r.int32());
                    } else
                        m.num.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightRandomNum;
    })();

    proto.Msg_FightSyncRandomReq = (function() {

        /**
         * Properties of a Msg_FightSyncRandomReq.
         * @memberof proto
         * @interface IMsg_FightSyncRandomReq
         * @property {number|null} [fightInstanceId] Msg_FightSyncRandomReq fightInstanceId
         */

        /**
         * Constructs a new Msg_FightSyncRandomReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightSyncRandomReq.
         * @implements IMsg_FightSyncRandomReq
         * @constructor
         * @param {proto.IMsg_FightSyncRandomReq=} [p] Properties to set
         */
        function Msg_FightSyncRandomReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightSyncRandomReq fightInstanceId.
         * @member {number} fightInstanceId
         * @memberof proto.Msg_FightSyncRandomReq
         * @instance
         */
        Msg_FightSyncRandomReq.prototype.fightInstanceId = 0;

        /**
         * Encodes the specified Msg_FightSyncRandomReq message. Does not implicitly {@link proto.Msg_FightSyncRandomReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightSyncRandomReq
         * @static
         * @param {proto.IMsg_FightSyncRandomReq} m Msg_FightSyncRandomReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightSyncRandomReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightInstanceId != null && Object.hasOwnProperty.call(m, "fightInstanceId"))
                w.uint32(8).int32(m.fightInstanceId);
            return w;
        };

        /**
         * Decodes a Msg_FightSyncRandomReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightSyncRandomReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightSyncRandomReq} Msg_FightSyncRandomReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightSyncRandomReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightSyncRandomReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightInstanceId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightSyncRandomReq;
    })();

    proto.Msg_FightSyncRandomRsp = (function() {

        /**
         * Properties of a Msg_FightSyncRandomRsp.
         * @memberof proto
         * @interface IMsg_FightSyncRandomRsp
         * @property {Array.<number>|null} [num] Msg_FightSyncRandomRsp num
         */

        /**
         * Constructs a new Msg_FightSyncRandomRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightSyncRandomRsp.
         * @implements IMsg_FightSyncRandomRsp
         * @constructor
         * @param {proto.IMsg_FightSyncRandomRsp=} [p] Properties to set
         */
        function Msg_FightSyncRandomRsp(p) {
            this.num = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightSyncRandomRsp num.
         * @member {Array.<number>} num
         * @memberof proto.Msg_FightSyncRandomRsp
         * @instance
         */
        Msg_FightSyncRandomRsp.prototype.num = $util.emptyArray;

        /**
         * Encodes the specified Msg_FightSyncRandomRsp message. Does not implicitly {@link proto.Msg_FightSyncRandomRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightSyncRandomRsp
         * @static
         * @param {proto.IMsg_FightSyncRandomRsp} m Msg_FightSyncRandomRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightSyncRandomRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.num != null && m.num.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.num.length; ++i)
                    w.int32(m.num[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_FightSyncRandomRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightSyncRandomRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightSyncRandomRsp} Msg_FightSyncRandomRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightSyncRandomRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightSyncRandomRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.num && m.num.length))
                        m.num = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.num.push(r.int32());
                    } else
                        m.num.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightSyncRandomRsp;
    })();

    proto.Msg_FightBuildReq = (function() {

        /**
         * Properties of a Msg_FightBuildReq.
         * @memberof proto
         * @interface IMsg_FightBuildReq
         * @property {number|null} [cardIndex] Msg_FightBuildReq cardIndex
         * @property {number|null} [row] Msg_FightBuildReq row
         * @property {number|null} [column] Msg_FightBuildReq column
         */

        /**
         * Constructs a new Msg_FightBuildReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightBuildReq.
         * @implements IMsg_FightBuildReq
         * @constructor
         * @param {proto.IMsg_FightBuildReq=} [p] Properties to set
         */
        function Msg_FightBuildReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightBuildReq cardIndex.
         * @member {number} cardIndex
         * @memberof proto.Msg_FightBuildReq
         * @instance
         */
        Msg_FightBuildReq.prototype.cardIndex = 0;

        /**
         * Msg_FightBuildReq row.
         * @member {number} row
         * @memberof proto.Msg_FightBuildReq
         * @instance
         */
        Msg_FightBuildReq.prototype.row = 0;

        /**
         * Msg_FightBuildReq column.
         * @member {number} column
         * @memberof proto.Msg_FightBuildReq
         * @instance
         */
        Msg_FightBuildReq.prototype.column = 0;

        /**
         * Encodes the specified Msg_FightBuildReq message. Does not implicitly {@link proto.Msg_FightBuildReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightBuildReq
         * @static
         * @param {proto.IMsg_FightBuildReq} m Msg_FightBuildReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightBuildReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardIndex != null && Object.hasOwnProperty.call(m, "cardIndex"))
                w.uint32(8).uint32(m.cardIndex);
            if (m.row != null && Object.hasOwnProperty.call(m, "row"))
                w.uint32(16).uint32(m.row);
            if (m.column != null && Object.hasOwnProperty.call(m, "column"))
                w.uint32(24).uint32(m.column);
            return w;
        };

        /**
         * Decodes a Msg_FightBuildReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightBuildReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightBuildReq} Msg_FightBuildReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightBuildReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightBuildReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardIndex = r.uint32();
                    break;
                case 2:
                    m.row = r.uint32();
                    break;
                case 3:
                    m.column = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightBuildReq;
    })();

    proto.Msg_FightBuildRsp = (function() {

        /**
         * Properties of a Msg_FightBuildRsp.
         * @memberof proto
         * @interface IMsg_FightBuildRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FightBuildRsp result
         * @property {proto.IFightTowerData|null} [towerData] Msg_FightBuildRsp towerData
         * @property {Array.<number>|null} [nextCards] Msg_FightBuildRsp nextCards
         * @property {number|null} [leftCount] Msg_FightBuildRsp leftCount
         * @property {Array.<proto.ICombatData>|null} [combatData] Msg_FightBuildRsp combatData
         */

        /**
         * Constructs a new Msg_FightBuildRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightBuildRsp.
         * @implements IMsg_FightBuildRsp
         * @constructor
         * @param {proto.IMsg_FightBuildRsp=} [p] Properties to set
         */
        function Msg_FightBuildRsp(p) {
            this.nextCards = [];
            this.combatData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightBuildRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FightBuildRsp
         * @instance
         */
        Msg_FightBuildRsp.prototype.result = 0;

        /**
         * Msg_FightBuildRsp towerData.
         * @member {proto.IFightTowerData|null|undefined} towerData
         * @memberof proto.Msg_FightBuildRsp
         * @instance
         */
        Msg_FightBuildRsp.prototype.towerData = null;

        /**
         * Msg_FightBuildRsp nextCards.
         * @member {Array.<number>} nextCards
         * @memberof proto.Msg_FightBuildRsp
         * @instance
         */
        Msg_FightBuildRsp.prototype.nextCards = $util.emptyArray;

        /**
         * Msg_FightBuildRsp leftCount.
         * @member {number} leftCount
         * @memberof proto.Msg_FightBuildRsp
         * @instance
         */
        Msg_FightBuildRsp.prototype.leftCount = 0;

        /**
         * Msg_FightBuildRsp combatData.
         * @member {Array.<proto.ICombatData>} combatData
         * @memberof proto.Msg_FightBuildRsp
         * @instance
         */
        Msg_FightBuildRsp.prototype.combatData = $util.emptyArray;

        /**
         * Encodes the specified Msg_FightBuildRsp message. Does not implicitly {@link proto.Msg_FightBuildRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightBuildRsp
         * @static
         * @param {proto.IMsg_FightBuildRsp} m Msg_FightBuildRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightBuildRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.towerData != null && Object.hasOwnProperty.call(m, "towerData"))
                $root.proto.FightTowerData.encode(m.towerData, w.uint32(18).fork()).ldelim();
            if (m.nextCards != null && m.nextCards.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.nextCards.length; ++i)
                    w.int32(m.nextCards[i]);
                w.ldelim();
            }
            if (m.leftCount != null && Object.hasOwnProperty.call(m, "leftCount"))
                w.uint32(32).int32(m.leftCount);
            if (m.combatData != null && m.combatData.length) {
                for (var i = 0; i < m.combatData.length; ++i)
                    $root.proto.CombatData.encode(m.combatData[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_FightBuildRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightBuildRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightBuildRsp} Msg_FightBuildRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightBuildRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightBuildRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.towerData = $root.proto.FightTowerData.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.nextCards && m.nextCards.length))
                        m.nextCards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.nextCards.push(r.int32());
                    } else
                        m.nextCards.push(r.int32());
                    break;
                case 4:
                    m.leftCount = r.int32();
                    break;
                case 5:
                    if (!(m.combatData && m.combatData.length))
                        m.combatData = [];
                    m.combatData.push($root.proto.CombatData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightBuildRsp;
    })();

    proto.Msg_FightCompoundReq = (function() {

        /**
         * Properties of a Msg_FightCompoundReq.
         * @memberof proto
         * @interface IMsg_FightCompoundReq
         * @property {number|null} [cmdID] Msg_FightCompoundReq cmdID
         * @property {number|null} [srcGridIndex] Msg_FightCompoundReq srcGridIndex
         * @property {number|null} [dstGridIndex] Msg_FightCompoundReq dstGridIndex
         */

        /**
         * Constructs a new Msg_FightCompoundReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightCompoundReq.
         * @implements IMsg_FightCompoundReq
         * @constructor
         * @param {proto.IMsg_FightCompoundReq=} [p] Properties to set
         */
        function Msg_FightCompoundReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightCompoundReq cmdID.
         * @member {number} cmdID
         * @memberof proto.Msg_FightCompoundReq
         * @instance
         */
        Msg_FightCompoundReq.prototype.cmdID = 0;

        /**
         * Msg_FightCompoundReq srcGridIndex.
         * @member {number} srcGridIndex
         * @memberof proto.Msg_FightCompoundReq
         * @instance
         */
        Msg_FightCompoundReq.prototype.srcGridIndex = 0;

        /**
         * Msg_FightCompoundReq dstGridIndex.
         * @member {number} dstGridIndex
         * @memberof proto.Msg_FightCompoundReq
         * @instance
         */
        Msg_FightCompoundReq.prototype.dstGridIndex = 0;

        /**
         * Encodes the specified Msg_FightCompoundReq message. Does not implicitly {@link proto.Msg_FightCompoundReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightCompoundReq
         * @static
         * @param {proto.IMsg_FightCompoundReq} m Msg_FightCompoundReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightCompoundReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cmdID != null && Object.hasOwnProperty.call(m, "cmdID"))
                w.uint32(8).int32(m.cmdID);
            if (m.srcGridIndex != null && Object.hasOwnProperty.call(m, "srcGridIndex"))
                w.uint32(16).int32(m.srcGridIndex);
            if (m.dstGridIndex != null && Object.hasOwnProperty.call(m, "dstGridIndex"))
                w.uint32(24).int32(m.dstGridIndex);
            return w;
        };

        /**
         * Decodes a Msg_FightCompoundReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightCompoundReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightCompoundReq} Msg_FightCompoundReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightCompoundReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightCompoundReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cmdID = r.int32();
                    break;
                case 2:
                    m.srcGridIndex = r.int32();
                    break;
                case 3:
                    m.dstGridIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightCompoundReq;
    })();

    proto.Msg_FightCompoundRsp = (function() {

        /**
         * Properties of a Msg_FightCompoundRsp.
         * @memberof proto
         * @interface IMsg_FightCompoundRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FightCompoundRsp result
         * @property {number|null} [cmdID] Msg_FightCompoundRsp cmdID
         */

        /**
         * Constructs a new Msg_FightCompoundRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightCompoundRsp.
         * @implements IMsg_FightCompoundRsp
         * @constructor
         * @param {proto.IMsg_FightCompoundRsp=} [p] Properties to set
         */
        function Msg_FightCompoundRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightCompoundRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FightCompoundRsp
         * @instance
         */
        Msg_FightCompoundRsp.prototype.result = 0;

        /**
         * Msg_FightCompoundRsp cmdID.
         * @member {number} cmdID
         * @memberof proto.Msg_FightCompoundRsp
         * @instance
         */
        Msg_FightCompoundRsp.prototype.cmdID = 0;

        /**
         * Encodes the specified Msg_FightCompoundRsp message. Does not implicitly {@link proto.Msg_FightCompoundRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightCompoundRsp
         * @static
         * @param {proto.IMsg_FightCompoundRsp} m Msg_FightCompoundRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightCompoundRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cmdID != null && Object.hasOwnProperty.call(m, "cmdID"))
                w.uint32(16).int32(m.cmdID);
            return w;
        };

        /**
         * Decodes a Msg_FightCompoundRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightCompoundRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightCompoundRsp} Msg_FightCompoundRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightCompoundRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightCompoundRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cmdID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightCompoundRsp;
    })();

    proto.PlayerFightDamageRecord = (function() {

        /**
         * Properties of a PlayerFightDamageRecord.
         * @memberof proto
         * @interface IPlayerFightDamageRecord
         * @property {Object.<string,number|Long>|null} [damageRecord] PlayerFightDamageRecord damageRecord
         */

        /**
         * Constructs a new PlayerFightDamageRecord.
         * @memberof proto
         * @classdesc Represents a PlayerFightDamageRecord.
         * @implements IPlayerFightDamageRecord
         * @constructor
         * @param {proto.IPlayerFightDamageRecord=} [p] Properties to set
         */
        function PlayerFightDamageRecord(p) {
            this.damageRecord = {};
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerFightDamageRecord damageRecord.
         * @member {Object.<string,number|Long>} damageRecord
         * @memberof proto.PlayerFightDamageRecord
         * @instance
         */
        PlayerFightDamageRecord.prototype.damageRecord = $util.emptyObject;

        /**
         * Encodes the specified PlayerFightDamageRecord message. Does not implicitly {@link proto.PlayerFightDamageRecord.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerFightDamageRecord
         * @static
         * @param {proto.IPlayerFightDamageRecord} m PlayerFightDamageRecord message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerFightDamageRecord.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.damageRecord != null && Object.hasOwnProperty.call(m, "damageRecord")) {
                for (var ks = Object.keys(m.damageRecord), i = 0; i < ks.length; ++i) {
                    w.uint32(10).fork().uint32(8).int32(ks[i]).uint32(16).int64(m.damageRecord[ks[i]]).ldelim();
                }
            }
            return w;
        };

        /**
         * Decodes a PlayerFightDamageRecord message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerFightDamageRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerFightDamageRecord} PlayerFightDamageRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerFightDamageRecord.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerFightDamageRecord(), k, value;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (m.damageRecord === $util.emptyObject)
                        m.damageRecord = {};
                    var c2 = r.uint32() + r.pos;
                    k = 0;
                    value = 0;
                    while (r.pos < c2) {
                        var tag2 = r.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            k = r.int32();
                            break;
                        case 2:
                            value = r.int64();
                            break;
                        default:
                            r.skipType(tag2 & 7);
                            break;
                        }
                    }
                    m.damageRecord[k] = value;
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerFightDamageRecord;
    })();

    proto.Msg_FightSurrender = (function() {

        /**
         * Properties of a Msg_FightSurrender.
         * @memberof proto
         * @interface IMsg_FightSurrender
         */

        /**
         * Constructs a new Msg_FightSurrender.
         * @memberof proto
         * @classdesc Represents a Msg_FightSurrender.
         * @implements IMsg_FightSurrender
         * @constructor
         * @param {proto.IMsg_FightSurrender=} [p] Properties to set
         */
        function Msg_FightSurrender(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_FightSurrender message. Does not implicitly {@link proto.Msg_FightSurrender.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightSurrender
         * @static
         * @param {proto.IMsg_FightSurrender} m Msg_FightSurrender message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightSurrender.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_FightSurrender message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightSurrender
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightSurrender} Msg_FightSurrender
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightSurrender.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightSurrender();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightSurrender;
    })();

    proto.Msg_FightEnd = (function() {

        /**
         * Properties of a Msg_FightEnd.
         * @memberof proto
         * @interface IMsg_FightEnd
         * @property {boolean|null} [isWin] Msg_FightEnd isWin
         * @property {boolean|null} [isSurrender] Msg_FightEnd isSurrender
         * @property {number|null} [changeCup] Msg_FightEnd changeCup
         * @property {number|null} [roleCup] Msg_FightEnd roleCup
         * @property {Array.<number>|null} [killedBoss] Msg_FightEnd killedBoss
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_FightEnd rewards
         * @property {boolean|null} [noBoxSpace] Msg_FightEnd noBoxSpace
         * @property {number|null} [waveNum] Msg_FightEnd waveNum
         * @property {number|null} [addLighting] Msg_FightEnd addLighting
         * @property {number|null} [fightType] Msg_FightEnd fightType
         * @property {proto.IPlayerFightDamageRecord|null} [myDamage] Msg_FightEnd myDamage
         * @property {proto.IPlayerFightDamageRecord|null} [otherDamage] Msg_FightEnd otherDamage
         * @property {number|null} [watchAdCount] Msg_FightEnd watchAdCount
         * @property {number|null} [otherChangeCup] Msg_FightEnd otherChangeCup
         */

        /**
         * Constructs a new Msg_FightEnd.
         * @memberof proto
         * @classdesc Represents a Msg_FightEnd.
         * @implements IMsg_FightEnd
         * @constructor
         * @param {proto.IMsg_FightEnd=} [p] Properties to set
         */
        function Msg_FightEnd(p) {
            this.killedBoss = [];
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightEnd isWin.
         * @member {boolean} isWin
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.isWin = false;

        /**
         * Msg_FightEnd isSurrender.
         * @member {boolean} isSurrender
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.isSurrender = false;

        /**
         * Msg_FightEnd changeCup.
         * @member {number} changeCup
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.changeCup = 0;

        /**
         * Msg_FightEnd roleCup.
         * @member {number} roleCup
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.roleCup = 0;

        /**
         * Msg_FightEnd killedBoss.
         * @member {Array.<number>} killedBoss
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.killedBoss = $util.emptyArray;

        /**
         * Msg_FightEnd rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.rewards = $util.emptyArray;

        /**
         * Msg_FightEnd noBoxSpace.
         * @member {boolean} noBoxSpace
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.noBoxSpace = false;

        /**
         * Msg_FightEnd waveNum.
         * @member {number} waveNum
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.waveNum = 0;

        /**
         * Msg_FightEnd addLighting.
         * @member {number} addLighting
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.addLighting = 0;

        /**
         * Msg_FightEnd fightType.
         * @member {number} fightType
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.fightType = 0;

        /**
         * Msg_FightEnd myDamage.
         * @member {proto.IPlayerFightDamageRecord|null|undefined} myDamage
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.myDamage = null;

        /**
         * Msg_FightEnd otherDamage.
         * @member {proto.IPlayerFightDamageRecord|null|undefined} otherDamage
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.otherDamage = null;

        /**
         * Msg_FightEnd watchAdCount.
         * @member {number} watchAdCount
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.watchAdCount = 0;

        /**
         * Msg_FightEnd otherChangeCup.
         * @member {number} otherChangeCup
         * @memberof proto.Msg_FightEnd
         * @instance
         */
        Msg_FightEnd.prototype.otherChangeCup = 0;

        /**
         * Encodes the specified Msg_FightEnd message. Does not implicitly {@link proto.Msg_FightEnd.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightEnd
         * @static
         * @param {proto.IMsg_FightEnd} m Msg_FightEnd message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightEnd.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.isWin != null && Object.hasOwnProperty.call(m, "isWin"))
                w.uint32(8).bool(m.isWin);
            if (m.isSurrender != null && Object.hasOwnProperty.call(m, "isSurrender"))
                w.uint32(16).bool(m.isSurrender);
            if (m.changeCup != null && Object.hasOwnProperty.call(m, "changeCup"))
                w.uint32(24).int32(m.changeCup);
            if (m.roleCup != null && Object.hasOwnProperty.call(m, "roleCup"))
                w.uint32(40).int32(m.roleCup);
            if (m.killedBoss != null && m.killedBoss.length) {
                w.uint32(58).fork();
                for (var i = 0; i < m.killedBoss.length; ++i)
                    w.int32(m.killedBoss[i]);
                w.ldelim();
            }
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(66).fork()).ldelim();
            }
            if (m.noBoxSpace != null && Object.hasOwnProperty.call(m, "noBoxSpace"))
                w.uint32(72).bool(m.noBoxSpace);
            if (m.waveNum != null && Object.hasOwnProperty.call(m, "waveNum"))
                w.uint32(80).int32(m.waveNum);
            if (m.addLighting != null && Object.hasOwnProperty.call(m, "addLighting"))
                w.uint32(88).int32(m.addLighting);
            if (m.fightType != null && Object.hasOwnProperty.call(m, "fightType"))
                w.uint32(96).int32(m.fightType);
            if (m.myDamage != null && Object.hasOwnProperty.call(m, "myDamage"))
                $root.proto.PlayerFightDamageRecord.encode(m.myDamage, w.uint32(106).fork()).ldelim();
            if (m.otherDamage != null && Object.hasOwnProperty.call(m, "otherDamage"))
                $root.proto.PlayerFightDamageRecord.encode(m.otherDamage, w.uint32(114).fork()).ldelim();
            if (m.watchAdCount != null && Object.hasOwnProperty.call(m, "watchAdCount"))
                w.uint32(120).int32(m.watchAdCount);
            if (m.otherChangeCup != null && Object.hasOwnProperty.call(m, "otherChangeCup"))
                w.uint32(128).int32(m.otherChangeCup);
            return w;
        };

        /**
         * Decodes a Msg_FightEnd message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightEnd} Msg_FightEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightEnd.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightEnd();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.isWin = r.bool();
                    break;
                case 2:
                    m.isSurrender = r.bool();
                    break;
                case 3:
                    m.changeCup = r.int32();
                    break;
                case 5:
                    m.roleCup = r.int32();
                    break;
                case 7:
                    if (!(m.killedBoss && m.killedBoss.length))
                        m.killedBoss = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.killedBoss.push(r.int32());
                    } else
                        m.killedBoss.push(r.int32());
                    break;
                case 8:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 9:
                    m.noBoxSpace = r.bool();
                    break;
                case 10:
                    m.waveNum = r.int32();
                    break;
                case 11:
                    m.addLighting = r.int32();
                    break;
                case 12:
                    m.fightType = r.int32();
                    break;
                case 13:
                    m.myDamage = $root.proto.PlayerFightDamageRecord.decode(r, r.uint32());
                    break;
                case 14:
                    m.otherDamage = $root.proto.PlayerFightDamageRecord.decode(r, r.uint32());
                    break;
                case 15:
                    m.watchAdCount = r.int32();
                    break;
                case 16:
                    m.otherChangeCup = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightEnd;
    })();

    proto.Msg_FightStrengthReq = (function() {

        /**
         * Properties of a Msg_FightStrengthReq.
         * @memberof proto
         * @interface IMsg_FightStrengthReq
         * @property {number|null} [cmdID] Msg_FightStrengthReq cmdID
         * @property {number|null} [strengthIndex] Msg_FightStrengthReq strengthIndex
         */

        /**
         * Constructs a new Msg_FightStrengthReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightStrengthReq.
         * @implements IMsg_FightStrengthReq
         * @constructor
         * @param {proto.IMsg_FightStrengthReq=} [p] Properties to set
         */
        function Msg_FightStrengthReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightStrengthReq cmdID.
         * @member {number} cmdID
         * @memberof proto.Msg_FightStrengthReq
         * @instance
         */
        Msg_FightStrengthReq.prototype.cmdID = 0;

        /**
         * Msg_FightStrengthReq strengthIndex.
         * @member {number} strengthIndex
         * @memberof proto.Msg_FightStrengthReq
         * @instance
         */
        Msg_FightStrengthReq.prototype.strengthIndex = 0;

        /**
         * Encodes the specified Msg_FightStrengthReq message. Does not implicitly {@link proto.Msg_FightStrengthReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightStrengthReq
         * @static
         * @param {proto.IMsg_FightStrengthReq} m Msg_FightStrengthReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightStrengthReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cmdID != null && Object.hasOwnProperty.call(m, "cmdID"))
                w.uint32(8).int32(m.cmdID);
            if (m.strengthIndex != null && Object.hasOwnProperty.call(m, "strengthIndex"))
                w.uint32(16).int32(m.strengthIndex);
            return w;
        };

        /**
         * Decodes a Msg_FightStrengthReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightStrengthReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightStrengthReq} Msg_FightStrengthReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightStrengthReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightStrengthReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cmdID = r.int32();
                    break;
                case 2:
                    m.strengthIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightStrengthReq;
    })();

    proto.Msg_FightStrengthRsp = (function() {

        /**
         * Properties of a Msg_FightStrengthRsp.
         * @memberof proto
         * @interface IMsg_FightStrengthRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FightStrengthRsp result
         * @property {number|null} [cmdID] Msg_FightStrengthRsp cmdID
         */

        /**
         * Constructs a new Msg_FightStrengthRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightStrengthRsp.
         * @implements IMsg_FightStrengthRsp
         * @constructor
         * @param {proto.IMsg_FightStrengthRsp=} [p] Properties to set
         */
        function Msg_FightStrengthRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightStrengthRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FightStrengthRsp
         * @instance
         */
        Msg_FightStrengthRsp.prototype.result = 0;

        /**
         * Msg_FightStrengthRsp cmdID.
         * @member {number} cmdID
         * @memberof proto.Msg_FightStrengthRsp
         * @instance
         */
        Msg_FightStrengthRsp.prototype.cmdID = 0;

        /**
         * Encodes the specified Msg_FightStrengthRsp message. Does not implicitly {@link proto.Msg_FightStrengthRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightStrengthRsp
         * @static
         * @param {proto.IMsg_FightStrengthRsp} m Msg_FightStrengthRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightStrengthRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cmdID != null && Object.hasOwnProperty.call(m, "cmdID"))
                w.uint32(16).int32(m.cmdID);
            return w;
        };

        /**
         * Decodes a Msg_FightStrengthRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightStrengthRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightStrengthRsp} Msg_FightStrengthRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightStrengthRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightStrengthRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cmdID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightStrengthRsp;
    })();

    proto.TowerStrengthData = (function() {

        /**
         * Properties of a TowerStrengthData.
         * @memberof proto
         * @interface ITowerStrengthData
         * @property {Array.<number>|null} [data] TowerStrengthData data
         */

        /**
         * Constructs a new TowerStrengthData.
         * @memberof proto
         * @classdesc Represents a TowerStrengthData.
         * @implements ITowerStrengthData
         * @constructor
         * @param {proto.ITowerStrengthData=} [p] Properties to set
         */
        function TowerStrengthData(p) {
            this.data = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * TowerStrengthData data.
         * @member {Array.<number>} data
         * @memberof proto.TowerStrengthData
         * @instance
         */
        TowerStrengthData.prototype.data = $util.emptyArray;

        /**
         * Encodes the specified TowerStrengthData message. Does not implicitly {@link proto.TowerStrengthData.verify|verify} messages.
         * @function encode
         * @memberof proto.TowerStrengthData
         * @static
         * @param {proto.ITowerStrengthData} m TowerStrengthData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TowerStrengthData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && m.data.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.data.length; ++i)
                    w.int32(m.data[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a TowerStrengthData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.TowerStrengthData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.TowerStrengthData} TowerStrengthData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TowerStrengthData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TowerStrengthData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.data && m.data.length))
                        m.data = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.data.push(r.int32());
                    } else
                        m.data.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return TowerStrengthData;
    })();

    proto.Msg_FightSnapshotReq = (function() {

        /**
         * Properties of a Msg_FightSnapshotReq.
         * @memberof proto
         * @interface IMsg_FightSnapshotReq
         */

        /**
         * Constructs a new Msg_FightSnapshotReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightSnapshotReq.
         * @implements IMsg_FightSnapshotReq
         * @constructor
         * @param {proto.IMsg_FightSnapshotReq=} [p] Properties to set
         */
        function Msg_FightSnapshotReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_FightSnapshotReq message. Does not implicitly {@link proto.Msg_FightSnapshotReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightSnapshotReq
         * @static
         * @param {proto.IMsg_FightSnapshotReq} m Msg_FightSnapshotReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightSnapshotReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_FightSnapshotReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightSnapshotReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightSnapshotReq} Msg_FightSnapshotReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightSnapshotReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightSnapshotReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightSnapshotReq;
    })();

    proto.Msg_FightSnapshotRsp = (function() {

        /**
         * Properties of a Msg_FightSnapshotRsp.
         * @memberof proto
         * @interface IMsg_FightSnapshotRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FightSnapshotRsp result
         * @property {number|null} [round] Msg_FightSnapshotRsp round
         * @property {Array.<number>|null} [nextCards] Msg_FightSnapshotRsp nextCards
         * @property {number|null} [leftCount] Msg_FightSnapshotRsp leftCount
         * @property {Array.<proto.IFightTowerData>|null} [towers] Msg_FightSnapshotRsp towers
         * @property {Array.<proto.ICombatData>|null} [combatData] Msg_FightSnapshotRsp combatData
         * @property {number|null} [loseTag] Msg_FightSnapshotRsp loseTag
         * @property {Array.<number>|null} [playerHeart] Msg_FightSnapshotRsp playerHeart
         * @property {number|null} [elpased] Msg_FightSnapshotRsp elpased
         * @property {boolean|null} [isCombatPhase] Msg_FightSnapshotRsp isCombatPhase
         * @property {Array.<proto.IBountyFightData>|null} [allData] Msg_FightSnapshotRsp allData
         * @property {proto.IBountyFightData|null} [opponentData] Msg_FightSnapshotRsp opponentData
         * @property {number|null} [playerTag] Msg_FightSnapshotRsp playerTag
         */

        /**
         * Constructs a new Msg_FightSnapshotRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightSnapshotRsp.
         * @implements IMsg_FightSnapshotRsp
         * @constructor
         * @param {proto.IMsg_FightSnapshotRsp=} [p] Properties to set
         */
        function Msg_FightSnapshotRsp(p) {
            this.nextCards = [];
            this.towers = [];
            this.combatData = [];
            this.playerHeart = [];
            this.allData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightSnapshotRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.result = 0;

        /**
         * Msg_FightSnapshotRsp round.
         * @member {number} round
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.round = 0;

        /**
         * Msg_FightSnapshotRsp nextCards.
         * @member {Array.<number>} nextCards
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.nextCards = $util.emptyArray;

        /**
         * Msg_FightSnapshotRsp leftCount.
         * @member {number} leftCount
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.leftCount = 0;

        /**
         * Msg_FightSnapshotRsp towers.
         * @member {Array.<proto.IFightTowerData>} towers
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.towers = $util.emptyArray;

        /**
         * Msg_FightSnapshotRsp combatData.
         * @member {Array.<proto.ICombatData>} combatData
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.combatData = $util.emptyArray;

        /**
         * Msg_FightSnapshotRsp loseTag.
         * @member {number} loseTag
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.loseTag = 0;

        /**
         * Msg_FightSnapshotRsp playerHeart.
         * @member {Array.<number>} playerHeart
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.playerHeart = $util.emptyArray;

        /**
         * Msg_FightSnapshotRsp elpased.
         * @member {number} elpased
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.elpased = 0;

        /**
         * Msg_FightSnapshotRsp isCombatPhase.
         * @member {boolean} isCombatPhase
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.isCombatPhase = false;

        /**
         * Msg_FightSnapshotRsp allData.
         * @member {Array.<proto.IBountyFightData>} allData
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.allData = $util.emptyArray;

        /**
         * Msg_FightSnapshotRsp opponentData.
         * @member {proto.IBountyFightData|null|undefined} opponentData
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.opponentData = null;

        /**
         * Msg_FightSnapshotRsp playerTag.
         * @member {number} playerTag
         * @memberof proto.Msg_FightSnapshotRsp
         * @instance
         */
        Msg_FightSnapshotRsp.prototype.playerTag = 0;

        /**
         * Encodes the specified Msg_FightSnapshotRsp message. Does not implicitly {@link proto.Msg_FightSnapshotRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightSnapshotRsp
         * @static
         * @param {proto.IMsg_FightSnapshotRsp} m Msg_FightSnapshotRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightSnapshotRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.round != null && Object.hasOwnProperty.call(m, "round"))
                w.uint32(16).int32(m.round);
            if (m.nextCards != null && m.nextCards.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.nextCards.length; ++i)
                    w.int32(m.nextCards[i]);
                w.ldelim();
            }
            if (m.leftCount != null && Object.hasOwnProperty.call(m, "leftCount"))
                w.uint32(32).int32(m.leftCount);
            if (m.towers != null && m.towers.length) {
                for (var i = 0; i < m.towers.length; ++i)
                    $root.proto.FightTowerData.encode(m.towers[i], w.uint32(42).fork()).ldelim();
            }
            if (m.combatData != null && m.combatData.length) {
                for (var i = 0; i < m.combatData.length; ++i)
                    $root.proto.CombatData.encode(m.combatData[i], w.uint32(50).fork()).ldelim();
            }
            if (m.loseTag != null && Object.hasOwnProperty.call(m, "loseTag"))
                w.uint32(56).int32(m.loseTag);
            if (m.playerHeart != null && m.playerHeart.length) {
                w.uint32(66).fork();
                for (var i = 0; i < m.playerHeart.length; ++i)
                    w.int32(m.playerHeart[i]);
                w.ldelim();
            }
            if (m.elpased != null && Object.hasOwnProperty.call(m, "elpased"))
                w.uint32(77).float(m.elpased);
            if (m.isCombatPhase != null && Object.hasOwnProperty.call(m, "isCombatPhase"))
                w.uint32(80).bool(m.isCombatPhase);
            if (m.allData != null && m.allData.length) {
                for (var i = 0; i < m.allData.length; ++i)
                    $root.proto.BountyFightData.encode(m.allData[i], w.uint32(90).fork()).ldelim();
            }
            if (m.opponentData != null && Object.hasOwnProperty.call(m, "opponentData"))
                $root.proto.BountyFightData.encode(m.opponentData, w.uint32(98).fork()).ldelim();
            if (m.playerTag != null && Object.hasOwnProperty.call(m, "playerTag"))
                w.uint32(104).int32(m.playerTag);
            return w;
        };

        /**
         * Decodes a Msg_FightSnapshotRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightSnapshotRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightSnapshotRsp} Msg_FightSnapshotRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightSnapshotRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightSnapshotRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.round = r.int32();
                    break;
                case 3:
                    if (!(m.nextCards && m.nextCards.length))
                        m.nextCards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.nextCards.push(r.int32());
                    } else
                        m.nextCards.push(r.int32());
                    break;
                case 4:
                    m.leftCount = r.int32();
                    break;
                case 5:
                    if (!(m.towers && m.towers.length))
                        m.towers = [];
                    m.towers.push($root.proto.FightTowerData.decode(r, r.uint32()));
                    break;
                case 6:
                    if (!(m.combatData && m.combatData.length))
                        m.combatData = [];
                    m.combatData.push($root.proto.CombatData.decode(r, r.uint32()));
                    break;
                case 7:
                    m.loseTag = r.int32();
                    break;
                case 8:
                    if (!(m.playerHeart && m.playerHeart.length))
                        m.playerHeart = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.playerHeart.push(r.int32());
                    } else
                        m.playerHeart.push(r.int32());
                    break;
                case 9:
                    m.elpased = r.float();
                    break;
                case 10:
                    m.isCombatPhase = r.bool();
                    break;
                case 11:
                    if (!(m.allData && m.allData.length))
                        m.allData = [];
                    m.allData.push($root.proto.BountyFightData.decode(r, r.uint32()));
                    break;
                case 12:
                    m.opponentData = $root.proto.BountyFightData.decode(r, r.uint32());
                    break;
                case 13:
                    m.playerTag = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightSnapshotRsp;
    })();

    proto.Msg_ClientConstructionEnd = (function() {

        /**
         * Properties of a Msg_ClientConstructionEnd.
         * @memberof proto
         * @interface IMsg_ClientConstructionEnd
         */

        /**
         * Constructs a new Msg_ClientConstructionEnd.
         * @memberof proto
         * @classdesc Represents a Msg_ClientConstructionEnd.
         * @implements IMsg_ClientConstructionEnd
         * @constructor
         * @param {proto.IMsg_ClientConstructionEnd=} [p] Properties to set
         */
        function Msg_ClientConstructionEnd(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ClientConstructionEnd message. Does not implicitly {@link proto.Msg_ClientConstructionEnd.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ClientConstructionEnd
         * @static
         * @param {proto.IMsg_ClientConstructionEnd} m Msg_ClientConstructionEnd message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ClientConstructionEnd.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ClientConstructionEnd message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ClientConstructionEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ClientConstructionEnd} Msg_ClientConstructionEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ClientConstructionEnd.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ClientConstructionEnd();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ClientConstructionEnd;
    })();

    proto.Msg_ClientCombatEnd = (function() {

        /**
         * Properties of a Msg_ClientCombatEnd.
         * @memberof proto
         * @interface IMsg_ClientCombatEnd
         */

        /**
         * Constructs a new Msg_ClientCombatEnd.
         * @memberof proto
         * @classdesc Represents a Msg_ClientCombatEnd.
         * @implements IMsg_ClientCombatEnd
         * @constructor
         * @param {proto.IMsg_ClientCombatEnd=} [p] Properties to set
         */
        function Msg_ClientCombatEnd(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ClientCombatEnd message. Does not implicitly {@link proto.Msg_ClientCombatEnd.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ClientCombatEnd
         * @static
         * @param {proto.IMsg_ClientCombatEnd} m Msg_ClientCombatEnd message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ClientCombatEnd.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ClientCombatEnd message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ClientCombatEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ClientCombatEnd} Msg_ClientCombatEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ClientCombatEnd.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ClientCombatEnd();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ClientCombatEnd;
    })();

    proto.Msg_FightLordSkillReq = (function() {

        /**
         * Properties of a Msg_FightLordSkillReq.
         * @memberof proto
         * @interface IMsg_FightLordSkillReq
         * @property {number|null} [gridIdx] Msg_FightLordSkillReq gridIdx
         * @property {number|null} [playerTag] Msg_FightLordSkillReq playerTag
         */

        /**
         * Constructs a new Msg_FightLordSkillReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightLordSkillReq.
         * @implements IMsg_FightLordSkillReq
         * @constructor
         * @param {proto.IMsg_FightLordSkillReq=} [p] Properties to set
         */
        function Msg_FightLordSkillReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightLordSkillReq gridIdx.
         * @member {number} gridIdx
         * @memberof proto.Msg_FightLordSkillReq
         * @instance
         */
        Msg_FightLordSkillReq.prototype.gridIdx = 0;

        /**
         * Msg_FightLordSkillReq playerTag.
         * @member {number} playerTag
         * @memberof proto.Msg_FightLordSkillReq
         * @instance
         */
        Msg_FightLordSkillReq.prototype.playerTag = 0;

        /**
         * Encodes the specified Msg_FightLordSkillReq message. Does not implicitly {@link proto.Msg_FightLordSkillReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightLordSkillReq
         * @static
         * @param {proto.IMsg_FightLordSkillReq} m Msg_FightLordSkillReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightLordSkillReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.gridIdx != null && Object.hasOwnProperty.call(m, "gridIdx"))
                w.uint32(8).int32(m.gridIdx);
            if (m.playerTag != null && Object.hasOwnProperty.call(m, "playerTag"))
                w.uint32(16).int32(m.playerTag);
            return w;
        };

        /**
         * Decodes a Msg_FightLordSkillReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightLordSkillReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightLordSkillReq} Msg_FightLordSkillReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightLordSkillReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightLordSkillReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.gridIdx = r.int32();
                    break;
                case 2:
                    m.playerTag = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightLordSkillReq;
    })();

    proto.Msg_FightLordSkillRsp = (function() {

        /**
         * Properties of a Msg_FightLordSkillRsp.
         * @memberof proto
         * @interface IMsg_FightLordSkillRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_FightLordSkillRsp result
         * @property {number|null} [countdown] Msg_FightLordSkillRsp countdown
         * @property {number|null} [currentCost] Msg_FightLordSkillRsp currentCost
         * @property {number|null} [nextCost] Msg_FightLordSkillRsp nextCost
         */

        /**
         * Constructs a new Msg_FightLordSkillRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightLordSkillRsp.
         * @implements IMsg_FightLordSkillRsp
         * @constructor
         * @param {proto.IMsg_FightLordSkillRsp=} [p] Properties to set
         */
        function Msg_FightLordSkillRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightLordSkillRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_FightLordSkillRsp
         * @instance
         */
        Msg_FightLordSkillRsp.prototype.result = 0;

        /**
         * Msg_FightLordSkillRsp countdown.
         * @member {number} countdown
         * @memberof proto.Msg_FightLordSkillRsp
         * @instance
         */
        Msg_FightLordSkillRsp.prototype.countdown = 0;

        /**
         * Msg_FightLordSkillRsp currentCost.
         * @member {number} currentCost
         * @memberof proto.Msg_FightLordSkillRsp
         * @instance
         */
        Msg_FightLordSkillRsp.prototype.currentCost = 0;

        /**
         * Msg_FightLordSkillRsp nextCost.
         * @member {number} nextCost
         * @memberof proto.Msg_FightLordSkillRsp
         * @instance
         */
        Msg_FightLordSkillRsp.prototype.nextCost = 0;

        /**
         * Encodes the specified Msg_FightLordSkillRsp message. Does not implicitly {@link proto.Msg_FightLordSkillRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightLordSkillRsp
         * @static
         * @param {proto.IMsg_FightLordSkillRsp} m Msg_FightLordSkillRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightLordSkillRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.countdown != null && Object.hasOwnProperty.call(m, "countdown"))
                w.uint32(16).int32(m.countdown);
            if (m.currentCost != null && Object.hasOwnProperty.call(m, "currentCost"))
                w.uint32(24).int32(m.currentCost);
            if (m.nextCost != null && Object.hasOwnProperty.call(m, "nextCost"))
                w.uint32(32).int32(m.nextCost);
            return w;
        };

        /**
         * Decodes a Msg_FightLordSkillRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightLordSkillRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightLordSkillRsp} Msg_FightLordSkillRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightLordSkillRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightLordSkillRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.countdown = r.int32();
                    break;
                case 3:
                    m.currentCost = r.int32();
                    break;
                case 4:
                    m.nextCost = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightLordSkillRsp;
    })();

    proto.Msg_FightEmoji = (function() {

        /**
         * Properties of a Msg_FightEmoji.
         * @memberof proto
         * @interface IMsg_FightEmoji
         * @property {number|null} [emojiID] Msg_FightEmoji emojiID
         */

        /**
         * Constructs a new Msg_FightEmoji.
         * @memberof proto
         * @classdesc Represents a Msg_FightEmoji.
         * @implements IMsg_FightEmoji
         * @constructor
         * @param {proto.IMsg_FightEmoji=} [p] Properties to set
         */
        function Msg_FightEmoji(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightEmoji emojiID.
         * @member {number} emojiID
         * @memberof proto.Msg_FightEmoji
         * @instance
         */
        Msg_FightEmoji.prototype.emojiID = 0;

        /**
         * Encodes the specified Msg_FightEmoji message. Does not implicitly {@link proto.Msg_FightEmoji.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightEmoji
         * @static
         * @param {proto.IMsg_FightEmoji} m Msg_FightEmoji message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightEmoji.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.emojiID != null && Object.hasOwnProperty.call(m, "emojiID"))
                w.uint32(8).int32(m.emojiID);
            return w;
        };

        /**
         * Decodes a Msg_FightEmoji message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightEmoji
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightEmoji} Msg_FightEmoji
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightEmoji.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightEmoji();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.emojiID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightEmoji;
    })();

    proto.Msg_FightEmojiSync = (function() {

        /**
         * Properties of a Msg_FightEmojiSync.
         * @memberof proto
         * @interface IMsg_FightEmojiSync
         * @property {number|null} [emojiID] Msg_FightEmojiSync emojiID
         */

        /**
         * Constructs a new Msg_FightEmojiSync.
         * @memberof proto
         * @classdesc Represents a Msg_FightEmojiSync.
         * @implements IMsg_FightEmojiSync
         * @constructor
         * @param {proto.IMsg_FightEmojiSync=} [p] Properties to set
         */
        function Msg_FightEmojiSync(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightEmojiSync emojiID.
         * @member {number} emojiID
         * @memberof proto.Msg_FightEmojiSync
         * @instance
         */
        Msg_FightEmojiSync.prototype.emojiID = 0;

        /**
         * Encodes the specified Msg_FightEmojiSync message. Does not implicitly {@link proto.Msg_FightEmojiSync.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightEmojiSync
         * @static
         * @param {proto.IMsg_FightEmojiSync} m Msg_FightEmojiSync message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightEmojiSync.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.emojiID != null && Object.hasOwnProperty.call(m, "emojiID"))
                w.uint32(8).int32(m.emojiID);
            return w;
        };

        /**
         * Decodes a Msg_FightEmojiSync message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightEmojiSync
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightEmojiSync} Msg_FightEmojiSync
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightEmojiSync.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightEmojiSync();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.emojiID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightEmojiSync;
    })();

    /**
     * PullCardType enum.
     * @name proto.PullCardType
     * @enum {number}
     * @property {number} Free=0 Free value
     * @property {number} Normal=1 Normal value
     * @property {number} HighClass=2 HighClass value
     * @property {number} Honour=3 Honour value
     */
    proto.PullCardType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Free"] = 0;
        values[valuesById[1] = "Normal"] = 1;
        values[valuesById[2] = "HighClass"] = 2;
        values[valuesById[3] = "Honour"] = 3;
        return values;
    })();

    proto.PullCardData = (function() {

        /**
         * Properties of a PullCardData.
         * @memberof proto
         * @interface IPullCardData
         * @property {number|null} [DayPullCount] PullCardData DayPullCount
         * @property {number|null} [FreePullCount] PullCardData FreePullCount
         * @property {Object.<string,number>|null} [typeCount] PullCardData typeCount
         */

        /**
         * Constructs a new PullCardData.
         * @memberof proto
         * @classdesc Represents a PullCardData.
         * @implements IPullCardData
         * @constructor
         * @param {proto.IPullCardData=} [p] Properties to set
         */
        function PullCardData(p) {
            this.typeCount = {};
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PullCardData DayPullCount.
         * @member {number} DayPullCount
         * @memberof proto.PullCardData
         * @instance
         */
        PullCardData.prototype.DayPullCount = 0;

        /**
         * PullCardData FreePullCount.
         * @member {number} FreePullCount
         * @memberof proto.PullCardData
         * @instance
         */
        PullCardData.prototype.FreePullCount = 0;

        /**
         * PullCardData typeCount.
         * @member {Object.<string,number>} typeCount
         * @memberof proto.PullCardData
         * @instance
         */
        PullCardData.prototype.typeCount = $util.emptyObject;

        /**
         * Encodes the specified PullCardData message. Does not implicitly {@link proto.PullCardData.verify|verify} messages.
         * @function encode
         * @memberof proto.PullCardData
         * @static
         * @param {proto.IPullCardData} m PullCardData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PullCardData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DayPullCount != null && Object.hasOwnProperty.call(m, "DayPullCount"))
                w.uint32(8).int32(m.DayPullCount);
            if (m.FreePullCount != null && Object.hasOwnProperty.call(m, "FreePullCount"))
                w.uint32(16).int32(m.FreePullCount);
            if (m.typeCount != null && Object.hasOwnProperty.call(m, "typeCount")) {
                for (var ks = Object.keys(m.typeCount), i = 0; i < ks.length; ++i) {
                    w.uint32(26).fork().uint32(8).int32(ks[i]).uint32(16).int32(m.typeCount[ks[i]]).ldelim();
                }
            }
            return w;
        };

        /**
         * Decodes a PullCardData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PullCardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PullCardData} PullCardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PullCardData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PullCardData(), k, value;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DayPullCount = r.int32();
                    break;
                case 2:
                    m.FreePullCount = r.int32();
                    break;
                case 3:
                    if (m.typeCount === $util.emptyObject)
                        m.typeCount = {};
                    var c2 = r.uint32() + r.pos;
                    k = 0;
                    value = 0;
                    while (r.pos < c2) {
                        var tag2 = r.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            k = r.int32();
                            break;
                        case 2:
                            value = r.int32();
                            break;
                        default:
                            r.skipType(tag2 & 7);
                            break;
                        }
                    }
                    m.typeCount[k] = value;
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PullCardData;
    })();

    proto.Msg_PullCardInfoReq = (function() {

        /**
         * Properties of a Msg_PullCardInfoReq.
         * @memberof proto
         * @interface IMsg_PullCardInfoReq
         */

        /**
         * Constructs a new Msg_PullCardInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_PullCardInfoReq.
         * @implements IMsg_PullCardInfoReq
         * @constructor
         * @param {proto.IMsg_PullCardInfoReq=} [p] Properties to set
         */
        function Msg_PullCardInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_PullCardInfoReq message. Does not implicitly {@link proto.Msg_PullCardInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PullCardInfoReq
         * @static
         * @param {proto.IMsg_PullCardInfoReq} m Msg_PullCardInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PullCardInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_PullCardInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PullCardInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PullCardInfoReq} Msg_PullCardInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PullCardInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PullCardInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PullCardInfoReq;
    })();

    proto.Msg_PullCardInfoRsp = (function() {

        /**
         * Properties of a Msg_PullCardInfoRsp.
         * @memberof proto
         * @interface IMsg_PullCardInfoRsp
         * @property {number|null} [dayPullCount] Msg_PullCardInfoRsp dayPullCount
         * @property {number|null} [freePullCount] Msg_PullCardInfoRsp freePullCount
         * @property {Object.<string,number>|null} [pullTypeCount] Msg_PullCardInfoRsp pullTypeCount
         */

        /**
         * Constructs a new Msg_PullCardInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PullCardInfoRsp.
         * @implements IMsg_PullCardInfoRsp
         * @constructor
         * @param {proto.IMsg_PullCardInfoRsp=} [p] Properties to set
         */
        function Msg_PullCardInfoRsp(p) {
            this.pullTypeCount = {};
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PullCardInfoRsp dayPullCount.
         * @member {number} dayPullCount
         * @memberof proto.Msg_PullCardInfoRsp
         * @instance
         */
        Msg_PullCardInfoRsp.prototype.dayPullCount = 0;

        /**
         * Msg_PullCardInfoRsp freePullCount.
         * @member {number} freePullCount
         * @memberof proto.Msg_PullCardInfoRsp
         * @instance
         */
        Msg_PullCardInfoRsp.prototype.freePullCount = 0;

        /**
         * Msg_PullCardInfoRsp pullTypeCount.
         * @member {Object.<string,number>} pullTypeCount
         * @memberof proto.Msg_PullCardInfoRsp
         * @instance
         */
        Msg_PullCardInfoRsp.prototype.pullTypeCount = $util.emptyObject;

        /**
         * Encodes the specified Msg_PullCardInfoRsp message. Does not implicitly {@link proto.Msg_PullCardInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PullCardInfoRsp
         * @static
         * @param {proto.IMsg_PullCardInfoRsp} m Msg_PullCardInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PullCardInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.dayPullCount != null && Object.hasOwnProperty.call(m, "dayPullCount"))
                w.uint32(8).int32(m.dayPullCount);
            if (m.freePullCount != null && Object.hasOwnProperty.call(m, "freePullCount"))
                w.uint32(16).int32(m.freePullCount);
            if (m.pullTypeCount != null && Object.hasOwnProperty.call(m, "pullTypeCount")) {
                for (var ks = Object.keys(m.pullTypeCount), i = 0; i < ks.length; ++i) {
                    w.uint32(26).fork().uint32(8).int32(ks[i]).uint32(16).int32(m.pullTypeCount[ks[i]]).ldelim();
                }
            }
            return w;
        };

        /**
         * Decodes a Msg_PullCardInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PullCardInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PullCardInfoRsp} Msg_PullCardInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PullCardInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PullCardInfoRsp(), k, value;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.dayPullCount = r.int32();
                    break;
                case 2:
                    m.freePullCount = r.int32();
                    break;
                case 3:
                    if (m.pullTypeCount === $util.emptyObject)
                        m.pullTypeCount = {};
                    var c2 = r.uint32() + r.pos;
                    k = 0;
                    value = 0;
                    while (r.pos < c2) {
                        var tag2 = r.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            k = r.int32();
                            break;
                        case 2:
                            value = r.int32();
                            break;
                        default:
                            r.skipType(tag2 & 7);
                            break;
                        }
                    }
                    m.pullTypeCount[k] = value;
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PullCardInfoRsp;
    })();

    proto.Msg_PullCardReq = (function() {

        /**
         * Properties of a Msg_PullCardReq.
         * @memberof proto
         * @interface IMsg_PullCardReq
         * @property {proto.PullCardType|null} [pullCardType] Msg_PullCardReq pullCardType
         */

        /**
         * Constructs a new Msg_PullCardReq.
         * @memberof proto
         * @classdesc Represents a Msg_PullCardReq.
         * @implements IMsg_PullCardReq
         * @constructor
         * @param {proto.IMsg_PullCardReq=} [p] Properties to set
         */
        function Msg_PullCardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PullCardReq pullCardType.
         * @member {proto.PullCardType} pullCardType
         * @memberof proto.Msg_PullCardReq
         * @instance
         */
        Msg_PullCardReq.prototype.pullCardType = 0;

        /**
         * Encodes the specified Msg_PullCardReq message. Does not implicitly {@link proto.Msg_PullCardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PullCardReq
         * @static
         * @param {proto.IMsg_PullCardReq} m Msg_PullCardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PullCardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pullCardType != null && Object.hasOwnProperty.call(m, "pullCardType"))
                w.uint32(8).int32(m.pullCardType);
            return w;
        };

        /**
         * Decodes a Msg_PullCardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PullCardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PullCardReq} Msg_PullCardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PullCardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PullCardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.pullCardType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PullCardReq;
    })();

    proto.CardInfo = (function() {

        /**
         * Properties of a CardInfo.
         * @memberof proto
         * @interface ICardInfo
         * @property {number|null} [cardID] CardInfo cardID
         * @property {number|null} [cardCount] CardInfo cardCount
         */

        /**
         * Constructs a new CardInfo.
         * @memberof proto
         * @classdesc Represents a CardInfo.
         * @implements ICardInfo
         * @constructor
         * @param {proto.ICardInfo=} [p] Properties to set
         */
        function CardInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CardInfo cardID.
         * @member {number} cardID
         * @memberof proto.CardInfo
         * @instance
         */
        CardInfo.prototype.cardID = 0;

        /**
         * CardInfo cardCount.
         * @member {number} cardCount
         * @memberof proto.CardInfo
         * @instance
         */
        CardInfo.prototype.cardCount = 0;

        /**
         * Encodes the specified CardInfo message. Does not implicitly {@link proto.CardInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.CardInfo
         * @static
         * @param {proto.ICardInfo} m CardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(8).int32(m.cardID);
            if (m.cardCount != null && Object.hasOwnProperty.call(m, "cardCount"))
                w.uint32(16).int32(m.cardCount);
            return w;
        };

        /**
         * Decodes a CardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CardInfo} CardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardID = r.int32();
                    break;
                case 2:
                    m.cardCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CardInfo;
    })();

    proto.Msg_PullCardRsp = (function() {

        /**
         * Properties of a Msg_PullCardRsp.
         * @memberof proto
         * @interface IMsg_PullCardRsp
         * @property {proto.Msg_PullCardRsp.ErrorCode|null} [result] Msg_PullCardRsp result
         * @property {proto.PullCardType|null} [pullCardType] Msg_PullCardRsp pullCardType
         * @property {number|null} [pullCount] Msg_PullCardRsp pullCount
         * @property {Array.<proto.IRewardSimpleInfo>|null} [cards] Msg_PullCardRsp cards
         * @property {number|null} [leftBuySuperBoxCount] Msg_PullCardRsp leftBuySuperBoxCount
         */

        /**
         * Constructs a new Msg_PullCardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PullCardRsp.
         * @implements IMsg_PullCardRsp
         * @constructor
         * @param {proto.IMsg_PullCardRsp=} [p] Properties to set
         */
        function Msg_PullCardRsp(p) {
            this.cards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PullCardRsp result.
         * @member {proto.Msg_PullCardRsp.ErrorCode} result
         * @memberof proto.Msg_PullCardRsp
         * @instance
         */
        Msg_PullCardRsp.prototype.result = 0;

        /**
         * Msg_PullCardRsp pullCardType.
         * @member {proto.PullCardType} pullCardType
         * @memberof proto.Msg_PullCardRsp
         * @instance
         */
        Msg_PullCardRsp.prototype.pullCardType = 0;

        /**
         * Msg_PullCardRsp pullCount.
         * @member {number} pullCount
         * @memberof proto.Msg_PullCardRsp
         * @instance
         */
        Msg_PullCardRsp.prototype.pullCount = 0;

        /**
         * Msg_PullCardRsp cards.
         * @member {Array.<proto.IRewardSimpleInfo>} cards
         * @memberof proto.Msg_PullCardRsp
         * @instance
         */
        Msg_PullCardRsp.prototype.cards = $util.emptyArray;

        /**
         * Msg_PullCardRsp leftBuySuperBoxCount.
         * @member {number} leftBuySuperBoxCount
         * @memberof proto.Msg_PullCardRsp
         * @instance
         */
        Msg_PullCardRsp.prototype.leftBuySuperBoxCount = 0;

        /**
         * Encodes the specified Msg_PullCardRsp message. Does not implicitly {@link proto.Msg_PullCardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PullCardRsp
         * @static
         * @param {proto.IMsg_PullCardRsp} m Msg_PullCardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PullCardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.pullCardType != null && Object.hasOwnProperty.call(m, "pullCardType"))
                w.uint32(16).int32(m.pullCardType);
            if (m.pullCount != null && Object.hasOwnProperty.call(m, "pullCount"))
                w.uint32(24).int32(m.pullCount);
            if (m.cards != null && m.cards.length) {
                for (var i = 0; i < m.cards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.cards[i], w.uint32(34).fork()).ldelim();
            }
            if (m.leftBuySuperBoxCount != null && Object.hasOwnProperty.call(m, "leftBuySuperBoxCount"))
                w.uint32(40).int32(m.leftBuySuperBoxCount);
            return w;
        };

        /**
         * Decodes a Msg_PullCardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PullCardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PullCardRsp} Msg_PullCardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PullCardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PullCardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.pullCardType = r.int32();
                    break;
                case 3:
                    m.pullCount = r.int32();
                    break;
                case 4:
                    if (!(m.cards && m.cards.length))
                        m.cards = [];
                    m.cards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 5:
                    m.leftBuySuperBoxCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_PullCardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Error=1 Error value
         * @property {number} NoFreeCount=2 NoFreeCount value
         * @property {number} NoMoney=3 NoMoney value
         * @property {number} NoPullCount=4 NoPullCount value
         */
        Msg_PullCardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Error"] = 1;
            values[valuesById[2] = "NoFreeCount"] = 2;
            values[valuesById[3] = "NoMoney"] = 3;
            values[valuesById[4] = "NoPullCount"] = 4;
            return values;
        })();

        return Msg_PullCardRsp;
    })();

    proto.Msg_CheckServerUTCTime = (function() {

        /**
         * Properties of a Msg_CheckServerUTCTime.
         * @memberof proto
         * @interface IMsg_CheckServerUTCTime
         * @property {number|Long|null} [serverUTC] Msg_CheckServerUTCTime serverUTC
         */

        /**
         * Constructs a new Msg_CheckServerUTCTime.
         * @memberof proto
         * @classdesc Represents a Msg_CheckServerUTCTime.
         * @implements IMsg_CheckServerUTCTime
         * @constructor
         * @param {proto.IMsg_CheckServerUTCTime=} [p] Properties to set
         */
        function Msg_CheckServerUTCTime(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CheckServerUTCTime serverUTC.
         * @member {number|Long} serverUTC
         * @memberof proto.Msg_CheckServerUTCTime
         * @instance
         */
        Msg_CheckServerUTCTime.prototype.serverUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified Msg_CheckServerUTCTime message. Does not implicitly {@link proto.Msg_CheckServerUTCTime.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CheckServerUTCTime
         * @static
         * @param {proto.IMsg_CheckServerUTCTime} m Msg_CheckServerUTCTime message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CheckServerUTCTime.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.serverUTC != null && Object.hasOwnProperty.call(m, "serverUTC"))
                w.uint32(8).int64(m.serverUTC);
            return w;
        };

        /**
         * Decodes a Msg_CheckServerUTCTime message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CheckServerUTCTime
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CheckServerUTCTime} Msg_CheckServerUTCTime
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CheckServerUTCTime.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CheckServerUTCTime();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.serverUTC = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CheckServerUTCTime;
    })();

    proto.Msg_ChangeTeamIndexReq = (function() {

        /**
         * Properties of a Msg_ChangeTeamIndexReq.
         * @memberof proto
         * @interface IMsg_ChangeTeamIndexReq
         * @property {number|null} [deckIndex] Msg_ChangeTeamIndexReq deckIndex
         */

        /**
         * Constructs a new Msg_ChangeTeamIndexReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeTeamIndexReq.
         * @implements IMsg_ChangeTeamIndexReq
         * @constructor
         * @param {proto.IMsg_ChangeTeamIndexReq=} [p] Properties to set
         */
        function Msg_ChangeTeamIndexReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeTeamIndexReq deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_ChangeTeamIndexReq
         * @instance
         */
        Msg_ChangeTeamIndexReq.prototype.deckIndex = 0;

        /**
         * Encodes the specified Msg_ChangeTeamIndexReq message. Does not implicitly {@link proto.Msg_ChangeTeamIndexReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeTeamIndexReq
         * @static
         * @param {proto.IMsg_ChangeTeamIndexReq} m Msg_ChangeTeamIndexReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeTeamIndexReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(8).int32(m.deckIndex);
            return w;
        };

        /**
         * Decodes a Msg_ChangeTeamIndexReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeTeamIndexReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeTeamIndexReq} Msg_ChangeTeamIndexReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeTeamIndexReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeTeamIndexReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.deckIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeTeamIndexReq;
    })();

    proto.Msg_ChangeTeamIndexRsp = (function() {

        /**
         * Properties of a Msg_ChangeTeamIndexRsp.
         * @memberof proto
         * @interface IMsg_ChangeTeamIndexRsp
         * @property {proto.Msg_ChangeTeamIndexRsp.ErrorCode|null} [result] Msg_ChangeTeamIndexRsp result
         */

        /**
         * Constructs a new Msg_ChangeTeamIndexRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeTeamIndexRsp.
         * @implements IMsg_ChangeTeamIndexRsp
         * @constructor
         * @param {proto.IMsg_ChangeTeamIndexRsp=} [p] Properties to set
         */
        function Msg_ChangeTeamIndexRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeTeamIndexRsp result.
         * @member {proto.Msg_ChangeTeamIndexRsp.ErrorCode} result
         * @memberof proto.Msg_ChangeTeamIndexRsp
         * @instance
         */
        Msg_ChangeTeamIndexRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_ChangeTeamIndexRsp message. Does not implicitly {@link proto.Msg_ChangeTeamIndexRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeTeamIndexRsp
         * @static
         * @param {proto.IMsg_ChangeTeamIndexRsp} m Msg_ChangeTeamIndexRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeTeamIndexRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_ChangeTeamIndexRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeTeamIndexRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeTeamIndexRsp} Msg_ChangeTeamIndexRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeTeamIndexRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeTeamIndexRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChangeTeamIndexRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TeamIndexError=1 TeamIndexError value
         */
        Msg_ChangeTeamIndexRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TeamIndexError"] = 1;
            return values;
        })();

        return Msg_ChangeTeamIndexRsp;
    })();

    proto.Msg_ChangeNameReq = (function() {

        /**
         * Properties of a Msg_ChangeNameReq.
         * @memberof proto
         * @interface IMsg_ChangeNameReq
         * @property {string|null} [name] Msg_ChangeNameReq name
         */

        /**
         * Constructs a new Msg_ChangeNameReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeNameReq.
         * @implements IMsg_ChangeNameReq
         * @constructor
         * @param {proto.IMsg_ChangeNameReq=} [p] Properties to set
         */
        function Msg_ChangeNameReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeNameReq name.
         * @member {string} name
         * @memberof proto.Msg_ChangeNameReq
         * @instance
         */
        Msg_ChangeNameReq.prototype.name = "";

        /**
         * Encodes the specified Msg_ChangeNameReq message. Does not implicitly {@link proto.Msg_ChangeNameReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeNameReq
         * @static
         * @param {proto.IMsg_ChangeNameReq} m Msg_ChangeNameReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeNameReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(10).string(m.name);
            return w;
        };

        /**
         * Decodes a Msg_ChangeNameReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeNameReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeNameReq} Msg_ChangeNameReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeNameReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeNameReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.name = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeNameReq;
    })();

    proto.Msg_ChangeNameRsp = (function() {

        /**
         * Properties of a Msg_ChangeNameRsp.
         * @memberof proto
         * @interface IMsg_ChangeNameRsp
         * @property {proto.Msg_ChangeNameRsp.ErrorCode|null} [result] Msg_ChangeNameRsp result
         * @property {string|null} [name] Msg_ChangeNameRsp name
         */

        /**
         * Constructs a new Msg_ChangeNameRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeNameRsp.
         * @implements IMsg_ChangeNameRsp
         * @constructor
         * @param {proto.IMsg_ChangeNameRsp=} [p] Properties to set
         */
        function Msg_ChangeNameRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeNameRsp result.
         * @member {proto.Msg_ChangeNameRsp.ErrorCode} result
         * @memberof proto.Msg_ChangeNameRsp
         * @instance
         */
        Msg_ChangeNameRsp.prototype.result = 0;

        /**
         * Msg_ChangeNameRsp name.
         * @member {string} name
         * @memberof proto.Msg_ChangeNameRsp
         * @instance
         */
        Msg_ChangeNameRsp.prototype.name = "";

        /**
         * Encodes the specified Msg_ChangeNameRsp message. Does not implicitly {@link proto.Msg_ChangeNameRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeNameRsp
         * @static
         * @param {proto.IMsg_ChangeNameRsp} m Msg_ChangeNameRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeNameRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            return w;
        };

        /**
         * Decodes a Msg_ChangeNameRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeNameRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeNameRsp} Msg_ChangeNameRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeNameRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeNameRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChangeNameRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} SensitiveWordError=1 SensitiveWordError value
         * @property {number} LengthInvalid=2 LengthInvalid value
         * @property {number} NameRepeat=3 NameRepeat value
         * @property {number} DiamondNotEnough=4 DiamondNotEnough value
         */
        Msg_ChangeNameRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "SensitiveWordError"] = 1;
            values[valuesById[2] = "LengthInvalid"] = 2;
            values[valuesById[3] = "NameRepeat"] = 3;
            values[valuesById[4] = "DiamondNotEnough"] = 4;
            return values;
        })();

        return Msg_ChangeNameRsp;
    })();

    proto.Msg_HowManyTimesChangeNameReq = (function() {

        /**
         * Properties of a Msg_HowManyTimesChangeNameReq.
         * @memberof proto
         * @interface IMsg_HowManyTimesChangeNameReq
         */

        /**
         * Constructs a new Msg_HowManyTimesChangeNameReq.
         * @memberof proto
         * @classdesc Represents a Msg_HowManyTimesChangeNameReq.
         * @implements IMsg_HowManyTimesChangeNameReq
         * @constructor
         * @param {proto.IMsg_HowManyTimesChangeNameReq=} [p] Properties to set
         */
        function Msg_HowManyTimesChangeNameReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_HowManyTimesChangeNameReq message. Does not implicitly {@link proto.Msg_HowManyTimesChangeNameReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_HowManyTimesChangeNameReq
         * @static
         * @param {proto.IMsg_HowManyTimesChangeNameReq} m Msg_HowManyTimesChangeNameReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_HowManyTimesChangeNameReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_HowManyTimesChangeNameReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_HowManyTimesChangeNameReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_HowManyTimesChangeNameReq} Msg_HowManyTimesChangeNameReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_HowManyTimesChangeNameReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_HowManyTimesChangeNameReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_HowManyTimesChangeNameReq;
    })();

    proto.Msg_HowManyTimesChangeNameRsp = (function() {

        /**
         * Properties of a Msg_HowManyTimesChangeNameRsp.
         * @memberof proto
         * @interface IMsg_HowManyTimesChangeNameRsp
         * @property {number|null} [count] Msg_HowManyTimesChangeNameRsp count
         * @property {number|null} [costDiamond] Msg_HowManyTimesChangeNameRsp costDiamond
         */

        /**
         * Constructs a new Msg_HowManyTimesChangeNameRsp.
         * @memberof proto
         * @classdesc Represents a Msg_HowManyTimesChangeNameRsp.
         * @implements IMsg_HowManyTimesChangeNameRsp
         * @constructor
         * @param {proto.IMsg_HowManyTimesChangeNameRsp=} [p] Properties to set
         */
        function Msg_HowManyTimesChangeNameRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_HowManyTimesChangeNameRsp count.
         * @member {number} count
         * @memberof proto.Msg_HowManyTimesChangeNameRsp
         * @instance
         */
        Msg_HowManyTimesChangeNameRsp.prototype.count = 0;

        /**
         * Msg_HowManyTimesChangeNameRsp costDiamond.
         * @member {number} costDiamond
         * @memberof proto.Msg_HowManyTimesChangeNameRsp
         * @instance
         */
        Msg_HowManyTimesChangeNameRsp.prototype.costDiamond = 0;

        /**
         * Encodes the specified Msg_HowManyTimesChangeNameRsp message. Does not implicitly {@link proto.Msg_HowManyTimesChangeNameRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_HowManyTimesChangeNameRsp
         * @static
         * @param {proto.IMsg_HowManyTimesChangeNameRsp} m Msg_HowManyTimesChangeNameRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_HowManyTimesChangeNameRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.count != null && Object.hasOwnProperty.call(m, "count"))
                w.uint32(8).int32(m.count);
            if (m.costDiamond != null && Object.hasOwnProperty.call(m, "costDiamond"))
                w.uint32(16).int32(m.costDiamond);
            return w;
        };

        /**
         * Decodes a Msg_HowManyTimesChangeNameRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_HowManyTimesChangeNameRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_HowManyTimesChangeNameRsp} Msg_HowManyTimesChangeNameRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_HowManyTimesChangeNameRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_HowManyTimesChangeNameRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.count = r.int32();
                    break;
                case 2:
                    m.costDiamond = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_HowManyTimesChangeNameRsp;
    })();

    proto.RankBoxData = (function() {

        /**
         * Properties of a RankBoxData.
         * @memberof proto
         * @interface IRankBoxData
         * @property {number|null} [boxId] RankBoxData boxId
         * @property {number|null} [rankLevel] RankBoxData rankLevel
         * @property {proto.RankBoxData.BoxState|null} [state] RankBoxData state
         * @property {number|null} [unlockTime] RankBoxData unlockTime
         * @property {number|null} [startUnlockTime] RankBoxData startUnlockTime
         */

        /**
         * Constructs a new RankBoxData.
         * @memberof proto
         * @classdesc Represents a RankBoxData.
         * @implements IRankBoxData
         * @constructor
         * @param {proto.IRankBoxData=} [p] Properties to set
         */
        function RankBoxData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RankBoxData boxId.
         * @member {number} boxId
         * @memberof proto.RankBoxData
         * @instance
         */
        RankBoxData.prototype.boxId = 0;

        /**
         * RankBoxData rankLevel.
         * @member {number} rankLevel
         * @memberof proto.RankBoxData
         * @instance
         */
        RankBoxData.prototype.rankLevel = 0;

        /**
         * RankBoxData state.
         * @member {proto.RankBoxData.BoxState} state
         * @memberof proto.RankBoxData
         * @instance
         */
        RankBoxData.prototype.state = 0;

        /**
         * RankBoxData unlockTime.
         * @member {number} unlockTime
         * @memberof proto.RankBoxData
         * @instance
         */
        RankBoxData.prototype.unlockTime = 0;

        /**
         * RankBoxData startUnlockTime.
         * @member {number} startUnlockTime
         * @memberof proto.RankBoxData
         * @instance
         */
        RankBoxData.prototype.startUnlockTime = 0;

        /**
         * Encodes the specified RankBoxData message. Does not implicitly {@link proto.RankBoxData.verify|verify} messages.
         * @function encode
         * @memberof proto.RankBoxData
         * @static
         * @param {proto.IRankBoxData} m RankBoxData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankBoxData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxId != null && Object.hasOwnProperty.call(m, "boxId"))
                w.uint32(8).int32(m.boxId);
            if (m.rankLevel != null && Object.hasOwnProperty.call(m, "rankLevel"))
                w.uint32(16).int32(m.rankLevel);
            if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                w.uint32(24).int32(m.state);
            if (m.unlockTime != null && Object.hasOwnProperty.call(m, "unlockTime"))
                w.uint32(32).int32(m.unlockTime);
            if (m.startUnlockTime != null && Object.hasOwnProperty.call(m, "startUnlockTime"))
                w.uint32(40).int32(m.startUnlockTime);
            return w;
        };

        /**
         * Decodes a RankBoxData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RankBoxData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RankBoxData} RankBoxData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankBoxData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RankBoxData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxId = r.int32();
                    break;
                case 2:
                    m.rankLevel = r.int32();
                    break;
                case 3:
                    m.state = r.int32();
                    break;
                case 4:
                    m.unlockTime = r.int32();
                    break;
                case 5:
                    m.startUnlockTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * BoxState enum.
         * @name proto.RankBoxData.BoxState
         * @enum {number}
         * @property {number} None=0 None value
         * @property {number} Lock=1 Lock value
         * @property {number} Unlocking=2 Unlocking value
         * @property {number} Reserve=3 Reserve value
         * @property {number} Unlocked=4 Unlocked value
         */
        RankBoxData.BoxState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "None"] = 0;
            values[valuesById[1] = "Lock"] = 1;
            values[valuesById[2] = "Unlocking"] = 2;
            values[valuesById[3] = "Reserve"] = 3;
            values[valuesById[4] = "Unlocked"] = 4;
            return values;
        })();

        return RankBoxData;
    })();

    proto.RankPackageData = (function() {

        /**
         * Properties of a RankPackageData.
         * @memberof proto
         * @interface IRankPackageData
         * @property {Array.<proto.IRankBoxData>|null} [rankBoxList] RankPackageData rankBoxList
         * @property {number|null} [boxLoopId] RankPackageData boxLoopId
         */

        /**
         * Constructs a new RankPackageData.
         * @memberof proto
         * @classdesc Represents a RankPackageData.
         * @implements IRankPackageData
         * @constructor
         * @param {proto.IRankPackageData=} [p] Properties to set
         */
        function RankPackageData(p) {
            this.rankBoxList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RankPackageData rankBoxList.
         * @member {Array.<proto.IRankBoxData>} rankBoxList
         * @memberof proto.RankPackageData
         * @instance
         */
        RankPackageData.prototype.rankBoxList = $util.emptyArray;

        /**
         * RankPackageData boxLoopId.
         * @member {number} boxLoopId
         * @memberof proto.RankPackageData
         * @instance
         */
        RankPackageData.prototype.boxLoopId = 0;

        /**
         * Encodes the specified RankPackageData message. Does not implicitly {@link proto.RankPackageData.verify|verify} messages.
         * @function encode
         * @memberof proto.RankPackageData
         * @static
         * @param {proto.IRankPackageData} m RankPackageData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankPackageData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankBoxList != null && m.rankBoxList.length) {
                for (var i = 0; i < m.rankBoxList.length; ++i)
                    $root.proto.RankBoxData.encode(m.rankBoxList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.boxLoopId != null && Object.hasOwnProperty.call(m, "boxLoopId"))
                w.uint32(16).int32(m.boxLoopId);
            return w;
        };

        /**
         * Decodes a RankPackageData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RankPackageData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RankPackageData} RankPackageData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankPackageData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RankPackageData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rankBoxList && m.rankBoxList.length))
                        m.rankBoxList = [];
                    m.rankBoxList.push($root.proto.RankBoxData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.boxLoopId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RankPackageData;
    })();

    proto.Msg_GetRankPackageInfoReq = (function() {

        /**
         * Properties of a Msg_GetRankPackageInfoReq.
         * @memberof proto
         * @interface IMsg_GetRankPackageInfoReq
         */

        /**
         * Constructs a new Msg_GetRankPackageInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetRankPackageInfoReq.
         * @implements IMsg_GetRankPackageInfoReq
         * @constructor
         * @param {proto.IMsg_GetRankPackageInfoReq=} [p] Properties to set
         */
        function Msg_GetRankPackageInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetRankPackageInfoReq message. Does not implicitly {@link proto.Msg_GetRankPackageInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetRankPackageInfoReq
         * @static
         * @param {proto.IMsg_GetRankPackageInfoReq} m Msg_GetRankPackageInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetRankPackageInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetRankPackageInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetRankPackageInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetRankPackageInfoReq} Msg_GetRankPackageInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetRankPackageInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetRankPackageInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetRankPackageInfoReq;
    })();

    proto.Msg_GetRankPackageInfoRsp = (function() {

        /**
         * Properties of a Msg_GetRankPackageInfoRsp.
         * @memberof proto
         * @interface IMsg_GetRankPackageInfoRsp
         * @property {Array.<proto.IRankBoxData>|null} [rankBoxList] Msg_GetRankPackageInfoRsp rankBoxList
         */

        /**
         * Constructs a new Msg_GetRankPackageInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetRankPackageInfoRsp.
         * @implements IMsg_GetRankPackageInfoRsp
         * @constructor
         * @param {proto.IMsg_GetRankPackageInfoRsp=} [p] Properties to set
         */
        function Msg_GetRankPackageInfoRsp(p) {
            this.rankBoxList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetRankPackageInfoRsp rankBoxList.
         * @member {Array.<proto.IRankBoxData>} rankBoxList
         * @memberof proto.Msg_GetRankPackageInfoRsp
         * @instance
         */
        Msg_GetRankPackageInfoRsp.prototype.rankBoxList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetRankPackageInfoRsp message. Does not implicitly {@link proto.Msg_GetRankPackageInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetRankPackageInfoRsp
         * @static
         * @param {proto.IMsg_GetRankPackageInfoRsp} m Msg_GetRankPackageInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetRankPackageInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankBoxList != null && m.rankBoxList.length) {
                for (var i = 0; i < m.rankBoxList.length; ++i)
                    $root.proto.RankBoxData.encode(m.rankBoxList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetRankPackageInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetRankPackageInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetRankPackageInfoRsp} Msg_GetRankPackageInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetRankPackageInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetRankPackageInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rankBoxList && m.rankBoxList.length))
                        m.rankBoxList = [];
                    m.rankBoxList.push($root.proto.RankBoxData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetRankPackageInfoRsp;
    })();

    proto.Msg_UnlockRankBoxReq = (function() {

        /**
         * Properties of a Msg_UnlockRankBoxReq.
         * @memberof proto
         * @interface IMsg_UnlockRankBoxReq
         * @property {number|null} [boxPosIndex] Msg_UnlockRankBoxReq boxPosIndex
         */

        /**
         * Constructs a new Msg_UnlockRankBoxReq.
         * @memberof proto
         * @classdesc Represents a Msg_UnlockRankBoxReq.
         * @implements IMsg_UnlockRankBoxReq
         * @constructor
         * @param {proto.IMsg_UnlockRankBoxReq=} [p] Properties to set
         */
        function Msg_UnlockRankBoxReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_UnlockRankBoxReq boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_UnlockRankBoxReq
         * @instance
         */
        Msg_UnlockRankBoxReq.prototype.boxPosIndex = 0;

        /**
         * Encodes the specified Msg_UnlockRankBoxReq message. Does not implicitly {@link proto.Msg_UnlockRankBoxReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_UnlockRankBoxReq
         * @static
         * @param {proto.IMsg_UnlockRankBoxReq} m Msg_UnlockRankBoxReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_UnlockRankBoxReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(8).int32(m.boxPosIndex);
            return w;
        };

        /**
         * Decodes a Msg_UnlockRankBoxReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_UnlockRankBoxReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_UnlockRankBoxReq} Msg_UnlockRankBoxReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_UnlockRankBoxReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_UnlockRankBoxReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxPosIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_UnlockRankBoxReq;
    })();

    proto.Msg_UnlockRankBoxRsp = (function() {

        /**
         * Properties of a Msg_UnlockRankBoxRsp.
         * @memberof proto
         * @interface IMsg_UnlockRankBoxRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_UnlockRankBoxRsp result
         * @property {number|null} [boxPosIndex] Msg_UnlockRankBoxRsp boxPosIndex
         * @property {proto.IRankBoxData|null} [curBox] Msg_UnlockRankBoxRsp curBox
         */

        /**
         * Constructs a new Msg_UnlockRankBoxRsp.
         * @memberof proto
         * @classdesc Represents a Msg_UnlockRankBoxRsp.
         * @implements IMsg_UnlockRankBoxRsp
         * @constructor
         * @param {proto.IMsg_UnlockRankBoxRsp=} [p] Properties to set
         */
        function Msg_UnlockRankBoxRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_UnlockRankBoxRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_UnlockRankBoxRsp
         * @instance
         */
        Msg_UnlockRankBoxRsp.prototype.result = 0;

        /**
         * Msg_UnlockRankBoxRsp boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_UnlockRankBoxRsp
         * @instance
         */
        Msg_UnlockRankBoxRsp.prototype.boxPosIndex = 0;

        /**
         * Msg_UnlockRankBoxRsp curBox.
         * @member {proto.IRankBoxData|null|undefined} curBox
         * @memberof proto.Msg_UnlockRankBoxRsp
         * @instance
         */
        Msg_UnlockRankBoxRsp.prototype.curBox = null;

        /**
         * Encodes the specified Msg_UnlockRankBoxRsp message. Does not implicitly {@link proto.Msg_UnlockRankBoxRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_UnlockRankBoxRsp
         * @static
         * @param {proto.IMsg_UnlockRankBoxRsp} m Msg_UnlockRankBoxRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_UnlockRankBoxRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(16).int32(m.boxPosIndex);
            if (m.curBox != null && Object.hasOwnProperty.call(m, "curBox"))
                $root.proto.RankBoxData.encode(m.curBox, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_UnlockRankBoxRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_UnlockRankBoxRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_UnlockRankBoxRsp} Msg_UnlockRankBoxRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_UnlockRankBoxRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_UnlockRankBoxRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.boxPosIndex = r.int32();
                    break;
                case 3:
                    m.curBox = $root.proto.RankBoxData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_UnlockRankBoxRsp;
    })();

    proto.Msg_ReserveRankBoxReq = (function() {

        /**
         * Properties of a Msg_ReserveRankBoxReq.
         * @memberof proto
         * @interface IMsg_ReserveRankBoxReq
         * @property {number|null} [boxPosIndex] Msg_ReserveRankBoxReq boxPosIndex
         */

        /**
         * Constructs a new Msg_ReserveRankBoxReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReserveRankBoxReq.
         * @implements IMsg_ReserveRankBoxReq
         * @constructor
         * @param {proto.IMsg_ReserveRankBoxReq=} [p] Properties to set
         */
        function Msg_ReserveRankBoxReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReserveRankBoxReq boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_ReserveRankBoxReq
         * @instance
         */
        Msg_ReserveRankBoxReq.prototype.boxPosIndex = 0;

        /**
         * Encodes the specified Msg_ReserveRankBoxReq message. Does not implicitly {@link proto.Msg_ReserveRankBoxReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReserveRankBoxReq
         * @static
         * @param {proto.IMsg_ReserveRankBoxReq} m Msg_ReserveRankBoxReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReserveRankBoxReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(8).int32(m.boxPosIndex);
            return w;
        };

        /**
         * Decodes a Msg_ReserveRankBoxReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReserveRankBoxReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReserveRankBoxReq} Msg_ReserveRankBoxReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReserveRankBoxReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReserveRankBoxReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxPosIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReserveRankBoxReq;
    })();

    proto.Msg_ReserveRankBoxRsp = (function() {

        /**
         * Properties of a Msg_ReserveRankBoxRsp.
         * @memberof proto
         * @interface IMsg_ReserveRankBoxRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ReserveRankBoxRsp result
         * @property {number|null} [boxPosIndex] Msg_ReserveRankBoxRsp boxPosIndex
         */

        /**
         * Constructs a new Msg_ReserveRankBoxRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReserveRankBoxRsp.
         * @implements IMsg_ReserveRankBoxRsp
         * @constructor
         * @param {proto.IMsg_ReserveRankBoxRsp=} [p] Properties to set
         */
        function Msg_ReserveRankBoxRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReserveRankBoxRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ReserveRankBoxRsp
         * @instance
         */
        Msg_ReserveRankBoxRsp.prototype.result = 0;

        /**
         * Msg_ReserveRankBoxRsp boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_ReserveRankBoxRsp
         * @instance
         */
        Msg_ReserveRankBoxRsp.prototype.boxPosIndex = 0;

        /**
         * Encodes the specified Msg_ReserveRankBoxRsp message. Does not implicitly {@link proto.Msg_ReserveRankBoxRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReserveRankBoxRsp
         * @static
         * @param {proto.IMsg_ReserveRankBoxRsp} m Msg_ReserveRankBoxRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReserveRankBoxRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(16).int32(m.boxPosIndex);
            return w;
        };

        /**
         * Decodes a Msg_ReserveRankBoxRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReserveRankBoxRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReserveRankBoxRsp} Msg_ReserveRankBoxRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReserveRankBoxRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReserveRankBoxRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.boxPosIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReserveRankBoxRsp;
    })();

    proto.Msg_OpenRankBoxReq = (function() {

        /**
         * Properties of a Msg_OpenRankBoxReq.
         * @memberof proto
         * @interface IMsg_OpenRankBoxReq
         * @property {number|null} [boxPosIndex] Msg_OpenRankBoxReq boxPosIndex
         */

        /**
         * Constructs a new Msg_OpenRankBoxReq.
         * @memberof proto
         * @classdesc Represents a Msg_OpenRankBoxReq.
         * @implements IMsg_OpenRankBoxReq
         * @constructor
         * @param {proto.IMsg_OpenRankBoxReq=} [p] Properties to set
         */
        function Msg_OpenRankBoxReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OpenRankBoxReq boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_OpenRankBoxReq
         * @instance
         */
        Msg_OpenRankBoxReq.prototype.boxPosIndex = 0;

        /**
         * Encodes the specified Msg_OpenRankBoxReq message. Does not implicitly {@link proto.Msg_OpenRankBoxReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OpenRankBoxReq
         * @static
         * @param {proto.IMsg_OpenRankBoxReq} m Msg_OpenRankBoxReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OpenRankBoxReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(8).int32(m.boxPosIndex);
            return w;
        };

        /**
         * Decodes a Msg_OpenRankBoxReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OpenRankBoxReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OpenRankBoxReq} Msg_OpenRankBoxReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OpenRankBoxReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OpenRankBoxReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxPosIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OpenRankBoxReq;
    })();

    proto.Msg_OpenRankBoxRsp = (function() {

        /**
         * Properties of a Msg_OpenRankBoxRsp.
         * @memberof proto
         * @interface IMsg_OpenRankBoxRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_OpenRankBoxRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_OpenRankBoxRsp rewards
         * @property {number|null} [boxPosIndex] Msg_OpenRankBoxRsp boxPosIndex
         */

        /**
         * Constructs a new Msg_OpenRankBoxRsp.
         * @memberof proto
         * @classdesc Represents a Msg_OpenRankBoxRsp.
         * @implements IMsg_OpenRankBoxRsp
         * @constructor
         * @param {proto.IMsg_OpenRankBoxRsp=} [p] Properties to set
         */
        function Msg_OpenRankBoxRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OpenRankBoxRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_OpenRankBoxRsp
         * @instance
         */
        Msg_OpenRankBoxRsp.prototype.result = 0;

        /**
         * Msg_OpenRankBoxRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_OpenRankBoxRsp
         * @instance
         */
        Msg_OpenRankBoxRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_OpenRankBoxRsp boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_OpenRankBoxRsp
         * @instance
         */
        Msg_OpenRankBoxRsp.prototype.boxPosIndex = 0;

        /**
         * Encodes the specified Msg_OpenRankBoxRsp message. Does not implicitly {@link proto.Msg_OpenRankBoxRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OpenRankBoxRsp
         * @static
         * @param {proto.IMsg_OpenRankBoxRsp} m Msg_OpenRankBoxRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OpenRankBoxRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(24).int32(m.boxPosIndex);
            return w;
        };

        /**
         * Decodes a Msg_OpenRankBoxRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OpenRankBoxRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OpenRankBoxRsp} Msg_OpenRankBoxRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OpenRankBoxRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OpenRankBoxRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.boxPosIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OpenRankBoxRsp;
    })();

    /**
     * OpenRankBoxType enum.
     * @name proto.OpenRankBoxType
     * @enum {number}
     * @property {number} ORB_Diamond=0 ORB_Diamond value
     * @property {number} ORB_AD=1 ORB_AD value
     */
    proto.OpenRankBoxType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ORB_Diamond"] = 0;
        values[valuesById[1] = "ORB_AD"] = 1;
        return values;
    })();

    proto.Msg_ImmediatelyOpenRankBoxReq = (function() {

        /**
         * Properties of a Msg_ImmediatelyOpenRankBoxReq.
         * @memberof proto
         * @interface IMsg_ImmediatelyOpenRankBoxReq
         * @property {number|null} [boxPosIndex] Msg_ImmediatelyOpenRankBoxReq boxPosIndex
         * @property {proto.OpenRankBoxType|null} [openType] Msg_ImmediatelyOpenRankBoxReq openType
         */

        /**
         * Constructs a new Msg_ImmediatelyOpenRankBoxReq.
         * @memberof proto
         * @classdesc Represents a Msg_ImmediatelyOpenRankBoxReq.
         * @implements IMsg_ImmediatelyOpenRankBoxReq
         * @constructor
         * @param {proto.IMsg_ImmediatelyOpenRankBoxReq=} [p] Properties to set
         */
        function Msg_ImmediatelyOpenRankBoxReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ImmediatelyOpenRankBoxReq boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_ImmediatelyOpenRankBoxReq
         * @instance
         */
        Msg_ImmediatelyOpenRankBoxReq.prototype.boxPosIndex = 0;

        /**
         * Msg_ImmediatelyOpenRankBoxReq openType.
         * @member {proto.OpenRankBoxType} openType
         * @memberof proto.Msg_ImmediatelyOpenRankBoxReq
         * @instance
         */
        Msg_ImmediatelyOpenRankBoxReq.prototype.openType = 0;

        /**
         * Encodes the specified Msg_ImmediatelyOpenRankBoxReq message. Does not implicitly {@link proto.Msg_ImmediatelyOpenRankBoxReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ImmediatelyOpenRankBoxReq
         * @static
         * @param {proto.IMsg_ImmediatelyOpenRankBoxReq} m Msg_ImmediatelyOpenRankBoxReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ImmediatelyOpenRankBoxReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(8).int32(m.boxPosIndex);
            if (m.openType != null && Object.hasOwnProperty.call(m, "openType"))
                w.uint32(16).int32(m.openType);
            return w;
        };

        /**
         * Decodes a Msg_ImmediatelyOpenRankBoxReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ImmediatelyOpenRankBoxReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ImmediatelyOpenRankBoxReq} Msg_ImmediatelyOpenRankBoxReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ImmediatelyOpenRankBoxReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ImmediatelyOpenRankBoxReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxPosIndex = r.int32();
                    break;
                case 2:
                    m.openType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ImmediatelyOpenRankBoxReq;
    })();

    proto.Msg_ImmediatelyOpenRankBoxRsp = (function() {

        /**
         * Properties of a Msg_ImmediatelyOpenRankBoxRsp.
         * @memberof proto
         * @interface IMsg_ImmediatelyOpenRankBoxRsp
         * @property {proto.Msg_ImmediatelyOpenRankBoxRsp.ErrorCode|null} [result] Msg_ImmediatelyOpenRankBoxRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_ImmediatelyOpenRankBoxRsp rewards
         * @property {number|null} [boxPosIndex] Msg_ImmediatelyOpenRankBoxRsp boxPosIndex
         */

        /**
         * Constructs a new Msg_ImmediatelyOpenRankBoxRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ImmediatelyOpenRankBoxRsp.
         * @implements IMsg_ImmediatelyOpenRankBoxRsp
         * @constructor
         * @param {proto.IMsg_ImmediatelyOpenRankBoxRsp=} [p] Properties to set
         */
        function Msg_ImmediatelyOpenRankBoxRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ImmediatelyOpenRankBoxRsp result.
         * @member {proto.Msg_ImmediatelyOpenRankBoxRsp.ErrorCode} result
         * @memberof proto.Msg_ImmediatelyOpenRankBoxRsp
         * @instance
         */
        Msg_ImmediatelyOpenRankBoxRsp.prototype.result = 0;

        /**
         * Msg_ImmediatelyOpenRankBoxRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_ImmediatelyOpenRankBoxRsp
         * @instance
         */
        Msg_ImmediatelyOpenRankBoxRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_ImmediatelyOpenRankBoxRsp boxPosIndex.
         * @member {number} boxPosIndex
         * @memberof proto.Msg_ImmediatelyOpenRankBoxRsp
         * @instance
         */
        Msg_ImmediatelyOpenRankBoxRsp.prototype.boxPosIndex = 0;

        /**
         * Encodes the specified Msg_ImmediatelyOpenRankBoxRsp message. Does not implicitly {@link proto.Msg_ImmediatelyOpenRankBoxRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ImmediatelyOpenRankBoxRsp
         * @static
         * @param {proto.IMsg_ImmediatelyOpenRankBoxRsp} m Msg_ImmediatelyOpenRankBoxRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ImmediatelyOpenRankBoxRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.boxPosIndex != null && Object.hasOwnProperty.call(m, "boxPosIndex"))
                w.uint32(24).int32(m.boxPosIndex);
            return w;
        };

        /**
         * Decodes a Msg_ImmediatelyOpenRankBoxRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ImmediatelyOpenRankBoxRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ImmediatelyOpenRankBoxRsp} Msg_ImmediatelyOpenRankBoxRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ImmediatelyOpenRankBoxRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ImmediatelyOpenRankBoxRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.boxPosIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ImmediatelyOpenRankBoxRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} NotEnoughDiamond=1 NotEnoughDiamond value
         * @property {number} OperatorFailed=2 OperatorFailed value
         */
        Msg_ImmediatelyOpenRankBoxRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "NotEnoughDiamond"] = 1;
            values[valuesById[2] = "OperatorFailed"] = 2;
            return values;
        })();

        return Msg_ImmediatelyOpenRankBoxRsp;
    })();

    proto.Msg_PushPreventIndulge = (function() {

        /**
         * Properties of a Msg_PushPreventIndulge.
         * @memberof proto
         * @interface IMsg_PushPreventIndulge
         * @property {proto.Msg_PushPreventIndulge.PreventIndulgeType|null} [type] Msg_PushPreventIndulge type
         */

        /**
         * Constructs a new Msg_PushPreventIndulge.
         * @memberof proto
         * @classdesc Represents a Msg_PushPreventIndulge.
         * @implements IMsg_PushPreventIndulge
         * @constructor
         * @param {proto.IMsg_PushPreventIndulge=} [p] Properties to set
         */
        function Msg_PushPreventIndulge(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushPreventIndulge type.
         * @member {proto.Msg_PushPreventIndulge.PreventIndulgeType} type
         * @memberof proto.Msg_PushPreventIndulge
         * @instance
         */
        Msg_PushPreventIndulge.prototype.type = 0;

        /**
         * Encodes the specified Msg_PushPreventIndulge message. Does not implicitly {@link proto.Msg_PushPreventIndulge.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushPreventIndulge
         * @static
         * @param {proto.IMsg_PushPreventIndulge} m Msg_PushPreventIndulge message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushPreventIndulge.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            return w;
        };

        /**
         * Decodes a Msg_PushPreventIndulge message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushPreventIndulge
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushPreventIndulge} Msg_PushPreventIndulge
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushPreventIndulge.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushPreventIndulge();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * PreventIndulgeType enum.
         * @name proto.Msg_PushPreventIndulge.PreventIndulgeType
         * @enum {number}
         * @property {number} None=0 None value
         * @property {number} KickingOffLine=1 KickingOffLine value
         * @property {number} PayNotAdult=2 PayNotAdult value
         * @property {number} SpecialTime=3 SpecialTime value
         */
        Msg_PushPreventIndulge.PreventIndulgeType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "None"] = 0;
            values[valuesById[1] = "KickingOffLine"] = 1;
            values[valuesById[2] = "PayNotAdult"] = 2;
            values[valuesById[3] = "SpecialTime"] = 3;
            return values;
        })();

        return Msg_PushPreventIndulge;
    })();

    proto.Msg_PushDailyRefresh = (function() {

        /**
         * Properties of a Msg_PushDailyRefresh.
         * @memberof proto
         * @interface IMsg_PushDailyRefresh
         */

        /**
         * Constructs a new Msg_PushDailyRefresh.
         * @memberof proto
         * @classdesc Represents a Msg_PushDailyRefresh.
         * @implements IMsg_PushDailyRefresh
         * @constructor
         * @param {proto.IMsg_PushDailyRefresh=} [p] Properties to set
         */
        function Msg_PushDailyRefresh(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_PushDailyRefresh message. Does not implicitly {@link proto.Msg_PushDailyRefresh.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushDailyRefresh
         * @static
         * @param {proto.IMsg_PushDailyRefresh} m Msg_PushDailyRefresh message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushDailyRefresh.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_PushDailyRefresh message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushDailyRefresh
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushDailyRefresh} Msg_PushDailyRefresh
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushDailyRefresh.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushDailyRefresh();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushDailyRefresh;
    })();

    proto.Msg_TaskInfoReq = (function() {

        /**
         * Properties of a Msg_TaskInfoReq.
         * @memberof proto
         * @interface IMsg_TaskInfoReq
         */

        /**
         * Constructs a new Msg_TaskInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_TaskInfoReq.
         * @implements IMsg_TaskInfoReq
         * @constructor
         * @param {proto.IMsg_TaskInfoReq=} [p] Properties to set
         */
        function Msg_TaskInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_TaskInfoReq message. Does not implicitly {@link proto.Msg_TaskInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskInfoReq
         * @static
         * @param {proto.IMsg_TaskInfoReq} m Msg_TaskInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_TaskInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskInfoReq} Msg_TaskInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskInfoReq;
    })();

    proto.GiftData = (function() {

        /**
         * Properties of a GiftData.
         * @memberof proto
         * @interface IGiftData
         * @property {string|null} [UUId] GiftData UUId
         * @property {number|null} [giftId] GiftData giftId
         * @property {proto.TaskState|null} [state] GiftData state
         * @property {number|Long|null} [refreshUTC] GiftData refreshUTC
         */

        /**
         * Constructs a new GiftData.
         * @memberof proto
         * @classdesc Represents a GiftData.
         * @implements IGiftData
         * @constructor
         * @param {proto.IGiftData=} [p] Properties to set
         */
        function GiftData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GiftData UUId.
         * @member {string} UUId
         * @memberof proto.GiftData
         * @instance
         */
        GiftData.prototype.UUId = "";

        /**
         * GiftData giftId.
         * @member {number} giftId
         * @memberof proto.GiftData
         * @instance
         */
        GiftData.prototype.giftId = 0;

        /**
         * GiftData state.
         * @member {proto.TaskState} state
         * @memberof proto.GiftData
         * @instance
         */
        GiftData.prototype.state = 0;

        /**
         * GiftData refreshUTC.
         * @member {number|Long} refreshUTC
         * @memberof proto.GiftData
         * @instance
         */
        GiftData.prototype.refreshUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified GiftData message. Does not implicitly {@link proto.GiftData.verify|verify} messages.
         * @function encode
         * @memberof proto.GiftData
         * @static
         * @param {proto.IGiftData} m GiftData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.UUId != null && Object.hasOwnProperty.call(m, "UUId"))
                w.uint32(10).string(m.UUId);
            if (m.giftId != null && Object.hasOwnProperty.call(m, "giftId"))
                w.uint32(16).int32(m.giftId);
            if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                w.uint32(24).int32(m.state);
            if (m.refreshUTC != null && Object.hasOwnProperty.call(m, "refreshUTC"))
                w.uint32(32).int64(m.refreshUTC);
            return w;
        };

        /**
         * Decodes a GiftData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GiftData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GiftData} GiftData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GiftData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.UUId = r.string();
                    break;
                case 2:
                    m.giftId = r.int32();
                    break;
                case 3:
                    m.state = r.int32();
                    break;
                case 4:
                    m.refreshUTC = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GiftData;
    })();

    proto.TaskCommonData = (function() {

        /**
         * Properties of a TaskCommonData.
         * @memberof proto
         * @interface ITaskCommonData
         * @property {number|null} [goalBoxScore] TaskCommonData goalBoxScore
         * @property {number|null} [goalBoxId] TaskCommonData goalBoxId
         * @property {number|null} [boxGroupId] TaskCommonData boxGroupId
         * @property {Array.<proto.IGiftData>|null} [dailyGifts] TaskCommonData dailyGifts
         * @property {Array.<proto.ITaskData>|null} [dailyTasks] TaskCommonData dailyTasks
         * @property {number|null} [taskRefreshCount] TaskCommonData taskRefreshCount
         * @property {number|Long|null} [ADRefreshUTC] TaskCommonData ADRefreshUTC
         * @property {number|null} [RPRefreshByADCount] TaskCommonData RPRefreshByADCount
         * @property {number|null} [RPRefreshCount] TaskCommonData RPRefreshCount
         */

        /**
         * Constructs a new TaskCommonData.
         * @memberof proto
         * @classdesc Represents a TaskCommonData.
         * @implements ITaskCommonData
         * @constructor
         * @param {proto.ITaskCommonData=} [p] Properties to set
         */
        function TaskCommonData(p) {
            this.dailyGifts = [];
            this.dailyTasks = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * TaskCommonData goalBoxScore.
         * @member {number} goalBoxScore
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.goalBoxScore = 0;

        /**
         * TaskCommonData goalBoxId.
         * @member {number} goalBoxId
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.goalBoxId = 0;

        /**
         * TaskCommonData boxGroupId.
         * @member {number} boxGroupId
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.boxGroupId = 0;

        /**
         * TaskCommonData dailyGifts.
         * @member {Array.<proto.IGiftData>} dailyGifts
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.dailyGifts = $util.emptyArray;

        /**
         * TaskCommonData dailyTasks.
         * @member {Array.<proto.ITaskData>} dailyTasks
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.dailyTasks = $util.emptyArray;

        /**
         * TaskCommonData taskRefreshCount.
         * @member {number} taskRefreshCount
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.taskRefreshCount = 0;

        /**
         * TaskCommonData ADRefreshUTC.
         * @member {number|Long} ADRefreshUTC
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.ADRefreshUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * TaskCommonData RPRefreshByADCount.
         * @member {number} RPRefreshByADCount
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.RPRefreshByADCount = 0;

        /**
         * TaskCommonData RPRefreshCount.
         * @member {number} RPRefreshCount
         * @memberof proto.TaskCommonData
         * @instance
         */
        TaskCommonData.prototype.RPRefreshCount = 0;

        /**
         * Encodes the specified TaskCommonData message. Does not implicitly {@link proto.TaskCommonData.verify|verify} messages.
         * @function encode
         * @memberof proto.TaskCommonData
         * @static
         * @param {proto.ITaskCommonData} m TaskCommonData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskCommonData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.goalBoxScore != null && Object.hasOwnProperty.call(m, "goalBoxScore"))
                w.uint32(8).int32(m.goalBoxScore);
            if (m.goalBoxId != null && Object.hasOwnProperty.call(m, "goalBoxId"))
                w.uint32(16).int32(m.goalBoxId);
            if (m.boxGroupId != null && Object.hasOwnProperty.call(m, "boxGroupId"))
                w.uint32(24).int32(m.boxGroupId);
            if (m.dailyGifts != null && m.dailyGifts.length) {
                for (var i = 0; i < m.dailyGifts.length; ++i)
                    $root.proto.GiftData.encode(m.dailyGifts[i], w.uint32(34).fork()).ldelim();
            }
            if (m.dailyTasks != null && m.dailyTasks.length) {
                for (var i = 0; i < m.dailyTasks.length; ++i)
                    $root.proto.TaskData.encode(m.dailyTasks[i], w.uint32(42).fork()).ldelim();
            }
            if (m.taskRefreshCount != null && Object.hasOwnProperty.call(m, "taskRefreshCount"))
                w.uint32(48).int32(m.taskRefreshCount);
            if (m.ADRefreshUTC != null && Object.hasOwnProperty.call(m, "ADRefreshUTC"))
                w.uint32(56).int64(m.ADRefreshUTC);
            if (m.RPRefreshByADCount != null && Object.hasOwnProperty.call(m, "RPRefreshByADCount"))
                w.uint32(64).int32(m.RPRefreshByADCount);
            if (m.RPRefreshCount != null && Object.hasOwnProperty.call(m, "RPRefreshCount"))
                w.uint32(72).int32(m.RPRefreshCount);
            return w;
        };

        /**
         * Decodes a TaskCommonData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.TaskCommonData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.TaskCommonData} TaskCommonData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskCommonData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TaskCommonData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.goalBoxScore = r.int32();
                    break;
                case 2:
                    m.goalBoxId = r.int32();
                    break;
                case 3:
                    m.boxGroupId = r.int32();
                    break;
                case 4:
                    if (!(m.dailyGifts && m.dailyGifts.length))
                        m.dailyGifts = [];
                    m.dailyGifts.push($root.proto.GiftData.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.dailyTasks && m.dailyTasks.length))
                        m.dailyTasks = [];
                    m.dailyTasks.push($root.proto.TaskData.decode(r, r.uint32()));
                    break;
                case 6:
                    m.taskRefreshCount = r.int32();
                    break;
                case 7:
                    m.ADRefreshUTC = r.int64();
                    break;
                case 8:
                    m.RPRefreshByADCount = r.int32();
                    break;
                case 9:
                    m.RPRefreshCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return TaskCommonData;
    })();

    /**
     * TaskState enum.
     * @name proto.TaskState
     * @enum {number}
     * @property {number} Open=0 Open value
     * @property {number} Reward=1 Reward value
     * @property {number} HaveReward=2 HaveReward value
     * @property {number} UnOpen=3 UnOpen value
     */
    proto.TaskState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Open"] = 0;
        values[valuesById[1] = "Reward"] = 1;
        values[valuesById[2] = "HaveReward"] = 2;
        values[valuesById[3] = "UnOpen"] = 3;
        return values;
    })();

    proto.GiftInfo = (function() {

        /**
         * Properties of a GiftInfo.
         * @memberof proto
         * @interface IGiftInfo
         * @property {string|null} [UUId] GiftInfo UUId
         * @property {number|null} [giftId] GiftInfo giftId
         * @property {proto.TaskState|null} [state] GiftInfo state
         * @property {number|null} [leftSec] GiftInfo leftSec
         */

        /**
         * Constructs a new GiftInfo.
         * @memberof proto
         * @classdesc Represents a GiftInfo.
         * @implements IGiftInfo
         * @constructor
         * @param {proto.IGiftInfo=} [p] Properties to set
         */
        function GiftInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GiftInfo UUId.
         * @member {string} UUId
         * @memberof proto.GiftInfo
         * @instance
         */
        GiftInfo.prototype.UUId = "";

        /**
         * GiftInfo giftId.
         * @member {number} giftId
         * @memberof proto.GiftInfo
         * @instance
         */
        GiftInfo.prototype.giftId = 0;

        /**
         * GiftInfo state.
         * @member {proto.TaskState} state
         * @memberof proto.GiftInfo
         * @instance
         */
        GiftInfo.prototype.state = 0;

        /**
         * GiftInfo leftSec.
         * @member {number} leftSec
         * @memberof proto.GiftInfo
         * @instance
         */
        GiftInfo.prototype.leftSec = 0;

        /**
         * Encodes the specified GiftInfo message. Does not implicitly {@link proto.GiftInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.GiftInfo
         * @static
         * @param {proto.IGiftInfo} m GiftInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.UUId != null && Object.hasOwnProperty.call(m, "UUId"))
                w.uint32(10).string(m.UUId);
            if (m.giftId != null && Object.hasOwnProperty.call(m, "giftId"))
                w.uint32(16).int32(m.giftId);
            if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                w.uint32(24).int32(m.state);
            if (m.leftSec != null && Object.hasOwnProperty.call(m, "leftSec"))
                w.uint32(32).int32(m.leftSec);
            return w;
        };

        /**
         * Decodes a GiftInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GiftInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GiftInfo} GiftInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GiftInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.UUId = r.string();
                    break;
                case 2:
                    m.giftId = r.int32();
                    break;
                case 3:
                    m.state = r.int32();
                    break;
                case 4:
                    m.leftSec = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GiftInfo;
    })();

    proto.TaskData = (function() {

        /**
         * Properties of a TaskData.
         * @memberof proto
         * @interface ITaskData
         * @property {string|null} [UUId] TaskData UUId
         * @property {number|null} [taskId] TaskData taskId
         * @property {proto.TaskState|null} [state] TaskData state
         * @property {number|null} [score] TaskData score
         */

        /**
         * Constructs a new TaskData.
         * @memberof proto
         * @classdesc Represents a TaskData.
         * @implements ITaskData
         * @constructor
         * @param {proto.ITaskData=} [p] Properties to set
         */
        function TaskData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * TaskData UUId.
         * @member {string} UUId
         * @memberof proto.TaskData
         * @instance
         */
        TaskData.prototype.UUId = "";

        /**
         * TaskData taskId.
         * @member {number} taskId
         * @memberof proto.TaskData
         * @instance
         */
        TaskData.prototype.taskId = 0;

        /**
         * TaskData state.
         * @member {proto.TaskState} state
         * @memberof proto.TaskData
         * @instance
         */
        TaskData.prototype.state = 0;

        /**
         * TaskData score.
         * @member {number} score
         * @memberof proto.TaskData
         * @instance
         */
        TaskData.prototype.score = 0;

        /**
         * Encodes the specified TaskData message. Does not implicitly {@link proto.TaskData.verify|verify} messages.
         * @function encode
         * @memberof proto.TaskData
         * @static
         * @param {proto.ITaskData} m TaskData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaskData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.UUId != null && Object.hasOwnProperty.call(m, "UUId"))
                w.uint32(10).string(m.UUId);
            if (m.taskId != null && Object.hasOwnProperty.call(m, "taskId"))
                w.uint32(16).int32(m.taskId);
            if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                w.uint32(24).int32(m.state);
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(32).int32(m.score);
            return w;
        };

        /**
         * Decodes a TaskData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.TaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.TaskData} TaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaskData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.TaskData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.UUId = r.string();
                    break;
                case 2:
                    m.taskId = r.int32();
                    break;
                case 3:
                    m.state = r.int32();
                    break;
                case 4:
                    m.score = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return TaskData;
    })();

    proto.Msg_TaskInfoRsp = (function() {

        /**
         * Properties of a Msg_TaskInfoRsp.
         * @memberof proto
         * @interface IMsg_TaskInfoRsp
         * @property {number|null} [goalBoxScore] Msg_TaskInfoRsp goalBoxScore
         * @property {number|null} [boxGroupId] Msg_TaskInfoRsp boxGroupId
         * @property {Array.<proto.IGiftInfo>|null} [dailyGifts] Msg_TaskInfoRsp dailyGifts
         * @property {Array.<proto.ITaskData>|null} [dailyTasks] Msg_TaskInfoRsp dailyTasks
         * @property {number|null} [taskFreeRefreshTimes] Msg_TaskInfoRsp taskFreeRefreshTimes
         * @property {number|null} [adRefreshLeftSec] Msg_TaskInfoRsp adRefreshLeftSec
         * @property {number|null} [ADReplaceRefreshTimes] Msg_TaskInfoRsp ADReplaceRefreshTimes
         */

        /**
         * Constructs a new Msg_TaskInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_TaskInfoRsp.
         * @implements IMsg_TaskInfoRsp
         * @constructor
         * @param {proto.IMsg_TaskInfoRsp=} [p] Properties to set
         */
        function Msg_TaskInfoRsp(p) {
            this.dailyGifts = [];
            this.dailyTasks = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskInfoRsp goalBoxScore.
         * @member {number} goalBoxScore
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.goalBoxScore = 0;

        /**
         * Msg_TaskInfoRsp boxGroupId.
         * @member {number} boxGroupId
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.boxGroupId = 0;

        /**
         * Msg_TaskInfoRsp dailyGifts.
         * @member {Array.<proto.IGiftInfo>} dailyGifts
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.dailyGifts = $util.emptyArray;

        /**
         * Msg_TaskInfoRsp dailyTasks.
         * @member {Array.<proto.ITaskData>} dailyTasks
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.dailyTasks = $util.emptyArray;

        /**
         * Msg_TaskInfoRsp taskFreeRefreshTimes.
         * @member {number} taskFreeRefreshTimes
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.taskFreeRefreshTimes = 0;

        /**
         * Msg_TaskInfoRsp adRefreshLeftSec.
         * @member {number} adRefreshLeftSec
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.adRefreshLeftSec = 0;

        /**
         * Msg_TaskInfoRsp ADReplaceRefreshTimes.
         * @member {number} ADReplaceRefreshTimes
         * @memberof proto.Msg_TaskInfoRsp
         * @instance
         */
        Msg_TaskInfoRsp.prototype.ADReplaceRefreshTimes = 0;

        /**
         * Encodes the specified Msg_TaskInfoRsp message. Does not implicitly {@link proto.Msg_TaskInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskInfoRsp
         * @static
         * @param {proto.IMsg_TaskInfoRsp} m Msg_TaskInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.goalBoxScore != null && Object.hasOwnProperty.call(m, "goalBoxScore"))
                w.uint32(8).int32(m.goalBoxScore);
            if (m.boxGroupId != null && Object.hasOwnProperty.call(m, "boxGroupId"))
                w.uint32(16).int32(m.boxGroupId);
            if (m.dailyGifts != null && m.dailyGifts.length) {
                for (var i = 0; i < m.dailyGifts.length; ++i)
                    $root.proto.GiftInfo.encode(m.dailyGifts[i], w.uint32(26).fork()).ldelim();
            }
            if (m.dailyTasks != null && m.dailyTasks.length) {
                for (var i = 0; i < m.dailyTasks.length; ++i)
                    $root.proto.TaskData.encode(m.dailyTasks[i], w.uint32(34).fork()).ldelim();
            }
            if (m.taskFreeRefreshTimes != null && Object.hasOwnProperty.call(m, "taskFreeRefreshTimes"))
                w.uint32(40).int32(m.taskFreeRefreshTimes);
            if (m.adRefreshLeftSec != null && Object.hasOwnProperty.call(m, "adRefreshLeftSec"))
                w.uint32(48).int32(m.adRefreshLeftSec);
            if (m.ADReplaceRefreshTimes != null && Object.hasOwnProperty.call(m, "ADReplaceRefreshTimes"))
                w.uint32(56).int32(m.ADReplaceRefreshTimes);
            return w;
        };

        /**
         * Decodes a Msg_TaskInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskInfoRsp} Msg_TaskInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.goalBoxScore = r.int32();
                    break;
                case 2:
                    m.boxGroupId = r.int32();
                    break;
                case 3:
                    if (!(m.dailyGifts && m.dailyGifts.length))
                        m.dailyGifts = [];
                    m.dailyGifts.push($root.proto.GiftInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.dailyTasks && m.dailyTasks.length))
                        m.dailyTasks = [];
                    m.dailyTasks.push($root.proto.TaskData.decode(r, r.uint32()));
                    break;
                case 5:
                    m.taskFreeRefreshTimes = r.int32();
                    break;
                case 6:
                    m.adRefreshLeftSec = r.int32();
                    break;
                case 7:
                    m.ADReplaceRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskInfoRsp;
    })();

    proto.Msg_TaskGetGoalBoxReq = (function() {

        /**
         * Properties of a Msg_TaskGetGoalBoxReq.
         * @memberof proto
         * @interface IMsg_TaskGetGoalBoxReq
         * @property {number|null} [boxGroupId] Msg_TaskGetGoalBoxReq boxGroupId
         */

        /**
         * Constructs a new Msg_TaskGetGoalBoxReq.
         * @memberof proto
         * @classdesc Represents a Msg_TaskGetGoalBoxReq.
         * @implements IMsg_TaskGetGoalBoxReq
         * @constructor
         * @param {proto.IMsg_TaskGetGoalBoxReq=} [p] Properties to set
         */
        function Msg_TaskGetGoalBoxReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskGetGoalBoxReq boxGroupId.
         * @member {number} boxGroupId
         * @memberof proto.Msg_TaskGetGoalBoxReq
         * @instance
         */
        Msg_TaskGetGoalBoxReq.prototype.boxGroupId = 0;

        /**
         * Encodes the specified Msg_TaskGetGoalBoxReq message. Does not implicitly {@link proto.Msg_TaskGetGoalBoxReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskGetGoalBoxReq
         * @static
         * @param {proto.IMsg_TaskGetGoalBoxReq} m Msg_TaskGetGoalBoxReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskGetGoalBoxReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxGroupId != null && Object.hasOwnProperty.call(m, "boxGroupId"))
                w.uint32(8).int32(m.boxGroupId);
            return w;
        };

        /**
         * Decodes a Msg_TaskGetGoalBoxReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskGetGoalBoxReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskGetGoalBoxReq} Msg_TaskGetGoalBoxReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskGetGoalBoxReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskGetGoalBoxReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxGroupId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskGetGoalBoxReq;
    })();

    proto.Msg_TaskGetGoalBoxRsp = (function() {

        /**
         * Properties of a Msg_TaskGetGoalBoxRsp.
         * @memberof proto
         * @interface IMsg_TaskGetGoalBoxRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_TaskGetGoalBoxRsp result
         * @property {number|null} [boxGroupId] Msg_TaskGetGoalBoxRsp boxGroupId
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_TaskGetGoalBoxRsp rewards
         * @property {number|null} [refreshBoxGroupId] Msg_TaskGetGoalBoxRsp refreshBoxGroupId
         * @property {number|null} [goalBoxScore] Msg_TaskGetGoalBoxRsp goalBoxScore
         */

        /**
         * Constructs a new Msg_TaskGetGoalBoxRsp.
         * @memberof proto
         * @classdesc Represents a Msg_TaskGetGoalBoxRsp.
         * @implements IMsg_TaskGetGoalBoxRsp
         * @constructor
         * @param {proto.IMsg_TaskGetGoalBoxRsp=} [p] Properties to set
         */
        function Msg_TaskGetGoalBoxRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskGetGoalBoxRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @instance
         */
        Msg_TaskGetGoalBoxRsp.prototype.result = 0;

        /**
         * Msg_TaskGetGoalBoxRsp boxGroupId.
         * @member {number} boxGroupId
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @instance
         */
        Msg_TaskGetGoalBoxRsp.prototype.boxGroupId = 0;

        /**
         * Msg_TaskGetGoalBoxRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @instance
         */
        Msg_TaskGetGoalBoxRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_TaskGetGoalBoxRsp refreshBoxGroupId.
         * @member {number} refreshBoxGroupId
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @instance
         */
        Msg_TaskGetGoalBoxRsp.prototype.refreshBoxGroupId = 0;

        /**
         * Msg_TaskGetGoalBoxRsp goalBoxScore.
         * @member {number} goalBoxScore
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @instance
         */
        Msg_TaskGetGoalBoxRsp.prototype.goalBoxScore = 0;

        /**
         * Encodes the specified Msg_TaskGetGoalBoxRsp message. Does not implicitly {@link proto.Msg_TaskGetGoalBoxRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @static
         * @param {proto.IMsg_TaskGetGoalBoxRsp} m Msg_TaskGetGoalBoxRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskGetGoalBoxRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.boxGroupId != null && Object.hasOwnProperty.call(m, "boxGroupId"))
                w.uint32(16).int32(m.boxGroupId);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(26).fork()).ldelim();
            }
            if (m.refreshBoxGroupId != null && Object.hasOwnProperty.call(m, "refreshBoxGroupId"))
                w.uint32(32).int32(m.refreshBoxGroupId);
            if (m.goalBoxScore != null && Object.hasOwnProperty.call(m, "goalBoxScore"))
                w.uint32(40).int32(m.goalBoxScore);
            return w;
        };

        /**
         * Decodes a Msg_TaskGetGoalBoxRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskGetGoalBoxRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskGetGoalBoxRsp} Msg_TaskGetGoalBoxRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskGetGoalBoxRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskGetGoalBoxRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.boxGroupId = r.int32();
                    break;
                case 3:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    m.refreshBoxGroupId = r.int32();
                    break;
                case 5:
                    m.goalBoxScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskGetGoalBoxRsp;
    })();

    proto.Msg_TaskGetGiftReq = (function() {

        /**
         * Properties of a Msg_TaskGetGiftReq.
         * @memberof proto
         * @interface IMsg_TaskGetGiftReq
         * @property {string|null} [giftUUId] Msg_TaskGetGiftReq giftUUId
         */

        /**
         * Constructs a new Msg_TaskGetGiftReq.
         * @memberof proto
         * @classdesc Represents a Msg_TaskGetGiftReq.
         * @implements IMsg_TaskGetGiftReq
         * @constructor
         * @param {proto.IMsg_TaskGetGiftReq=} [p] Properties to set
         */
        function Msg_TaskGetGiftReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskGetGiftReq giftUUId.
         * @member {string} giftUUId
         * @memberof proto.Msg_TaskGetGiftReq
         * @instance
         */
        Msg_TaskGetGiftReq.prototype.giftUUId = "";

        /**
         * Encodes the specified Msg_TaskGetGiftReq message. Does not implicitly {@link proto.Msg_TaskGetGiftReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskGetGiftReq
         * @static
         * @param {proto.IMsg_TaskGetGiftReq} m Msg_TaskGetGiftReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskGetGiftReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.giftUUId != null && Object.hasOwnProperty.call(m, "giftUUId"))
                w.uint32(10).string(m.giftUUId);
            return w;
        };

        /**
         * Decodes a Msg_TaskGetGiftReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskGetGiftReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskGetGiftReq} Msg_TaskGetGiftReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskGetGiftReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskGetGiftReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.giftUUId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskGetGiftReq;
    })();

    proto.Msg_TaskGetGiftRsp = (function() {

        /**
         * Properties of a Msg_TaskGetGiftRsp.
         * @memberof proto
         * @interface IMsg_TaskGetGiftRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_TaskGetGiftRsp result
         * @property {string|null} [giftUUId] Msg_TaskGetGiftRsp giftUUId
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_TaskGetGiftRsp rewards
         * @property {proto.IGiftInfo|null} [refreshGift] Msg_TaskGetGiftRsp refreshGift
         */

        /**
         * Constructs a new Msg_TaskGetGiftRsp.
         * @memberof proto
         * @classdesc Represents a Msg_TaskGetGiftRsp.
         * @implements IMsg_TaskGetGiftRsp
         * @constructor
         * @param {proto.IMsg_TaskGetGiftRsp=} [p] Properties to set
         */
        function Msg_TaskGetGiftRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskGetGiftRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_TaskGetGiftRsp
         * @instance
         */
        Msg_TaskGetGiftRsp.prototype.result = 0;

        /**
         * Msg_TaskGetGiftRsp giftUUId.
         * @member {string} giftUUId
         * @memberof proto.Msg_TaskGetGiftRsp
         * @instance
         */
        Msg_TaskGetGiftRsp.prototype.giftUUId = "";

        /**
         * Msg_TaskGetGiftRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_TaskGetGiftRsp
         * @instance
         */
        Msg_TaskGetGiftRsp.prototype.rewards = $util.emptyArray;

        /**
         * Msg_TaskGetGiftRsp refreshGift.
         * @member {proto.IGiftInfo|null|undefined} refreshGift
         * @memberof proto.Msg_TaskGetGiftRsp
         * @instance
         */
        Msg_TaskGetGiftRsp.prototype.refreshGift = null;

        /**
         * Encodes the specified Msg_TaskGetGiftRsp message. Does not implicitly {@link proto.Msg_TaskGetGiftRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskGetGiftRsp
         * @static
         * @param {proto.IMsg_TaskGetGiftRsp} m Msg_TaskGetGiftRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskGetGiftRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.giftUUId != null && Object.hasOwnProperty.call(m, "giftUUId"))
                w.uint32(18).string(m.giftUUId);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(34).fork()).ldelim();
            }
            if (m.refreshGift != null && Object.hasOwnProperty.call(m, "refreshGift"))
                $root.proto.GiftInfo.encode(m.refreshGift, w.uint32(42).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_TaskGetGiftRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskGetGiftRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskGetGiftRsp} Msg_TaskGetGiftRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskGetGiftRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskGetGiftRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.giftUUId = r.string();
                    break;
                case 4:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 5:
                    m.refreshGift = $root.proto.GiftInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskGetGiftRsp;
    })();

    proto.Msg_TaskGetRewardReq = (function() {

        /**
         * Properties of a Msg_TaskGetRewardReq.
         * @memberof proto
         * @interface IMsg_TaskGetRewardReq
         * @property {string|null} [taskUUId] Msg_TaskGetRewardReq taskUUId
         */

        /**
         * Constructs a new Msg_TaskGetRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_TaskGetRewardReq.
         * @implements IMsg_TaskGetRewardReq
         * @constructor
         * @param {proto.IMsg_TaskGetRewardReq=} [p] Properties to set
         */
        function Msg_TaskGetRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskGetRewardReq taskUUId.
         * @member {string} taskUUId
         * @memberof proto.Msg_TaskGetRewardReq
         * @instance
         */
        Msg_TaskGetRewardReq.prototype.taskUUId = "";

        /**
         * Encodes the specified Msg_TaskGetRewardReq message. Does not implicitly {@link proto.Msg_TaskGetRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskGetRewardReq
         * @static
         * @param {proto.IMsg_TaskGetRewardReq} m Msg_TaskGetRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskGetRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskUUId != null && Object.hasOwnProperty.call(m, "taskUUId"))
                w.uint32(10).string(m.taskUUId);
            return w;
        };

        /**
         * Decodes a Msg_TaskGetRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskGetRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskGetRewardReq} Msg_TaskGetRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskGetRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskGetRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskUUId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskGetRewardReq;
    })();

    proto.Msg_TaskGetRewardRsp = (function() {

        /**
         * Properties of a Msg_TaskGetRewardRsp.
         * @memberof proto
         * @interface IMsg_TaskGetRewardRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_TaskGetRewardRsp result
         * @property {proto.ITaskData|null} [taskInfo] Msg_TaskGetRewardRsp taskInfo
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_TaskGetRewardRsp rewards
         */

        /**
         * Constructs a new Msg_TaskGetRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_TaskGetRewardRsp.
         * @implements IMsg_TaskGetRewardRsp
         * @constructor
         * @param {proto.IMsg_TaskGetRewardRsp=} [p] Properties to set
         */
        function Msg_TaskGetRewardRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskGetRewardRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_TaskGetRewardRsp
         * @instance
         */
        Msg_TaskGetRewardRsp.prototype.result = 0;

        /**
         * Msg_TaskGetRewardRsp taskInfo.
         * @member {proto.ITaskData|null|undefined} taskInfo
         * @memberof proto.Msg_TaskGetRewardRsp
         * @instance
         */
        Msg_TaskGetRewardRsp.prototype.taskInfo = null;

        /**
         * Msg_TaskGetRewardRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_TaskGetRewardRsp
         * @instance
         */
        Msg_TaskGetRewardRsp.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_TaskGetRewardRsp message. Does not implicitly {@link proto.Msg_TaskGetRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskGetRewardRsp
         * @static
         * @param {proto.IMsg_TaskGetRewardRsp} m Msg_TaskGetRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskGetRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.taskInfo != null && Object.hasOwnProperty.call(m, "taskInfo"))
                $root.proto.TaskData.encode(m.taskInfo, w.uint32(18).fork()).ldelim();
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_TaskGetRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskGetRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskGetRewardRsp} Msg_TaskGetRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskGetRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskGetRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.taskInfo = $root.proto.TaskData.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskGetRewardRsp;
    })();

    /**
     * TaskRefreshType enum.
     * @name proto.TaskRefreshType
     * @enum {number}
     * @property {number} TRT_Replace_Diamond=0 TRT_Replace_Diamond value
     * @property {number} TRT_Replace_AD=1 TRT_Replace_AD value
     * @property {number} TRT_Diamond=2 TRT_Diamond value
     * @property {number} TRT_AD=3 TRT_AD value
     */
    proto.TaskRefreshType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TRT_Replace_Diamond"] = 0;
        values[valuesById[1] = "TRT_Replace_AD"] = 1;
        values[valuesById[2] = "TRT_Diamond"] = 2;
        values[valuesById[3] = "TRT_AD"] = 3;
        return values;
    })();

    proto.Msg_TaskRefreshReq = (function() {

        /**
         * Properties of a Msg_TaskRefreshReq.
         * @memberof proto
         * @interface IMsg_TaskRefreshReq
         * @property {proto.TaskRefreshType|null} [refreshType] Msg_TaskRefreshReq refreshType
         * @property {string|null} [taskUUId] Msg_TaskRefreshReq taskUUId
         */

        /**
         * Constructs a new Msg_TaskRefreshReq.
         * @memberof proto
         * @classdesc Represents a Msg_TaskRefreshReq.
         * @implements IMsg_TaskRefreshReq
         * @constructor
         * @param {proto.IMsg_TaskRefreshReq=} [p] Properties to set
         */
        function Msg_TaskRefreshReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskRefreshReq refreshType.
         * @member {proto.TaskRefreshType} refreshType
         * @memberof proto.Msg_TaskRefreshReq
         * @instance
         */
        Msg_TaskRefreshReq.prototype.refreshType = 0;

        /**
         * Msg_TaskRefreshReq taskUUId.
         * @member {string} taskUUId
         * @memberof proto.Msg_TaskRefreshReq
         * @instance
         */
        Msg_TaskRefreshReq.prototype.taskUUId = "";

        /**
         * Encodes the specified Msg_TaskRefreshReq message. Does not implicitly {@link proto.Msg_TaskRefreshReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskRefreshReq
         * @static
         * @param {proto.IMsg_TaskRefreshReq} m Msg_TaskRefreshReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskRefreshReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.refreshType != null && Object.hasOwnProperty.call(m, "refreshType"))
                w.uint32(8).int32(m.refreshType);
            if (m.taskUUId != null && Object.hasOwnProperty.call(m, "taskUUId"))
                w.uint32(18).string(m.taskUUId);
            return w;
        };

        /**
         * Decodes a Msg_TaskRefreshReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskRefreshReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskRefreshReq} Msg_TaskRefreshReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskRefreshReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskRefreshReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.refreshType = r.int32();
                    break;
                case 2:
                    m.taskUUId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskRefreshReq;
    })();

    proto.Msg_TaskRefreshRsp = (function() {

        /**
         * Properties of a Msg_TaskRefreshRsp.
         * @memberof proto
         * @interface IMsg_TaskRefreshRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_TaskRefreshRsp result
         * @property {string|null} [taskUUId] Msg_TaskRefreshRsp taskUUId
         * @property {Array.<proto.ITaskData>|null} [taskInfo] Msg_TaskRefreshRsp taskInfo
         * @property {number|null} [taskFreeRefreshTimes] Msg_TaskRefreshRsp taskFreeRefreshTimes
         * @property {number|null} [ADRefreshLeftSec] Msg_TaskRefreshRsp ADRefreshLeftSec
         * @property {number|null} [ADReplaceRefreshTimes] Msg_TaskRefreshRsp ADReplaceRefreshTimes
         */

        /**
         * Constructs a new Msg_TaskRefreshRsp.
         * @memberof proto
         * @classdesc Represents a Msg_TaskRefreshRsp.
         * @implements IMsg_TaskRefreshRsp
         * @constructor
         * @param {proto.IMsg_TaskRefreshRsp=} [p] Properties to set
         */
        function Msg_TaskRefreshRsp(p) {
            this.taskInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskRefreshRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_TaskRefreshRsp
         * @instance
         */
        Msg_TaskRefreshRsp.prototype.result = 0;

        /**
         * Msg_TaskRefreshRsp taskUUId.
         * @member {string} taskUUId
         * @memberof proto.Msg_TaskRefreshRsp
         * @instance
         */
        Msg_TaskRefreshRsp.prototype.taskUUId = "";

        /**
         * Msg_TaskRefreshRsp taskInfo.
         * @member {Array.<proto.ITaskData>} taskInfo
         * @memberof proto.Msg_TaskRefreshRsp
         * @instance
         */
        Msg_TaskRefreshRsp.prototype.taskInfo = $util.emptyArray;

        /**
         * Msg_TaskRefreshRsp taskFreeRefreshTimes.
         * @member {number} taskFreeRefreshTimes
         * @memberof proto.Msg_TaskRefreshRsp
         * @instance
         */
        Msg_TaskRefreshRsp.prototype.taskFreeRefreshTimes = 0;

        /**
         * Msg_TaskRefreshRsp ADRefreshLeftSec.
         * @member {number} ADRefreshLeftSec
         * @memberof proto.Msg_TaskRefreshRsp
         * @instance
         */
        Msg_TaskRefreshRsp.prototype.ADRefreshLeftSec = 0;

        /**
         * Msg_TaskRefreshRsp ADReplaceRefreshTimes.
         * @member {number} ADReplaceRefreshTimes
         * @memberof proto.Msg_TaskRefreshRsp
         * @instance
         */
        Msg_TaskRefreshRsp.prototype.ADReplaceRefreshTimes = 0;

        /**
         * Encodes the specified Msg_TaskRefreshRsp message. Does not implicitly {@link proto.Msg_TaskRefreshRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskRefreshRsp
         * @static
         * @param {proto.IMsg_TaskRefreshRsp} m Msg_TaskRefreshRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskRefreshRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.taskUUId != null && Object.hasOwnProperty.call(m, "taskUUId"))
                w.uint32(18).string(m.taskUUId);
            if (m.taskInfo != null && m.taskInfo.length) {
                for (var i = 0; i < m.taskInfo.length; ++i)
                    $root.proto.TaskData.encode(m.taskInfo[i], w.uint32(26).fork()).ldelim();
            }
            if (m.taskFreeRefreshTimes != null && Object.hasOwnProperty.call(m, "taskFreeRefreshTimes"))
                w.uint32(32).int32(m.taskFreeRefreshTimes);
            if (m.ADRefreshLeftSec != null && Object.hasOwnProperty.call(m, "ADRefreshLeftSec"))
                w.uint32(40).int32(m.ADRefreshLeftSec);
            if (m.ADReplaceRefreshTimes != null && Object.hasOwnProperty.call(m, "ADReplaceRefreshTimes"))
                w.uint32(48).int32(m.ADReplaceRefreshTimes);
            return w;
        };

        /**
         * Decodes a Msg_TaskRefreshRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskRefreshRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskRefreshRsp} Msg_TaskRefreshRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskRefreshRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskRefreshRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.taskUUId = r.string();
                    break;
                case 3:
                    if (!(m.taskInfo && m.taskInfo.length))
                        m.taskInfo = [];
                    m.taskInfo.push($root.proto.TaskData.decode(r, r.uint32()));
                    break;
                case 4:
                    m.taskFreeRefreshTimes = r.int32();
                    break;
                case 5:
                    m.ADRefreshLeftSec = r.int32();
                    break;
                case 6:
                    m.ADReplaceRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskRefreshRsp;
    })();

    proto.Msg_TaskPushTaskInfo = (function() {

        /**
         * Properties of a Msg_TaskPushTaskInfo.
         * @memberof proto
         * @interface IMsg_TaskPushTaskInfo
         * @property {Array.<proto.ITaskData>|null} [tasks] Msg_TaskPushTaskInfo tasks
         */

        /**
         * Constructs a new Msg_TaskPushTaskInfo.
         * @memberof proto
         * @classdesc Represents a Msg_TaskPushTaskInfo.
         * @implements IMsg_TaskPushTaskInfo
         * @constructor
         * @param {proto.IMsg_TaskPushTaskInfo=} [p] Properties to set
         */
        function Msg_TaskPushTaskInfo(p) {
            this.tasks = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_TaskPushTaskInfo tasks.
         * @member {Array.<proto.ITaskData>} tasks
         * @memberof proto.Msg_TaskPushTaskInfo
         * @instance
         */
        Msg_TaskPushTaskInfo.prototype.tasks = $util.emptyArray;

        /**
         * Encodes the specified Msg_TaskPushTaskInfo message. Does not implicitly {@link proto.Msg_TaskPushTaskInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_TaskPushTaskInfo
         * @static
         * @param {proto.IMsg_TaskPushTaskInfo} m Msg_TaskPushTaskInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_TaskPushTaskInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.tasks != null && m.tasks.length) {
                for (var i = 0; i < m.tasks.length; ++i)
                    $root.proto.TaskData.encode(m.tasks[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_TaskPushTaskInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_TaskPushTaskInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_TaskPushTaskInfo} Msg_TaskPushTaskInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_TaskPushTaskInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_TaskPushTaskInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.tasks && m.tasks.length))
                        m.tasks = [];
                    m.tasks.push($root.proto.TaskData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_TaskPushTaskInfo;
    })();

    proto.PlayerInfoFightRecord = (function() {

        /**
         * Properties of a PlayerInfoFightRecord.
         * @memberof proto
         * @interface IPlayerInfoFightRecord
         * @property {number|null} [fightWinCount] PlayerInfoFightRecord fightWinCount
         * @property {number|null} [fightCount] PlayerInfoFightRecord fightCount
         * @property {number|null} [infiniteDefendMaxCnt] PlayerInfoFightRecord infiniteDefendMaxCnt
         * @property {number|null} [allianceSupportCnt] PlayerInfoFightRecord allianceSupportCnt
         * @property {number|null} [ownCardCount] PlayerInfoFightRecord ownCardCount
         * @property {number|null} [totalCardCount] PlayerInfoFightRecord totalCardCount
         */

        /**
         * Constructs a new PlayerInfoFightRecord.
         * @memberof proto
         * @classdesc Represents a PlayerInfoFightRecord.
         * @implements IPlayerInfoFightRecord
         * @constructor
         * @param {proto.IPlayerInfoFightRecord=} [p] Properties to set
         */
        function PlayerInfoFightRecord(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerInfoFightRecord fightWinCount.
         * @member {number} fightWinCount
         * @memberof proto.PlayerInfoFightRecord
         * @instance
         */
        PlayerInfoFightRecord.prototype.fightWinCount = 0;

        /**
         * PlayerInfoFightRecord fightCount.
         * @member {number} fightCount
         * @memberof proto.PlayerInfoFightRecord
         * @instance
         */
        PlayerInfoFightRecord.prototype.fightCount = 0;

        /**
         * PlayerInfoFightRecord infiniteDefendMaxCnt.
         * @member {number} infiniteDefendMaxCnt
         * @memberof proto.PlayerInfoFightRecord
         * @instance
         */
        PlayerInfoFightRecord.prototype.infiniteDefendMaxCnt = 0;

        /**
         * PlayerInfoFightRecord allianceSupportCnt.
         * @member {number} allianceSupportCnt
         * @memberof proto.PlayerInfoFightRecord
         * @instance
         */
        PlayerInfoFightRecord.prototype.allianceSupportCnt = 0;

        /**
         * PlayerInfoFightRecord ownCardCount.
         * @member {number} ownCardCount
         * @memberof proto.PlayerInfoFightRecord
         * @instance
         */
        PlayerInfoFightRecord.prototype.ownCardCount = 0;

        /**
         * PlayerInfoFightRecord totalCardCount.
         * @member {number} totalCardCount
         * @memberof proto.PlayerInfoFightRecord
         * @instance
         */
        PlayerInfoFightRecord.prototype.totalCardCount = 0;

        /**
         * Encodes the specified PlayerInfoFightRecord message. Does not implicitly {@link proto.PlayerInfoFightRecord.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerInfoFightRecord
         * @static
         * @param {proto.IPlayerInfoFightRecord} m PlayerInfoFightRecord message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerInfoFightRecord.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightWinCount != null && Object.hasOwnProperty.call(m, "fightWinCount"))
                w.uint32(8).int32(m.fightWinCount);
            if (m.fightCount != null && Object.hasOwnProperty.call(m, "fightCount"))
                w.uint32(16).int32(m.fightCount);
            if (m.infiniteDefendMaxCnt != null && Object.hasOwnProperty.call(m, "infiniteDefendMaxCnt"))
                w.uint32(24).int32(m.infiniteDefendMaxCnt);
            if (m.allianceSupportCnt != null && Object.hasOwnProperty.call(m, "allianceSupportCnt"))
                w.uint32(32).int32(m.allianceSupportCnt);
            if (m.ownCardCount != null && Object.hasOwnProperty.call(m, "ownCardCount"))
                w.uint32(40).int32(m.ownCardCount);
            if (m.totalCardCount != null && Object.hasOwnProperty.call(m, "totalCardCount"))
                w.uint32(48).int32(m.totalCardCount);
            return w;
        };

        /**
         * Decodes a PlayerInfoFightRecord message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerInfoFightRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerInfoFightRecord} PlayerInfoFightRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerInfoFightRecord.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerInfoFightRecord();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightWinCount = r.int32();
                    break;
                case 2:
                    m.fightCount = r.int32();
                    break;
                case 3:
                    m.infiniteDefendMaxCnt = r.int32();
                    break;
                case 4:
                    m.allianceSupportCnt = r.int32();
                    break;
                case 5:
                    m.ownCardCount = r.int32();
                    break;
                case 6:
                    m.totalCardCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerInfoFightRecord;
    })();

    proto.PlayerSeasonInfo = (function() {

        /**
         * Properties of a PlayerSeasonInfo.
         * @memberof proto
         * @interface IPlayerSeasonInfo
         * @property {number|null} [curScore] PlayerSeasonInfo curScore
         * @property {number|null} [curMaxScore] PlayerSeasonInfo curMaxScore
         * @property {number|null} [historyScore] PlayerSeasonInfo historyScore
         * @property {number|null} [historyMaxScore] PlayerSeasonInfo historyMaxScore
         * @property {number|null} [scoreChangeTime] PlayerSeasonInfo scoreChangeTime
         * @property {number|null} [seasonId] PlayerSeasonInfo seasonId
         */

        /**
         * Constructs a new PlayerSeasonInfo.
         * @memberof proto
         * @classdesc Represents a PlayerSeasonInfo.
         * @implements IPlayerSeasonInfo
         * @constructor
         * @param {proto.IPlayerSeasonInfo=} [p] Properties to set
         */
        function PlayerSeasonInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerSeasonInfo curScore.
         * @member {number} curScore
         * @memberof proto.PlayerSeasonInfo
         * @instance
         */
        PlayerSeasonInfo.prototype.curScore = 0;

        /**
         * PlayerSeasonInfo curMaxScore.
         * @member {number} curMaxScore
         * @memberof proto.PlayerSeasonInfo
         * @instance
         */
        PlayerSeasonInfo.prototype.curMaxScore = 0;

        /**
         * PlayerSeasonInfo historyScore.
         * @member {number} historyScore
         * @memberof proto.PlayerSeasonInfo
         * @instance
         */
        PlayerSeasonInfo.prototype.historyScore = 0;

        /**
         * PlayerSeasonInfo historyMaxScore.
         * @member {number} historyMaxScore
         * @memberof proto.PlayerSeasonInfo
         * @instance
         */
        PlayerSeasonInfo.prototype.historyMaxScore = 0;

        /**
         * PlayerSeasonInfo scoreChangeTime.
         * @member {number} scoreChangeTime
         * @memberof proto.PlayerSeasonInfo
         * @instance
         */
        PlayerSeasonInfo.prototype.scoreChangeTime = 0;

        /**
         * PlayerSeasonInfo seasonId.
         * @member {number} seasonId
         * @memberof proto.PlayerSeasonInfo
         * @instance
         */
        PlayerSeasonInfo.prototype.seasonId = 0;

        /**
         * Encodes the specified PlayerSeasonInfo message. Does not implicitly {@link proto.PlayerSeasonInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerSeasonInfo
         * @static
         * @param {proto.IPlayerSeasonInfo} m PlayerSeasonInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerSeasonInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.curScore != null && Object.hasOwnProperty.call(m, "curScore"))
                w.uint32(8).int32(m.curScore);
            if (m.curMaxScore != null && Object.hasOwnProperty.call(m, "curMaxScore"))
                w.uint32(16).int32(m.curMaxScore);
            if (m.historyScore != null && Object.hasOwnProperty.call(m, "historyScore"))
                w.uint32(24).int32(m.historyScore);
            if (m.historyMaxScore != null && Object.hasOwnProperty.call(m, "historyMaxScore"))
                w.uint32(32).int32(m.historyMaxScore);
            if (m.scoreChangeTime != null && Object.hasOwnProperty.call(m, "scoreChangeTime"))
                w.uint32(40).int32(m.scoreChangeTime);
            if (m.seasonId != null && Object.hasOwnProperty.call(m, "seasonId"))
                w.uint32(48).int32(m.seasonId);
            return w;
        };

        /**
         * Decodes a PlayerSeasonInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerSeasonInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerSeasonInfo} PlayerSeasonInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerSeasonInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerSeasonInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.curScore = r.int32();
                    break;
                case 2:
                    m.curMaxScore = r.int32();
                    break;
                case 3:
                    m.historyScore = r.int32();
                    break;
                case 4:
                    m.historyMaxScore = r.int32();
                    break;
                case 5:
                    m.scoreChangeTime = r.int32();
                    break;
                case 6:
                    m.seasonId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerSeasonInfo;
    })();

    proto.PlayerBaseInfo = (function() {

        /**
         * Properties of a PlayerBaseInfo.
         * @memberof proto
         * @interface IPlayerBaseInfo
         * @property {string|null} [roleId] PlayerBaseInfo roleId
         * @property {number|null} [roleLevel] PlayerBaseInfo roleLevel
         * @property {string|null} [roleName] PlayerBaseInfo roleName
         * @property {proto.Gender|null} [roleGender] PlayerBaseInfo roleGender
         * @property {number|null} [indexCard] PlayerBaseInfo indexCard
         * @property {string|null} [headUrl] PlayerBaseInfo headUrl
         */

        /**
         * Constructs a new PlayerBaseInfo.
         * @memberof proto
         * @classdesc Represents a PlayerBaseInfo.
         * @implements IPlayerBaseInfo
         * @constructor
         * @param {proto.IPlayerBaseInfo=} [p] Properties to set
         */
        function PlayerBaseInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerBaseInfo roleId.
         * @member {string} roleId
         * @memberof proto.PlayerBaseInfo
         * @instance
         */
        PlayerBaseInfo.prototype.roleId = "";

        /**
         * PlayerBaseInfo roleLevel.
         * @member {number} roleLevel
         * @memberof proto.PlayerBaseInfo
         * @instance
         */
        PlayerBaseInfo.prototype.roleLevel = 0;

        /**
         * PlayerBaseInfo roleName.
         * @member {string} roleName
         * @memberof proto.PlayerBaseInfo
         * @instance
         */
        PlayerBaseInfo.prototype.roleName = "";

        /**
         * PlayerBaseInfo roleGender.
         * @member {proto.Gender} roleGender
         * @memberof proto.PlayerBaseInfo
         * @instance
         */
        PlayerBaseInfo.prototype.roleGender = 0;

        /**
         * PlayerBaseInfo indexCard.
         * @member {number} indexCard
         * @memberof proto.PlayerBaseInfo
         * @instance
         */
        PlayerBaseInfo.prototype.indexCard = 0;

        /**
         * PlayerBaseInfo headUrl.
         * @member {string} headUrl
         * @memberof proto.PlayerBaseInfo
         * @instance
         */
        PlayerBaseInfo.prototype.headUrl = "";

        /**
         * Encodes the specified PlayerBaseInfo message. Does not implicitly {@link proto.PlayerBaseInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerBaseInfo
         * @static
         * @param {proto.IPlayerBaseInfo} m PlayerBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerBaseInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(10).string(m.roleId);
            if (m.roleLevel != null && Object.hasOwnProperty.call(m, "roleLevel"))
                w.uint32(16).int32(m.roleLevel);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(26).string(m.roleName);
            if (m.roleGender != null && Object.hasOwnProperty.call(m, "roleGender"))
                w.uint32(32).int32(m.roleGender);
            if (m.indexCard != null && Object.hasOwnProperty.call(m, "indexCard"))
                w.uint32(40).int32(m.indexCard);
            if (m.headUrl != null && Object.hasOwnProperty.call(m, "headUrl"))
                w.uint32(50).string(m.headUrl);
            return w;
        };

        /**
         * Decodes a PlayerBaseInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerBaseInfo} PlayerBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerBaseInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerBaseInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleId = r.string();
                    break;
                case 2:
                    m.roleLevel = r.int32();
                    break;
                case 3:
                    m.roleName = r.string();
                    break;
                case 4:
                    m.roleGender = r.int32();
                    break;
                case 5:
                    m.indexCard = r.int32();
                    break;
                case 6:
                    m.headUrl = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerBaseInfo;
    })();

    proto.PlayerDevilInfo = (function() {

        /**
         * Properties of a PlayerDevilInfo.
         * @memberof proto
         * @interface IPlayerDevilInfo
         * @property {proto.IFightCardData|null} [devilCardData] PlayerDevilInfo devilCardData
         */

        /**
         * Constructs a new PlayerDevilInfo.
         * @memberof proto
         * @classdesc Represents a PlayerDevilInfo.
         * @implements IPlayerDevilInfo
         * @constructor
         * @param {proto.IPlayerDevilInfo=} [p] Properties to set
         */
        function PlayerDevilInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerDevilInfo devilCardData.
         * @member {proto.IFightCardData|null|undefined} devilCardData
         * @memberof proto.PlayerDevilInfo
         * @instance
         */
        PlayerDevilInfo.prototype.devilCardData = null;

        /**
         * Encodes the specified PlayerDevilInfo message. Does not implicitly {@link proto.PlayerDevilInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerDevilInfo
         * @static
         * @param {proto.IPlayerDevilInfo} m PlayerDevilInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerDevilInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.devilCardData != null && Object.hasOwnProperty.call(m, "devilCardData"))
                $root.proto.FightCardData.encode(m.devilCardData, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a PlayerDevilInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerDevilInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerDevilInfo} PlayerDevilInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerDevilInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerDevilInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.devilCardData = $root.proto.FightCardData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerDevilInfo;
    })();

    proto.PlayerAllianceInfo = (function() {

        /**
         * Properties of a PlayerAllianceInfo.
         * @memberof proto
         * @interface IPlayerAllianceInfo
         * @property {string|null} [allianceName] PlayerAllianceInfo allianceName
         * @property {number|null} [allianceScore] PlayerAllianceInfo allianceScore
         * @property {string|null} [allianceUUID] PlayerAllianceInfo allianceUUID
         * @property {number|null} [position] PlayerAllianceInfo position
         * @property {number|null} [allianceIconIdx] PlayerAllianceInfo allianceIconIdx
         */

        /**
         * Constructs a new PlayerAllianceInfo.
         * @memberof proto
         * @classdesc Represents a PlayerAllianceInfo.
         * @implements IPlayerAllianceInfo
         * @constructor
         * @param {proto.IPlayerAllianceInfo=} [p] Properties to set
         */
        function PlayerAllianceInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerAllianceInfo allianceName.
         * @member {string} allianceName
         * @memberof proto.PlayerAllianceInfo
         * @instance
         */
        PlayerAllianceInfo.prototype.allianceName = "";

        /**
         * PlayerAllianceInfo allianceScore.
         * @member {number} allianceScore
         * @memberof proto.PlayerAllianceInfo
         * @instance
         */
        PlayerAllianceInfo.prototype.allianceScore = 0;

        /**
         * PlayerAllianceInfo allianceUUID.
         * @member {string} allianceUUID
         * @memberof proto.PlayerAllianceInfo
         * @instance
         */
        PlayerAllianceInfo.prototype.allianceUUID = "";

        /**
         * PlayerAllianceInfo position.
         * @member {number} position
         * @memberof proto.PlayerAllianceInfo
         * @instance
         */
        PlayerAllianceInfo.prototype.position = 0;

        /**
         * PlayerAllianceInfo allianceIconIdx.
         * @member {number} allianceIconIdx
         * @memberof proto.PlayerAllianceInfo
         * @instance
         */
        PlayerAllianceInfo.prototype.allianceIconIdx = 0;

        /**
         * Encodes the specified PlayerAllianceInfo message. Does not implicitly {@link proto.PlayerAllianceInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerAllianceInfo
         * @static
         * @param {proto.IPlayerAllianceInfo} m PlayerAllianceInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerAllianceInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(10).string(m.allianceName);
            if (m.allianceScore != null && Object.hasOwnProperty.call(m, "allianceScore"))
                w.uint32(16).int32(m.allianceScore);
            if (m.allianceUUID != null && Object.hasOwnProperty.call(m, "allianceUUID"))
                w.uint32(26).string(m.allianceUUID);
            if (m.position != null && Object.hasOwnProperty.call(m, "position"))
                w.uint32(32).int32(m.position);
            if (m.allianceIconIdx != null && Object.hasOwnProperty.call(m, "allianceIconIdx"))
                w.uint32(40).int32(m.allianceIconIdx);
            return w;
        };

        /**
         * Decodes a PlayerAllianceInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerAllianceInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerAllianceInfo} PlayerAllianceInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerAllianceInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerAllianceInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceName = r.string();
                    break;
                case 2:
                    m.allianceScore = r.int32();
                    break;
                case 3:
                    m.allianceUUID = r.string();
                    break;
                case 4:
                    m.position = r.int32();
                    break;
                case 5:
                    m.allianceIconIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerAllianceInfo;
    })();

    proto.PlayerPvpCardInfo = (function() {

        /**
         * Properties of a PlayerPvpCardInfo.
         * @memberof proto
         * @interface IPlayerPvpCardInfo
         * @property {Array.<proto.IFightCardData>|null} [cardLists] PlayerPvpCardInfo cardLists
         * @property {Array.<proto.ITalenItem>|null} [talentItems] PlayerPvpCardInfo talentItems
         */

        /**
         * Constructs a new PlayerPvpCardInfo.
         * @memberof proto
         * @classdesc Represents a PlayerPvpCardInfo.
         * @implements IPlayerPvpCardInfo
         * @constructor
         * @param {proto.IPlayerPvpCardInfo=} [p] Properties to set
         */
        function PlayerPvpCardInfo(p) {
            this.cardLists = [];
            this.talentItems = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerPvpCardInfo cardLists.
         * @member {Array.<proto.IFightCardData>} cardLists
         * @memberof proto.PlayerPvpCardInfo
         * @instance
         */
        PlayerPvpCardInfo.prototype.cardLists = $util.emptyArray;

        /**
         * PlayerPvpCardInfo talentItems.
         * @member {Array.<proto.ITalenItem>} talentItems
         * @memberof proto.PlayerPvpCardInfo
         * @instance
         */
        PlayerPvpCardInfo.prototype.talentItems = $util.emptyArray;

        /**
         * Encodes the specified PlayerPvpCardInfo message. Does not implicitly {@link proto.PlayerPvpCardInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerPvpCardInfo
         * @static
         * @param {proto.IPlayerPvpCardInfo} m PlayerPvpCardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerPvpCardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardLists != null && m.cardLists.length) {
                for (var i = 0; i < m.cardLists.length; ++i)
                    $root.proto.FightCardData.encode(m.cardLists[i], w.uint32(10).fork()).ldelim();
            }
            if (m.talentItems != null && m.talentItems.length) {
                for (var i = 0; i < m.talentItems.length; ++i)
                    $root.proto.TalenItem.encode(m.talentItems[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a PlayerPvpCardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerPvpCardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerPvpCardInfo} PlayerPvpCardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerPvpCardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerPvpCardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.cardLists && m.cardLists.length))
                        m.cardLists = [];
                    m.cardLists.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.talentItems && m.talentItems.length))
                        m.talentItems = [];
                    m.talentItems.push($root.proto.TalenItem.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerPvpCardInfo;
    })();

    proto.PlayerWechatInfo = (function() {

        /**
         * Properties of a PlayerWechatInfo.
         * @memberof proto
         * @interface IPlayerWechatInfo
         * @property {string|null} [wechatName] PlayerWechatInfo wechatName
         * @property {string|null} [wechatAvatarUrl] PlayerWechatInfo wechatAvatarUrl
         */

        /**
         * Constructs a new PlayerWechatInfo.
         * @memberof proto
         * @classdesc Represents a PlayerWechatInfo.
         * @implements IPlayerWechatInfo
         * @constructor
         * @param {proto.IPlayerWechatInfo=} [p] Properties to set
         */
        function PlayerWechatInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PlayerWechatInfo wechatName.
         * @member {string} wechatName
         * @memberof proto.PlayerWechatInfo
         * @instance
         */
        PlayerWechatInfo.prototype.wechatName = "";

        /**
         * PlayerWechatInfo wechatAvatarUrl.
         * @member {string} wechatAvatarUrl
         * @memberof proto.PlayerWechatInfo
         * @instance
         */
        PlayerWechatInfo.prototype.wechatAvatarUrl = "";

        /**
         * Encodes the specified PlayerWechatInfo message. Does not implicitly {@link proto.PlayerWechatInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PlayerWechatInfo
         * @static
         * @param {proto.IPlayerWechatInfo} m PlayerWechatInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerWechatInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.wechatName != null && Object.hasOwnProperty.call(m, "wechatName"))
                w.uint32(10).string(m.wechatName);
            if (m.wechatAvatarUrl != null && Object.hasOwnProperty.call(m, "wechatAvatarUrl"))
                w.uint32(18).string(m.wechatAvatarUrl);
            return w;
        };

        /**
         * Decodes a PlayerWechatInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PlayerWechatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PlayerWechatInfo} PlayerWechatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerWechatInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PlayerWechatInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.wechatName = r.string();
                    break;
                case 2:
                    m.wechatAvatarUrl = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PlayerWechatInfo;
    })();

    proto.Msg_PlayerInfoReq = (function() {

        /**
         * Properties of a Msg_PlayerInfoReq.
         * @memberof proto
         * @interface IMsg_PlayerInfoReq
         * @property {string|null} [roleId] Msg_PlayerInfoReq roleId
         */

        /**
         * Constructs a new Msg_PlayerInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_PlayerInfoReq.
         * @implements IMsg_PlayerInfoReq
         * @constructor
         * @param {proto.IMsg_PlayerInfoReq=} [p] Properties to set
         */
        function Msg_PlayerInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PlayerInfoReq roleId.
         * @member {string} roleId
         * @memberof proto.Msg_PlayerInfoReq
         * @instance
         */
        Msg_PlayerInfoReq.prototype.roleId = "";

        /**
         * Encodes the specified Msg_PlayerInfoReq message. Does not implicitly {@link proto.Msg_PlayerInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PlayerInfoReq
         * @static
         * @param {proto.IMsg_PlayerInfoReq} m Msg_PlayerInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PlayerInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(10).string(m.roleId);
            return w;
        };

        /**
         * Decodes a Msg_PlayerInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PlayerInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PlayerInfoReq} Msg_PlayerInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PlayerInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PlayerInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PlayerInfoReq;
    })();

    proto.Msg_PlayerInfoRsp = (function() {

        /**
         * Properties of a Msg_PlayerInfoRsp.
         * @memberof proto
         * @interface IMsg_PlayerInfoRsp
         * @property {proto.IPlayerInfoFightRecord|null} [fightRecordInfo] Msg_PlayerInfoRsp fightRecordInfo
         * @property {proto.IPlayerBaseInfo|null} [playerBaseInfo] Msg_PlayerInfoRsp playerBaseInfo
         * @property {proto.IPlayerDevilInfo|null} [playerDevilInfo] Msg_PlayerInfoRsp playerDevilInfo
         * @property {proto.IPlayerPvpCardInfo|null} [pvpCardInfo] Msg_PlayerInfoRsp pvpCardInfo
         * @property {proto.IPlayerSeasonInfo|null} [seasonInfo] Msg_PlayerInfoRsp seasonInfo
         * @property {proto.IPlayerAllianceInfo|null} [allianceInfo] Msg_PlayerInfoRsp allianceInfo
         * @property {proto.IPlayerWechatInfo|null} [wechatInfo] Msg_PlayerInfoRsp wechatInfo
         */

        /**
         * Constructs a new Msg_PlayerInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PlayerInfoRsp.
         * @implements IMsg_PlayerInfoRsp
         * @constructor
         * @param {proto.IMsg_PlayerInfoRsp=} [p] Properties to set
         */
        function Msg_PlayerInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PlayerInfoRsp fightRecordInfo.
         * @member {proto.IPlayerInfoFightRecord|null|undefined} fightRecordInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.fightRecordInfo = null;

        /**
         * Msg_PlayerInfoRsp playerBaseInfo.
         * @member {proto.IPlayerBaseInfo|null|undefined} playerBaseInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.playerBaseInfo = null;

        /**
         * Msg_PlayerInfoRsp playerDevilInfo.
         * @member {proto.IPlayerDevilInfo|null|undefined} playerDevilInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.playerDevilInfo = null;

        /**
         * Msg_PlayerInfoRsp pvpCardInfo.
         * @member {proto.IPlayerPvpCardInfo|null|undefined} pvpCardInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.pvpCardInfo = null;

        /**
         * Msg_PlayerInfoRsp seasonInfo.
         * @member {proto.IPlayerSeasonInfo|null|undefined} seasonInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.seasonInfo = null;

        /**
         * Msg_PlayerInfoRsp allianceInfo.
         * @member {proto.IPlayerAllianceInfo|null|undefined} allianceInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.allianceInfo = null;

        /**
         * Msg_PlayerInfoRsp wechatInfo.
         * @member {proto.IPlayerWechatInfo|null|undefined} wechatInfo
         * @memberof proto.Msg_PlayerInfoRsp
         * @instance
         */
        Msg_PlayerInfoRsp.prototype.wechatInfo = null;

        /**
         * Encodes the specified Msg_PlayerInfoRsp message. Does not implicitly {@link proto.Msg_PlayerInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PlayerInfoRsp
         * @static
         * @param {proto.IMsg_PlayerInfoRsp} m Msg_PlayerInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PlayerInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightRecordInfo != null && Object.hasOwnProperty.call(m, "fightRecordInfo"))
                $root.proto.PlayerInfoFightRecord.encode(m.fightRecordInfo, w.uint32(10).fork()).ldelim();
            if (m.playerBaseInfo != null && Object.hasOwnProperty.call(m, "playerBaseInfo"))
                $root.proto.PlayerBaseInfo.encode(m.playerBaseInfo, w.uint32(18).fork()).ldelim();
            if (m.playerDevilInfo != null && Object.hasOwnProperty.call(m, "playerDevilInfo"))
                $root.proto.PlayerDevilInfo.encode(m.playerDevilInfo, w.uint32(26).fork()).ldelim();
            if (m.pvpCardInfo != null && Object.hasOwnProperty.call(m, "pvpCardInfo"))
                $root.proto.PlayerPvpCardInfo.encode(m.pvpCardInfo, w.uint32(34).fork()).ldelim();
            if (m.seasonInfo != null && Object.hasOwnProperty.call(m, "seasonInfo"))
                $root.proto.PlayerSeasonInfo.encode(m.seasonInfo, w.uint32(42).fork()).ldelim();
            if (m.allianceInfo != null && Object.hasOwnProperty.call(m, "allianceInfo"))
                $root.proto.PlayerAllianceInfo.encode(m.allianceInfo, w.uint32(50).fork()).ldelim();
            if (m.wechatInfo != null && Object.hasOwnProperty.call(m, "wechatInfo"))
                $root.proto.PlayerWechatInfo.encode(m.wechatInfo, w.uint32(58).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_PlayerInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PlayerInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PlayerInfoRsp} Msg_PlayerInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PlayerInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PlayerInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightRecordInfo = $root.proto.PlayerInfoFightRecord.decode(r, r.uint32());
                    break;
                case 2:
                    m.playerBaseInfo = $root.proto.PlayerBaseInfo.decode(r, r.uint32());
                    break;
                case 3:
                    m.playerDevilInfo = $root.proto.PlayerDevilInfo.decode(r, r.uint32());
                    break;
                case 4:
                    m.pvpCardInfo = $root.proto.PlayerPvpCardInfo.decode(r, r.uint32());
                    break;
                case 5:
                    m.seasonInfo = $root.proto.PlayerSeasonInfo.decode(r, r.uint32());
                    break;
                case 6:
                    m.allianceInfo = $root.proto.PlayerAllianceInfo.decode(r, r.uint32());
                    break;
                case 7:
                    m.wechatInfo = $root.proto.PlayerWechatInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PlayerInfoRsp;
    })();

    proto.Msg_ResetFightRecordReq = (function() {

        /**
         * Properties of a Msg_ResetFightRecordReq.
         * @memberof proto
         * @interface IMsg_ResetFightRecordReq
         */

        /**
         * Constructs a new Msg_ResetFightRecordReq.
         * @memberof proto
         * @classdesc Represents a Msg_ResetFightRecordReq.
         * @implements IMsg_ResetFightRecordReq
         * @constructor
         * @param {proto.IMsg_ResetFightRecordReq=} [p] Properties to set
         */
        function Msg_ResetFightRecordReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ResetFightRecordReq message. Does not implicitly {@link proto.Msg_ResetFightRecordReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ResetFightRecordReq
         * @static
         * @param {proto.IMsg_ResetFightRecordReq} m Msg_ResetFightRecordReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ResetFightRecordReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ResetFightRecordReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ResetFightRecordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ResetFightRecordReq} Msg_ResetFightRecordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ResetFightRecordReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ResetFightRecordReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ResetFightRecordReq;
    })();

    proto.Msg_ResetFightRecordRsp = (function() {

        /**
         * Properties of a Msg_ResetFightRecordRsp.
         * @memberof proto
         * @interface IMsg_ResetFightRecordRsp
         * @property {proto.Msg_ResetFightRecordRsp.ErrorCode|null} [result] Msg_ResetFightRecordRsp result
         */

        /**
         * Constructs a new Msg_ResetFightRecordRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ResetFightRecordRsp.
         * @implements IMsg_ResetFightRecordRsp
         * @constructor
         * @param {proto.IMsg_ResetFightRecordRsp=} [p] Properties to set
         */
        function Msg_ResetFightRecordRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ResetFightRecordRsp result.
         * @member {proto.Msg_ResetFightRecordRsp.ErrorCode} result
         * @memberof proto.Msg_ResetFightRecordRsp
         * @instance
         */
        Msg_ResetFightRecordRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_ResetFightRecordRsp message. Does not implicitly {@link proto.Msg_ResetFightRecordRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ResetFightRecordRsp
         * @static
         * @param {proto.IMsg_ResetFightRecordRsp} m Msg_ResetFightRecordRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ResetFightRecordRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_ResetFightRecordRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ResetFightRecordRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ResetFightRecordRsp} Msg_ResetFightRecordRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ResetFightRecordRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ResetFightRecordRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ResetFightRecordRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} MoneyNotEnough=1 MoneyNotEnough value
         */
        Msg_ResetFightRecordRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "MoneyNotEnough"] = 1;
            return values;
        })();

        return Msg_ResetFightRecordRsp;
    })();

    /**
     * GlobalMessageType enum.
     * @name proto.GlobalMessageType
     * @enum {number}
     * @property {number} JoinAllianceMsg=0 JoinAllianceMsg value
     * @property {number} AllianceSetPostRankMsg=1 AllianceSetPostRankMsg value
     * @property {number} AllianceExpelMsg=2 AllianceExpelMsg value
     * @property {number} ExitAllianceMsg=3 ExitAllianceMsg value
     * @property {number} MemberRequestSupportMsg=4 MemberRequestSupportMsg value
     * @property {number} MemberNormalTxtMsg=5 MemberNormalTxtMsg value
     * @property {number} MemberEmotionMsg=6 MemberEmotionMsg value
     * @property {number} MemberFriendlyMatchInviteMsg=7 MemberFriendlyMatchInviteMsg value
     * @property {number} MemberInfiniteDefenseInviteMsg=8 MemberInfiniteDefenseInviteMsg value
     * @property {number} AllianceDevilRewardMsg=9 AllianceDevilRewardMsg value
     * @property {number} AlliancePvpInvitation=10 AlliancePvpInvitation value
     * @property {number} CreateAllianceMsg=11 CreateAllianceMsg value
     * @property {number} ShareSelfCardGroup=12 ShareSelfCardGroup value
     */
    proto.GlobalMessageType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "JoinAllianceMsg"] = 0;
        values[valuesById[1] = "AllianceSetPostRankMsg"] = 1;
        values[valuesById[2] = "AllianceExpelMsg"] = 2;
        values[valuesById[3] = "ExitAllianceMsg"] = 3;
        values[valuesById[4] = "MemberRequestSupportMsg"] = 4;
        values[valuesById[5] = "MemberNormalTxtMsg"] = 5;
        values[valuesById[6] = "MemberEmotionMsg"] = 6;
        values[valuesById[7] = "MemberFriendlyMatchInviteMsg"] = 7;
        values[valuesById[8] = "MemberInfiniteDefenseInviteMsg"] = 8;
        values[valuesById[9] = "AllianceDevilRewardMsg"] = 9;
        values[valuesById[10] = "AlliancePvpInvitation"] = 10;
        values[valuesById[11] = "CreateAllianceMsg"] = 11;
        values[valuesById[12] = "ShareSelfCardGroup"] = 12;
        return values;
    })();

    proto.AllianceMsgData = (function() {

        /**
         * Properties of an AllianceMsgData.
         * @memberof proto
         * @interface IAllianceMsgData
         * @property {proto.GlobalMessageType|null} [msgType] AllianceMsgData msgType
         * @property {string|null} [content] AllianceMsgData content
         * @property {number|null} [utcTime] AllianceMsgData utcTime
         * @property {string|null} [msgSenderName] AllianceMsgData msgSenderName
         * @property {string|null} [senderUUID] AllianceMsgData senderUUID
         * @property {number|null} [playerHeadID] AllianceMsgData playerHeadID
         */

        /**
         * Constructs a new AllianceMsgData.
         * @memberof proto
         * @classdesc Represents an AllianceMsgData.
         * @implements IAllianceMsgData
         * @constructor
         * @param {proto.IAllianceMsgData=} [p] Properties to set
         */
        function AllianceMsgData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceMsgData msgType.
         * @member {proto.GlobalMessageType} msgType
         * @memberof proto.AllianceMsgData
         * @instance
         */
        AllianceMsgData.prototype.msgType = 0;

        /**
         * AllianceMsgData content.
         * @member {string} content
         * @memberof proto.AllianceMsgData
         * @instance
         */
        AllianceMsgData.prototype.content = "";

        /**
         * AllianceMsgData utcTime.
         * @member {number} utcTime
         * @memberof proto.AllianceMsgData
         * @instance
         */
        AllianceMsgData.prototype.utcTime = 0;

        /**
         * AllianceMsgData msgSenderName.
         * @member {string} msgSenderName
         * @memberof proto.AllianceMsgData
         * @instance
         */
        AllianceMsgData.prototype.msgSenderName = "";

        /**
         * AllianceMsgData senderUUID.
         * @member {string} senderUUID
         * @memberof proto.AllianceMsgData
         * @instance
         */
        AllianceMsgData.prototype.senderUUID = "";

        /**
         * AllianceMsgData playerHeadID.
         * @member {number} playerHeadID
         * @memberof proto.AllianceMsgData
         * @instance
         */
        AllianceMsgData.prototype.playerHeadID = 0;

        /**
         * Encodes the specified AllianceMsgData message. Does not implicitly {@link proto.AllianceMsgData.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceMsgData
         * @static
         * @param {proto.IAllianceMsgData} m AllianceMsgData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceMsgData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.msgType != null && Object.hasOwnProperty.call(m, "msgType"))
                w.uint32(8).int32(m.msgType);
            if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                w.uint32(18).string(m.content);
            if (m.utcTime != null && Object.hasOwnProperty.call(m, "utcTime"))
                w.uint32(24).int32(m.utcTime);
            if (m.msgSenderName != null && Object.hasOwnProperty.call(m, "msgSenderName"))
                w.uint32(34).string(m.msgSenderName);
            if (m.senderUUID != null && Object.hasOwnProperty.call(m, "senderUUID"))
                w.uint32(42).string(m.senderUUID);
            if (m.playerHeadID != null && Object.hasOwnProperty.call(m, "playerHeadID"))
                w.uint32(48).int32(m.playerHeadID);
            return w;
        };

        /**
         * Decodes an AllianceMsgData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceMsgData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceMsgData} AllianceMsgData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceMsgData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceMsgData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.msgType = r.int32();
                    break;
                case 2:
                    m.content = r.string();
                    break;
                case 3:
                    m.utcTime = r.int32();
                    break;
                case 4:
                    m.msgSenderName = r.string();
                    break;
                case 5:
                    m.senderUUID = r.string();
                    break;
                case 6:
                    m.playerHeadID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceMsgData;
    })();

    proto.AllianceSetPostRankStruct = (function() {

        /**
         * Properties of an AllianceSetPostRankStruct.
         * @memberof proto
         * @interface IAllianceSetPostRankStruct
         * @property {string|null} [roleName] AllianceSetPostRankStruct roleName
         * @property {number|null} [postRank] AllianceSetPostRankStruct postRank
         */

        /**
         * Constructs a new AllianceSetPostRankStruct.
         * @memberof proto
         * @classdesc Represents an AllianceSetPostRankStruct.
         * @implements IAllianceSetPostRankStruct
         * @constructor
         * @param {proto.IAllianceSetPostRankStruct=} [p] Properties to set
         */
        function AllianceSetPostRankStruct(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceSetPostRankStruct roleName.
         * @member {string} roleName
         * @memberof proto.AllianceSetPostRankStruct
         * @instance
         */
        AllianceSetPostRankStruct.prototype.roleName = "";

        /**
         * AllianceSetPostRankStruct postRank.
         * @member {number} postRank
         * @memberof proto.AllianceSetPostRankStruct
         * @instance
         */
        AllianceSetPostRankStruct.prototype.postRank = 0;

        /**
         * Encodes the specified AllianceSetPostRankStruct message. Does not implicitly {@link proto.AllianceSetPostRankStruct.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceSetPostRankStruct
         * @static
         * @param {proto.IAllianceSetPostRankStruct} m AllianceSetPostRankStruct message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceSetPostRankStruct.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(10).string(m.roleName);
            if (m.postRank != null && Object.hasOwnProperty.call(m, "postRank"))
                w.uint32(16).int32(m.postRank);
            return w;
        };

        /**
         * Decodes an AllianceSetPostRankStruct message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceSetPostRankStruct
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceSetPostRankStruct} AllianceSetPostRankStruct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceSetPostRankStruct.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceSetPostRankStruct();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleName = r.string();
                    break;
                case 2:
                    m.postRank = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceSetPostRankStruct;
    })();

    proto.AllianceFightPlayerInfo = (function() {

        /**
         * Properties of an AllianceFightPlayerInfo.
         * @memberof proto
         * @interface IAllianceFightPlayerInfo
         * @property {string|null} [roleID] AllianceFightPlayerInfo roleID
         * @property {string|null} [roleName] AllianceFightPlayerInfo roleName
         * @property {number|null} [indexCard] AllianceFightPlayerInfo indexCard
         * @property {proto.IPlayerPvpCardInfo|null} [pvpCardInfo] AllianceFightPlayerInfo pvpCardInfo
         * @property {proto.IFightCardData|null} [devilInfo] AllianceFightPlayerInfo devilInfo
         * @property {string|null} [allianceName] AllianceFightPlayerInfo allianceName
         * @property {number|null} [rankScore] AllianceFightPlayerInfo rankScore
         */

        /**
         * Constructs a new AllianceFightPlayerInfo.
         * @memberof proto
         * @classdesc Represents an AllianceFightPlayerInfo.
         * @implements IAllianceFightPlayerInfo
         * @constructor
         * @param {proto.IAllianceFightPlayerInfo=} [p] Properties to set
         */
        function AllianceFightPlayerInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceFightPlayerInfo roleID.
         * @member {string} roleID
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.roleID = "";

        /**
         * AllianceFightPlayerInfo roleName.
         * @member {string} roleName
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.roleName = "";

        /**
         * AllianceFightPlayerInfo indexCard.
         * @member {number} indexCard
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.indexCard = 0;

        /**
         * AllianceFightPlayerInfo pvpCardInfo.
         * @member {proto.IPlayerPvpCardInfo|null|undefined} pvpCardInfo
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.pvpCardInfo = null;

        /**
         * AllianceFightPlayerInfo devilInfo.
         * @member {proto.IFightCardData|null|undefined} devilInfo
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.devilInfo = null;

        /**
         * AllianceFightPlayerInfo allianceName.
         * @member {string} allianceName
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.allianceName = "";

        /**
         * AllianceFightPlayerInfo rankScore.
         * @member {number} rankScore
         * @memberof proto.AllianceFightPlayerInfo
         * @instance
         */
        AllianceFightPlayerInfo.prototype.rankScore = 0;

        /**
         * Encodes the specified AllianceFightPlayerInfo message. Does not implicitly {@link proto.AllianceFightPlayerInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceFightPlayerInfo
         * @static
         * @param {proto.IAllianceFightPlayerInfo} m AllianceFightPlayerInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceFightPlayerInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(18).string(m.roleName);
            if (m.indexCard != null && Object.hasOwnProperty.call(m, "indexCard"))
                w.uint32(24).int32(m.indexCard);
            if (m.pvpCardInfo != null && Object.hasOwnProperty.call(m, "pvpCardInfo"))
                $root.proto.PlayerPvpCardInfo.encode(m.pvpCardInfo, w.uint32(34).fork()).ldelim();
            if (m.devilInfo != null && Object.hasOwnProperty.call(m, "devilInfo"))
                $root.proto.FightCardData.encode(m.devilInfo, w.uint32(42).fork()).ldelim();
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(50).string(m.allianceName);
            if (m.rankScore != null && Object.hasOwnProperty.call(m, "rankScore"))
                w.uint32(56).int32(m.rankScore);
            return w;
        };

        /**
         * Decodes an AllianceFightPlayerInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceFightPlayerInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceFightPlayerInfo} AllianceFightPlayerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceFightPlayerInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceFightPlayerInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.roleName = r.string();
                    break;
                case 3:
                    m.indexCard = r.int32();
                    break;
                case 4:
                    m.pvpCardInfo = $root.proto.PlayerPvpCardInfo.decode(r, r.uint32());
                    break;
                case 5:
                    m.devilInfo = $root.proto.FightCardData.decode(r, r.uint32());
                    break;
                case 6:
                    m.allianceName = r.string();
                    break;
                case 7:
                    m.rankScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceFightPlayerInfo;
    })();

    proto.AllianceFightInviteStruct = (function() {

        /**
         * Properties of an AllianceFightInviteStruct.
         * @memberof proto
         * @interface IAllianceFightInviteStruct
         * @property {number|null} [roomID] AllianceFightInviteStruct roomID
         * @property {proto.FightType|null} [type] AllianceFightInviteStruct type
         * @property {proto.IAllianceFightPlayerInfo|null} [playerInfo] AllianceFightInviteStruct playerInfo
         * @property {string|null} [inviteMessage] AllianceFightInviteStruct inviteMessage
         * @property {number|null} [startTime] AllianceFightInviteStruct startTime
         * @property {boolean|null} [bCardLvLimit] AllianceFightInviteStruct bCardLvLimit
         */

        /**
         * Constructs a new AllianceFightInviteStruct.
         * @memberof proto
         * @classdesc Represents an AllianceFightInviteStruct.
         * @implements IAllianceFightInviteStruct
         * @constructor
         * @param {proto.IAllianceFightInviteStruct=} [p] Properties to set
         */
        function AllianceFightInviteStruct(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceFightInviteStruct roomID.
         * @member {number} roomID
         * @memberof proto.AllianceFightInviteStruct
         * @instance
         */
        AllianceFightInviteStruct.prototype.roomID = 0;

        /**
         * AllianceFightInviteStruct type.
         * @member {proto.FightType} type
         * @memberof proto.AllianceFightInviteStruct
         * @instance
         */
        AllianceFightInviteStruct.prototype.type = 0;

        /**
         * AllianceFightInviteStruct playerInfo.
         * @member {proto.IAllianceFightPlayerInfo|null|undefined} playerInfo
         * @memberof proto.AllianceFightInviteStruct
         * @instance
         */
        AllianceFightInviteStruct.prototype.playerInfo = null;

        /**
         * AllianceFightInviteStruct inviteMessage.
         * @member {string} inviteMessage
         * @memberof proto.AllianceFightInviteStruct
         * @instance
         */
        AllianceFightInviteStruct.prototype.inviteMessage = "";

        /**
         * AllianceFightInviteStruct startTime.
         * @member {number} startTime
         * @memberof proto.AllianceFightInviteStruct
         * @instance
         */
        AllianceFightInviteStruct.prototype.startTime = 0;

        /**
         * AllianceFightInviteStruct bCardLvLimit.
         * @member {boolean} bCardLvLimit
         * @memberof proto.AllianceFightInviteStruct
         * @instance
         */
        AllianceFightInviteStruct.prototype.bCardLvLimit = false;

        /**
         * Encodes the specified AllianceFightInviteStruct message. Does not implicitly {@link proto.AllianceFightInviteStruct.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceFightInviteStruct
         * @static
         * @param {proto.IAllianceFightInviteStruct} m AllianceFightInviteStruct message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceFightInviteStruct.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(8).int32(m.roomID);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(16).int32(m.type);
            if (m.playerInfo != null && Object.hasOwnProperty.call(m, "playerInfo"))
                $root.proto.AllianceFightPlayerInfo.encode(m.playerInfo, w.uint32(26).fork()).ldelim();
            if (m.inviteMessage != null && Object.hasOwnProperty.call(m, "inviteMessage"))
                w.uint32(34).string(m.inviteMessage);
            if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime"))
                w.uint32(40).int32(m.startTime);
            if (m.bCardLvLimit != null && Object.hasOwnProperty.call(m, "bCardLvLimit"))
                w.uint32(48).bool(m.bCardLvLimit);
            return w;
        };

        /**
         * Decodes an AllianceFightInviteStruct message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceFightInviteStruct
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceFightInviteStruct} AllianceFightInviteStruct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceFightInviteStruct.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceFightInviteStruct();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roomID = r.int32();
                    break;
                case 2:
                    m.type = r.int32();
                    break;
                case 3:
                    m.playerInfo = $root.proto.AllianceFightPlayerInfo.decode(r, r.uint32());
                    break;
                case 4:
                    m.inviteMessage = r.string();
                    break;
                case 5:
                    m.startTime = r.int32();
                    break;
                case 6:
                    m.bCardLvLimit = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceFightInviteStruct;
    })();

    proto.AllianceFightOver = (function() {

        /**
         * Properties of an AllianceFightOver.
         * @memberof proto
         * @interface IAllianceFightOver
         * @property {number|null} [wave] AllianceFightOver wave
         * @property {number|null} [duration] AllianceFightOver duration
         * @property {string|null} [winner] AllianceFightOver winner
         */

        /**
         * Constructs a new AllianceFightOver.
         * @memberof proto
         * @classdesc Represents an AllianceFightOver.
         * @implements IAllianceFightOver
         * @constructor
         * @param {proto.IAllianceFightOver=} [p] Properties to set
         */
        function AllianceFightOver(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceFightOver wave.
         * @member {number} wave
         * @memberof proto.AllianceFightOver
         * @instance
         */
        AllianceFightOver.prototype.wave = 0;

        /**
         * AllianceFightOver duration.
         * @member {number} duration
         * @memberof proto.AllianceFightOver
         * @instance
         */
        AllianceFightOver.prototype.duration = 0;

        /**
         * AllianceFightOver winner.
         * @member {string} winner
         * @memberof proto.AllianceFightOver
         * @instance
         */
        AllianceFightOver.prototype.winner = "";

        /**
         * Encodes the specified AllianceFightOver message. Does not implicitly {@link proto.AllianceFightOver.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceFightOver
         * @static
         * @param {proto.IAllianceFightOver} m AllianceFightOver message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceFightOver.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.wave != null && Object.hasOwnProperty.call(m, "wave"))
                w.uint32(8).int32(m.wave);
            if (m.duration != null && Object.hasOwnProperty.call(m, "duration"))
                w.uint32(16).int32(m.duration);
            if (m.winner != null && Object.hasOwnProperty.call(m, "winner"))
                w.uint32(26).string(m.winner);
            return w;
        };

        /**
         * Decodes an AllianceFightOver message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceFightOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceFightOver} AllianceFightOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceFightOver.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceFightOver();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.wave = r.int32();
                    break;
                case 2:
                    m.duration = r.int32();
                    break;
                case 3:
                    m.winner = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceFightOver;
    })();

    proto.AllianceFightStruct = (function() {

        /**
         * Properties of an AllianceFightStruct.
         * @memberof proto
         * @interface IAllianceFightStruct
         * @property {proto.FightType|null} [type] AllianceFightStruct type
         * @property {proto.IAllianceFightPlayerInfo|null} [player1] AllianceFightStruct player1
         * @property {proto.IAllianceFightPlayerInfo|null} [player2] AllianceFightStruct player2
         * @property {number|null} [startTime] AllianceFightStruct startTime
         * @property {number|null} [roomID] AllianceFightStruct roomID
         * @property {proto.IAllianceFightOver|null} [overData] AllianceFightStruct overData
         */

        /**
         * Constructs a new AllianceFightStruct.
         * @memberof proto
         * @classdesc Represents an AllianceFightStruct.
         * @implements IAllianceFightStruct
         * @constructor
         * @param {proto.IAllianceFightStruct=} [p] Properties to set
         */
        function AllianceFightStruct(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceFightStruct type.
         * @member {proto.FightType} type
         * @memberof proto.AllianceFightStruct
         * @instance
         */
        AllianceFightStruct.prototype.type = 0;

        /**
         * AllianceFightStruct player1.
         * @member {proto.IAllianceFightPlayerInfo|null|undefined} player1
         * @memberof proto.AllianceFightStruct
         * @instance
         */
        AllianceFightStruct.prototype.player1 = null;

        /**
         * AllianceFightStruct player2.
         * @member {proto.IAllianceFightPlayerInfo|null|undefined} player2
         * @memberof proto.AllianceFightStruct
         * @instance
         */
        AllianceFightStruct.prototype.player2 = null;

        /**
         * AllianceFightStruct startTime.
         * @member {number} startTime
         * @memberof proto.AllianceFightStruct
         * @instance
         */
        AllianceFightStruct.prototype.startTime = 0;

        /**
         * AllianceFightStruct roomID.
         * @member {number} roomID
         * @memberof proto.AllianceFightStruct
         * @instance
         */
        AllianceFightStruct.prototype.roomID = 0;

        /**
         * AllianceFightStruct overData.
         * @member {proto.IAllianceFightOver|null|undefined} overData
         * @memberof proto.AllianceFightStruct
         * @instance
         */
        AllianceFightStruct.prototype.overData = null;

        /**
         * Encodes the specified AllianceFightStruct message. Does not implicitly {@link proto.AllianceFightStruct.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceFightStruct
         * @static
         * @param {proto.IAllianceFightStruct} m AllianceFightStruct message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceFightStruct.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.player1 != null && Object.hasOwnProperty.call(m, "player1"))
                $root.proto.AllianceFightPlayerInfo.encode(m.player1, w.uint32(18).fork()).ldelim();
            if (m.player2 != null && Object.hasOwnProperty.call(m, "player2"))
                $root.proto.AllianceFightPlayerInfo.encode(m.player2, w.uint32(26).fork()).ldelim();
            if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime"))
                w.uint32(32).int32(m.startTime);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(40).int32(m.roomID);
            if (m.overData != null && Object.hasOwnProperty.call(m, "overData"))
                $root.proto.AllianceFightOver.encode(m.overData, w.uint32(50).fork()).ldelim();
            return w;
        };

        /**
         * Decodes an AllianceFightStruct message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceFightStruct
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceFightStruct} AllianceFightStruct
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceFightStruct.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceFightStruct();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.player1 = $root.proto.AllianceFightPlayerInfo.decode(r, r.uint32());
                    break;
                case 3:
                    m.player2 = $root.proto.AllianceFightPlayerInfo.decode(r, r.uint32());
                    break;
                case 4:
                    m.startTime = r.int32();
                    break;
                case 5:
                    m.roomID = r.int32();
                    break;
                case 6:
                    m.overData = $root.proto.AllianceFightOver.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceFightStruct;
    })();

    proto.AllianceDonateData = (function() {

        /**
         * Properties of an AllianceDonateData.
         * @memberof proto
         * @interface IAllianceDonateData
         * @property {number|null} [nextCardRequestTime] AllianceDonateData nextCardRequestTime
         * @property {number|null} [todayDonateScore] AllianceDonateData todayDonateScore
         * @property {number|null} [recvCardDonateNumber] AllianceDonateData recvCardDonateNumber
         * @property {number|null} [totalDonateScore] AllianceDonateData totalDonateScore
         */

        /**
         * Constructs a new AllianceDonateData.
         * @memberof proto
         * @classdesc Represents an AllianceDonateData.
         * @implements IAllianceDonateData
         * @constructor
         * @param {proto.IAllianceDonateData=} [p] Properties to set
         */
        function AllianceDonateData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceDonateData nextCardRequestTime.
         * @member {number} nextCardRequestTime
         * @memberof proto.AllianceDonateData
         * @instance
         */
        AllianceDonateData.prototype.nextCardRequestTime = 0;

        /**
         * AllianceDonateData todayDonateScore.
         * @member {number} todayDonateScore
         * @memberof proto.AllianceDonateData
         * @instance
         */
        AllianceDonateData.prototype.todayDonateScore = 0;

        /**
         * AllianceDonateData recvCardDonateNumber.
         * @member {number} recvCardDonateNumber
         * @memberof proto.AllianceDonateData
         * @instance
         */
        AllianceDonateData.prototype.recvCardDonateNumber = 0;

        /**
         * AllianceDonateData totalDonateScore.
         * @member {number} totalDonateScore
         * @memberof proto.AllianceDonateData
         * @instance
         */
        AllianceDonateData.prototype.totalDonateScore = 0;

        /**
         * Encodes the specified AllianceDonateData message. Does not implicitly {@link proto.AllianceDonateData.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceDonateData
         * @static
         * @param {proto.IAllianceDonateData} m AllianceDonateData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceDonateData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.nextCardRequestTime != null && Object.hasOwnProperty.call(m, "nextCardRequestTime"))
                w.uint32(8).int32(m.nextCardRequestTime);
            if (m.todayDonateScore != null && Object.hasOwnProperty.call(m, "todayDonateScore"))
                w.uint32(16).int32(m.todayDonateScore);
            if (m.recvCardDonateNumber != null && Object.hasOwnProperty.call(m, "recvCardDonateNumber"))
                w.uint32(24).int32(m.recvCardDonateNumber);
            if (m.totalDonateScore != null && Object.hasOwnProperty.call(m, "totalDonateScore"))
                w.uint32(32).int32(m.totalDonateScore);
            return w;
        };

        /**
         * Decodes an AllianceDonateData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceDonateData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceDonateData} AllianceDonateData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceDonateData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceDonateData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.nextCardRequestTime = r.int32();
                    break;
                case 2:
                    m.todayDonateScore = r.int32();
                    break;
                case 3:
                    m.recvCardDonateNumber = r.int32();
                    break;
                case 4:
                    m.totalDonateScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceDonateData;
    })();

    proto.RoleAllianceData = (function() {

        /**
         * Properties of a RoleAllianceData.
         * @memberof proto
         * @interface IRoleAllianceData
         * @property {string|null} [allianceID] RoleAllianceData allianceID
         * @property {number|null} [PostRank] RoleAllianceData PostRank
         * @property {string|null} [applyingAllianceID] RoleAllianceData applyingAllianceID
         * @property {string|null} [allianceName] RoleAllianceData allianceName
         * @property {number|null} [allianceIcon] RoleAllianceData allianceIcon
         * @property {number|null} [allianceScore] RoleAllianceData allianceScore
         */

        /**
         * Constructs a new RoleAllianceData.
         * @memberof proto
         * @classdesc Represents a RoleAllianceData.
         * @implements IRoleAllianceData
         * @constructor
         * @param {proto.IRoleAllianceData=} [p] Properties to set
         */
        function RoleAllianceData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RoleAllianceData allianceID.
         * @member {string} allianceID
         * @memberof proto.RoleAllianceData
         * @instance
         */
        RoleAllianceData.prototype.allianceID = "";

        /**
         * RoleAllianceData PostRank.
         * @member {number} PostRank
         * @memberof proto.RoleAllianceData
         * @instance
         */
        RoleAllianceData.prototype.PostRank = 0;

        /**
         * RoleAllianceData applyingAllianceID.
         * @member {string} applyingAllianceID
         * @memberof proto.RoleAllianceData
         * @instance
         */
        RoleAllianceData.prototype.applyingAllianceID = "";

        /**
         * RoleAllianceData allianceName.
         * @member {string} allianceName
         * @memberof proto.RoleAllianceData
         * @instance
         */
        RoleAllianceData.prototype.allianceName = "";

        /**
         * RoleAllianceData allianceIcon.
         * @member {number} allianceIcon
         * @memberof proto.RoleAllianceData
         * @instance
         */
        RoleAllianceData.prototype.allianceIcon = 0;

        /**
         * RoleAllianceData allianceScore.
         * @member {number} allianceScore
         * @memberof proto.RoleAllianceData
         * @instance
         */
        RoleAllianceData.prototype.allianceScore = 0;

        /**
         * Encodes the specified RoleAllianceData message. Does not implicitly {@link proto.RoleAllianceData.verify|verify} messages.
         * @function encode
         * @memberof proto.RoleAllianceData
         * @static
         * @param {proto.IRoleAllianceData} m RoleAllianceData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoleAllianceData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceID != null && Object.hasOwnProperty.call(m, "allianceID"))
                w.uint32(10).string(m.allianceID);
            if (m.PostRank != null && Object.hasOwnProperty.call(m, "PostRank"))
                w.uint32(16).int32(m.PostRank);
            if (m.applyingAllianceID != null && Object.hasOwnProperty.call(m, "applyingAllianceID"))
                w.uint32(26).string(m.applyingAllianceID);
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(34).string(m.allianceName);
            if (m.allianceIcon != null && Object.hasOwnProperty.call(m, "allianceIcon"))
                w.uint32(40).int32(m.allianceIcon);
            if (m.allianceScore != null && Object.hasOwnProperty.call(m, "allianceScore"))
                w.uint32(48).int32(m.allianceScore);
            return w;
        };

        /**
         * Decodes a RoleAllianceData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RoleAllianceData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RoleAllianceData} RoleAllianceData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoleAllianceData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RoleAllianceData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceID = r.string();
                    break;
                case 2:
                    m.PostRank = r.int32();
                    break;
                case 3:
                    m.applyingAllianceID = r.string();
                    break;
                case 4:
                    m.allianceName = r.string();
                    break;
                case 5:
                    m.allianceIcon = r.int32();
                    break;
                case 6:
                    m.allianceScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RoleAllianceData;
    })();

    proto.AllianceSimpleInfo = (function() {

        /**
         * Properties of an AllianceSimpleInfo.
         * @memberof proto
         * @interface IAllianceSimpleInfo
         * @property {string|null} [allianceID] AllianceSimpleInfo allianceID
         * @property {string|null} [name] AllianceSimpleInfo name
         * @property {number|null} [icon] AllianceSimpleInfo icon
         * @property {number|null} [score] AllianceSimpleInfo score
         * @property {number|null} [numberOfMember] AllianceSimpleInfo numberOfMember
         */

        /**
         * Constructs a new AllianceSimpleInfo.
         * @memberof proto
         * @classdesc Represents an AllianceSimpleInfo.
         * @implements IAllianceSimpleInfo
         * @constructor
         * @param {proto.IAllianceSimpleInfo=} [p] Properties to set
         */
        function AllianceSimpleInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceSimpleInfo allianceID.
         * @member {string} allianceID
         * @memberof proto.AllianceSimpleInfo
         * @instance
         */
        AllianceSimpleInfo.prototype.allianceID = "";

        /**
         * AllianceSimpleInfo name.
         * @member {string} name
         * @memberof proto.AllianceSimpleInfo
         * @instance
         */
        AllianceSimpleInfo.prototype.name = "";

        /**
         * AllianceSimpleInfo icon.
         * @member {number} icon
         * @memberof proto.AllianceSimpleInfo
         * @instance
         */
        AllianceSimpleInfo.prototype.icon = 0;

        /**
         * AllianceSimpleInfo score.
         * @member {number} score
         * @memberof proto.AllianceSimpleInfo
         * @instance
         */
        AllianceSimpleInfo.prototype.score = 0;

        /**
         * AllianceSimpleInfo numberOfMember.
         * @member {number} numberOfMember
         * @memberof proto.AllianceSimpleInfo
         * @instance
         */
        AllianceSimpleInfo.prototype.numberOfMember = 0;

        /**
         * Encodes the specified AllianceSimpleInfo message. Does not implicitly {@link proto.AllianceSimpleInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceSimpleInfo
         * @static
         * @param {proto.IAllianceSimpleInfo} m AllianceSimpleInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceSimpleInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceID != null && Object.hasOwnProperty.call(m, "allianceID"))
                w.uint32(10).string(m.allianceID);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.icon != null && Object.hasOwnProperty.call(m, "icon"))
                w.uint32(24).int32(m.icon);
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(32).int32(m.score);
            if (m.numberOfMember != null && Object.hasOwnProperty.call(m, "numberOfMember"))
                w.uint32(40).int32(m.numberOfMember);
            return w;
        };

        /**
         * Decodes an AllianceSimpleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceSimpleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceSimpleInfo} AllianceSimpleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceSimpleInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceSimpleInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceID = r.string();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.icon = r.int32();
                    break;
                case 4:
                    m.score = r.int32();
                    break;
                case 5:
                    m.numberOfMember = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceSimpleInfo;
    })();

    proto.AllianceBaseInfo = (function() {

        /**
         * Properties of an AllianceBaseInfo.
         * @memberof proto
         * @interface IAllianceBaseInfo
         * @property {string|null} [allianceID] AllianceBaseInfo allianceID
         * @property {string|null} [name] AllianceBaseInfo name
         * @property {string|null} [instruction] AllianceBaseInfo instruction
         * @property {number|null} [icon] AllianceBaseInfo icon
         * @property {number|null} [joinType] AllianceBaseInfo joinType
         * @property {number|null} [joinMinScore] AllianceBaseInfo joinMinScore
         */

        /**
         * Constructs a new AllianceBaseInfo.
         * @memberof proto
         * @classdesc Represents an AllianceBaseInfo.
         * @implements IAllianceBaseInfo
         * @constructor
         * @param {proto.IAllianceBaseInfo=} [p] Properties to set
         */
        function AllianceBaseInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceBaseInfo allianceID.
         * @member {string} allianceID
         * @memberof proto.AllianceBaseInfo
         * @instance
         */
        AllianceBaseInfo.prototype.allianceID = "";

        /**
         * AllianceBaseInfo name.
         * @member {string} name
         * @memberof proto.AllianceBaseInfo
         * @instance
         */
        AllianceBaseInfo.prototype.name = "";

        /**
         * AllianceBaseInfo instruction.
         * @member {string} instruction
         * @memberof proto.AllianceBaseInfo
         * @instance
         */
        AllianceBaseInfo.prototype.instruction = "";

        /**
         * AllianceBaseInfo icon.
         * @member {number} icon
         * @memberof proto.AllianceBaseInfo
         * @instance
         */
        AllianceBaseInfo.prototype.icon = 0;

        /**
         * AllianceBaseInfo joinType.
         * @member {number} joinType
         * @memberof proto.AllianceBaseInfo
         * @instance
         */
        AllianceBaseInfo.prototype.joinType = 0;

        /**
         * AllianceBaseInfo joinMinScore.
         * @member {number} joinMinScore
         * @memberof proto.AllianceBaseInfo
         * @instance
         */
        AllianceBaseInfo.prototype.joinMinScore = 0;

        /**
         * Encodes the specified AllianceBaseInfo message. Does not implicitly {@link proto.AllianceBaseInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceBaseInfo
         * @static
         * @param {proto.IAllianceBaseInfo} m AllianceBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceBaseInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceID != null && Object.hasOwnProperty.call(m, "allianceID"))
                w.uint32(10).string(m.allianceID);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.instruction != null && Object.hasOwnProperty.call(m, "instruction"))
                w.uint32(26).string(m.instruction);
            if (m.icon != null && Object.hasOwnProperty.call(m, "icon"))
                w.uint32(32).int32(m.icon);
            if (m.joinType != null && Object.hasOwnProperty.call(m, "joinType"))
                w.uint32(40).int32(m.joinType);
            if (m.joinMinScore != null && Object.hasOwnProperty.call(m, "joinMinScore"))
                w.uint32(48).int32(m.joinMinScore);
            return w;
        };

        /**
         * Decodes an AllianceBaseInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceBaseInfo} AllianceBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceBaseInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceBaseInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceID = r.string();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.instruction = r.string();
                    break;
                case 4:
                    m.icon = r.int32();
                    break;
                case 5:
                    m.joinType = r.int32();
                    break;
                case 6:
                    m.joinMinScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceBaseInfo;
    })();

    proto.AllianceMemberInfo = (function() {

        /**
         * Properties of an AllianceMemberInfo.
         * @memberof proto
         * @interface IAllianceMemberInfo
         * @property {string|null} [roleID] AllianceMemberInfo roleID
         * @property {string|null} [roleName] AllianceMemberInfo roleName
         * @property {number|null} [rankScore] AllianceMemberInfo rankScore
         * @property {number|null} [indexCard] AllianceMemberInfo indexCard
         * @property {number|null} [support] AllianceMemberInfo support
         * @property {number|null} [postRank] AllianceMemberInfo postRank
         * @property {number|null} [lastLoginTime] AllianceMemberInfo lastLoginTime
         * @property {boolean|null} [isOnline] AllianceMemberInfo isOnline
         */

        /**
         * Constructs a new AllianceMemberInfo.
         * @memberof proto
         * @classdesc Represents an AllianceMemberInfo.
         * @implements IAllianceMemberInfo
         * @constructor
         * @param {proto.IAllianceMemberInfo=} [p] Properties to set
         */
        function AllianceMemberInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceMemberInfo roleID.
         * @member {string} roleID
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.roleID = "";

        /**
         * AllianceMemberInfo roleName.
         * @member {string} roleName
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.roleName = "";

        /**
         * AllianceMemberInfo rankScore.
         * @member {number} rankScore
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.rankScore = 0;

        /**
         * AllianceMemberInfo indexCard.
         * @member {number} indexCard
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.indexCard = 0;

        /**
         * AllianceMemberInfo support.
         * @member {number} support
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.support = 0;

        /**
         * AllianceMemberInfo postRank.
         * @member {number} postRank
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.postRank = 0;

        /**
         * AllianceMemberInfo lastLoginTime.
         * @member {number} lastLoginTime
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.lastLoginTime = 0;

        /**
         * AllianceMemberInfo isOnline.
         * @member {boolean} isOnline
         * @memberof proto.AllianceMemberInfo
         * @instance
         */
        AllianceMemberInfo.prototype.isOnline = false;

        /**
         * Encodes the specified AllianceMemberInfo message. Does not implicitly {@link proto.AllianceMemberInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceMemberInfo
         * @static
         * @param {proto.IAllianceMemberInfo} m AllianceMemberInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceMemberInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(18).string(m.roleName);
            if (m.rankScore != null && Object.hasOwnProperty.call(m, "rankScore"))
                w.uint32(24).int32(m.rankScore);
            if (m.indexCard != null && Object.hasOwnProperty.call(m, "indexCard"))
                w.uint32(32).int32(m.indexCard);
            if (m.support != null && Object.hasOwnProperty.call(m, "support"))
                w.uint32(40).int32(m.support);
            if (m.postRank != null && Object.hasOwnProperty.call(m, "postRank"))
                w.uint32(48).int32(m.postRank);
            if (m.lastLoginTime != null && Object.hasOwnProperty.call(m, "lastLoginTime"))
                w.uint32(56).int32(m.lastLoginTime);
            if (m.isOnline != null && Object.hasOwnProperty.call(m, "isOnline"))
                w.uint32(64).bool(m.isOnline);
            return w;
        };

        /**
         * Decodes an AllianceMemberInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceMemberInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceMemberInfo} AllianceMemberInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceMemberInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceMemberInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.roleName = r.string();
                    break;
                case 3:
                    m.rankScore = r.int32();
                    break;
                case 4:
                    m.indexCard = r.int32();
                    break;
                case 5:
                    m.support = r.int32();
                    break;
                case 6:
                    m.postRank = r.int32();
                    break;
                case 7:
                    m.lastLoginTime = r.int32();
                    break;
                case 8:
                    m.isOnline = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceMemberInfo;
    })();

    proto.AllianceApplyInfo = (function() {

        /**
         * Properties of an AllianceApplyInfo.
         * @memberof proto
         * @interface IAllianceApplyInfo
         * @property {string|null} [roleID] AllianceApplyInfo roleID
         * @property {string|null} [roleName] AllianceApplyInfo roleName
         * @property {number|null} [applyTime] AllianceApplyInfo applyTime
         * @property {number|null} [seasonScore] AllianceApplyInfo seasonScore
         */

        /**
         * Constructs a new AllianceApplyInfo.
         * @memberof proto
         * @classdesc Represents an AllianceApplyInfo.
         * @implements IAllianceApplyInfo
         * @constructor
         * @param {proto.IAllianceApplyInfo=} [p] Properties to set
         */
        function AllianceApplyInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceApplyInfo roleID.
         * @member {string} roleID
         * @memberof proto.AllianceApplyInfo
         * @instance
         */
        AllianceApplyInfo.prototype.roleID = "";

        /**
         * AllianceApplyInfo roleName.
         * @member {string} roleName
         * @memberof proto.AllianceApplyInfo
         * @instance
         */
        AllianceApplyInfo.prototype.roleName = "";

        /**
         * AllianceApplyInfo applyTime.
         * @member {number} applyTime
         * @memberof proto.AllianceApplyInfo
         * @instance
         */
        AllianceApplyInfo.prototype.applyTime = 0;

        /**
         * AllianceApplyInfo seasonScore.
         * @member {number} seasonScore
         * @memberof proto.AllianceApplyInfo
         * @instance
         */
        AllianceApplyInfo.prototype.seasonScore = 0;

        /**
         * Encodes the specified AllianceApplyInfo message. Does not implicitly {@link proto.AllianceApplyInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceApplyInfo
         * @static
         * @param {proto.IAllianceApplyInfo} m AllianceApplyInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceApplyInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(18).string(m.roleName);
            if (m.applyTime != null && Object.hasOwnProperty.call(m, "applyTime"))
                w.uint32(24).int32(m.applyTime);
            if (m.seasonScore != null && Object.hasOwnProperty.call(m, "seasonScore"))
                w.uint32(32).int32(m.seasonScore);
            return w;
        };

        /**
         * Decodes an AllianceApplyInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceApplyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceApplyInfo} AllianceApplyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceApplyInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceApplyInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.roleName = r.string();
                    break;
                case 3:
                    m.applyTime = r.int32();
                    break;
                case 4:
                    m.seasonScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceApplyInfo;
    })();

    proto.AllianceCardDonateInfo = (function() {

        /**
         * Properties of an AllianceCardDonateInfo.
         * @memberof proto
         * @interface IAllianceCardDonateInfo
         * @property {string|null} [donateRoleID] AllianceCardDonateInfo donateRoleID
         * @property {number|null} [count] AllianceCardDonateInfo count
         */

        /**
         * Constructs a new AllianceCardDonateInfo.
         * @memberof proto
         * @classdesc Represents an AllianceCardDonateInfo.
         * @implements IAllianceCardDonateInfo
         * @constructor
         * @param {proto.IAllianceCardDonateInfo=} [p] Properties to set
         */
        function AllianceCardDonateInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceCardDonateInfo donateRoleID.
         * @member {string} donateRoleID
         * @memberof proto.AllianceCardDonateInfo
         * @instance
         */
        AllianceCardDonateInfo.prototype.donateRoleID = "";

        /**
         * AllianceCardDonateInfo count.
         * @member {number} count
         * @memberof proto.AllianceCardDonateInfo
         * @instance
         */
        AllianceCardDonateInfo.prototype.count = 0;

        /**
         * Encodes the specified AllianceCardDonateInfo message. Does not implicitly {@link proto.AllianceCardDonateInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceCardDonateInfo
         * @static
         * @param {proto.IAllianceCardDonateInfo} m AllianceCardDonateInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceCardDonateInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.donateRoleID != null && Object.hasOwnProperty.call(m, "donateRoleID"))
                w.uint32(10).string(m.donateRoleID);
            if (m.count != null && Object.hasOwnProperty.call(m, "count"))
                w.uint32(16).int32(m.count);
            return w;
        };

        /**
         * Decodes an AllianceCardDonateInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceCardDonateInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceCardDonateInfo} AllianceCardDonateInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceCardDonateInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceCardDonateInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.donateRoleID = r.string();
                    break;
                case 2:
                    m.count = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceCardDonateInfo;
    })();

    proto.AllianceCardRequestInfo = (function() {

        /**
         * Properties of an AllianceCardRequestInfo.
         * @memberof proto
         * @interface IAllianceCardRequestInfo
         * @property {string|null} [roleID] AllianceCardRequestInfo roleID
         * @property {number|null} [cardID] AllianceCardRequestInfo cardID
         * @property {number|null} [curNumber] AllianceCardRequestInfo curNumber
         * @property {number|null} [maxNumber] AllianceCardRequestInfo maxNumber
         * @property {number|null} [requestTime] AllianceCardRequestInfo requestTime
         * @property {Array.<proto.IAllianceCardDonateInfo>|null} [donateInfo] AllianceCardRequestInfo donateInfo
         */

        /**
         * Constructs a new AllianceCardRequestInfo.
         * @memberof proto
         * @classdesc Represents an AllianceCardRequestInfo.
         * @implements IAllianceCardRequestInfo
         * @constructor
         * @param {proto.IAllianceCardRequestInfo=} [p] Properties to set
         */
        function AllianceCardRequestInfo(p) {
            this.donateInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceCardRequestInfo roleID.
         * @member {string} roleID
         * @memberof proto.AllianceCardRequestInfo
         * @instance
         */
        AllianceCardRequestInfo.prototype.roleID = "";

        /**
         * AllianceCardRequestInfo cardID.
         * @member {number} cardID
         * @memberof proto.AllianceCardRequestInfo
         * @instance
         */
        AllianceCardRequestInfo.prototype.cardID = 0;

        /**
         * AllianceCardRequestInfo curNumber.
         * @member {number} curNumber
         * @memberof proto.AllianceCardRequestInfo
         * @instance
         */
        AllianceCardRequestInfo.prototype.curNumber = 0;

        /**
         * AllianceCardRequestInfo maxNumber.
         * @member {number} maxNumber
         * @memberof proto.AllianceCardRequestInfo
         * @instance
         */
        AllianceCardRequestInfo.prototype.maxNumber = 0;

        /**
         * AllianceCardRequestInfo requestTime.
         * @member {number} requestTime
         * @memberof proto.AllianceCardRequestInfo
         * @instance
         */
        AllianceCardRequestInfo.prototype.requestTime = 0;

        /**
         * AllianceCardRequestInfo donateInfo.
         * @member {Array.<proto.IAllianceCardDonateInfo>} donateInfo
         * @memberof proto.AllianceCardRequestInfo
         * @instance
         */
        AllianceCardRequestInfo.prototype.donateInfo = $util.emptyArray;

        /**
         * Encodes the specified AllianceCardRequestInfo message. Does not implicitly {@link proto.AllianceCardRequestInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceCardRequestInfo
         * @static
         * @param {proto.IAllianceCardRequestInfo} m AllianceCardRequestInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceCardRequestInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(16).int32(m.cardID);
            if (m.curNumber != null && Object.hasOwnProperty.call(m, "curNumber"))
                w.uint32(24).int32(m.curNumber);
            if (m.maxNumber != null && Object.hasOwnProperty.call(m, "maxNumber"))
                w.uint32(32).int32(m.maxNumber);
            if (m.requestTime != null && Object.hasOwnProperty.call(m, "requestTime"))
                w.uint32(40).int32(m.requestTime);
            if (m.donateInfo != null && m.donateInfo.length) {
                for (var i = 0; i < m.donateInfo.length; ++i)
                    $root.proto.AllianceCardDonateInfo.encode(m.donateInfo[i], w.uint32(50).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes an AllianceCardRequestInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceCardRequestInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceCardRequestInfo} AllianceCardRequestInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceCardRequestInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceCardRequestInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.cardID = r.int32();
                    break;
                case 3:
                    m.curNumber = r.int32();
                    break;
                case 4:
                    m.maxNumber = r.int32();
                    break;
                case 5:
                    m.requestTime = r.int32();
                    break;
                case 6:
                    if (!(m.donateInfo && m.donateInfo.length))
                        m.donateInfo = [];
                    m.donateInfo.push($root.proto.AllianceCardDonateInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceCardRequestInfo;
    })();

    proto.AllianceInfo = (function() {

        /**
         * Properties of an AllianceInfo.
         * @memberof proto
         * @interface IAllianceInfo
         * @property {proto.IAllianceBaseInfo|null} [baseInfo] AllianceInfo baseInfo
         * @property {Array.<proto.IAllianceMemberInfo>|null} [memberInfo] AllianceInfo memberInfo
         * @property {Array.<proto.IAllianceApplyInfo>|null} [applyInfo] AllianceInfo applyInfo
         * @property {number|null} [score] AllianceInfo score
         * @property {number|null} [totalSupport] AllianceInfo totalSupport
         * @property {Array.<proto.IAllianceMsgData>|null} [msgList] AllianceInfo msgList
         * @property {Array.<proto.IAllianceCardRequestInfo>|null} [cardRequestInfo] AllianceInfo cardRequestInfo
         */

        /**
         * Constructs a new AllianceInfo.
         * @memberof proto
         * @classdesc Represents an AllianceInfo.
         * @implements IAllianceInfo
         * @constructor
         * @param {proto.IAllianceInfo=} [p] Properties to set
         */
        function AllianceInfo(p) {
            this.memberInfo = [];
            this.applyInfo = [];
            this.msgList = [];
            this.cardRequestInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * AllianceInfo baseInfo.
         * @member {proto.IAllianceBaseInfo|null|undefined} baseInfo
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.baseInfo = null;

        /**
         * AllianceInfo memberInfo.
         * @member {Array.<proto.IAllianceMemberInfo>} memberInfo
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.memberInfo = $util.emptyArray;

        /**
         * AllianceInfo applyInfo.
         * @member {Array.<proto.IAllianceApplyInfo>} applyInfo
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.applyInfo = $util.emptyArray;

        /**
         * AllianceInfo score.
         * @member {number} score
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.score = 0;

        /**
         * AllianceInfo totalSupport.
         * @member {number} totalSupport
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.totalSupport = 0;

        /**
         * AllianceInfo msgList.
         * @member {Array.<proto.IAllianceMsgData>} msgList
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.msgList = $util.emptyArray;

        /**
         * AllianceInfo cardRequestInfo.
         * @member {Array.<proto.IAllianceCardRequestInfo>} cardRequestInfo
         * @memberof proto.AllianceInfo
         * @instance
         */
        AllianceInfo.prototype.cardRequestInfo = $util.emptyArray;

        /**
         * Encodes the specified AllianceInfo message. Does not implicitly {@link proto.AllianceInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.AllianceInfo
         * @static
         * @param {proto.IAllianceInfo} m AllianceInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AllianceInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.baseInfo != null && Object.hasOwnProperty.call(m, "baseInfo"))
                $root.proto.AllianceBaseInfo.encode(m.baseInfo, w.uint32(10).fork()).ldelim();
            if (m.memberInfo != null && m.memberInfo.length) {
                for (var i = 0; i < m.memberInfo.length; ++i)
                    $root.proto.AllianceMemberInfo.encode(m.memberInfo[i], w.uint32(18).fork()).ldelim();
            }
            if (m.applyInfo != null && m.applyInfo.length) {
                for (var i = 0; i < m.applyInfo.length; ++i)
                    $root.proto.AllianceApplyInfo.encode(m.applyInfo[i], w.uint32(26).fork()).ldelim();
            }
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(32).int32(m.score);
            if (m.totalSupport != null && Object.hasOwnProperty.call(m, "totalSupport"))
                w.uint32(40).int32(m.totalSupport);
            if (m.msgList != null && m.msgList.length) {
                for (var i = 0; i < m.msgList.length; ++i)
                    $root.proto.AllianceMsgData.encode(m.msgList[i], w.uint32(50).fork()).ldelim();
            }
            if (m.cardRequestInfo != null && m.cardRequestInfo.length) {
                for (var i = 0; i < m.cardRequestInfo.length; ++i)
                    $root.proto.AllianceCardRequestInfo.encode(m.cardRequestInfo[i], w.uint32(58).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes an AllianceInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.AllianceInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.AllianceInfo} AllianceInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AllianceInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.AllianceInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.baseInfo = $root.proto.AllianceBaseInfo.decode(r, r.uint32());
                    break;
                case 2:
                    if (!(m.memberInfo && m.memberInfo.length))
                        m.memberInfo = [];
                    m.memberInfo.push($root.proto.AllianceMemberInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.applyInfo && m.applyInfo.length))
                        m.applyInfo = [];
                    m.applyInfo.push($root.proto.AllianceApplyInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    m.score = r.int32();
                    break;
                case 5:
                    m.totalSupport = r.int32();
                    break;
                case 6:
                    if (!(m.msgList && m.msgList.length))
                        m.msgList = [];
                    m.msgList.push($root.proto.AllianceMsgData.decode(r, r.uint32()));
                    break;
                case 7:
                    if (!(m.cardRequestInfo && m.cardRequestInfo.length))
                        m.cardRequestInfo = [];
                    m.cardRequestInfo.push($root.proto.AllianceCardRequestInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AllianceInfo;
    })();

    proto.Msg_CreateAllianceReq = (function() {

        /**
         * Properties of a Msg_CreateAllianceReq.
         * @memberof proto
         * @interface IMsg_CreateAllianceReq
         * @property {string|null} [name] Msg_CreateAllianceReq name
         * @property {string|null} [Instruction] Msg_CreateAllianceReq Instruction
         * @property {number|null} [JoinType] Msg_CreateAllianceReq JoinType
         * @property {number|null} [JoinMinScore] Msg_CreateAllianceReq JoinMinScore
         * @property {number|null} [Icon] Msg_CreateAllianceReq Icon
         */

        /**
         * Constructs a new Msg_CreateAllianceReq.
         * @memberof proto
         * @classdesc Represents a Msg_CreateAllianceReq.
         * @implements IMsg_CreateAllianceReq
         * @constructor
         * @param {proto.IMsg_CreateAllianceReq=} [p] Properties to set
         */
        function Msg_CreateAllianceReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CreateAllianceReq name.
         * @member {string} name
         * @memberof proto.Msg_CreateAllianceReq
         * @instance
         */
        Msg_CreateAllianceReq.prototype.name = "";

        /**
         * Msg_CreateAllianceReq Instruction.
         * @member {string} Instruction
         * @memberof proto.Msg_CreateAllianceReq
         * @instance
         */
        Msg_CreateAllianceReq.prototype.Instruction = "";

        /**
         * Msg_CreateAllianceReq JoinType.
         * @member {number} JoinType
         * @memberof proto.Msg_CreateAllianceReq
         * @instance
         */
        Msg_CreateAllianceReq.prototype.JoinType = 0;

        /**
         * Msg_CreateAllianceReq JoinMinScore.
         * @member {number} JoinMinScore
         * @memberof proto.Msg_CreateAllianceReq
         * @instance
         */
        Msg_CreateAllianceReq.prototype.JoinMinScore = 0;

        /**
         * Msg_CreateAllianceReq Icon.
         * @member {number} Icon
         * @memberof proto.Msg_CreateAllianceReq
         * @instance
         */
        Msg_CreateAllianceReq.prototype.Icon = 0;

        /**
         * Encodes the specified Msg_CreateAllianceReq message. Does not implicitly {@link proto.Msg_CreateAllianceReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CreateAllianceReq
         * @static
         * @param {proto.IMsg_CreateAllianceReq} m Msg_CreateAllianceReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CreateAllianceReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(10).string(m.name);
            if (m.Instruction != null && Object.hasOwnProperty.call(m, "Instruction"))
                w.uint32(18).string(m.Instruction);
            if (m.JoinType != null && Object.hasOwnProperty.call(m, "JoinType"))
                w.uint32(24).int32(m.JoinType);
            if (m.JoinMinScore != null && Object.hasOwnProperty.call(m, "JoinMinScore"))
                w.uint32(32).int32(m.JoinMinScore);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(40).int32(m.Icon);
            return w;
        };

        /**
         * Decodes a Msg_CreateAllianceReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CreateAllianceReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CreateAllianceReq} Msg_CreateAllianceReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CreateAllianceReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CreateAllianceReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.name = r.string();
                    break;
                case 2:
                    m.Instruction = r.string();
                    break;
                case 3:
                    m.JoinType = r.int32();
                    break;
                case 4:
                    m.JoinMinScore = r.int32();
                    break;
                case 5:
                    m.Icon = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CreateAllianceReq;
    })();

    proto.Msg_CreateAllianceRsp = (function() {

        /**
         * Properties of a Msg_CreateAllianceRsp.
         * @memberof proto
         * @interface IMsg_CreateAllianceRsp
         * @property {proto.Msg_CreateAllianceRsp.ErrorCode|null} [result] Msg_CreateAllianceRsp result
         * @property {proto.IAllianceInfo|null} [allianceInfo] Msg_CreateAllianceRsp allianceInfo
         */

        /**
         * Constructs a new Msg_CreateAllianceRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CreateAllianceRsp.
         * @implements IMsg_CreateAllianceRsp
         * @constructor
         * @param {proto.IMsg_CreateAllianceRsp=} [p] Properties to set
         */
        function Msg_CreateAllianceRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CreateAllianceRsp result.
         * @member {proto.Msg_CreateAllianceRsp.ErrorCode} result
         * @memberof proto.Msg_CreateAllianceRsp
         * @instance
         */
        Msg_CreateAllianceRsp.prototype.result = 0;

        /**
         * Msg_CreateAllianceRsp allianceInfo.
         * @member {proto.IAllianceInfo|null|undefined} allianceInfo
         * @memberof proto.Msg_CreateAllianceRsp
         * @instance
         */
        Msg_CreateAllianceRsp.prototype.allianceInfo = null;

        /**
         * Encodes the specified Msg_CreateAllianceRsp message. Does not implicitly {@link proto.Msg_CreateAllianceRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CreateAllianceRsp
         * @static
         * @param {proto.IMsg_CreateAllianceRsp} m Msg_CreateAllianceRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CreateAllianceRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.allianceInfo != null && Object.hasOwnProperty.call(m, "allianceInfo"))
                $root.proto.AllianceInfo.encode(m.allianceInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_CreateAllianceRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CreateAllianceRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CreateAllianceRsp} Msg_CreateAllianceRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CreateAllianceRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CreateAllianceRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.allianceInfo = $root.proto.AllianceInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_CreateAllianceRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} MoneyNotEnough=1 MoneyNotEnough value
         * @property {number} HaveAlliance=2 HaveAlliance value
         * @property {number} AllianceInfoIncomplete=3 AllianceInfoIncomplete value
         * @property {number} SensitiveWordError=4 SensitiveWordError value
         */
        Msg_CreateAllianceRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "MoneyNotEnough"] = 1;
            values[valuesById[2] = "HaveAlliance"] = 2;
            values[valuesById[3] = "AllianceInfoIncomplete"] = 3;
            values[valuesById[4] = "SensitiveWordError"] = 4;
            return values;
        })();

        return Msg_CreateAllianceRsp;
    })();

    proto.Msg_JoinAllianceReq = (function() {

        /**
         * Properties of a Msg_JoinAllianceReq.
         * @memberof proto
         * @interface IMsg_JoinAllianceReq
         * @property {string|null} [allianceID] Msg_JoinAllianceReq allianceID
         */

        /**
         * Constructs a new Msg_JoinAllianceReq.
         * @memberof proto
         * @classdesc Represents a Msg_JoinAllianceReq.
         * @implements IMsg_JoinAllianceReq
         * @constructor
         * @param {proto.IMsg_JoinAllianceReq=} [p] Properties to set
         */
        function Msg_JoinAllianceReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_JoinAllianceReq allianceID.
         * @member {string} allianceID
         * @memberof proto.Msg_JoinAllianceReq
         * @instance
         */
        Msg_JoinAllianceReq.prototype.allianceID = "";

        /**
         * Encodes the specified Msg_JoinAllianceReq message. Does not implicitly {@link proto.Msg_JoinAllianceReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_JoinAllianceReq
         * @static
         * @param {proto.IMsg_JoinAllianceReq} m Msg_JoinAllianceReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_JoinAllianceReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceID != null && Object.hasOwnProperty.call(m, "allianceID"))
                w.uint32(10).string(m.allianceID);
            return w;
        };

        /**
         * Decodes a Msg_JoinAllianceReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_JoinAllianceReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_JoinAllianceReq} Msg_JoinAllianceReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_JoinAllianceReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_JoinAllianceReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_JoinAllianceReq;
    })();

    proto.Msg_JoinAllianceRsp = (function() {

        /**
         * Properties of a Msg_JoinAllianceRsp.
         * @memberof proto
         * @interface IMsg_JoinAllianceRsp
         * @property {proto.Msg_JoinAllianceRsp.ErrorCode|null} [result] Msg_JoinAllianceRsp result
         * @property {proto.IAllianceInfo|null} [allianceInfo] Msg_JoinAllianceRsp allianceInfo
         */

        /**
         * Constructs a new Msg_JoinAllianceRsp.
         * @memberof proto
         * @classdesc Represents a Msg_JoinAllianceRsp.
         * @implements IMsg_JoinAllianceRsp
         * @constructor
         * @param {proto.IMsg_JoinAllianceRsp=} [p] Properties to set
         */
        function Msg_JoinAllianceRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_JoinAllianceRsp result.
         * @member {proto.Msg_JoinAllianceRsp.ErrorCode} result
         * @memberof proto.Msg_JoinAllianceRsp
         * @instance
         */
        Msg_JoinAllianceRsp.prototype.result = 0;

        /**
         * Msg_JoinAllianceRsp allianceInfo.
         * @member {proto.IAllianceInfo|null|undefined} allianceInfo
         * @memberof proto.Msg_JoinAllianceRsp
         * @instance
         */
        Msg_JoinAllianceRsp.prototype.allianceInfo = null;

        /**
         * Encodes the specified Msg_JoinAllianceRsp message. Does not implicitly {@link proto.Msg_JoinAllianceRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_JoinAllianceRsp
         * @static
         * @param {proto.IMsg_JoinAllianceRsp} m Msg_JoinAllianceRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_JoinAllianceRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.allianceInfo != null && Object.hasOwnProperty.call(m, "allianceInfo"))
                $root.proto.AllianceInfo.encode(m.allianceInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_JoinAllianceRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_JoinAllianceRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_JoinAllianceRsp} Msg_JoinAllianceRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_JoinAllianceRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_JoinAllianceRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.allianceInfo = $root.proto.AllianceInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_JoinAllianceRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} MemberFull=1 MemberFull value
         * @property {number} HaveAlliance=2 HaveAlliance value
         * @property {number} SeasonScoreNotEnough=3 SeasonScoreNotEnough value
         */
        Msg_JoinAllianceRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "MemberFull"] = 1;
            values[valuesById[2] = "HaveAlliance"] = 2;
            values[valuesById[3] = "SeasonScoreNotEnough"] = 3;
            return values;
        })();

        return Msg_JoinAllianceRsp;
    })();

    proto.Msg_QuitAllianceReq = (function() {

        /**
         * Properties of a Msg_QuitAllianceReq.
         * @memberof proto
         * @interface IMsg_QuitAllianceReq
         */

        /**
         * Constructs a new Msg_QuitAllianceReq.
         * @memberof proto
         * @classdesc Represents a Msg_QuitAllianceReq.
         * @implements IMsg_QuitAllianceReq
         * @constructor
         * @param {proto.IMsg_QuitAllianceReq=} [p] Properties to set
         */
        function Msg_QuitAllianceReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_QuitAllianceReq message. Does not implicitly {@link proto.Msg_QuitAllianceReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_QuitAllianceReq
         * @static
         * @param {proto.IMsg_QuitAllianceReq} m Msg_QuitAllianceReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_QuitAllianceReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_QuitAllianceReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_QuitAllianceReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_QuitAllianceReq} Msg_QuitAllianceReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_QuitAllianceReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_QuitAllianceReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_QuitAllianceReq;
    })();

    proto.Msg_QuitAllianceRsp = (function() {

        /**
         * Properties of a Msg_QuitAllianceRsp.
         * @memberof proto
         * @interface IMsg_QuitAllianceRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_QuitAllianceRsp result
         */

        /**
         * Constructs a new Msg_QuitAllianceRsp.
         * @memberof proto
         * @classdesc Represents a Msg_QuitAllianceRsp.
         * @implements IMsg_QuitAllianceRsp
         * @constructor
         * @param {proto.IMsg_QuitAllianceRsp=} [p] Properties to set
         */
        function Msg_QuitAllianceRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_QuitAllianceRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_QuitAllianceRsp
         * @instance
         */
        Msg_QuitAllianceRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_QuitAllianceRsp message. Does not implicitly {@link proto.Msg_QuitAllianceRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_QuitAllianceRsp
         * @static
         * @param {proto.IMsg_QuitAllianceRsp} m Msg_QuitAllianceRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_QuitAllianceRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_QuitAllianceRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_QuitAllianceRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_QuitAllianceRsp} Msg_QuitAllianceRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_QuitAllianceRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_QuitAllianceRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_QuitAllianceRsp;
    })();

    proto.Msg_DealAllianceJoinReq = (function() {

        /**
         * Properties of a Msg_DealAllianceJoinReq.
         * @memberof proto
         * @interface IMsg_DealAllianceJoinReq
         * @property {string|null} [roleID] Msg_DealAllianceJoinReq roleID
         * @property {boolean|null} [result] Msg_DealAllianceJoinReq result
         */

        /**
         * Constructs a new Msg_DealAllianceJoinReq.
         * @memberof proto
         * @classdesc Represents a Msg_DealAllianceJoinReq.
         * @implements IMsg_DealAllianceJoinReq
         * @constructor
         * @param {proto.IMsg_DealAllianceJoinReq=} [p] Properties to set
         */
        function Msg_DealAllianceJoinReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_DealAllianceJoinReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_DealAllianceJoinReq
         * @instance
         */
        Msg_DealAllianceJoinReq.prototype.roleID = "";

        /**
         * Msg_DealAllianceJoinReq result.
         * @member {boolean} result
         * @memberof proto.Msg_DealAllianceJoinReq
         * @instance
         */
        Msg_DealAllianceJoinReq.prototype.result = false;

        /**
         * Encodes the specified Msg_DealAllianceJoinReq message. Does not implicitly {@link proto.Msg_DealAllianceJoinReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_DealAllianceJoinReq
         * @static
         * @param {proto.IMsg_DealAllianceJoinReq} m Msg_DealAllianceJoinReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_DealAllianceJoinReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(16).bool(m.result);
            return w;
        };

        /**
         * Decodes a Msg_DealAllianceJoinReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_DealAllianceJoinReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_DealAllianceJoinReq} Msg_DealAllianceJoinReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_DealAllianceJoinReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_DealAllianceJoinReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.result = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_DealAllianceJoinReq;
    })();

    proto.Msg_DealAllianceJoinRsp = (function() {

        /**
         * Properties of a Msg_DealAllianceJoinRsp.
         * @memberof proto
         * @interface IMsg_DealAllianceJoinRsp
         * @property {proto.Msg_DealAllianceJoinRsp.ErrorCode|null} [result] Msg_DealAllianceJoinRsp result
         * @property {string|null} [roleID] Msg_DealAllianceJoinRsp roleID
         * @property {Array.<proto.IAllianceMemberInfo>|null} [memberInfo] Msg_DealAllianceJoinRsp memberInfo
         * @property {Array.<proto.IAllianceApplyInfo>|null} [applyInfo] Msg_DealAllianceJoinRsp applyInfo
         */

        /**
         * Constructs a new Msg_DealAllianceJoinRsp.
         * @memberof proto
         * @classdesc Represents a Msg_DealAllianceJoinRsp.
         * @implements IMsg_DealAllianceJoinRsp
         * @constructor
         * @param {proto.IMsg_DealAllianceJoinRsp=} [p] Properties to set
         */
        function Msg_DealAllianceJoinRsp(p) {
            this.memberInfo = [];
            this.applyInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_DealAllianceJoinRsp result.
         * @member {proto.Msg_DealAllianceJoinRsp.ErrorCode} result
         * @memberof proto.Msg_DealAllianceJoinRsp
         * @instance
         */
        Msg_DealAllianceJoinRsp.prototype.result = 0;

        /**
         * Msg_DealAllianceJoinRsp roleID.
         * @member {string} roleID
         * @memberof proto.Msg_DealAllianceJoinRsp
         * @instance
         */
        Msg_DealAllianceJoinRsp.prototype.roleID = "";

        /**
         * Msg_DealAllianceJoinRsp memberInfo.
         * @member {Array.<proto.IAllianceMemberInfo>} memberInfo
         * @memberof proto.Msg_DealAllianceJoinRsp
         * @instance
         */
        Msg_DealAllianceJoinRsp.prototype.memberInfo = $util.emptyArray;

        /**
         * Msg_DealAllianceJoinRsp applyInfo.
         * @member {Array.<proto.IAllianceApplyInfo>} applyInfo
         * @memberof proto.Msg_DealAllianceJoinRsp
         * @instance
         */
        Msg_DealAllianceJoinRsp.prototype.applyInfo = $util.emptyArray;

        /**
         * Encodes the specified Msg_DealAllianceJoinRsp message. Does not implicitly {@link proto.Msg_DealAllianceJoinRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_DealAllianceJoinRsp
         * @static
         * @param {proto.IMsg_DealAllianceJoinRsp} m Msg_DealAllianceJoinRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_DealAllianceJoinRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(18).string(m.roleID);
            if (m.memberInfo != null && m.memberInfo.length) {
                for (var i = 0; i < m.memberInfo.length; ++i)
                    $root.proto.AllianceMemberInfo.encode(m.memberInfo[i], w.uint32(26).fork()).ldelim();
            }
            if (m.applyInfo != null && m.applyInfo.length) {
                for (var i = 0; i < m.applyInfo.length; ++i)
                    $root.proto.AllianceApplyInfo.encode(m.applyInfo[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_DealAllianceJoinRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_DealAllianceJoinRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_DealAllianceJoinRsp} Msg_DealAllianceJoinRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_DealAllianceJoinRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_DealAllianceJoinRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.roleID = r.string();
                    break;
                case 3:
                    if (!(m.memberInfo && m.memberInfo.length))
                        m.memberInfo = [];
                    m.memberInfo.push($root.proto.AllianceMemberInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.applyInfo && m.applyInfo.length))
                        m.applyInfo = [];
                    m.applyInfo.push($root.proto.AllianceApplyInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_DealAllianceJoinRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyDealed=1 AlreadyDealed value
         * @property {number} PastDue=2 PastDue value
         */
        Msg_DealAllianceJoinRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyDealed"] = 1;
            values[valuesById[2] = "PastDue"] = 2;
            return values;
        })();

        return Msg_DealAllianceJoinRsp;
    })();

    proto.Msg_AllianceSetPostRankReq = (function() {

        /**
         * Properties of a Msg_AllianceSetPostRankReq.
         * @memberof proto
         * @interface IMsg_AllianceSetPostRankReq
         * @property {string|null} [roleID] Msg_AllianceSetPostRankReq roleID
         * @property {number|null} [postRank] Msg_AllianceSetPostRankReq postRank
         */

        /**
         * Constructs a new Msg_AllianceSetPostRankReq.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceSetPostRankReq.
         * @implements IMsg_AllianceSetPostRankReq
         * @constructor
         * @param {proto.IMsg_AllianceSetPostRankReq=} [p] Properties to set
         */
        function Msg_AllianceSetPostRankReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceSetPostRankReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_AllianceSetPostRankReq
         * @instance
         */
        Msg_AllianceSetPostRankReq.prototype.roleID = "";

        /**
         * Msg_AllianceSetPostRankReq postRank.
         * @member {number} postRank
         * @memberof proto.Msg_AllianceSetPostRankReq
         * @instance
         */
        Msg_AllianceSetPostRankReq.prototype.postRank = 0;

        /**
         * Encodes the specified Msg_AllianceSetPostRankReq message. Does not implicitly {@link proto.Msg_AllianceSetPostRankReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceSetPostRankReq
         * @static
         * @param {proto.IMsg_AllianceSetPostRankReq} m Msg_AllianceSetPostRankReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceSetPostRankReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.postRank != null && Object.hasOwnProperty.call(m, "postRank"))
                w.uint32(16).int32(m.postRank);
            return w;
        };

        /**
         * Decodes a Msg_AllianceSetPostRankReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceSetPostRankReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceSetPostRankReq} Msg_AllianceSetPostRankReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceSetPostRankReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceSetPostRankReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.postRank = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AllianceSetPostRankReq;
    })();

    proto.Msg_AllianceSetPostRankRsp = (function() {

        /**
         * Properties of a Msg_AllianceSetPostRankRsp.
         * @memberof proto
         * @interface IMsg_AllianceSetPostRankRsp
         * @property {proto.Msg_AllianceSetPostRankRsp.ErrorCode|null} [result] Msg_AllianceSetPostRankRsp result
         * @property {number|null} [postRank] Msg_AllianceSetPostRankRsp postRank
         * @property {string|null} [playerUUID] Msg_AllianceSetPostRankRsp playerUUID
         */

        /**
         * Constructs a new Msg_AllianceSetPostRankRsp.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceSetPostRankRsp.
         * @implements IMsg_AllianceSetPostRankRsp
         * @constructor
         * @param {proto.IMsg_AllianceSetPostRankRsp=} [p] Properties to set
         */
        function Msg_AllianceSetPostRankRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceSetPostRankRsp result.
         * @member {proto.Msg_AllianceSetPostRankRsp.ErrorCode} result
         * @memberof proto.Msg_AllianceSetPostRankRsp
         * @instance
         */
        Msg_AllianceSetPostRankRsp.prototype.result = 0;

        /**
         * Msg_AllianceSetPostRankRsp postRank.
         * @member {number} postRank
         * @memberof proto.Msg_AllianceSetPostRankRsp
         * @instance
         */
        Msg_AllianceSetPostRankRsp.prototype.postRank = 0;

        /**
         * Msg_AllianceSetPostRankRsp playerUUID.
         * @member {string} playerUUID
         * @memberof proto.Msg_AllianceSetPostRankRsp
         * @instance
         */
        Msg_AllianceSetPostRankRsp.prototype.playerUUID = "";

        /**
         * Encodes the specified Msg_AllianceSetPostRankRsp message. Does not implicitly {@link proto.Msg_AllianceSetPostRankRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceSetPostRankRsp
         * @static
         * @param {proto.IMsg_AllianceSetPostRankRsp} m Msg_AllianceSetPostRankRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceSetPostRankRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.postRank != null && Object.hasOwnProperty.call(m, "postRank"))
                w.uint32(16).int32(m.postRank);
            if (m.playerUUID != null && Object.hasOwnProperty.call(m, "playerUUID"))
                w.uint32(26).string(m.playerUUID);
            return w;
        };

        /**
         * Decodes a Msg_AllianceSetPostRankRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceSetPostRankRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceSetPostRankRsp} Msg_AllianceSetPostRankRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceSetPostRankRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceSetPostRankRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.postRank = r.int32();
                    break;
                case 3:
                    m.playerUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_AllianceSetPostRankRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Inexistence=1 Inexistence value
         * @property {number} PermissionDenied=2 PermissionDenied value
         */
        Msg_AllianceSetPostRankRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Inexistence"] = 1;
            values[valuesById[2] = "PermissionDenied"] = 2;
            return values;
        })();

        return Msg_AllianceSetPostRankRsp;
    })();

    proto.Msg_QueryAllianceInfoReq = (function() {

        /**
         * Properties of a Msg_QueryAllianceInfoReq.
         * @memberof proto
         * @interface IMsg_QueryAllianceInfoReq
         * @property {string|null} [allianceID] Msg_QueryAllianceInfoReq allianceID
         */

        /**
         * Constructs a new Msg_QueryAllianceInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_QueryAllianceInfoReq.
         * @implements IMsg_QueryAllianceInfoReq
         * @constructor
         * @param {proto.IMsg_QueryAllianceInfoReq=} [p] Properties to set
         */
        function Msg_QueryAllianceInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_QueryAllianceInfoReq allianceID.
         * @member {string} allianceID
         * @memberof proto.Msg_QueryAllianceInfoReq
         * @instance
         */
        Msg_QueryAllianceInfoReq.prototype.allianceID = "";

        /**
         * Encodes the specified Msg_QueryAllianceInfoReq message. Does not implicitly {@link proto.Msg_QueryAllianceInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_QueryAllianceInfoReq
         * @static
         * @param {proto.IMsg_QueryAllianceInfoReq} m Msg_QueryAllianceInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_QueryAllianceInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceID != null && Object.hasOwnProperty.call(m, "allianceID"))
                w.uint32(10).string(m.allianceID);
            return w;
        };

        /**
         * Decodes a Msg_QueryAllianceInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_QueryAllianceInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_QueryAllianceInfoReq} Msg_QueryAllianceInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_QueryAllianceInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_QueryAllianceInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_QueryAllianceInfoReq;
    })();

    proto.Msg_QueryAllianceInfoRsp = (function() {

        /**
         * Properties of a Msg_QueryAllianceInfoRsp.
         * @memberof proto
         * @interface IMsg_QueryAllianceInfoRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_QueryAllianceInfoRsp result
         * @property {proto.IAllianceInfo|null} [allianceInfo] Msg_QueryAllianceInfoRsp allianceInfo
         */

        /**
         * Constructs a new Msg_QueryAllianceInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_QueryAllianceInfoRsp.
         * @implements IMsg_QueryAllianceInfoRsp
         * @constructor
         * @param {proto.IMsg_QueryAllianceInfoRsp=} [p] Properties to set
         */
        function Msg_QueryAllianceInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_QueryAllianceInfoRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_QueryAllianceInfoRsp
         * @instance
         */
        Msg_QueryAllianceInfoRsp.prototype.result = 0;

        /**
         * Msg_QueryAllianceInfoRsp allianceInfo.
         * @member {proto.IAllianceInfo|null|undefined} allianceInfo
         * @memberof proto.Msg_QueryAllianceInfoRsp
         * @instance
         */
        Msg_QueryAllianceInfoRsp.prototype.allianceInfo = null;

        /**
         * Encodes the specified Msg_QueryAllianceInfoRsp message. Does not implicitly {@link proto.Msg_QueryAllianceInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_QueryAllianceInfoRsp
         * @static
         * @param {proto.IMsg_QueryAllianceInfoRsp} m Msg_QueryAllianceInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_QueryAllianceInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.allianceInfo != null && Object.hasOwnProperty.call(m, "allianceInfo"))
                $root.proto.AllianceInfo.encode(m.allianceInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_QueryAllianceInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_QueryAllianceInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_QueryAllianceInfoRsp} Msg_QueryAllianceInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_QueryAllianceInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_QueryAllianceInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.allianceInfo = $root.proto.AllianceInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_QueryAllianceInfoRsp;
    })();

    proto.Msg_SearchAllianceReq = (function() {

        /**
         * Properties of a Msg_SearchAllianceReq.
         * @memberof proto
         * @interface IMsg_SearchAllianceReq
         * @property {string|null} [content] Msg_SearchAllianceReq content
         */

        /**
         * Constructs a new Msg_SearchAllianceReq.
         * @memberof proto
         * @classdesc Represents a Msg_SearchAllianceReq.
         * @implements IMsg_SearchAllianceReq
         * @constructor
         * @param {proto.IMsg_SearchAllianceReq=} [p] Properties to set
         */
        function Msg_SearchAllianceReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SearchAllianceReq content.
         * @member {string} content
         * @memberof proto.Msg_SearchAllianceReq
         * @instance
         */
        Msg_SearchAllianceReq.prototype.content = "";

        /**
         * Encodes the specified Msg_SearchAllianceReq message. Does not implicitly {@link proto.Msg_SearchAllianceReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SearchAllianceReq
         * @static
         * @param {proto.IMsg_SearchAllianceReq} m Msg_SearchAllianceReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SearchAllianceReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                w.uint32(10).string(m.content);
            return w;
        };

        /**
         * Decodes a Msg_SearchAllianceReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SearchAllianceReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SearchAllianceReq} Msg_SearchAllianceReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SearchAllianceReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SearchAllianceReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.content = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SearchAllianceReq;
    })();

    proto.Msg_SearchAllianceRsp = (function() {

        /**
         * Properties of a Msg_SearchAllianceRsp.
         * @memberof proto
         * @interface IMsg_SearchAllianceRsp
         * @property {Array.<proto.IAllianceSimpleInfo>|null} [allianceInfo] Msg_SearchAllianceRsp allianceInfo
         */

        /**
         * Constructs a new Msg_SearchAllianceRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SearchAllianceRsp.
         * @implements IMsg_SearchAllianceRsp
         * @constructor
         * @param {proto.IMsg_SearchAllianceRsp=} [p] Properties to set
         */
        function Msg_SearchAllianceRsp(p) {
            this.allianceInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SearchAllianceRsp allianceInfo.
         * @member {Array.<proto.IAllianceSimpleInfo>} allianceInfo
         * @memberof proto.Msg_SearchAllianceRsp
         * @instance
         */
        Msg_SearchAllianceRsp.prototype.allianceInfo = $util.emptyArray;

        /**
         * Encodes the specified Msg_SearchAllianceRsp message. Does not implicitly {@link proto.Msg_SearchAllianceRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SearchAllianceRsp
         * @static
         * @param {proto.IMsg_SearchAllianceRsp} m Msg_SearchAllianceRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SearchAllianceRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceInfo != null && m.allianceInfo.length) {
                for (var i = 0; i < m.allianceInfo.length; ++i)
                    $root.proto.AllianceSimpleInfo.encode(m.allianceInfo[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_SearchAllianceRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SearchAllianceRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SearchAllianceRsp} Msg_SearchAllianceRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SearchAllianceRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SearchAllianceRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.allianceInfo && m.allianceInfo.length))
                        m.allianceInfo = [];
                    m.allianceInfo.push($root.proto.AllianceSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SearchAllianceRsp;
    })();

    proto.Msg_RecommendAllianceReq = (function() {

        /**
         * Properties of a Msg_RecommendAllianceReq.
         * @memberof proto
         * @interface IMsg_RecommendAllianceReq
         */

        /**
         * Constructs a new Msg_RecommendAllianceReq.
         * @memberof proto
         * @classdesc Represents a Msg_RecommendAllianceReq.
         * @implements IMsg_RecommendAllianceReq
         * @constructor
         * @param {proto.IMsg_RecommendAllianceReq=} [p] Properties to set
         */
        function Msg_RecommendAllianceReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_RecommendAllianceReq message. Does not implicitly {@link proto.Msg_RecommendAllianceReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RecommendAllianceReq
         * @static
         * @param {proto.IMsg_RecommendAllianceReq} m Msg_RecommendAllianceReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RecommendAllianceReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_RecommendAllianceReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RecommendAllianceReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RecommendAllianceReq} Msg_RecommendAllianceReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RecommendAllianceReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RecommendAllianceReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RecommendAllianceReq;
    })();

    proto.Msg_RecommendAllianceRsp = (function() {

        /**
         * Properties of a Msg_RecommendAllianceRsp.
         * @memberof proto
         * @interface IMsg_RecommendAllianceRsp
         * @property {Array.<proto.IAllianceSimpleInfo>|null} [allianceInfo] Msg_RecommendAllianceRsp allianceInfo
         */

        /**
         * Constructs a new Msg_RecommendAllianceRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RecommendAllianceRsp.
         * @implements IMsg_RecommendAllianceRsp
         * @constructor
         * @param {proto.IMsg_RecommendAllianceRsp=} [p] Properties to set
         */
        function Msg_RecommendAllianceRsp(p) {
            this.allianceInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RecommendAllianceRsp allianceInfo.
         * @member {Array.<proto.IAllianceSimpleInfo>} allianceInfo
         * @memberof proto.Msg_RecommendAllianceRsp
         * @instance
         */
        Msg_RecommendAllianceRsp.prototype.allianceInfo = $util.emptyArray;

        /**
         * Encodes the specified Msg_RecommendAllianceRsp message. Does not implicitly {@link proto.Msg_RecommendAllianceRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RecommendAllianceRsp
         * @static
         * @param {proto.IMsg_RecommendAllianceRsp} m Msg_RecommendAllianceRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RecommendAllianceRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceInfo != null && m.allianceInfo.length) {
                for (var i = 0; i < m.allianceInfo.length; ++i)
                    $root.proto.AllianceSimpleInfo.encode(m.allianceInfo[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_RecommendAllianceRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RecommendAllianceRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RecommendAllianceRsp} Msg_RecommendAllianceRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RecommendAllianceRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RecommendAllianceRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.allianceInfo && m.allianceInfo.length))
                        m.allianceInfo = [];
                    m.allianceInfo.push($root.proto.AllianceSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RecommendAllianceRsp;
    })();

    proto.Msg_ModifyAllianceInfoReq = (function() {

        /**
         * Properties of a Msg_ModifyAllianceInfoReq.
         * @memberof proto
         * @interface IMsg_ModifyAllianceInfoReq
         * @property {string|null} [Instruction] Msg_ModifyAllianceInfoReq Instruction
         * @property {number|null} [JoinType] Msg_ModifyAllianceInfoReq JoinType
         * @property {number|null} [JoinMinScore] Msg_ModifyAllianceInfoReq JoinMinScore
         * @property {number|null} [Icon] Msg_ModifyAllianceInfoReq Icon
         * @property {string|null} [Name] Msg_ModifyAllianceInfoReq Name
         */

        /**
         * Constructs a new Msg_ModifyAllianceInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_ModifyAllianceInfoReq.
         * @implements IMsg_ModifyAllianceInfoReq
         * @constructor
         * @param {proto.IMsg_ModifyAllianceInfoReq=} [p] Properties to set
         */
        function Msg_ModifyAllianceInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ModifyAllianceInfoReq Instruction.
         * @member {string} Instruction
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @instance
         */
        Msg_ModifyAllianceInfoReq.prototype.Instruction = "";

        /**
         * Msg_ModifyAllianceInfoReq JoinType.
         * @member {number} JoinType
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @instance
         */
        Msg_ModifyAllianceInfoReq.prototype.JoinType = 0;

        /**
         * Msg_ModifyAllianceInfoReq JoinMinScore.
         * @member {number} JoinMinScore
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @instance
         */
        Msg_ModifyAllianceInfoReq.prototype.JoinMinScore = 0;

        /**
         * Msg_ModifyAllianceInfoReq Icon.
         * @member {number} Icon
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @instance
         */
        Msg_ModifyAllianceInfoReq.prototype.Icon = 0;

        /**
         * Msg_ModifyAllianceInfoReq Name.
         * @member {string} Name
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @instance
         */
        Msg_ModifyAllianceInfoReq.prototype.Name = "";

        /**
         * Encodes the specified Msg_ModifyAllianceInfoReq message. Does not implicitly {@link proto.Msg_ModifyAllianceInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @static
         * @param {proto.IMsg_ModifyAllianceInfoReq} m Msg_ModifyAllianceInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ModifyAllianceInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Instruction != null && Object.hasOwnProperty.call(m, "Instruction"))
                w.uint32(10).string(m.Instruction);
            if (m.JoinType != null && Object.hasOwnProperty.call(m, "JoinType"))
                w.uint32(16).int32(m.JoinType);
            if (m.JoinMinScore != null && Object.hasOwnProperty.call(m, "JoinMinScore"))
                w.uint32(24).int32(m.JoinMinScore);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(32).int32(m.Icon);
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(42).string(m.Name);
            return w;
        };

        /**
         * Decodes a Msg_ModifyAllianceInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ModifyAllianceInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ModifyAllianceInfoReq} Msg_ModifyAllianceInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ModifyAllianceInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ModifyAllianceInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Instruction = r.string();
                    break;
                case 2:
                    m.JoinType = r.int32();
                    break;
                case 3:
                    m.JoinMinScore = r.int32();
                    break;
                case 4:
                    m.Icon = r.int32();
                    break;
                case 5:
                    m.Name = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ModifyAllianceInfoReq;
    })();

    proto.Msg_ModifyAllianceInfoRsp = (function() {

        /**
         * Properties of a Msg_ModifyAllianceInfoRsp.
         * @memberof proto
         * @interface IMsg_ModifyAllianceInfoRsp
         * @property {proto.Msg_ModifyAllianceInfoRsp.ErrorCode|null} [result] Msg_ModifyAllianceInfoRsp result
         * @property {proto.IAllianceBaseInfo|null} [baseInfo] Msg_ModifyAllianceInfoRsp baseInfo
         */

        /**
         * Constructs a new Msg_ModifyAllianceInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ModifyAllianceInfoRsp.
         * @implements IMsg_ModifyAllianceInfoRsp
         * @constructor
         * @param {proto.IMsg_ModifyAllianceInfoRsp=} [p] Properties to set
         */
        function Msg_ModifyAllianceInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ModifyAllianceInfoRsp result.
         * @member {proto.Msg_ModifyAllianceInfoRsp.ErrorCode} result
         * @memberof proto.Msg_ModifyAllianceInfoRsp
         * @instance
         */
        Msg_ModifyAllianceInfoRsp.prototype.result = 0;

        /**
         * Msg_ModifyAllianceInfoRsp baseInfo.
         * @member {proto.IAllianceBaseInfo|null|undefined} baseInfo
         * @memberof proto.Msg_ModifyAllianceInfoRsp
         * @instance
         */
        Msg_ModifyAllianceInfoRsp.prototype.baseInfo = null;

        /**
         * Encodes the specified Msg_ModifyAllianceInfoRsp message. Does not implicitly {@link proto.Msg_ModifyAllianceInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ModifyAllianceInfoRsp
         * @static
         * @param {proto.IMsg_ModifyAllianceInfoRsp} m Msg_ModifyAllianceInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ModifyAllianceInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.baseInfo != null && Object.hasOwnProperty.call(m, "baseInfo"))
                $root.proto.AllianceBaseInfo.encode(m.baseInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_ModifyAllianceInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ModifyAllianceInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ModifyAllianceInfoRsp} Msg_ModifyAllianceInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ModifyAllianceInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ModifyAllianceInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.baseInfo = $root.proto.AllianceBaseInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ModifyAllianceInfoRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} NoAuth=1 NoAuth value
         * @property {number} SensitiveWordError=2 SensitiveWordError value
         * @property {number} ModifyLimit=3 ModifyLimit value
         */
        Msg_ModifyAllianceInfoRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "NoAuth"] = 1;
            values[valuesById[2] = "SensitiveWordError"] = 2;
            values[valuesById[3] = "ModifyLimit"] = 3;
            return values;
        })();

        return Msg_ModifyAllianceInfoRsp;
    })();

    proto.Msg_ExpelMemberReq = (function() {

        /**
         * Properties of a Msg_ExpelMemberReq.
         * @memberof proto
         * @interface IMsg_ExpelMemberReq
         * @property {string|null} [memberUUID] Msg_ExpelMemberReq memberUUID
         */

        /**
         * Constructs a new Msg_ExpelMemberReq.
         * @memberof proto
         * @classdesc Represents a Msg_ExpelMemberReq.
         * @implements IMsg_ExpelMemberReq
         * @constructor
         * @param {proto.IMsg_ExpelMemberReq=} [p] Properties to set
         */
        function Msg_ExpelMemberReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ExpelMemberReq memberUUID.
         * @member {string} memberUUID
         * @memberof proto.Msg_ExpelMemberReq
         * @instance
         */
        Msg_ExpelMemberReq.prototype.memberUUID = "";

        /**
         * Encodes the specified Msg_ExpelMemberReq message. Does not implicitly {@link proto.Msg_ExpelMemberReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ExpelMemberReq
         * @static
         * @param {proto.IMsg_ExpelMemberReq} m Msg_ExpelMemberReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ExpelMemberReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.memberUUID != null && Object.hasOwnProperty.call(m, "memberUUID"))
                w.uint32(10).string(m.memberUUID);
            return w;
        };

        /**
         * Decodes a Msg_ExpelMemberReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ExpelMemberReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ExpelMemberReq} Msg_ExpelMemberReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ExpelMemberReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ExpelMemberReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.memberUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ExpelMemberReq;
    })();

    proto.Msg_ExpelMemberRsp = (function() {

        /**
         * Properties of a Msg_ExpelMemberRsp.
         * @memberof proto
         * @interface IMsg_ExpelMemberRsp
         * @property {proto.Msg_ExpelMemberRsp.ErrorCode|null} [result] Msg_ExpelMemberRsp result
         * @property {string|null} [memberUUID] Msg_ExpelMemberRsp memberUUID
         */

        /**
         * Constructs a new Msg_ExpelMemberRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ExpelMemberRsp.
         * @implements IMsg_ExpelMemberRsp
         * @constructor
         * @param {proto.IMsg_ExpelMemberRsp=} [p] Properties to set
         */
        function Msg_ExpelMemberRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ExpelMemberRsp result.
         * @member {proto.Msg_ExpelMemberRsp.ErrorCode} result
         * @memberof proto.Msg_ExpelMemberRsp
         * @instance
         */
        Msg_ExpelMemberRsp.prototype.result = 0;

        /**
         * Msg_ExpelMemberRsp memberUUID.
         * @member {string} memberUUID
         * @memberof proto.Msg_ExpelMemberRsp
         * @instance
         */
        Msg_ExpelMemberRsp.prototype.memberUUID = "";

        /**
         * Encodes the specified Msg_ExpelMemberRsp message. Does not implicitly {@link proto.Msg_ExpelMemberRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ExpelMemberRsp
         * @static
         * @param {proto.IMsg_ExpelMemberRsp} m Msg_ExpelMemberRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ExpelMemberRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.memberUUID != null && Object.hasOwnProperty.call(m, "memberUUID"))
                w.uint32(18).string(m.memberUUID);
            return w;
        };

        /**
         * Decodes a Msg_ExpelMemberRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ExpelMemberRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ExpelMemberRsp} Msg_ExpelMemberRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ExpelMemberRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ExpelMemberRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.memberUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ExpelMemberRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Inexistence=1 Inexistence value
         * @property {number} PermissionDenied=2 PermissionDenied value
         */
        Msg_ExpelMemberRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Inexistence"] = 1;
            values[valuesById[2] = "PermissionDenied"] = 2;
            return values;
        })();

        return Msg_ExpelMemberRsp;
    })();

    /**
     * PushJoinOrExpelType enum.
     * @name proto.PushJoinOrExpelType
     * @enum {number}
     * @property {number} PushJoin=0 PushJoin value
     * @property {number} PushExpel=1 PushExpel value
     */
    proto.PushJoinOrExpelType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PushJoin"] = 0;
        values[valuesById[1] = "PushExpel"] = 1;
        return values;
    })();

    proto.Msg_PushJoinOrExpelAllianceMsg = (function() {

        /**
         * Properties of a Msg_PushJoinOrExpelAllianceMsg.
         * @memberof proto
         * @interface IMsg_PushJoinOrExpelAllianceMsg
         * @property {number|null} [iconIdx] Msg_PushJoinOrExpelAllianceMsg iconIdx
         * @property {string|null} [name] Msg_PushJoinOrExpelAllianceMsg name
         * @property {proto.PushJoinOrExpelType|null} [type] Msg_PushJoinOrExpelAllianceMsg type
         */

        /**
         * Constructs a new Msg_PushJoinOrExpelAllianceMsg.
         * @memberof proto
         * @classdesc Represents a Msg_PushJoinOrExpelAllianceMsg.
         * @implements IMsg_PushJoinOrExpelAllianceMsg
         * @constructor
         * @param {proto.IMsg_PushJoinOrExpelAllianceMsg=} [p] Properties to set
         */
        function Msg_PushJoinOrExpelAllianceMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushJoinOrExpelAllianceMsg iconIdx.
         * @member {number} iconIdx
         * @memberof proto.Msg_PushJoinOrExpelAllianceMsg
         * @instance
         */
        Msg_PushJoinOrExpelAllianceMsg.prototype.iconIdx = 0;

        /**
         * Msg_PushJoinOrExpelAllianceMsg name.
         * @member {string} name
         * @memberof proto.Msg_PushJoinOrExpelAllianceMsg
         * @instance
         */
        Msg_PushJoinOrExpelAllianceMsg.prototype.name = "";

        /**
         * Msg_PushJoinOrExpelAllianceMsg type.
         * @member {proto.PushJoinOrExpelType} type
         * @memberof proto.Msg_PushJoinOrExpelAllianceMsg
         * @instance
         */
        Msg_PushJoinOrExpelAllianceMsg.prototype.type = 0;

        /**
         * Encodes the specified Msg_PushJoinOrExpelAllianceMsg message. Does not implicitly {@link proto.Msg_PushJoinOrExpelAllianceMsg.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushJoinOrExpelAllianceMsg
         * @static
         * @param {proto.IMsg_PushJoinOrExpelAllianceMsg} m Msg_PushJoinOrExpelAllianceMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushJoinOrExpelAllianceMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.iconIdx != null && Object.hasOwnProperty.call(m, "iconIdx"))
                w.uint32(8).int32(m.iconIdx);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(24).int32(m.type);
            return w;
        };

        /**
         * Decodes a Msg_PushJoinOrExpelAllianceMsg message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushJoinOrExpelAllianceMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushJoinOrExpelAllianceMsg} Msg_PushJoinOrExpelAllianceMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushJoinOrExpelAllianceMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushJoinOrExpelAllianceMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.iconIdx = r.int32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushJoinOrExpelAllianceMsg;
    })();

    proto.Msg_AllianceMsgPush = (function() {

        /**
         * Properties of a Msg_AllianceMsgPush.
         * @memberof proto
         * @interface IMsg_AllianceMsgPush
         * @property {proto.IAllianceMsgData|null} [msg] Msg_AllianceMsgPush msg
         */

        /**
         * Constructs a new Msg_AllianceMsgPush.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceMsgPush.
         * @implements IMsg_AllianceMsgPush
         * @constructor
         * @param {proto.IMsg_AllianceMsgPush=} [p] Properties to set
         */
        function Msg_AllianceMsgPush(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceMsgPush msg.
         * @member {proto.IAllianceMsgData|null|undefined} msg
         * @memberof proto.Msg_AllianceMsgPush
         * @instance
         */
        Msg_AllianceMsgPush.prototype.msg = null;

        /**
         * Encodes the specified Msg_AllianceMsgPush message. Does not implicitly {@link proto.Msg_AllianceMsgPush.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceMsgPush
         * @static
         * @param {proto.IMsg_AllianceMsgPush} m Msg_AllianceMsgPush message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceMsgPush.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.msg != null && Object.hasOwnProperty.call(m, "msg"))
                $root.proto.AllianceMsgData.encode(m.msg, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_AllianceMsgPush message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceMsgPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceMsgPush} Msg_AllianceMsgPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceMsgPush.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceMsgPush();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.msg = $root.proto.AllianceMsgData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AllianceMsgPush;
    })();

    /**
     * ChatChannelType enum.
     * @name proto.ChatChannelType
     * @enum {number}
     * @property {number} InValid=0 InValid value
     * @property {number} WorldChannel=1 WorldChannel value
     * @property {number} AllianceChannel=2 AllianceChannel value
     * @property {number} PrivateChannel=3 PrivateChannel value
     */
    proto.ChatChannelType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "InValid"] = 0;
        values[valuesById[1] = "WorldChannel"] = 1;
        values[valuesById[2] = "AllianceChannel"] = 2;
        values[valuesById[3] = "PrivateChannel"] = 3;
        return values;
    })();

    proto.Msg_SyncRoleAllianceData = (function() {

        /**
         * Properties of a Msg_SyncRoleAllianceData.
         * @memberof proto
         * @interface IMsg_SyncRoleAllianceData
         * @property {proto.IRoleAllianceData|null} [allianceData] Msg_SyncRoleAllianceData allianceData
         */

        /**
         * Constructs a new Msg_SyncRoleAllianceData.
         * @memberof proto
         * @classdesc Represents a Msg_SyncRoleAllianceData.
         * @implements IMsg_SyncRoleAllianceData
         * @constructor
         * @param {proto.IMsg_SyncRoleAllianceData=} [p] Properties to set
         */
        function Msg_SyncRoleAllianceData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SyncRoleAllianceData allianceData.
         * @member {proto.IRoleAllianceData|null|undefined} allianceData
         * @memberof proto.Msg_SyncRoleAllianceData
         * @instance
         */
        Msg_SyncRoleAllianceData.prototype.allianceData = null;

        /**
         * Encodes the specified Msg_SyncRoleAllianceData message. Does not implicitly {@link proto.Msg_SyncRoleAllianceData.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SyncRoleAllianceData
         * @static
         * @param {proto.IMsg_SyncRoleAllianceData} m Msg_SyncRoleAllianceData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SyncRoleAllianceData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allianceData != null && Object.hasOwnProperty.call(m, "allianceData"))
                $root.proto.RoleAllianceData.encode(m.allianceData, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_SyncRoleAllianceData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SyncRoleAllianceData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SyncRoleAllianceData} Msg_SyncRoleAllianceData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SyncRoleAllianceData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SyncRoleAllianceData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.allianceData = $root.proto.RoleAllianceData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SyncRoleAllianceData;
    })();

    proto.Msg_AllianceCardRequestDonateReq = (function() {

        /**
         * Properties of a Msg_AllianceCardRequestDonateReq.
         * @memberof proto
         * @interface IMsg_AllianceCardRequestDonateReq
         * @property {number|null} [cardID] Msg_AllianceCardRequestDonateReq cardID
         */

        /**
         * Constructs a new Msg_AllianceCardRequestDonateReq.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceCardRequestDonateReq.
         * @implements IMsg_AllianceCardRequestDonateReq
         * @constructor
         * @param {proto.IMsg_AllianceCardRequestDonateReq=} [p] Properties to set
         */
        function Msg_AllianceCardRequestDonateReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceCardRequestDonateReq cardID.
         * @member {number} cardID
         * @memberof proto.Msg_AllianceCardRequestDonateReq
         * @instance
         */
        Msg_AllianceCardRequestDonateReq.prototype.cardID = 0;

        /**
         * Encodes the specified Msg_AllianceCardRequestDonateReq message. Does not implicitly {@link proto.Msg_AllianceCardRequestDonateReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceCardRequestDonateReq
         * @static
         * @param {proto.IMsg_AllianceCardRequestDonateReq} m Msg_AllianceCardRequestDonateReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceCardRequestDonateReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(8).int32(m.cardID);
            return w;
        };

        /**
         * Decodes a Msg_AllianceCardRequestDonateReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceCardRequestDonateReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceCardRequestDonateReq} Msg_AllianceCardRequestDonateReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceCardRequestDonateReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceCardRequestDonateReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AllianceCardRequestDonateReq;
    })();

    proto.Msg_AllianceCardRequestDonateRsp = (function() {

        /**
         * Properties of a Msg_AllianceCardRequestDonateRsp.
         * @memberof proto
         * @interface IMsg_AllianceCardRequestDonateRsp
         * @property {proto.Msg_AllianceCardRequestDonateRsp.ErrorCode|null} [result] Msg_AllianceCardRequestDonateRsp result
         * @property {number|null} [nextRequestUTC] Msg_AllianceCardRequestDonateRsp nextRequestUTC
         */

        /**
         * Constructs a new Msg_AllianceCardRequestDonateRsp.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceCardRequestDonateRsp.
         * @implements IMsg_AllianceCardRequestDonateRsp
         * @constructor
         * @param {proto.IMsg_AllianceCardRequestDonateRsp=} [p] Properties to set
         */
        function Msg_AllianceCardRequestDonateRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceCardRequestDonateRsp result.
         * @member {proto.Msg_AllianceCardRequestDonateRsp.ErrorCode} result
         * @memberof proto.Msg_AllianceCardRequestDonateRsp
         * @instance
         */
        Msg_AllianceCardRequestDonateRsp.prototype.result = 0;

        /**
         * Msg_AllianceCardRequestDonateRsp nextRequestUTC.
         * @member {number} nextRequestUTC
         * @memberof proto.Msg_AllianceCardRequestDonateRsp
         * @instance
         */
        Msg_AllianceCardRequestDonateRsp.prototype.nextRequestUTC = 0;

        /**
         * Encodes the specified Msg_AllianceCardRequestDonateRsp message. Does not implicitly {@link proto.Msg_AllianceCardRequestDonateRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceCardRequestDonateRsp
         * @static
         * @param {proto.IMsg_AllianceCardRequestDonateRsp} m Msg_AllianceCardRequestDonateRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceCardRequestDonateRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.nextRequestUTC != null && Object.hasOwnProperty.call(m, "nextRequestUTC"))
                w.uint32(16).int32(m.nextRequestUTC);
            return w;
        };

        /**
         * Decodes a Msg_AllianceCardRequestDonateRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceCardRequestDonateRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceCardRequestDonateRsp} Msg_AllianceCardRequestDonateRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceCardRequestDonateRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceCardRequestDonateRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.nextRequestUTC = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_AllianceCardRequestDonateRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} CardNotExist=1 CardNotExist value
         * @property {number} RequestCooldown=2 RequestCooldown value
         */
        Msg_AllianceCardRequestDonateRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "CardNotExist"] = 1;
            values[valuesById[2] = "RequestCooldown"] = 2;
            return values;
        })();

        return Msg_AllianceCardRequestDonateRsp;
    })();

    proto.Msg_AllianceDonateCardReq = (function() {

        /**
         * Properties of a Msg_AllianceDonateCardReq.
         * @memberof proto
         * @interface IMsg_AllianceDonateCardReq
         * @property {string|null} [roleID] Msg_AllianceDonateCardReq roleID
         * @property {number|null} [cardID] Msg_AllianceDonateCardReq cardID
         */

        /**
         * Constructs a new Msg_AllianceDonateCardReq.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceDonateCardReq.
         * @implements IMsg_AllianceDonateCardReq
         * @constructor
         * @param {proto.IMsg_AllianceDonateCardReq=} [p] Properties to set
         */
        function Msg_AllianceDonateCardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceDonateCardReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_AllianceDonateCardReq
         * @instance
         */
        Msg_AllianceDonateCardReq.prototype.roleID = "";

        /**
         * Msg_AllianceDonateCardReq cardID.
         * @member {number} cardID
         * @memberof proto.Msg_AllianceDonateCardReq
         * @instance
         */
        Msg_AllianceDonateCardReq.prototype.cardID = 0;

        /**
         * Encodes the specified Msg_AllianceDonateCardReq message. Does not implicitly {@link proto.Msg_AllianceDonateCardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceDonateCardReq
         * @static
         * @param {proto.IMsg_AllianceDonateCardReq} m Msg_AllianceDonateCardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceDonateCardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(16).int32(m.cardID);
            return w;
        };

        /**
         * Decodes a Msg_AllianceDonateCardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceDonateCardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceDonateCardReq} Msg_AllianceDonateCardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceDonateCardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceDonateCardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.cardID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AllianceDonateCardReq;
    })();

    proto.Msg_AllianceDonateCardRsp = (function() {

        /**
         * Properties of a Msg_AllianceDonateCardRsp.
         * @memberof proto
         * @interface IMsg_AllianceDonateCardRsp
         * @property {proto.Msg_AllianceDonateCardRsp.ErrorCode|null} [result] Msg_AllianceDonateCardRsp result
         * @property {string|null} [applicantID] Msg_AllianceDonateCardRsp applicantID
         * @property {number|null} [goldCount] Msg_AllianceDonateCardRsp goldCount
         * @property {number|null} [expCount] Msg_AllianceDonateCardRsp expCount
         */

        /**
         * Constructs a new Msg_AllianceDonateCardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceDonateCardRsp.
         * @implements IMsg_AllianceDonateCardRsp
         * @constructor
         * @param {proto.IMsg_AllianceDonateCardRsp=} [p] Properties to set
         */
        function Msg_AllianceDonateCardRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceDonateCardRsp result.
         * @member {proto.Msg_AllianceDonateCardRsp.ErrorCode} result
         * @memberof proto.Msg_AllianceDonateCardRsp
         * @instance
         */
        Msg_AllianceDonateCardRsp.prototype.result = 0;

        /**
         * Msg_AllianceDonateCardRsp applicantID.
         * @member {string} applicantID
         * @memberof proto.Msg_AllianceDonateCardRsp
         * @instance
         */
        Msg_AllianceDonateCardRsp.prototype.applicantID = "";

        /**
         * Msg_AllianceDonateCardRsp goldCount.
         * @member {number} goldCount
         * @memberof proto.Msg_AllianceDonateCardRsp
         * @instance
         */
        Msg_AllianceDonateCardRsp.prototype.goldCount = 0;

        /**
         * Msg_AllianceDonateCardRsp expCount.
         * @member {number} expCount
         * @memberof proto.Msg_AllianceDonateCardRsp
         * @instance
         */
        Msg_AllianceDonateCardRsp.prototype.expCount = 0;

        /**
         * Encodes the specified Msg_AllianceDonateCardRsp message. Does not implicitly {@link proto.Msg_AllianceDonateCardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceDonateCardRsp
         * @static
         * @param {proto.IMsg_AllianceDonateCardRsp} m Msg_AllianceDonateCardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceDonateCardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.applicantID != null && Object.hasOwnProperty.call(m, "applicantID"))
                w.uint32(18).string(m.applicantID);
            if (m.goldCount != null && Object.hasOwnProperty.call(m, "goldCount"))
                w.uint32(24).int32(m.goldCount);
            if (m.expCount != null && Object.hasOwnProperty.call(m, "expCount"))
                w.uint32(32).int32(m.expCount);
            return w;
        };

        /**
         * Decodes a Msg_AllianceDonateCardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceDonateCardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceDonateCardRsp} Msg_AllianceDonateCardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceDonateCardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceDonateCardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.applicantID = r.string();
                    break;
                case 3:
                    m.goldCount = r.int32();
                    break;
                case 4:
                    m.expCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_AllianceDonateCardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} CardNotEnough=1 CardNotEnough value
         * @property {number} DonateTopLimit=2 DonateTopLimit value
         * @property {number} DonateScoreTopLimit=3 DonateScoreTopLimit value
         */
        Msg_AllianceDonateCardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "CardNotEnough"] = 1;
            values[valuesById[2] = "DonateTopLimit"] = 2;
            values[valuesById[3] = "DonateScoreTopLimit"] = 3;
            return values;
        })();

        return Msg_AllianceDonateCardRsp;
    })();

    proto.Msg_AllianceFightInvitationReq = (function() {

        /**
         * Properties of a Msg_AllianceFightInvitationReq.
         * @memberof proto
         * @interface IMsg_AllianceFightInvitationReq
         * @property {proto.FightType|null} [type] Msg_AllianceFightInvitationReq type
         * @property {string|null} [message] Msg_AllianceFightInvitationReq message
         * @property {proto.ChatChannelType|null} [channel] Msg_AllianceFightInvitationReq channel
         * @property {boolean|null} [bCardLvLimit] Msg_AllianceFightInvitationReq bCardLvLimit
         */

        /**
         * Constructs a new Msg_AllianceFightInvitationReq.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceFightInvitationReq.
         * @implements IMsg_AllianceFightInvitationReq
         * @constructor
         * @param {proto.IMsg_AllianceFightInvitationReq=} [p] Properties to set
         */
        function Msg_AllianceFightInvitationReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceFightInvitationReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_AllianceFightInvitationReq
         * @instance
         */
        Msg_AllianceFightInvitationReq.prototype.type = 0;

        /**
         * Msg_AllianceFightInvitationReq message.
         * @member {string} message
         * @memberof proto.Msg_AllianceFightInvitationReq
         * @instance
         */
        Msg_AllianceFightInvitationReq.prototype.message = "";

        /**
         * Msg_AllianceFightInvitationReq channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_AllianceFightInvitationReq
         * @instance
         */
        Msg_AllianceFightInvitationReq.prototype.channel = 0;

        /**
         * Msg_AllianceFightInvitationReq bCardLvLimit.
         * @member {boolean} bCardLvLimit
         * @memberof proto.Msg_AllianceFightInvitationReq
         * @instance
         */
        Msg_AllianceFightInvitationReq.prototype.bCardLvLimit = false;

        /**
         * Encodes the specified Msg_AllianceFightInvitationReq message. Does not implicitly {@link proto.Msg_AllianceFightInvitationReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceFightInvitationReq
         * @static
         * @param {proto.IMsg_AllianceFightInvitationReq} m Msg_AllianceFightInvitationReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceFightInvitationReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(18).string(m.message);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(24).int32(m.channel);
            if (m.bCardLvLimit != null && Object.hasOwnProperty.call(m, "bCardLvLimit"))
                w.uint32(32).bool(m.bCardLvLimit);
            return w;
        };

        /**
         * Decodes a Msg_AllianceFightInvitationReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceFightInvitationReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceFightInvitationReq} Msg_AllianceFightInvitationReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceFightInvitationReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceFightInvitationReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.message = r.string();
                    break;
                case 3:
                    m.channel = r.int32();
                    break;
                case 4:
                    m.bCardLvLimit = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AllianceFightInvitationReq;
    })();

    proto.Msg_AllianceFightAcceptReq = (function() {

        /**
         * Properties of a Msg_AllianceFightAcceptReq.
         * @memberof proto
         * @interface IMsg_AllianceFightAcceptReq
         * @property {proto.FightType|null} [type] Msg_AllianceFightAcceptReq type
         * @property {number|null} [roomID] Msg_AllianceFightAcceptReq roomID
         * @property {proto.ChatChannelType|null} [channel] Msg_AllianceFightAcceptReq channel
         */

        /**
         * Constructs a new Msg_AllianceFightAcceptReq.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceFightAcceptReq.
         * @implements IMsg_AllianceFightAcceptReq
         * @constructor
         * @param {proto.IMsg_AllianceFightAcceptReq=} [p] Properties to set
         */
        function Msg_AllianceFightAcceptReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceFightAcceptReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_AllianceFightAcceptReq
         * @instance
         */
        Msg_AllianceFightAcceptReq.prototype.type = 0;

        /**
         * Msg_AllianceFightAcceptReq roomID.
         * @member {number} roomID
         * @memberof proto.Msg_AllianceFightAcceptReq
         * @instance
         */
        Msg_AllianceFightAcceptReq.prototype.roomID = 0;

        /**
         * Msg_AllianceFightAcceptReq channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_AllianceFightAcceptReq
         * @instance
         */
        Msg_AllianceFightAcceptReq.prototype.channel = 0;

        /**
         * Encodes the specified Msg_AllianceFightAcceptReq message. Does not implicitly {@link proto.Msg_AllianceFightAcceptReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceFightAcceptReq
         * @static
         * @param {proto.IMsg_AllianceFightAcceptReq} m Msg_AllianceFightAcceptReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceFightAcceptReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(24).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_AllianceFightAcceptReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceFightAcceptReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceFightAcceptReq} Msg_AllianceFightAcceptReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceFightAcceptReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceFightAcceptReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                case 3:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AllianceFightAcceptReq;
    })();

    proto.Msg_AllianceFightAcceptRsp = (function() {

        /**
         * Properties of a Msg_AllianceFightAcceptRsp.
         * @memberof proto
         * @interface IMsg_AllianceFightAcceptRsp
         * @property {proto.Msg_AllianceFightAcceptRsp.ErrorCode|null} [result] Msg_AllianceFightAcceptRsp result
         * @property {number|null} [roomID] Msg_AllianceFightAcceptRsp roomID
         * @property {proto.FightType|null} [type] Msg_AllianceFightAcceptRsp type
         * @property {proto.ChatChannelType|null} [channel] Msg_AllianceFightAcceptRsp channel
         */

        /**
         * Constructs a new Msg_AllianceFightAcceptRsp.
         * @memberof proto
         * @classdesc Represents a Msg_AllianceFightAcceptRsp.
         * @implements IMsg_AllianceFightAcceptRsp
         * @constructor
         * @param {proto.IMsg_AllianceFightAcceptRsp=} [p] Properties to set
         */
        function Msg_AllianceFightAcceptRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AllianceFightAcceptRsp result.
         * @member {proto.Msg_AllianceFightAcceptRsp.ErrorCode} result
         * @memberof proto.Msg_AllianceFightAcceptRsp
         * @instance
         */
        Msg_AllianceFightAcceptRsp.prototype.result = 0;

        /**
         * Msg_AllianceFightAcceptRsp roomID.
         * @member {number} roomID
         * @memberof proto.Msg_AllianceFightAcceptRsp
         * @instance
         */
        Msg_AllianceFightAcceptRsp.prototype.roomID = 0;

        /**
         * Msg_AllianceFightAcceptRsp type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_AllianceFightAcceptRsp
         * @instance
         */
        Msg_AllianceFightAcceptRsp.prototype.type = 0;

        /**
         * Msg_AllianceFightAcceptRsp channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_AllianceFightAcceptRsp
         * @instance
         */
        Msg_AllianceFightAcceptRsp.prototype.channel = 0;

        /**
         * Encodes the specified Msg_AllianceFightAcceptRsp message. Does not implicitly {@link proto.Msg_AllianceFightAcceptRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AllianceFightAcceptRsp
         * @static
         * @param {proto.IMsg_AllianceFightAcceptRsp} m Msg_AllianceFightAcceptRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AllianceFightAcceptRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(24).int32(m.type);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(32).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_AllianceFightAcceptRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AllianceFightAcceptRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AllianceFightAcceptRsp} Msg_AllianceFightAcceptRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AllianceFightAcceptRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AllianceFightAcceptRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                case 3:
                    m.type = r.int32();
                    break;
                case 4:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_AllianceFightAcceptRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} OverTime=1 OverTime value
         * @property {number} PveCountNotEnough=2 PveCountNotEnough value
         * @property {number} CardLevelLimit=3 CardLevelLimit value
         * @property {number} BannedCard=4 BannedCard value
         */
        Msg_AllianceFightAcceptRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "OverTime"] = 1;
            values[valuesById[2] = "PveCountNotEnough"] = 2;
            values[valuesById[3] = "CardLevelLimit"] = 3;
            values[valuesById[4] = "BannedCard"] = 4;
            return values;
        })();

        return Msg_AllianceFightAcceptRsp;
    })();

    proto.Msg_PushSupportInfo = (function() {

        /**
         * Properties of a Msg_PushSupportInfo.
         * @memberof proto
         * @interface IMsg_PushSupportInfo
         * @property {string|null} [applicantID] Msg_PushSupportInfo applicantID
         * @property {string|null} [donateID] Msg_PushSupportInfo donateID
         * @property {string|null} [donorName] Msg_PushSupportInfo donorName
         * @property {number|null} [cardID] Msg_PushSupportInfo cardID
         * @property {number|null} [curGainSupportCnt] Msg_PushSupportInfo curGainSupportCnt
         */

        /**
         * Constructs a new Msg_PushSupportInfo.
         * @memberof proto
         * @classdesc Represents a Msg_PushSupportInfo.
         * @implements IMsg_PushSupportInfo
         * @constructor
         * @param {proto.IMsg_PushSupportInfo=} [p] Properties to set
         */
        function Msg_PushSupportInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushSupportInfo applicantID.
         * @member {string} applicantID
         * @memberof proto.Msg_PushSupportInfo
         * @instance
         */
        Msg_PushSupportInfo.prototype.applicantID = "";

        /**
         * Msg_PushSupportInfo donateID.
         * @member {string} donateID
         * @memberof proto.Msg_PushSupportInfo
         * @instance
         */
        Msg_PushSupportInfo.prototype.donateID = "";

        /**
         * Msg_PushSupportInfo donorName.
         * @member {string} donorName
         * @memberof proto.Msg_PushSupportInfo
         * @instance
         */
        Msg_PushSupportInfo.prototype.donorName = "";

        /**
         * Msg_PushSupportInfo cardID.
         * @member {number} cardID
         * @memberof proto.Msg_PushSupportInfo
         * @instance
         */
        Msg_PushSupportInfo.prototype.cardID = 0;

        /**
         * Msg_PushSupportInfo curGainSupportCnt.
         * @member {number} curGainSupportCnt
         * @memberof proto.Msg_PushSupportInfo
         * @instance
         */
        Msg_PushSupportInfo.prototype.curGainSupportCnt = 0;

        /**
         * Encodes the specified Msg_PushSupportInfo message. Does not implicitly {@link proto.Msg_PushSupportInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushSupportInfo
         * @static
         * @param {proto.IMsg_PushSupportInfo} m Msg_PushSupportInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushSupportInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.applicantID != null && Object.hasOwnProperty.call(m, "applicantID"))
                w.uint32(10).string(m.applicantID);
            if (m.donateID != null && Object.hasOwnProperty.call(m, "donateID"))
                w.uint32(18).string(m.donateID);
            if (m.donorName != null && Object.hasOwnProperty.call(m, "donorName"))
                w.uint32(26).string(m.donorName);
            if (m.cardID != null && Object.hasOwnProperty.call(m, "cardID"))
                w.uint32(32).int32(m.cardID);
            if (m.curGainSupportCnt != null && Object.hasOwnProperty.call(m, "curGainSupportCnt"))
                w.uint32(40).int32(m.curGainSupportCnt);
            return w;
        };

        /**
         * Decodes a Msg_PushSupportInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushSupportInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushSupportInfo} Msg_PushSupportInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushSupportInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushSupportInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.applicantID = r.string();
                    break;
                case 2:
                    m.donateID = r.string();
                    break;
                case 3:
                    m.donorName = r.string();
                    break;
                case 4:
                    m.cardID = r.int32();
                    break;
                case 5:
                    m.curGainSupportCnt = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushSupportInfo;
    })();

    proto.Msg_PushRequestSupportInfo = (function() {

        /**
         * Properties of a Msg_PushRequestSupportInfo.
         * @memberof proto
         * @interface IMsg_PushRequestSupportInfo
         * @property {proto.IAllianceCardRequestInfo|null} [cardRequestInfo] Msg_PushRequestSupportInfo cardRequestInfo
         */

        /**
         * Constructs a new Msg_PushRequestSupportInfo.
         * @memberof proto
         * @classdesc Represents a Msg_PushRequestSupportInfo.
         * @implements IMsg_PushRequestSupportInfo
         * @constructor
         * @param {proto.IMsg_PushRequestSupportInfo=} [p] Properties to set
         */
        function Msg_PushRequestSupportInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushRequestSupportInfo cardRequestInfo.
         * @member {proto.IAllianceCardRequestInfo|null|undefined} cardRequestInfo
         * @memberof proto.Msg_PushRequestSupportInfo
         * @instance
         */
        Msg_PushRequestSupportInfo.prototype.cardRequestInfo = null;

        /**
         * Encodes the specified Msg_PushRequestSupportInfo message. Does not implicitly {@link proto.Msg_PushRequestSupportInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushRequestSupportInfo
         * @static
         * @param {proto.IMsg_PushRequestSupportInfo} m Msg_PushRequestSupportInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushRequestSupportInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardRequestInfo != null && Object.hasOwnProperty.call(m, "cardRequestInfo"))
                $root.proto.AllianceCardRequestInfo.encode(m.cardRequestInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_PushRequestSupportInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushRequestSupportInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushRequestSupportInfo} Msg_PushRequestSupportInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushRequestSupportInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushRequestSupportInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardRequestInfo = $root.proto.AllianceCardRequestInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushRequestSupportInfo;
    })();

    proto.Msg_PushAllianceExpelMember = (function() {

        /**
         * Properties of a Msg_PushAllianceExpelMember.
         * @memberof proto
         * @interface IMsg_PushAllianceExpelMember
         */

        /**
         * Constructs a new Msg_PushAllianceExpelMember.
         * @memberof proto
         * @classdesc Represents a Msg_PushAllianceExpelMember.
         * @implements IMsg_PushAllianceExpelMember
         * @constructor
         * @param {proto.IMsg_PushAllianceExpelMember=} [p] Properties to set
         */
        function Msg_PushAllianceExpelMember(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_PushAllianceExpelMember message. Does not implicitly {@link proto.Msg_PushAllianceExpelMember.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushAllianceExpelMember
         * @static
         * @param {proto.IMsg_PushAllianceExpelMember} m Msg_PushAllianceExpelMember message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushAllianceExpelMember.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_PushAllianceExpelMember message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushAllianceExpelMember
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushAllianceExpelMember} Msg_PushAllianceExpelMember
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushAllianceExpelMember.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushAllianceExpelMember();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushAllianceExpelMember;
    })();

    proto.Msg_PushAllianceFightInvite = (function() {

        /**
         * Properties of a Msg_PushAllianceFightInvite.
         * @memberof proto
         * @interface IMsg_PushAllianceFightInvite
         * @property {proto.IAllianceFightInviteStruct|null} [fightInvite] Msg_PushAllianceFightInvite fightInvite
         * @property {proto.ChatChannelType|null} [channel] Msg_PushAllianceFightInvite channel
         */

        /**
         * Constructs a new Msg_PushAllianceFightInvite.
         * @memberof proto
         * @classdesc Represents a Msg_PushAllianceFightInvite.
         * @implements IMsg_PushAllianceFightInvite
         * @constructor
         * @param {proto.IMsg_PushAllianceFightInvite=} [p] Properties to set
         */
        function Msg_PushAllianceFightInvite(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushAllianceFightInvite fightInvite.
         * @member {proto.IAllianceFightInviteStruct|null|undefined} fightInvite
         * @memberof proto.Msg_PushAllianceFightInvite
         * @instance
         */
        Msg_PushAllianceFightInvite.prototype.fightInvite = null;

        /**
         * Msg_PushAllianceFightInvite channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_PushAllianceFightInvite
         * @instance
         */
        Msg_PushAllianceFightInvite.prototype.channel = 0;

        /**
         * Encodes the specified Msg_PushAllianceFightInvite message. Does not implicitly {@link proto.Msg_PushAllianceFightInvite.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushAllianceFightInvite
         * @static
         * @param {proto.IMsg_PushAllianceFightInvite} m Msg_PushAllianceFightInvite message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushAllianceFightInvite.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightInvite != null && Object.hasOwnProperty.call(m, "fightInvite"))
                $root.proto.AllianceFightInviteStruct.encode(m.fightInvite, w.uint32(10).fork()).ldelim();
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_PushAllianceFightInvite message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushAllianceFightInvite
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushAllianceFightInvite} Msg_PushAllianceFightInvite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushAllianceFightInvite.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushAllianceFightInvite();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightInvite = $root.proto.AllianceFightInviteStruct.decode(r, r.uint32());
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushAllianceFightInvite;
    })();

    proto.Msg_PushAllianceFightStart = (function() {

        /**
         * Properties of a Msg_PushAllianceFightStart.
         * @memberof proto
         * @interface IMsg_PushAllianceFightStart
         * @property {proto.IAllianceFightStruct|null} [fightStart] Msg_PushAllianceFightStart fightStart
         * @property {proto.ChatChannelType|null} [channel] Msg_PushAllianceFightStart channel
         */

        /**
         * Constructs a new Msg_PushAllianceFightStart.
         * @memberof proto
         * @classdesc Represents a Msg_PushAllianceFightStart.
         * @implements IMsg_PushAllianceFightStart
         * @constructor
         * @param {proto.IMsg_PushAllianceFightStart=} [p] Properties to set
         */
        function Msg_PushAllianceFightStart(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushAllianceFightStart fightStart.
         * @member {proto.IAllianceFightStruct|null|undefined} fightStart
         * @memberof proto.Msg_PushAllianceFightStart
         * @instance
         */
        Msg_PushAllianceFightStart.prototype.fightStart = null;

        /**
         * Msg_PushAllianceFightStart channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_PushAllianceFightStart
         * @instance
         */
        Msg_PushAllianceFightStart.prototype.channel = 0;

        /**
         * Encodes the specified Msg_PushAllianceFightStart message. Does not implicitly {@link proto.Msg_PushAllianceFightStart.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushAllianceFightStart
         * @static
         * @param {proto.IMsg_PushAllianceFightStart} m Msg_PushAllianceFightStart message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushAllianceFightStart.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightStart != null && Object.hasOwnProperty.call(m, "fightStart"))
                $root.proto.AllianceFightStruct.encode(m.fightStart, w.uint32(10).fork()).ldelim();
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_PushAllianceFightStart message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushAllianceFightStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushAllianceFightStart} Msg_PushAllianceFightStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushAllianceFightStart.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushAllianceFightStart();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightStart = $root.proto.AllianceFightStruct.decode(r, r.uint32());
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushAllianceFightStart;
    })();

    proto.Msg_PushAllianceFightEnd = (function() {

        /**
         * Properties of a Msg_PushAllianceFightEnd.
         * @memberof proto
         * @interface IMsg_PushAllianceFightEnd
         * @property {proto.IAllianceFightStruct|null} [fightEnd] Msg_PushAllianceFightEnd fightEnd
         * @property {proto.ChatChannelType|null} [channel] Msg_PushAllianceFightEnd channel
         */

        /**
         * Constructs a new Msg_PushAllianceFightEnd.
         * @memberof proto
         * @classdesc Represents a Msg_PushAllianceFightEnd.
         * @implements IMsg_PushAllianceFightEnd
         * @constructor
         * @param {proto.IMsg_PushAllianceFightEnd=} [p] Properties to set
         */
        function Msg_PushAllianceFightEnd(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushAllianceFightEnd fightEnd.
         * @member {proto.IAllianceFightStruct|null|undefined} fightEnd
         * @memberof proto.Msg_PushAllianceFightEnd
         * @instance
         */
        Msg_PushAllianceFightEnd.prototype.fightEnd = null;

        /**
         * Msg_PushAllianceFightEnd channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_PushAllianceFightEnd
         * @instance
         */
        Msg_PushAllianceFightEnd.prototype.channel = 0;

        /**
         * Encodes the specified Msg_PushAllianceFightEnd message. Does not implicitly {@link proto.Msg_PushAllianceFightEnd.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushAllianceFightEnd
         * @static
         * @param {proto.IMsg_PushAllianceFightEnd} m Msg_PushAllianceFightEnd message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushAllianceFightEnd.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightEnd != null && Object.hasOwnProperty.call(m, "fightEnd"))
                $root.proto.AllianceFightStruct.encode(m.fightEnd, w.uint32(10).fork()).ldelim();
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_PushAllianceFightEnd message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushAllianceFightEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushAllianceFightEnd} Msg_PushAllianceFightEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushAllianceFightEnd.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushAllianceFightEnd();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightEnd = $root.proto.AllianceFightStruct.decode(r, r.uint32());
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushAllianceFightEnd;
    })();

    proto.Msg_PushRecentlyAllianceFightInfo = (function() {

        /**
         * Properties of a Msg_PushRecentlyAllianceFightInfo.
         * @memberof proto
         * @interface IMsg_PushRecentlyAllianceFightInfo
         * @property {Array.<proto.IAllianceFightInviteStruct>|null} [fightInvite] Msg_PushRecentlyAllianceFightInfo fightInvite
         * @property {Array.<proto.IAllianceFightStruct>|null} [fightData] Msg_PushRecentlyAllianceFightInfo fightData
         */

        /**
         * Constructs a new Msg_PushRecentlyAllianceFightInfo.
         * @memberof proto
         * @classdesc Represents a Msg_PushRecentlyAllianceFightInfo.
         * @implements IMsg_PushRecentlyAllianceFightInfo
         * @constructor
         * @param {proto.IMsg_PushRecentlyAllianceFightInfo=} [p] Properties to set
         */
        function Msg_PushRecentlyAllianceFightInfo(p) {
            this.fightInvite = [];
            this.fightData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushRecentlyAllianceFightInfo fightInvite.
         * @member {Array.<proto.IAllianceFightInviteStruct>} fightInvite
         * @memberof proto.Msg_PushRecentlyAllianceFightInfo
         * @instance
         */
        Msg_PushRecentlyAllianceFightInfo.prototype.fightInvite = $util.emptyArray;

        /**
         * Msg_PushRecentlyAllianceFightInfo fightData.
         * @member {Array.<proto.IAllianceFightStruct>} fightData
         * @memberof proto.Msg_PushRecentlyAllianceFightInfo
         * @instance
         */
        Msg_PushRecentlyAllianceFightInfo.prototype.fightData = $util.emptyArray;

        /**
         * Encodes the specified Msg_PushRecentlyAllianceFightInfo message. Does not implicitly {@link proto.Msg_PushRecentlyAllianceFightInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushRecentlyAllianceFightInfo
         * @static
         * @param {proto.IMsg_PushRecentlyAllianceFightInfo} m Msg_PushRecentlyAllianceFightInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushRecentlyAllianceFightInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightInvite != null && m.fightInvite.length) {
                for (var i = 0; i < m.fightInvite.length; ++i)
                    $root.proto.AllianceFightInviteStruct.encode(m.fightInvite[i], w.uint32(10).fork()).ldelim();
            }
            if (m.fightData != null && m.fightData.length) {
                for (var i = 0; i < m.fightData.length; ++i)
                    $root.proto.AllianceFightStruct.encode(m.fightData[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_PushRecentlyAllianceFightInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushRecentlyAllianceFightInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushRecentlyAllianceFightInfo} Msg_PushRecentlyAllianceFightInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushRecentlyAllianceFightInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushRecentlyAllianceFightInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.fightInvite && m.fightInvite.length))
                        m.fightInvite = [];
                    m.fightInvite.push($root.proto.AllianceFightInviteStruct.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.fightData && m.fightData.length))
                        m.fightData = [];
                    m.fightData.push($root.proto.AllianceFightStruct.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushRecentlyAllianceFightInfo;
    })();

    proto.Msg_PushCancelAllianceFightInvite = (function() {

        /**
         * Properties of a Msg_PushCancelAllianceFightInvite.
         * @memberof proto
         * @interface IMsg_PushCancelAllianceFightInvite
         * @property {number|null} [roomID] Msg_PushCancelAllianceFightInvite roomID
         * @property {proto.FightType|null} [type] Msg_PushCancelAllianceFightInvite type
         * @property {proto.ChatChannelType|null} [channel] Msg_PushCancelAllianceFightInvite channel
         */

        /**
         * Constructs a new Msg_PushCancelAllianceFightInvite.
         * @memberof proto
         * @classdesc Represents a Msg_PushCancelAllianceFightInvite.
         * @implements IMsg_PushCancelAllianceFightInvite
         * @constructor
         * @param {proto.IMsg_PushCancelAllianceFightInvite=} [p] Properties to set
         */
        function Msg_PushCancelAllianceFightInvite(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushCancelAllianceFightInvite roomID.
         * @member {number} roomID
         * @memberof proto.Msg_PushCancelAllianceFightInvite
         * @instance
         */
        Msg_PushCancelAllianceFightInvite.prototype.roomID = 0;

        /**
         * Msg_PushCancelAllianceFightInvite type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_PushCancelAllianceFightInvite
         * @instance
         */
        Msg_PushCancelAllianceFightInvite.prototype.type = 0;

        /**
         * Msg_PushCancelAllianceFightInvite channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_PushCancelAllianceFightInvite
         * @instance
         */
        Msg_PushCancelAllianceFightInvite.prototype.channel = 0;

        /**
         * Encodes the specified Msg_PushCancelAllianceFightInvite message. Does not implicitly {@link proto.Msg_PushCancelAllianceFightInvite.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushCancelAllianceFightInvite
         * @static
         * @param {proto.IMsg_PushCancelAllianceFightInvite} m Msg_PushCancelAllianceFightInvite message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushCancelAllianceFightInvite.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(8).int32(m.roomID);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(16).int32(m.type);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(24).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_PushCancelAllianceFightInvite message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushCancelAllianceFightInvite
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushCancelAllianceFightInvite} Msg_PushCancelAllianceFightInvite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushCancelAllianceFightInvite.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushCancelAllianceFightInvite();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roomID = r.int32();
                    break;
                case 2:
                    m.type = r.int32();
                    break;
                case 3:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushCancelAllianceFightInvite;
    })();

    proto.Msg_PushAllianceApplyMessage = (function() {

        /**
         * Properties of a Msg_PushAllianceApplyMessage.
         * @memberof proto
         * @interface IMsg_PushAllianceApplyMessage
         * @property {boolean|null} [haveMessage] Msg_PushAllianceApplyMessage haveMessage
         */

        /**
         * Constructs a new Msg_PushAllianceApplyMessage.
         * @memberof proto
         * @classdesc Represents a Msg_PushAllianceApplyMessage.
         * @implements IMsg_PushAllianceApplyMessage
         * @constructor
         * @param {proto.IMsg_PushAllianceApplyMessage=} [p] Properties to set
         */
        function Msg_PushAllianceApplyMessage(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushAllianceApplyMessage haveMessage.
         * @member {boolean} haveMessage
         * @memberof proto.Msg_PushAllianceApplyMessage
         * @instance
         */
        Msg_PushAllianceApplyMessage.prototype.haveMessage = false;

        /**
         * Encodes the specified Msg_PushAllianceApplyMessage message. Does not implicitly {@link proto.Msg_PushAllianceApplyMessage.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushAllianceApplyMessage
         * @static
         * @param {proto.IMsg_PushAllianceApplyMessage} m Msg_PushAllianceApplyMessage message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushAllianceApplyMessage.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.haveMessage != null && Object.hasOwnProperty.call(m, "haveMessage"))
                w.uint32(8).bool(m.haveMessage);
            return w;
        };

        /**
         * Decodes a Msg_PushAllianceApplyMessage message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushAllianceApplyMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushAllianceApplyMessage} Msg_PushAllianceApplyMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushAllianceApplyMessage.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushAllianceApplyMessage();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.haveMessage = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushAllianceApplyMessage;
    })();

    proto.Msg_PushAllianceLeaderChange = (function() {

        /**
         * Properties of a Msg_PushAllianceLeaderChange.
         * @memberof proto
         * @interface IMsg_PushAllianceLeaderChange
         */

        /**
         * Constructs a new Msg_PushAllianceLeaderChange.
         * @memberof proto
         * @classdesc Represents a Msg_PushAllianceLeaderChange.
         * @implements IMsg_PushAllianceLeaderChange
         * @constructor
         * @param {proto.IMsg_PushAllianceLeaderChange=} [p] Properties to set
         */
        function Msg_PushAllianceLeaderChange(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_PushAllianceLeaderChange message. Does not implicitly {@link proto.Msg_PushAllianceLeaderChange.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushAllianceLeaderChange
         * @static
         * @param {proto.IMsg_PushAllianceLeaderChange} m Msg_PushAllianceLeaderChange message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushAllianceLeaderChange.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_PushAllianceLeaderChange message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushAllianceLeaderChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushAllianceLeaderChange} Msg_PushAllianceLeaderChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushAllianceLeaderChange.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushAllianceLeaderChange();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushAllianceLeaderChange;
    })();

    proto.Msg_GetPveClearRewardReq = (function() {

        /**
         * Properties of a Msg_GetPveClearRewardReq.
         * @memberof proto
         * @interface IMsg_GetPveClearRewardReq
         * @property {number|null} [waveNum] Msg_GetPveClearRewardReq waveNum
         */

        /**
         * Constructs a new Msg_GetPveClearRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetPveClearRewardReq.
         * @implements IMsg_GetPveClearRewardReq
         * @constructor
         * @param {proto.IMsg_GetPveClearRewardReq=} [p] Properties to set
         */
        function Msg_GetPveClearRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetPveClearRewardReq waveNum.
         * @member {number} waveNum
         * @memberof proto.Msg_GetPveClearRewardReq
         * @instance
         */
        Msg_GetPveClearRewardReq.prototype.waveNum = 0;

        /**
         * Encodes the specified Msg_GetPveClearRewardReq message. Does not implicitly {@link proto.Msg_GetPveClearRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPveClearRewardReq
         * @static
         * @param {proto.IMsg_GetPveClearRewardReq} m Msg_GetPveClearRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPveClearRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.waveNum != null && Object.hasOwnProperty.call(m, "waveNum"))
                w.uint32(8).int32(m.waveNum);
            return w;
        };

        /**
         * Decodes a Msg_GetPveClearRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPveClearRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPveClearRewardReq} Msg_GetPveClearRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPveClearRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPveClearRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.waveNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPveClearRewardReq;
    })();

    proto.Msg_GetPveClearRewardRsp = (function() {

        /**
         * Properties of a Msg_GetPveClearRewardRsp.
         * @memberof proto
         * @interface IMsg_GetPveClearRewardRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_GetPveClearRewardRsp result
         * @property {number|null} [addGold] Msg_GetPveClearRewardRsp addGold
         * @property {Array.<number>|null} [clearRewards] Msg_GetPveClearRewardRsp clearRewards
         */

        /**
         * Constructs a new Msg_GetPveClearRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetPveClearRewardRsp.
         * @implements IMsg_GetPveClearRewardRsp
         * @constructor
         * @param {proto.IMsg_GetPveClearRewardRsp=} [p] Properties to set
         */
        function Msg_GetPveClearRewardRsp(p) {
            this.clearRewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetPveClearRewardRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_GetPveClearRewardRsp
         * @instance
         */
        Msg_GetPveClearRewardRsp.prototype.result = 0;

        /**
         * Msg_GetPveClearRewardRsp addGold.
         * @member {number} addGold
         * @memberof proto.Msg_GetPveClearRewardRsp
         * @instance
         */
        Msg_GetPveClearRewardRsp.prototype.addGold = 0;

        /**
         * Msg_GetPveClearRewardRsp clearRewards.
         * @member {Array.<number>} clearRewards
         * @memberof proto.Msg_GetPveClearRewardRsp
         * @instance
         */
        Msg_GetPveClearRewardRsp.prototype.clearRewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetPveClearRewardRsp message. Does not implicitly {@link proto.Msg_GetPveClearRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPveClearRewardRsp
         * @static
         * @param {proto.IMsg_GetPveClearRewardRsp} m Msg_GetPveClearRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPveClearRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.addGold != null && Object.hasOwnProperty.call(m, "addGold"))
                w.uint32(16).int32(m.addGold);
            if (m.clearRewards != null && m.clearRewards.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.clearRewards.length; ++i)
                    w.int32(m.clearRewards[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetPveClearRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPveClearRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPveClearRewardRsp} Msg_GetPveClearRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPveClearRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPveClearRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.addGold = r.int32();
                    break;
                case 3:
                    if (!(m.clearRewards && m.clearRewards.length))
                        m.clearRewards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.clearRewards.push(r.int32());
                    } else
                        m.clearRewards.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPveClearRewardRsp;
    })();

    /**
     * PveDailyStatus enum.
     * @name proto.PveDailyStatus
     * @enum {number}
     * @property {number} Incomplete=0 Incomplete value
     * @property {number} Complete=1 Complete value
     * @property {number} Received=2 Received value
     */
    proto.PveDailyStatus = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Incomplete"] = 0;
        values[valuesById[1] = "Complete"] = 1;
        values[valuesById[2] = "Received"] = 2;
        return values;
    })();

    proto.Msg_GetPveDailyRewardReq = (function() {

        /**
         * Properties of a Msg_GetPveDailyRewardReq.
         * @memberof proto
         * @interface IMsg_GetPveDailyRewardReq
         */

        /**
         * Constructs a new Msg_GetPveDailyRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetPveDailyRewardReq.
         * @implements IMsg_GetPveDailyRewardReq
         * @constructor
         * @param {proto.IMsg_GetPveDailyRewardReq=} [p] Properties to set
         */
        function Msg_GetPveDailyRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetPveDailyRewardReq message. Does not implicitly {@link proto.Msg_GetPveDailyRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPveDailyRewardReq
         * @static
         * @param {proto.IMsg_GetPveDailyRewardReq} m Msg_GetPveDailyRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPveDailyRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetPveDailyRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPveDailyRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPveDailyRewardReq} Msg_GetPveDailyRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPveDailyRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPveDailyRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPveDailyRewardReq;
    })();

    proto.Msg_GetPveDailyRewardRsp = (function() {

        /**
         * Properties of a Msg_GetPveDailyRewardRsp.
         * @memberof proto
         * @interface IMsg_GetPveDailyRewardRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_GetPveDailyRewardRsp result
         * @property {number|null} [addGold] Msg_GetPveDailyRewardRsp addGold
         */

        /**
         * Constructs a new Msg_GetPveDailyRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetPveDailyRewardRsp.
         * @implements IMsg_GetPveDailyRewardRsp
         * @constructor
         * @param {proto.IMsg_GetPveDailyRewardRsp=} [p] Properties to set
         */
        function Msg_GetPveDailyRewardRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetPveDailyRewardRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_GetPveDailyRewardRsp
         * @instance
         */
        Msg_GetPveDailyRewardRsp.prototype.result = 0;

        /**
         * Msg_GetPveDailyRewardRsp addGold.
         * @member {number} addGold
         * @memberof proto.Msg_GetPveDailyRewardRsp
         * @instance
         */
        Msg_GetPveDailyRewardRsp.prototype.addGold = 0;

        /**
         * Encodes the specified Msg_GetPveDailyRewardRsp message. Does not implicitly {@link proto.Msg_GetPveDailyRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPveDailyRewardRsp
         * @static
         * @param {proto.IMsg_GetPveDailyRewardRsp} m Msg_GetPveDailyRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPveDailyRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.addGold != null && Object.hasOwnProperty.call(m, "addGold"))
                w.uint32(16).int32(m.addGold);
            return w;
        };

        /**
         * Decodes a Msg_GetPveDailyRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPveDailyRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPveDailyRewardRsp} Msg_GetPveDailyRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPveDailyRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPveDailyRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.addGold = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPveDailyRewardRsp;
    })();

    proto.Msg_BuyPveCountReq = (function() {

        /**
         * Properties of a Msg_BuyPveCountReq.
         * @memberof proto
         * @interface IMsg_BuyPveCountReq
         * @property {boolean|null} [byAd] Msg_BuyPveCountReq byAd
         */

        /**
         * Constructs a new Msg_BuyPveCountReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyPveCountReq.
         * @implements IMsg_BuyPveCountReq
         * @constructor
         * @param {proto.IMsg_BuyPveCountReq=} [p] Properties to set
         */
        function Msg_BuyPveCountReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyPveCountReq byAd.
         * @member {boolean} byAd
         * @memberof proto.Msg_BuyPveCountReq
         * @instance
         */
        Msg_BuyPveCountReq.prototype.byAd = false;

        /**
         * Encodes the specified Msg_BuyPveCountReq message. Does not implicitly {@link proto.Msg_BuyPveCountReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyPveCountReq
         * @static
         * @param {proto.IMsg_BuyPveCountReq} m Msg_BuyPveCountReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyPveCountReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.byAd != null && Object.hasOwnProperty.call(m, "byAd"))
                w.uint32(8).bool(m.byAd);
            return w;
        };

        /**
         * Decodes a Msg_BuyPveCountReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyPveCountReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyPveCountReq} Msg_BuyPveCountReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyPveCountReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyPveCountReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.byAd = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyPveCountReq;
    })();

    proto.Msg_BuyPveCountRsp = (function() {

        /**
         * Properties of a Msg_BuyPveCountRsp.
         * @memberof proto
         * @interface IMsg_BuyPveCountRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_BuyPveCountRsp result
         * @property {number|null} [pveCount] Msg_BuyPveCountRsp pveCount
         */

        /**
         * Constructs a new Msg_BuyPveCountRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyPveCountRsp.
         * @implements IMsg_BuyPveCountRsp
         * @constructor
         * @param {proto.IMsg_BuyPveCountRsp=} [p] Properties to set
         */
        function Msg_BuyPveCountRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyPveCountRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_BuyPveCountRsp
         * @instance
         */
        Msg_BuyPveCountRsp.prototype.result = 0;

        /**
         * Msg_BuyPveCountRsp pveCount.
         * @member {number} pveCount
         * @memberof proto.Msg_BuyPveCountRsp
         * @instance
         */
        Msg_BuyPveCountRsp.prototype.pveCount = 0;

        /**
         * Encodes the specified Msg_BuyPveCountRsp message. Does not implicitly {@link proto.Msg_BuyPveCountRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyPveCountRsp
         * @static
         * @param {proto.IMsg_BuyPveCountRsp} m Msg_BuyPveCountRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyPveCountRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.pveCount != null && Object.hasOwnProperty.call(m, "pveCount"))
                w.uint32(16).int32(m.pveCount);
            return w;
        };

        /**
         * Decodes a Msg_BuyPveCountRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyPveCountRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyPveCountRsp} Msg_BuyPveCountRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyPveCountRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyPveCountRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.pveCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyPveCountRsp;
    })();

    proto.Msg_GetPveStatusReq = (function() {

        /**
         * Properties of a Msg_GetPveStatusReq.
         * @memberof proto
         * @interface IMsg_GetPveStatusReq
         */

        /**
         * Constructs a new Msg_GetPveStatusReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetPveStatusReq.
         * @implements IMsg_GetPveStatusReq
         * @constructor
         * @param {proto.IMsg_GetPveStatusReq=} [p] Properties to set
         */
        function Msg_GetPveStatusReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetPveStatusReq message. Does not implicitly {@link proto.Msg_GetPveStatusReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPveStatusReq
         * @static
         * @param {proto.IMsg_GetPveStatusReq} m Msg_GetPveStatusReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPveStatusReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetPveStatusReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPveStatusReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPveStatusReq} Msg_GetPveStatusReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPveStatusReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPveStatusReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPveStatusReq;
    })();

    proto.Msg_GetPveStatusRsp = (function() {

        /**
         * Properties of a Msg_GetPveStatusRsp.
         * @memberof proto
         * @interface IMsg_GetPveStatusRsp
         * @property {number|null} [pveCount] Msg_GetPveStatusRsp pveCount
         * @property {proto.PveDailyStatus|null} [dailyStatus] Msg_GetPveStatusRsp dailyStatus
         * @property {Array.<number>|null} [clearRewards] Msg_GetPveStatusRsp clearRewards
         * @property {number|null} [maxWave] Msg_GetPveStatusRsp maxWave
         * @property {number|null} [pveAdCount] Msg_GetPveStatusRsp pveAdCount
         */

        /**
         * Constructs a new Msg_GetPveStatusRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetPveStatusRsp.
         * @implements IMsg_GetPveStatusRsp
         * @constructor
         * @param {proto.IMsg_GetPveStatusRsp=} [p] Properties to set
         */
        function Msg_GetPveStatusRsp(p) {
            this.clearRewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetPveStatusRsp pveCount.
         * @member {number} pveCount
         * @memberof proto.Msg_GetPveStatusRsp
         * @instance
         */
        Msg_GetPveStatusRsp.prototype.pveCount = 0;

        /**
         * Msg_GetPveStatusRsp dailyStatus.
         * @member {proto.PveDailyStatus} dailyStatus
         * @memberof proto.Msg_GetPveStatusRsp
         * @instance
         */
        Msg_GetPveStatusRsp.prototype.dailyStatus = 0;

        /**
         * Msg_GetPveStatusRsp clearRewards.
         * @member {Array.<number>} clearRewards
         * @memberof proto.Msg_GetPveStatusRsp
         * @instance
         */
        Msg_GetPveStatusRsp.prototype.clearRewards = $util.emptyArray;

        /**
         * Msg_GetPveStatusRsp maxWave.
         * @member {number} maxWave
         * @memberof proto.Msg_GetPveStatusRsp
         * @instance
         */
        Msg_GetPveStatusRsp.prototype.maxWave = 0;

        /**
         * Msg_GetPveStatusRsp pveAdCount.
         * @member {number} pveAdCount
         * @memberof proto.Msg_GetPveStatusRsp
         * @instance
         */
        Msg_GetPveStatusRsp.prototype.pveAdCount = 0;

        /**
         * Encodes the specified Msg_GetPveStatusRsp message. Does not implicitly {@link proto.Msg_GetPveStatusRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPveStatusRsp
         * @static
         * @param {proto.IMsg_GetPveStatusRsp} m Msg_GetPveStatusRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPveStatusRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pveCount != null && Object.hasOwnProperty.call(m, "pveCount"))
                w.uint32(8).int32(m.pveCount);
            if (m.dailyStatus != null && Object.hasOwnProperty.call(m, "dailyStatus"))
                w.uint32(16).int32(m.dailyStatus);
            if (m.clearRewards != null && m.clearRewards.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.clearRewards.length; ++i)
                    w.int32(m.clearRewards[i]);
                w.ldelim();
            }
            if (m.maxWave != null && Object.hasOwnProperty.call(m, "maxWave"))
                w.uint32(32).int32(m.maxWave);
            if (m.pveAdCount != null && Object.hasOwnProperty.call(m, "pveAdCount"))
                w.uint32(40).int32(m.pveAdCount);
            return w;
        };

        /**
         * Decodes a Msg_GetPveStatusRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPveStatusRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPveStatusRsp} Msg_GetPveStatusRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPveStatusRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPveStatusRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.pveCount = r.int32();
                    break;
                case 2:
                    m.dailyStatus = r.int32();
                    break;
                case 3:
                    if (!(m.clearRewards && m.clearRewards.length))
                        m.clearRewards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.clearRewards.push(r.int32());
                    } else
                        m.clearRewards.push(r.int32());
                    break;
                case 4:
                    m.maxWave = r.int32();
                    break;
                case 5:
                    m.pveAdCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPveStatusRsp;
    })();

    proto.Msg_BuyDemonPassReq = (function() {

        /**
         * Properties of a Msg_BuyDemonPassReq.
         * @memberof proto
         * @interface IMsg_BuyDemonPassReq
         */

        /**
         * Constructs a new Msg_BuyDemonPassReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyDemonPassReq.
         * @implements IMsg_BuyDemonPassReq
         * @constructor
         * @param {proto.IMsg_BuyDemonPassReq=} [p] Properties to set
         */
        function Msg_BuyDemonPassReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_BuyDemonPassReq message. Does not implicitly {@link proto.Msg_BuyDemonPassReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyDemonPassReq
         * @static
         * @param {proto.IMsg_BuyDemonPassReq} m Msg_BuyDemonPassReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyDemonPassReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_BuyDemonPassReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyDemonPassReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyDemonPassReq} Msg_BuyDemonPassReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyDemonPassReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyDemonPassReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyDemonPassReq;
    })();

    proto.Msg_BuyDemonPassRsp = (function() {

        /**
         * Properties of a Msg_BuyDemonPassRsp.
         * @memberof proto
         * @interface IMsg_BuyDemonPassRsp
         * @property {proto.Msg_BuyDemonPassRsp.ErrorCode|null} [result] Msg_BuyDemonPassRsp result
         */

        /**
         * Constructs a new Msg_BuyDemonPassRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyDemonPassRsp.
         * @implements IMsg_BuyDemonPassRsp
         * @constructor
         * @param {proto.IMsg_BuyDemonPassRsp=} [p] Properties to set
         */
        function Msg_BuyDemonPassRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyDemonPassRsp result.
         * @member {proto.Msg_BuyDemonPassRsp.ErrorCode} result
         * @memberof proto.Msg_BuyDemonPassRsp
         * @instance
         */
        Msg_BuyDemonPassRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_BuyDemonPassRsp message. Does not implicitly {@link proto.Msg_BuyDemonPassRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyDemonPassRsp
         * @static
         * @param {proto.IMsg_BuyDemonPassRsp} m Msg_BuyDemonPassRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyDemonPassRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_BuyDemonPassRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyDemonPassRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyDemonPassRsp} Msg_BuyDemonPassRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyDemonPassRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyDemonPassRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyDemonPassRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Exist=1 Exist value
         * @property {number} MoneyLack=2 MoneyLack value
         */
        Msg_BuyDemonPassRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Exist"] = 1;
            values[valuesById[2] = "MoneyLack"] = 2;
            return values;
        })();

        return Msg_BuyDemonPassRsp;
    })();

    proto.Msg_FightGmWin = (function() {

        /**
         * Properties of a Msg_FightGmWin.
         * @memberof proto
         * @interface IMsg_FightGmWin
         */

        /**
         * Constructs a new Msg_FightGmWin.
         * @memberof proto
         * @classdesc Represents a Msg_FightGmWin.
         * @implements IMsg_FightGmWin
         * @constructor
         * @param {proto.IMsg_FightGmWin=} [p] Properties to set
         */
        function Msg_FightGmWin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_FightGmWin message. Does not implicitly {@link proto.Msg_FightGmWin.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightGmWin
         * @static
         * @param {proto.IMsg_FightGmWin} m Msg_FightGmWin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightGmWin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_FightGmWin message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightGmWin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightGmWin} Msg_FightGmWin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightGmWin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightGmWin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightGmWin;
    })();

    proto.Msg_GmAddCupReq = (function() {

        /**
         * Properties of a Msg_GmAddCupReq.
         * @memberof proto
         * @interface IMsg_GmAddCupReq
         * @property {number|null} [delta] Msg_GmAddCupReq delta
         */

        /**
         * Constructs a new Msg_GmAddCupReq.
         * @memberof proto
         * @classdesc Represents a Msg_GmAddCupReq.
         * @implements IMsg_GmAddCupReq
         * @constructor
         * @param {proto.IMsg_GmAddCupReq=} [p] Properties to set
         */
        function Msg_GmAddCupReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GmAddCupReq delta.
         * @member {number} delta
         * @memberof proto.Msg_GmAddCupReq
         * @instance
         */
        Msg_GmAddCupReq.prototype.delta = 0;

        /**
         * Encodes the specified Msg_GmAddCupReq message. Does not implicitly {@link proto.Msg_GmAddCupReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GmAddCupReq
         * @static
         * @param {proto.IMsg_GmAddCupReq} m Msg_GmAddCupReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GmAddCupReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.delta != null && Object.hasOwnProperty.call(m, "delta"))
                w.uint32(8).int32(m.delta);
            return w;
        };

        /**
         * Decodes a Msg_GmAddCupReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GmAddCupReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GmAddCupReq} Msg_GmAddCupReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GmAddCupReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GmAddCupReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.delta = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GmAddCupReq;
    })();

    proto.Msg_GmAddCupRsp = (function() {

        /**
         * Properties of a Msg_GmAddCupRsp.
         * @memberof proto
         * @interface IMsg_GmAddCupRsp
         * @property {number|null} [cup] Msg_GmAddCupRsp cup
         */

        /**
         * Constructs a new Msg_GmAddCupRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GmAddCupRsp.
         * @implements IMsg_GmAddCupRsp
         * @constructor
         * @param {proto.IMsg_GmAddCupRsp=} [p] Properties to set
         */
        function Msg_GmAddCupRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GmAddCupRsp cup.
         * @member {number} cup
         * @memberof proto.Msg_GmAddCupRsp
         * @instance
         */
        Msg_GmAddCupRsp.prototype.cup = 0;

        /**
         * Encodes the specified Msg_GmAddCupRsp message. Does not implicitly {@link proto.Msg_GmAddCupRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GmAddCupRsp
         * @static
         * @param {proto.IMsg_GmAddCupRsp} m Msg_GmAddCupRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GmAddCupRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cup != null && Object.hasOwnProperty.call(m, "cup"))
                w.uint32(8).int32(m.cup);
            return w;
        };

        /**
         * Decodes a Msg_GmAddCupRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GmAddCupRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GmAddCupRsp} Msg_GmAddCupRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GmAddCupRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GmAddCupRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cup = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GmAddCupRsp;
    })();

    proto.Msg_SimpleGmReq = (function() {

        /**
         * Properties of a Msg_SimpleGmReq.
         * @memberof proto
         * @interface IMsg_SimpleGmReq
         * @property {string|null} [content] Msg_SimpleGmReq content
         */

        /**
         * Constructs a new Msg_SimpleGmReq.
         * @memberof proto
         * @classdesc Represents a Msg_SimpleGmReq.
         * @implements IMsg_SimpleGmReq
         * @constructor
         * @param {proto.IMsg_SimpleGmReq=} [p] Properties to set
         */
        function Msg_SimpleGmReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SimpleGmReq content.
         * @member {string} content
         * @memberof proto.Msg_SimpleGmReq
         * @instance
         */
        Msg_SimpleGmReq.prototype.content = "";

        /**
         * Encodes the specified Msg_SimpleGmReq message. Does not implicitly {@link proto.Msg_SimpleGmReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SimpleGmReq
         * @static
         * @param {proto.IMsg_SimpleGmReq} m Msg_SimpleGmReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SimpleGmReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                w.uint32(10).string(m.content);
            return w;
        };

        /**
         * Decodes a Msg_SimpleGmReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SimpleGmReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SimpleGmReq} Msg_SimpleGmReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SimpleGmReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SimpleGmReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.content = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SimpleGmReq;
    })();

    proto.Msg_SimpleGmRsp = (function() {

        /**
         * Properties of a Msg_SimpleGmRsp.
         * @memberof proto
         * @interface IMsg_SimpleGmRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_SimpleGmRsp result
         * @property {string|null} [content] Msg_SimpleGmRsp content
         */

        /**
         * Constructs a new Msg_SimpleGmRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SimpleGmRsp.
         * @implements IMsg_SimpleGmRsp
         * @constructor
         * @param {proto.IMsg_SimpleGmRsp=} [p] Properties to set
         */
        function Msg_SimpleGmRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SimpleGmRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_SimpleGmRsp
         * @instance
         */
        Msg_SimpleGmRsp.prototype.result = 0;

        /**
         * Msg_SimpleGmRsp content.
         * @member {string} content
         * @memberof proto.Msg_SimpleGmRsp
         * @instance
         */
        Msg_SimpleGmRsp.prototype.content = "";

        /**
         * Encodes the specified Msg_SimpleGmRsp message. Does not implicitly {@link proto.Msg_SimpleGmRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SimpleGmRsp
         * @static
         * @param {proto.IMsg_SimpleGmRsp} m Msg_SimpleGmRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SimpleGmRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                w.uint32(18).string(m.content);
            return w;
        };

        /**
         * Decodes a Msg_SimpleGmRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SimpleGmRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SimpleGmRsp} Msg_SimpleGmRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SimpleGmRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SimpleGmRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.content = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SimpleGmRsp;
    })();

    proto.RoleChallengeData = (function() {

        /**
         * Properties of a RoleChallengeData.
         * @memberof proto
         * @interface IRoleChallengeData
         * @property {number|null} [challengeId] RoleChallengeData challengeId
         * @property {number|null} [failCount] RoleChallengeData failCount
         * @property {number|null} [winCount] RoleChallengeData winCount
         * @property {number|null} [awardCount] RoleChallengeData awardCount
         * @property {Array.<proto.IFightCardData>|null} [cards] RoleChallengeData cards
         * @property {proto.IFightCardData|null} [lord] RoleChallengeData lord
         * @property {proto.ITalentData|null} [talent] RoleChallengeData talent
         */

        /**
         * Constructs a new RoleChallengeData.
         * @memberof proto
         * @classdesc Represents a RoleChallengeData.
         * @implements IRoleChallengeData
         * @constructor
         * @param {proto.IRoleChallengeData=} [p] Properties to set
         */
        function RoleChallengeData(p) {
            this.cards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RoleChallengeData challengeId.
         * @member {number} challengeId
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.challengeId = 0;

        /**
         * RoleChallengeData failCount.
         * @member {number} failCount
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.failCount = 0;

        /**
         * RoleChallengeData winCount.
         * @member {number} winCount
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.winCount = 0;

        /**
         * RoleChallengeData awardCount.
         * @member {number} awardCount
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.awardCount = 0;

        /**
         * RoleChallengeData cards.
         * @member {Array.<proto.IFightCardData>} cards
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.cards = $util.emptyArray;

        /**
         * RoleChallengeData lord.
         * @member {proto.IFightCardData|null|undefined} lord
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.lord = null;

        /**
         * RoleChallengeData talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.RoleChallengeData
         * @instance
         */
        RoleChallengeData.prototype.talent = null;

        /**
         * Encodes the specified RoleChallengeData message. Does not implicitly {@link proto.RoleChallengeData.verify|verify} messages.
         * @function encode
         * @memberof proto.RoleChallengeData
         * @static
         * @param {proto.IRoleChallengeData} m RoleChallengeData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoleChallengeData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.challengeId != null && Object.hasOwnProperty.call(m, "challengeId"))
                w.uint32(8).int32(m.challengeId);
            if (m.failCount != null && Object.hasOwnProperty.call(m, "failCount"))
                w.uint32(16).int32(m.failCount);
            if (m.winCount != null && Object.hasOwnProperty.call(m, "winCount"))
                w.uint32(24).int32(m.winCount);
            if (m.awardCount != null && Object.hasOwnProperty.call(m, "awardCount"))
                w.uint32(32).int32(m.awardCount);
            if (m.cards != null && m.cards.length) {
                for (var i = 0; i < m.cards.length; ++i)
                    $root.proto.FightCardData.encode(m.cards[i], w.uint32(42).fork()).ldelim();
            }
            if (m.lord != null && Object.hasOwnProperty.call(m, "lord"))
                $root.proto.FightCardData.encode(m.lord, w.uint32(50).fork()).ldelim();
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(58).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a RoleChallengeData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RoleChallengeData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RoleChallengeData} RoleChallengeData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoleChallengeData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RoleChallengeData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.challengeId = r.int32();
                    break;
                case 2:
                    m.failCount = r.int32();
                    break;
                case 3:
                    m.winCount = r.int32();
                    break;
                case 4:
                    m.awardCount = r.int32();
                    break;
                case 5:
                    if (!(m.cards && m.cards.length))
                        m.cards = [];
                    m.cards.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                case 6:
                    m.lord = $root.proto.FightCardData.decode(r, r.uint32());
                    break;
                case 7:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RoleChallengeData;
    })();

    proto.Msg_ChallengeGetInfoReq = (function() {

        /**
         * Properties of a Msg_ChallengeGetInfoReq.
         * @memberof proto
         * @interface IMsg_ChallengeGetInfoReq
         */

        /**
         * Constructs a new Msg_ChallengeGetInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeGetInfoReq.
         * @implements IMsg_ChallengeGetInfoReq
         * @constructor
         * @param {proto.IMsg_ChallengeGetInfoReq=} [p] Properties to set
         */
        function Msg_ChallengeGetInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ChallengeGetInfoReq message. Does not implicitly {@link proto.Msg_ChallengeGetInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeGetInfoReq
         * @static
         * @param {proto.IMsg_ChallengeGetInfoReq} m Msg_ChallengeGetInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeGetInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ChallengeGetInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeGetInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeGetInfoReq} Msg_ChallengeGetInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeGetInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeGetInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeGetInfoReq;
    })();

    proto.ChallengeInfo = (function() {

        /**
         * Properties of a ChallengeInfo.
         * @memberof proto
         * @interface IChallengeInfo
         * @property {number|null} [challengeId] ChallengeInfo challengeId
         * @property {number|Long|null} [startUTC] ChallengeInfo startUTC
         * @property {number|Long|null} [endUTC] ChallengeInfo endUTC
         */

        /**
         * Constructs a new ChallengeInfo.
         * @memberof proto
         * @classdesc Represents a ChallengeInfo.
         * @implements IChallengeInfo
         * @constructor
         * @param {proto.IChallengeInfo=} [p] Properties to set
         */
        function ChallengeInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ChallengeInfo challengeId.
         * @member {number} challengeId
         * @memberof proto.ChallengeInfo
         * @instance
         */
        ChallengeInfo.prototype.challengeId = 0;

        /**
         * ChallengeInfo startUTC.
         * @member {number|Long} startUTC
         * @memberof proto.ChallengeInfo
         * @instance
         */
        ChallengeInfo.prototype.startUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * ChallengeInfo endUTC.
         * @member {number|Long} endUTC
         * @memberof proto.ChallengeInfo
         * @instance
         */
        ChallengeInfo.prototype.endUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified ChallengeInfo message. Does not implicitly {@link proto.ChallengeInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.ChallengeInfo
         * @static
         * @param {proto.IChallengeInfo} m ChallengeInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ChallengeInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.challengeId != null && Object.hasOwnProperty.call(m, "challengeId"))
                w.uint32(8).int32(m.challengeId);
            if (m.startUTC != null && Object.hasOwnProperty.call(m, "startUTC"))
                w.uint32(16).int64(m.startUTC);
            if (m.endUTC != null && Object.hasOwnProperty.call(m, "endUTC"))
                w.uint32(24).int64(m.endUTC);
            return w;
        };

        /**
         * Decodes a ChallengeInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ChallengeInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ChallengeInfo} ChallengeInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ChallengeInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ChallengeInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.challengeId = r.int32();
                    break;
                case 2:
                    m.startUTC = r.int64();
                    break;
                case 3:
                    m.endUTC = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ChallengeInfo;
    })();

    proto.Msg_ChallengeGetInfoRsp = (function() {

        /**
         * Properties of a Msg_ChallengeGetInfoRsp.
         * @memberof proto
         * @interface IMsg_ChallengeGetInfoRsp
         * @property {proto.IRoleChallengeData|null} [challengeData] Msg_ChallengeGetInfoRsp challengeData
         * @property {Array.<proto.IChallengeInfo>|null} [challengeInfos] Msg_ChallengeGetInfoRsp challengeInfos
         */

        /**
         * Constructs a new Msg_ChallengeGetInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeGetInfoRsp.
         * @implements IMsg_ChallengeGetInfoRsp
         * @constructor
         * @param {proto.IMsg_ChallengeGetInfoRsp=} [p] Properties to set
         */
        function Msg_ChallengeGetInfoRsp(p) {
            this.challengeInfos = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeGetInfoRsp challengeData.
         * @member {proto.IRoleChallengeData|null|undefined} challengeData
         * @memberof proto.Msg_ChallengeGetInfoRsp
         * @instance
         */
        Msg_ChallengeGetInfoRsp.prototype.challengeData = null;

        /**
         * Msg_ChallengeGetInfoRsp challengeInfos.
         * @member {Array.<proto.IChallengeInfo>} challengeInfos
         * @memberof proto.Msg_ChallengeGetInfoRsp
         * @instance
         */
        Msg_ChallengeGetInfoRsp.prototype.challengeInfos = $util.emptyArray;

        /**
         * Encodes the specified Msg_ChallengeGetInfoRsp message. Does not implicitly {@link proto.Msg_ChallengeGetInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeGetInfoRsp
         * @static
         * @param {proto.IMsg_ChallengeGetInfoRsp} m Msg_ChallengeGetInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeGetInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.challengeData != null && Object.hasOwnProperty.call(m, "challengeData"))
                $root.proto.RoleChallengeData.encode(m.challengeData, w.uint32(10).fork()).ldelim();
            if (m.challengeInfos != null && m.challengeInfos.length) {
                for (var i = 0; i < m.challengeInfos.length; ++i)
                    $root.proto.ChallengeInfo.encode(m.challengeInfos[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ChallengeGetInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeGetInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeGetInfoRsp} Msg_ChallengeGetInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeGetInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeGetInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.challengeData = $root.proto.RoleChallengeData.decode(r, r.uint32());
                    break;
                case 2:
                    if (!(m.challengeInfos && m.challengeInfos.length))
                        m.challengeInfos = [];
                    m.challengeInfos.push($root.proto.ChallengeInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeGetInfoRsp;
    })();

    proto.Msg_ChallengeChangeDeckReq = (function() {

        /**
         * Properties of a Msg_ChallengeChangeDeckReq.
         * @memberof proto
         * @interface IMsg_ChallengeChangeDeckReq
         * @property {number|null} [cardIndex] Msg_ChallengeChangeDeckReq cardIndex
         * @property {string|null} [cardUuid] Msg_ChallengeChangeDeckReq cardUuid
         */

        /**
         * Constructs a new Msg_ChallengeChangeDeckReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeChangeDeckReq.
         * @implements IMsg_ChallengeChangeDeckReq
         * @constructor
         * @param {proto.IMsg_ChallengeChangeDeckReq=} [p] Properties to set
         */
        function Msg_ChallengeChangeDeckReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeChangeDeckReq cardIndex.
         * @member {number} cardIndex
         * @memberof proto.Msg_ChallengeChangeDeckReq
         * @instance
         */
        Msg_ChallengeChangeDeckReq.prototype.cardIndex = 0;

        /**
         * Msg_ChallengeChangeDeckReq cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_ChallengeChangeDeckReq
         * @instance
         */
        Msg_ChallengeChangeDeckReq.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_ChallengeChangeDeckReq message. Does not implicitly {@link proto.Msg_ChallengeChangeDeckReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeChangeDeckReq
         * @static
         * @param {proto.IMsg_ChallengeChangeDeckReq} m Msg_ChallengeChangeDeckReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeChangeDeckReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardIndex != null && Object.hasOwnProperty.call(m, "cardIndex"))
                w.uint32(8).int32(m.cardIndex);
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(18).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeChangeDeckReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeChangeDeckReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeChangeDeckReq} Msg_ChallengeChangeDeckReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeChangeDeckReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeChangeDeckReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardIndex = r.int32();
                    break;
                case 2:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeChangeDeckReq;
    })();

    proto.Msg_ChallengeChangeDeckRsp = (function() {

        /**
         * Properties of a Msg_ChallengeChangeDeckRsp.
         * @memberof proto
         * @interface IMsg_ChallengeChangeDeckRsp
         * @property {proto.Msg_ChallengeChangeDeckRsp.ErrorCode|null} [result] Msg_ChallengeChangeDeckRsp result
         * @property {number|null} [cardIndex] Msg_ChallengeChangeDeckRsp cardIndex
         * @property {string|null} [cardUuid] Msg_ChallengeChangeDeckRsp cardUuid
         */

        /**
         * Constructs a new Msg_ChallengeChangeDeckRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeChangeDeckRsp.
         * @implements IMsg_ChallengeChangeDeckRsp
         * @constructor
         * @param {proto.IMsg_ChallengeChangeDeckRsp=} [p] Properties to set
         */
        function Msg_ChallengeChangeDeckRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeChangeDeckRsp result.
         * @member {proto.Msg_ChallengeChangeDeckRsp.ErrorCode} result
         * @memberof proto.Msg_ChallengeChangeDeckRsp
         * @instance
         */
        Msg_ChallengeChangeDeckRsp.prototype.result = 0;

        /**
         * Msg_ChallengeChangeDeckRsp cardIndex.
         * @member {number} cardIndex
         * @memberof proto.Msg_ChallengeChangeDeckRsp
         * @instance
         */
        Msg_ChallengeChangeDeckRsp.prototype.cardIndex = 0;

        /**
         * Msg_ChallengeChangeDeckRsp cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_ChallengeChangeDeckRsp
         * @instance
         */
        Msg_ChallengeChangeDeckRsp.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_ChallengeChangeDeckRsp message. Does not implicitly {@link proto.Msg_ChallengeChangeDeckRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeChangeDeckRsp
         * @static
         * @param {proto.IMsg_ChallengeChangeDeckRsp} m Msg_ChallengeChangeDeckRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeChangeDeckRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cardIndex != null && Object.hasOwnProperty.call(m, "cardIndex"))
                w.uint32(16).int32(m.cardIndex);
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(26).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeChangeDeckRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeChangeDeckRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeChangeDeckRsp} Msg_ChallengeChangeDeckRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeChangeDeckRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeChangeDeckRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cardIndex = r.int32();
                    break;
                case 3:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChallengeChangeDeckRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ParamError=1 ParamError value
         * @property {number} NoChallenge=2 NoChallenge value
         * @property {number} ForbidQuality=3 ForbidQuality value
         * @property {number} SpecifiedCard=4 SpecifiedCard value
         */
        Msg_ChallengeChangeDeckRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ParamError"] = 1;
            values[valuesById[2] = "NoChallenge"] = 2;
            values[valuesById[3] = "ForbidQuality"] = 3;
            values[valuesById[4] = "SpecifiedCard"] = 4;
            return values;
        })();

        return Msg_ChallengeChangeDeckRsp;
    })();

    proto.Msg_ChallengeSetLordReq = (function() {

        /**
         * Properties of a Msg_ChallengeSetLordReq.
         * @memberof proto
         * @interface IMsg_ChallengeSetLordReq
         * @property {string|null} [cardUuid] Msg_ChallengeSetLordReq cardUuid
         */

        /**
         * Constructs a new Msg_ChallengeSetLordReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeSetLordReq.
         * @implements IMsg_ChallengeSetLordReq
         * @constructor
         * @param {proto.IMsg_ChallengeSetLordReq=} [p] Properties to set
         */
        function Msg_ChallengeSetLordReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeSetLordReq cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_ChallengeSetLordReq
         * @instance
         */
        Msg_ChallengeSetLordReq.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_ChallengeSetLordReq message. Does not implicitly {@link proto.Msg_ChallengeSetLordReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeSetLordReq
         * @static
         * @param {proto.IMsg_ChallengeSetLordReq} m Msg_ChallengeSetLordReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeSetLordReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(10).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeSetLordReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeSetLordReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeSetLordReq} Msg_ChallengeSetLordReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeSetLordReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeSetLordReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeSetLordReq;
    })();

    proto.Msg_ChallengeSetLordRsp = (function() {

        /**
         * Properties of a Msg_ChallengeSetLordRsp.
         * @memberof proto
         * @interface IMsg_ChallengeSetLordRsp
         * @property {proto.Msg_ChallengeSetLordRsp.ErrorCode|null} [result] Msg_ChallengeSetLordRsp result
         * @property {string|null} [cardUuid] Msg_ChallengeSetLordRsp cardUuid
         */

        /**
         * Constructs a new Msg_ChallengeSetLordRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeSetLordRsp.
         * @implements IMsg_ChallengeSetLordRsp
         * @constructor
         * @param {proto.IMsg_ChallengeSetLordRsp=} [p] Properties to set
         */
        function Msg_ChallengeSetLordRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeSetLordRsp result.
         * @member {proto.Msg_ChallengeSetLordRsp.ErrorCode} result
         * @memberof proto.Msg_ChallengeSetLordRsp
         * @instance
         */
        Msg_ChallengeSetLordRsp.prototype.result = 0;

        /**
         * Msg_ChallengeSetLordRsp cardUuid.
         * @member {string} cardUuid
         * @memberof proto.Msg_ChallengeSetLordRsp
         * @instance
         */
        Msg_ChallengeSetLordRsp.prototype.cardUuid = "";

        /**
         * Encodes the specified Msg_ChallengeSetLordRsp message. Does not implicitly {@link proto.Msg_ChallengeSetLordRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeSetLordRsp
         * @static
         * @param {proto.IMsg_ChallengeSetLordRsp} m Msg_ChallengeSetLordRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeSetLordRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cardUuid != null && Object.hasOwnProperty.call(m, "cardUuid"))
                w.uint32(18).string(m.cardUuid);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeSetLordRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeSetLordRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeSetLordRsp} Msg_ChallengeSetLordRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeSetLordRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeSetLordRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cardUuid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChallengeSetLordRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ParamError=1 ParamError value
         * @property {number} NoChallenge=2 NoChallenge value
         * @property {number} ForbidQuality=3 ForbidQuality value
         * @property {number} SpecifiedCard=4 SpecifiedCard value
         */
        Msg_ChallengeSetLordRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ParamError"] = 1;
            values[valuesById[2] = "NoChallenge"] = 2;
            values[valuesById[3] = "ForbidQuality"] = 3;
            values[valuesById[4] = "SpecifiedCard"] = 4;
            return values;
        })();

        return Msg_ChallengeSetLordRsp;
    })();

    proto.Msg_ChallengeSetTalentReq = (function() {

        /**
         * Properties of a Msg_ChallengeSetTalentReq.
         * @memberof proto
         * @interface IMsg_ChallengeSetTalentReq
         * @property {proto.ITalentData|null} [talent] Msg_ChallengeSetTalentReq talent
         */

        /**
         * Constructs a new Msg_ChallengeSetTalentReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeSetTalentReq.
         * @implements IMsg_ChallengeSetTalentReq
         * @constructor
         * @param {proto.IMsg_ChallengeSetTalentReq=} [p] Properties to set
         */
        function Msg_ChallengeSetTalentReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeSetTalentReq talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.Msg_ChallengeSetTalentReq
         * @instance
         */
        Msg_ChallengeSetTalentReq.prototype.talent = null;

        /**
         * Encodes the specified Msg_ChallengeSetTalentReq message. Does not implicitly {@link proto.Msg_ChallengeSetTalentReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeSetTalentReq
         * @static
         * @param {proto.IMsg_ChallengeSetTalentReq} m Msg_ChallengeSetTalentReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeSetTalentReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_ChallengeSetTalentReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeSetTalentReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeSetTalentReq} Msg_ChallengeSetTalentReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeSetTalentReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeSetTalentReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeSetTalentReq;
    })();

    proto.Msg_ChallengeSetTalentRsp = (function() {

        /**
         * Properties of a Msg_ChallengeSetTalentRsp.
         * @memberof proto
         * @interface IMsg_ChallengeSetTalentRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ChallengeSetTalentRsp result
         * @property {proto.ITalentData|null} [talent] Msg_ChallengeSetTalentRsp talent
         */

        /**
         * Constructs a new Msg_ChallengeSetTalentRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeSetTalentRsp.
         * @implements IMsg_ChallengeSetTalentRsp
         * @constructor
         * @param {proto.IMsg_ChallengeSetTalentRsp=} [p] Properties to set
         */
        function Msg_ChallengeSetTalentRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeSetTalentRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ChallengeSetTalentRsp
         * @instance
         */
        Msg_ChallengeSetTalentRsp.prototype.result = 0;

        /**
         * Msg_ChallengeSetTalentRsp talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.Msg_ChallengeSetTalentRsp
         * @instance
         */
        Msg_ChallengeSetTalentRsp.prototype.talent = null;

        /**
         * Encodes the specified Msg_ChallengeSetTalentRsp message. Does not implicitly {@link proto.Msg_ChallengeSetTalentRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeSetTalentRsp
         * @static
         * @param {proto.IMsg_ChallengeSetTalentRsp} m Msg_ChallengeSetTalentRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeSetTalentRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_ChallengeSetTalentRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeSetTalentRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeSetTalentRsp} Msg_ChallengeSetTalentRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeSetTalentRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeSetTalentRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeSetTalentRsp;
    })();

    proto.Msg_ChallengeCountResetReq = (function() {

        /**
         * Properties of a Msg_ChallengeCountResetReq.
         * @memberof proto
         * @interface IMsg_ChallengeCountResetReq
         * @property {proto.Msg_ChallengeCountResetReq.ResetType|null} [resetType] Msg_ChallengeCountResetReq resetType
         */

        /**
         * Constructs a new Msg_ChallengeCountResetReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeCountResetReq.
         * @implements IMsg_ChallengeCountResetReq
         * @constructor
         * @param {proto.IMsg_ChallengeCountResetReq=} [p] Properties to set
         */
        function Msg_ChallengeCountResetReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeCountResetReq resetType.
         * @member {proto.Msg_ChallengeCountResetReq.ResetType} resetType
         * @memberof proto.Msg_ChallengeCountResetReq
         * @instance
         */
        Msg_ChallengeCountResetReq.prototype.resetType = 0;

        /**
         * Encodes the specified Msg_ChallengeCountResetReq message. Does not implicitly {@link proto.Msg_ChallengeCountResetReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeCountResetReq
         * @static
         * @param {proto.IMsg_ChallengeCountResetReq} m Msg_ChallengeCountResetReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeCountResetReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.resetType != null && Object.hasOwnProperty.call(m, "resetType"))
                w.uint32(8).int32(m.resetType);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeCountResetReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeCountResetReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeCountResetReq} Msg_ChallengeCountResetReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeCountResetReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeCountResetReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.resetType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ResetType enum.
         * @name proto.Msg_ChallengeCountResetReq.ResetType
         * @enum {number}
         * @property {number} None=0 None value
         * @property {number} CostGold=1 CostGold value
         * @property {number} EvilFree=2 EvilFree value
         * @property {number} AVD=3 AVD value
         */
        Msg_ChallengeCountResetReq.ResetType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "None"] = 0;
            values[valuesById[1] = "CostGold"] = 1;
            values[valuesById[2] = "EvilFree"] = 2;
            values[valuesById[3] = "AVD"] = 3;
            return values;
        })();

        return Msg_ChallengeCountResetReq;
    })();

    proto.Msg_ChallengeCountResetRsp = (function() {

        /**
         * Properties of a Msg_ChallengeCountResetRsp.
         * @memberof proto
         * @interface IMsg_ChallengeCountResetRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ChallengeCountResetRsp result
         */

        /**
         * Constructs a new Msg_ChallengeCountResetRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeCountResetRsp.
         * @implements IMsg_ChallengeCountResetRsp
         * @constructor
         * @param {proto.IMsg_ChallengeCountResetRsp=} [p] Properties to set
         */
        function Msg_ChallengeCountResetRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeCountResetRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ChallengeCountResetRsp
         * @instance
         */
        Msg_ChallengeCountResetRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_ChallengeCountResetRsp message. Does not implicitly {@link proto.Msg_ChallengeCountResetRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeCountResetRsp
         * @static
         * @param {proto.IMsg_ChallengeCountResetRsp} m Msg_ChallengeCountResetRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeCountResetRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeCountResetRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeCountResetRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeCountResetRsp} Msg_ChallengeCountResetRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeCountResetRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeCountResetRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeCountResetRsp;
    })();

    proto.Msg_ChallengeDoRewardReq = (function() {

        /**
         * Properties of a Msg_ChallengeDoRewardReq.
         * @memberof proto
         * @interface IMsg_ChallengeDoRewardReq
         * @property {number|null} [awardPosition] Msg_ChallengeDoRewardReq awardPosition
         */

        /**
         * Constructs a new Msg_ChallengeDoRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeDoRewardReq.
         * @implements IMsg_ChallengeDoRewardReq
         * @constructor
         * @param {proto.IMsg_ChallengeDoRewardReq=} [p] Properties to set
         */
        function Msg_ChallengeDoRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeDoRewardReq awardPosition.
         * @member {number} awardPosition
         * @memberof proto.Msg_ChallengeDoRewardReq
         * @instance
         */
        Msg_ChallengeDoRewardReq.prototype.awardPosition = 0;

        /**
         * Encodes the specified Msg_ChallengeDoRewardReq message. Does not implicitly {@link proto.Msg_ChallengeDoRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeDoRewardReq
         * @static
         * @param {proto.IMsg_ChallengeDoRewardReq} m Msg_ChallengeDoRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeDoRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.awardPosition != null && Object.hasOwnProperty.call(m, "awardPosition"))
                w.uint32(8).int32(m.awardPosition);
            return w;
        };

        /**
         * Decodes a Msg_ChallengeDoRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeDoRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeDoRewardReq} Msg_ChallengeDoRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeDoRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeDoRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.awardPosition = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeDoRewardReq;
    })();

    proto.Msg_ChallengeDoRewardRsp = (function() {

        /**
         * Properties of a Msg_ChallengeDoRewardRsp.
         * @memberof proto
         * @interface IMsg_ChallengeDoRewardRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ChallengeDoRewardRsp result
         * @property {number|null} [awardPosition] Msg_ChallengeDoRewardRsp awardPosition
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ChallengeDoRewardRsp reward
         */

        /**
         * Constructs a new Msg_ChallengeDoRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChallengeDoRewardRsp.
         * @implements IMsg_ChallengeDoRewardRsp
         * @constructor
         * @param {proto.IMsg_ChallengeDoRewardRsp=} [p] Properties to set
         */
        function Msg_ChallengeDoRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChallengeDoRewardRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ChallengeDoRewardRsp
         * @instance
         */
        Msg_ChallengeDoRewardRsp.prototype.result = 0;

        /**
         * Msg_ChallengeDoRewardRsp awardPosition.
         * @member {number} awardPosition
         * @memberof proto.Msg_ChallengeDoRewardRsp
         * @instance
         */
        Msg_ChallengeDoRewardRsp.prototype.awardPosition = 0;

        /**
         * Msg_ChallengeDoRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ChallengeDoRewardRsp
         * @instance
         */
        Msg_ChallengeDoRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Encodes the specified Msg_ChallengeDoRewardRsp message. Does not implicitly {@link proto.Msg_ChallengeDoRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChallengeDoRewardRsp
         * @static
         * @param {proto.IMsg_ChallengeDoRewardRsp} m Msg_ChallengeDoRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChallengeDoRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.awardPosition != null && Object.hasOwnProperty.call(m, "awardPosition"))
                w.uint32(16).int32(m.awardPosition);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ChallengeDoRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChallengeDoRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChallengeDoRewardRsp} Msg_ChallengeDoRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChallengeDoRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChallengeDoRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.awardPosition = r.int32();
                    break;
                case 3:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChallengeDoRewardRsp;
    })();

    proto.RankingBaseRoleData = (function() {

        /**
         * Properties of a RankingBaseRoleData.
         * @memberof proto
         * @interface IRankingBaseRoleData
         * @property {string|null} [roleUUID] RankingBaseRoleData roleUUID
         * @property {string|null} [roleName] RankingBaseRoleData roleName
         * @property {number|null} [headID] RankingBaseRoleData headID
         * @property {number|null} [allianceIconIdx] RankingBaseRoleData allianceIconIdx
         * @property {string|null} [allianceName] RankingBaseRoleData allianceName
         * @property {proto.IPlayerPvpCardInfo|null} [pvpCardInfo] RankingBaseRoleData pvpCardInfo
         * @property {string|null} [headUrl] RankingBaseRoleData headUrl
         */

        /**
         * Constructs a new RankingBaseRoleData.
         * @memberof proto
         * @classdesc Represents a RankingBaseRoleData.
         * @implements IRankingBaseRoleData
         * @constructor
         * @param {proto.IRankingBaseRoleData=} [p] Properties to set
         */
        function RankingBaseRoleData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RankingBaseRoleData roleUUID.
         * @member {string} roleUUID
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.roleUUID = "";

        /**
         * RankingBaseRoleData roleName.
         * @member {string} roleName
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.roleName = "";

        /**
         * RankingBaseRoleData headID.
         * @member {number} headID
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.headID = 0;

        /**
         * RankingBaseRoleData allianceIconIdx.
         * @member {number} allianceIconIdx
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.allianceIconIdx = 0;

        /**
         * RankingBaseRoleData allianceName.
         * @member {string} allianceName
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.allianceName = "";

        /**
         * RankingBaseRoleData pvpCardInfo.
         * @member {proto.IPlayerPvpCardInfo|null|undefined} pvpCardInfo
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.pvpCardInfo = null;

        /**
         * RankingBaseRoleData headUrl.
         * @member {string} headUrl
         * @memberof proto.RankingBaseRoleData
         * @instance
         */
        RankingBaseRoleData.prototype.headUrl = "";

        /**
         * Encodes the specified RankingBaseRoleData message. Does not implicitly {@link proto.RankingBaseRoleData.verify|verify} messages.
         * @function encode
         * @memberof proto.RankingBaseRoleData
         * @static
         * @param {proto.IRankingBaseRoleData} m RankingBaseRoleData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingBaseRoleData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleUUID != null && Object.hasOwnProperty.call(m, "roleUUID"))
                w.uint32(10).string(m.roleUUID);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(18).string(m.roleName);
            if (m.headID != null && Object.hasOwnProperty.call(m, "headID"))
                w.uint32(24).int32(m.headID);
            if (m.allianceIconIdx != null && Object.hasOwnProperty.call(m, "allianceIconIdx"))
                w.uint32(32).int32(m.allianceIconIdx);
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(42).string(m.allianceName);
            if (m.pvpCardInfo != null && Object.hasOwnProperty.call(m, "pvpCardInfo"))
                $root.proto.PlayerPvpCardInfo.encode(m.pvpCardInfo, w.uint32(50).fork()).ldelim();
            if (m.headUrl != null && Object.hasOwnProperty.call(m, "headUrl"))
                w.uint32(58).string(m.headUrl);
            return w;
        };

        /**
         * Decodes a RankingBaseRoleData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RankingBaseRoleData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RankingBaseRoleData} RankingBaseRoleData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingBaseRoleData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RankingBaseRoleData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleUUID = r.string();
                    break;
                case 2:
                    m.roleName = r.string();
                    break;
                case 3:
                    m.headID = r.int32();
                    break;
                case 4:
                    m.allianceIconIdx = r.int32();
                    break;
                case 5:
                    m.allianceName = r.string();
                    break;
                case 6:
                    m.pvpCardInfo = $root.proto.PlayerPvpCardInfo.decode(r, r.uint32());
                    break;
                case 7:
                    m.headUrl = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RankingBaseRoleData;
    })();

    proto.RankingOfRoleData = (function() {

        /**
         * Properties of a RankingOfRoleData.
         * @memberof proto
         * @interface IRankingOfRoleData
         * @property {proto.IRankingBaseRoleData|null} [roleData] RankingOfRoleData roleData
         * @property {number|null} [seasonScore] RankingOfRoleData seasonScore
         * @property {number|null} [timestamp] RankingOfRoleData timestamp
         */

        /**
         * Constructs a new RankingOfRoleData.
         * @memberof proto
         * @classdesc Represents a RankingOfRoleData.
         * @implements IRankingOfRoleData
         * @constructor
         * @param {proto.IRankingOfRoleData=} [p] Properties to set
         */
        function RankingOfRoleData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RankingOfRoleData roleData.
         * @member {proto.IRankingBaseRoleData|null|undefined} roleData
         * @memberof proto.RankingOfRoleData
         * @instance
         */
        RankingOfRoleData.prototype.roleData = null;

        /**
         * RankingOfRoleData seasonScore.
         * @member {number} seasonScore
         * @memberof proto.RankingOfRoleData
         * @instance
         */
        RankingOfRoleData.prototype.seasonScore = 0;

        /**
         * RankingOfRoleData timestamp.
         * @member {number} timestamp
         * @memberof proto.RankingOfRoleData
         * @instance
         */
        RankingOfRoleData.prototype.timestamp = 0;

        /**
         * Encodes the specified RankingOfRoleData message. Does not implicitly {@link proto.RankingOfRoleData.verify|verify} messages.
         * @function encode
         * @memberof proto.RankingOfRoleData
         * @static
         * @param {proto.IRankingOfRoleData} m RankingOfRoleData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingOfRoleData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleData != null && Object.hasOwnProperty.call(m, "roleData"))
                $root.proto.RankingBaseRoleData.encode(m.roleData, w.uint32(10).fork()).ldelim();
            if (m.seasonScore != null && Object.hasOwnProperty.call(m, "seasonScore"))
                w.uint32(16).int32(m.seasonScore);
            if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                w.uint32(24).int32(m.timestamp);
            return w;
        };

        /**
         * Decodes a RankingOfRoleData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RankingOfRoleData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RankingOfRoleData} RankingOfRoleData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingOfRoleData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RankingOfRoleData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleData = $root.proto.RankingBaseRoleData.decode(r, r.uint32());
                    break;
                case 2:
                    m.seasonScore = r.int32();
                    break;
                case 3:
                    m.timestamp = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RankingOfRoleData;
    })();

    proto.Msg_GetPvpRankingListReq = (function() {

        /**
         * Properties of a Msg_GetPvpRankingListReq.
         * @memberof proto
         * @interface IMsg_GetPvpRankingListReq
         */

        /**
         * Constructs a new Msg_GetPvpRankingListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetPvpRankingListReq.
         * @implements IMsg_GetPvpRankingListReq
         * @constructor
         * @param {proto.IMsg_GetPvpRankingListReq=} [p] Properties to set
         */
        function Msg_GetPvpRankingListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetPvpRankingListReq message. Does not implicitly {@link proto.Msg_GetPvpRankingListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPvpRankingListReq
         * @static
         * @param {proto.IMsg_GetPvpRankingListReq} m Msg_GetPvpRankingListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPvpRankingListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetPvpRankingListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPvpRankingListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPvpRankingListReq} Msg_GetPvpRankingListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPvpRankingListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPvpRankingListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPvpRankingListReq;
    })();

    proto.Msg_GetPvpRankingListRsp = (function() {

        /**
         * Properties of a Msg_GetPvpRankingListRsp.
         * @memberof proto
         * @interface IMsg_GetPvpRankingListRsp
         * @property {Array.<proto.IRankingOfRoleData>|null} [roleRankingData] Msg_GetPvpRankingListRsp roleRankingData
         * @property {Array.<proto.IRankingOfRoleData>|null} [preTop3RankingList] Msg_GetPvpRankingListRsp preTop3RankingList
         * @property {number|null} [selfRankingLv] Msg_GetPvpRankingListRsp selfRankingLv
         */

        /**
         * Constructs a new Msg_GetPvpRankingListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetPvpRankingListRsp.
         * @implements IMsg_GetPvpRankingListRsp
         * @constructor
         * @param {proto.IMsg_GetPvpRankingListRsp=} [p] Properties to set
         */
        function Msg_GetPvpRankingListRsp(p) {
            this.roleRankingData = [];
            this.preTop3RankingList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetPvpRankingListRsp roleRankingData.
         * @member {Array.<proto.IRankingOfRoleData>} roleRankingData
         * @memberof proto.Msg_GetPvpRankingListRsp
         * @instance
         */
        Msg_GetPvpRankingListRsp.prototype.roleRankingData = $util.emptyArray;

        /**
         * Msg_GetPvpRankingListRsp preTop3RankingList.
         * @member {Array.<proto.IRankingOfRoleData>} preTop3RankingList
         * @memberof proto.Msg_GetPvpRankingListRsp
         * @instance
         */
        Msg_GetPvpRankingListRsp.prototype.preTop3RankingList = $util.emptyArray;

        /**
         * Msg_GetPvpRankingListRsp selfRankingLv.
         * @member {number} selfRankingLv
         * @memberof proto.Msg_GetPvpRankingListRsp
         * @instance
         */
        Msg_GetPvpRankingListRsp.prototype.selfRankingLv = 0;

        /**
         * Encodes the specified Msg_GetPvpRankingListRsp message. Does not implicitly {@link proto.Msg_GetPvpRankingListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPvpRankingListRsp
         * @static
         * @param {proto.IMsg_GetPvpRankingListRsp} m Msg_GetPvpRankingListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPvpRankingListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleRankingData != null && m.roleRankingData.length) {
                for (var i = 0; i < m.roleRankingData.length; ++i)
                    $root.proto.RankingOfRoleData.encode(m.roleRankingData[i], w.uint32(10).fork()).ldelim();
            }
            if (m.preTop3RankingList != null && m.preTop3RankingList.length) {
                for (var i = 0; i < m.preTop3RankingList.length; ++i)
                    $root.proto.RankingOfRoleData.encode(m.preTop3RankingList[i], w.uint32(18).fork()).ldelim();
            }
            if (m.selfRankingLv != null && Object.hasOwnProperty.call(m, "selfRankingLv"))
                w.uint32(24).int32(m.selfRankingLv);
            return w;
        };

        /**
         * Decodes a Msg_GetPvpRankingListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPvpRankingListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPvpRankingListRsp} Msg_GetPvpRankingListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPvpRankingListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPvpRankingListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.roleRankingData && m.roleRankingData.length))
                        m.roleRankingData = [];
                    m.roleRankingData.push($root.proto.RankingOfRoleData.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.preTop3RankingList && m.preTop3RankingList.length))
                        m.preTop3RankingList = [];
                    m.preTop3RankingList.push($root.proto.RankingOfRoleData.decode(r, r.uint32()));
                    break;
                case 3:
                    m.selfRankingLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPvpRankingListRsp;
    })();

    proto.CooperationRankingBaseData = (function() {

        /**
         * Properties of a CooperationRankingBaseData.
         * @memberof proto
         * @interface ICooperationRankingBaseData
         * @property {proto.IRankingBaseRoleData|null} [roleData] CooperationRankingBaseData roleData
         * @property {Array.<proto.IFightCardData>|null} [cardLists] CooperationRankingBaseData cardLists
         */

        /**
         * Constructs a new CooperationRankingBaseData.
         * @memberof proto
         * @classdesc Represents a CooperationRankingBaseData.
         * @implements ICooperationRankingBaseData
         * @constructor
         * @param {proto.ICooperationRankingBaseData=} [p] Properties to set
         */
        function CooperationRankingBaseData(p) {
            this.cardLists = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CooperationRankingBaseData roleData.
         * @member {proto.IRankingBaseRoleData|null|undefined} roleData
         * @memberof proto.CooperationRankingBaseData
         * @instance
         */
        CooperationRankingBaseData.prototype.roleData = null;

        /**
         * CooperationRankingBaseData cardLists.
         * @member {Array.<proto.IFightCardData>} cardLists
         * @memberof proto.CooperationRankingBaseData
         * @instance
         */
        CooperationRankingBaseData.prototype.cardLists = $util.emptyArray;

        /**
         * Encodes the specified CooperationRankingBaseData message. Does not implicitly {@link proto.CooperationRankingBaseData.verify|verify} messages.
         * @function encode
         * @memberof proto.CooperationRankingBaseData
         * @static
         * @param {proto.ICooperationRankingBaseData} m CooperationRankingBaseData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CooperationRankingBaseData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleData != null && Object.hasOwnProperty.call(m, "roleData"))
                $root.proto.RankingBaseRoleData.encode(m.roleData, w.uint32(10).fork()).ldelim();
            if (m.cardLists != null && m.cardLists.length) {
                for (var i = 0; i < m.cardLists.length; ++i)
                    $root.proto.FightCardData.encode(m.cardLists[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a CooperationRankingBaseData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CooperationRankingBaseData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CooperationRankingBaseData} CooperationRankingBaseData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CooperationRankingBaseData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CooperationRankingBaseData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleData = $root.proto.RankingBaseRoleData.decode(r, r.uint32());
                    break;
                case 2:
                    if (!(m.cardLists && m.cardLists.length))
                        m.cardLists = [];
                    m.cardLists.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CooperationRankingBaseData;
    })();

    proto.CooperationBothRankingData = (function() {

        /**
         * Properties of a CooperationBothRankingData.
         * @memberof proto
         * @interface ICooperationBothRankingData
         * @property {proto.ICooperationRankingBaseData|null} [leftPlayerData] CooperationBothRankingData leftPlayerData
         * @property {proto.ICooperationRankingBaseData|null} [rightPlayerData] CooperationBothRankingData rightPlayerData
         * @property {number|null} [maxRoundCount] CooperationBothRankingData maxRoundCount
         * @property {number|null} [timestamp] CooperationBothRankingData timestamp
         */

        /**
         * Constructs a new CooperationBothRankingData.
         * @memberof proto
         * @classdesc Represents a CooperationBothRankingData.
         * @implements ICooperationBothRankingData
         * @constructor
         * @param {proto.ICooperationBothRankingData=} [p] Properties to set
         */
        function CooperationBothRankingData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * CooperationBothRankingData leftPlayerData.
         * @member {proto.ICooperationRankingBaseData|null|undefined} leftPlayerData
         * @memberof proto.CooperationBothRankingData
         * @instance
         */
        CooperationBothRankingData.prototype.leftPlayerData = null;

        /**
         * CooperationBothRankingData rightPlayerData.
         * @member {proto.ICooperationRankingBaseData|null|undefined} rightPlayerData
         * @memberof proto.CooperationBothRankingData
         * @instance
         */
        CooperationBothRankingData.prototype.rightPlayerData = null;

        /**
         * CooperationBothRankingData maxRoundCount.
         * @member {number} maxRoundCount
         * @memberof proto.CooperationBothRankingData
         * @instance
         */
        CooperationBothRankingData.prototype.maxRoundCount = 0;

        /**
         * CooperationBothRankingData timestamp.
         * @member {number} timestamp
         * @memberof proto.CooperationBothRankingData
         * @instance
         */
        CooperationBothRankingData.prototype.timestamp = 0;

        /**
         * Encodes the specified CooperationBothRankingData message. Does not implicitly {@link proto.CooperationBothRankingData.verify|verify} messages.
         * @function encode
         * @memberof proto.CooperationBothRankingData
         * @static
         * @param {proto.ICooperationBothRankingData} m CooperationBothRankingData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CooperationBothRankingData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.leftPlayerData != null && Object.hasOwnProperty.call(m, "leftPlayerData"))
                $root.proto.CooperationRankingBaseData.encode(m.leftPlayerData, w.uint32(10).fork()).ldelim();
            if (m.rightPlayerData != null && Object.hasOwnProperty.call(m, "rightPlayerData"))
                $root.proto.CooperationRankingBaseData.encode(m.rightPlayerData, w.uint32(18).fork()).ldelim();
            if (m.maxRoundCount != null && Object.hasOwnProperty.call(m, "maxRoundCount"))
                w.uint32(24).int32(m.maxRoundCount);
            if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                w.uint32(32).int32(m.timestamp);
            return w;
        };

        /**
         * Decodes a CooperationBothRankingData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.CooperationBothRankingData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.CooperationBothRankingData} CooperationBothRankingData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CooperationBothRankingData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.CooperationBothRankingData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.leftPlayerData = $root.proto.CooperationRankingBaseData.decode(r, r.uint32());
                    break;
                case 2:
                    m.rightPlayerData = $root.proto.CooperationRankingBaseData.decode(r, r.uint32());
                    break;
                case 3:
                    m.maxRoundCount = r.int32();
                    break;
                case 4:
                    m.timestamp = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CooperationBothRankingData;
    })();

    proto.Msg_GetCooperationRankingListReq = (function() {

        /**
         * Properties of a Msg_GetCooperationRankingListReq.
         * @memberof proto
         * @interface IMsg_GetCooperationRankingListReq
         */

        /**
         * Constructs a new Msg_GetCooperationRankingListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetCooperationRankingListReq.
         * @implements IMsg_GetCooperationRankingListReq
         * @constructor
         * @param {proto.IMsg_GetCooperationRankingListReq=} [p] Properties to set
         */
        function Msg_GetCooperationRankingListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetCooperationRankingListReq message. Does not implicitly {@link proto.Msg_GetCooperationRankingListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetCooperationRankingListReq
         * @static
         * @param {proto.IMsg_GetCooperationRankingListReq} m Msg_GetCooperationRankingListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetCooperationRankingListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetCooperationRankingListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetCooperationRankingListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetCooperationRankingListReq} Msg_GetCooperationRankingListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetCooperationRankingListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetCooperationRankingListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetCooperationRankingListReq;
    })();

    proto.Msg_GetCooperationRankingListRsp = (function() {

        /**
         * Properties of a Msg_GetCooperationRankingListRsp.
         * @memberof proto
         * @interface IMsg_GetCooperationRankingListRsp
         * @property {Array.<proto.ICooperationBothRankingData>|null} [rankingList] Msg_GetCooperationRankingListRsp rankingList
         * @property {proto.ICooperationBothRankingData|null} [selfData] Msg_GetCooperationRankingListRsp selfData
         * @property {number|null} [selfRankLv] Msg_GetCooperationRankingListRsp selfRankLv
         */

        /**
         * Constructs a new Msg_GetCooperationRankingListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetCooperationRankingListRsp.
         * @implements IMsg_GetCooperationRankingListRsp
         * @constructor
         * @param {proto.IMsg_GetCooperationRankingListRsp=} [p] Properties to set
         */
        function Msg_GetCooperationRankingListRsp(p) {
            this.rankingList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetCooperationRankingListRsp rankingList.
         * @member {Array.<proto.ICooperationBothRankingData>} rankingList
         * @memberof proto.Msg_GetCooperationRankingListRsp
         * @instance
         */
        Msg_GetCooperationRankingListRsp.prototype.rankingList = $util.emptyArray;

        /**
         * Msg_GetCooperationRankingListRsp selfData.
         * @member {proto.ICooperationBothRankingData|null|undefined} selfData
         * @memberof proto.Msg_GetCooperationRankingListRsp
         * @instance
         */
        Msg_GetCooperationRankingListRsp.prototype.selfData = null;

        /**
         * Msg_GetCooperationRankingListRsp selfRankLv.
         * @member {number} selfRankLv
         * @memberof proto.Msg_GetCooperationRankingListRsp
         * @instance
         */
        Msg_GetCooperationRankingListRsp.prototype.selfRankLv = 0;

        /**
         * Encodes the specified Msg_GetCooperationRankingListRsp message. Does not implicitly {@link proto.Msg_GetCooperationRankingListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetCooperationRankingListRsp
         * @static
         * @param {proto.IMsg_GetCooperationRankingListRsp} m Msg_GetCooperationRankingListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetCooperationRankingListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankingList != null && m.rankingList.length) {
                for (var i = 0; i < m.rankingList.length; ++i)
                    $root.proto.CooperationBothRankingData.encode(m.rankingList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.selfData != null && Object.hasOwnProperty.call(m, "selfData"))
                $root.proto.CooperationBothRankingData.encode(m.selfData, w.uint32(18).fork()).ldelim();
            if (m.selfRankLv != null && Object.hasOwnProperty.call(m, "selfRankLv"))
                w.uint32(24).int32(m.selfRankLv);
            return w;
        };

        /**
         * Decodes a Msg_GetCooperationRankingListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetCooperationRankingListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetCooperationRankingListRsp} Msg_GetCooperationRankingListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetCooperationRankingListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetCooperationRankingListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rankingList && m.rankingList.length))
                        m.rankingList = [];
                    m.rankingList.push($root.proto.CooperationBothRankingData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.selfData = $root.proto.CooperationBothRankingData.decode(r, r.uint32());
                    break;
                case 3:
                    m.selfRankLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetCooperationRankingListRsp;
    })();

    proto.RankingOfAllianceData = (function() {

        /**
         * Properties of a RankingOfAllianceData.
         * @memberof proto
         * @interface IRankingOfAllianceData
         * @property {proto.IAllianceSimpleInfo|null} [rankData] RankingOfAllianceData rankData
         */

        /**
         * Constructs a new RankingOfAllianceData.
         * @memberof proto
         * @classdesc Represents a RankingOfAllianceData.
         * @implements IRankingOfAllianceData
         * @constructor
         * @param {proto.IRankingOfAllianceData=} [p] Properties to set
         */
        function RankingOfAllianceData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RankingOfAllianceData rankData.
         * @member {proto.IAllianceSimpleInfo|null|undefined} rankData
         * @memberof proto.RankingOfAllianceData
         * @instance
         */
        RankingOfAllianceData.prototype.rankData = null;

        /**
         * Encodes the specified RankingOfAllianceData message. Does not implicitly {@link proto.RankingOfAllianceData.verify|verify} messages.
         * @function encode
         * @memberof proto.RankingOfAllianceData
         * @static
         * @param {proto.IRankingOfAllianceData} m RankingOfAllianceData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RankingOfAllianceData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankData != null && Object.hasOwnProperty.call(m, "rankData"))
                $root.proto.AllianceSimpleInfo.encode(m.rankData, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a RankingOfAllianceData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RankingOfAllianceData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RankingOfAllianceData} RankingOfAllianceData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RankingOfAllianceData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RankingOfAllianceData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rankData = $root.proto.AllianceSimpleInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RankingOfAllianceData;
    })();

    proto.Msg_GetAllianceRankingListReq = (function() {

        /**
         * Properties of a Msg_GetAllianceRankingListReq.
         * @memberof proto
         * @interface IMsg_GetAllianceRankingListReq
         */

        /**
         * Constructs a new Msg_GetAllianceRankingListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetAllianceRankingListReq.
         * @implements IMsg_GetAllianceRankingListReq
         * @constructor
         * @param {proto.IMsg_GetAllianceRankingListReq=} [p] Properties to set
         */
        function Msg_GetAllianceRankingListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetAllianceRankingListReq message. Does not implicitly {@link proto.Msg_GetAllianceRankingListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetAllianceRankingListReq
         * @static
         * @param {proto.IMsg_GetAllianceRankingListReq} m Msg_GetAllianceRankingListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetAllianceRankingListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetAllianceRankingListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetAllianceRankingListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetAllianceRankingListReq} Msg_GetAllianceRankingListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetAllianceRankingListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetAllianceRankingListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetAllianceRankingListReq;
    })();

    proto.Msg_GetAllianceRankingListRsp = (function() {

        /**
         * Properties of a Msg_GetAllianceRankingListRsp.
         * @memberof proto
         * @interface IMsg_GetAllianceRankingListRsp
         * @property {Array.<proto.IRankingOfAllianceData>|null} [rankingList] Msg_GetAllianceRankingListRsp rankingList
         */

        /**
         * Constructs a new Msg_GetAllianceRankingListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetAllianceRankingListRsp.
         * @implements IMsg_GetAllianceRankingListRsp
         * @constructor
         * @param {proto.IMsg_GetAllianceRankingListRsp=} [p] Properties to set
         */
        function Msg_GetAllianceRankingListRsp(p) {
            this.rankingList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetAllianceRankingListRsp rankingList.
         * @member {Array.<proto.IRankingOfAllianceData>} rankingList
         * @memberof proto.Msg_GetAllianceRankingListRsp
         * @instance
         */
        Msg_GetAllianceRankingListRsp.prototype.rankingList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetAllianceRankingListRsp message. Does not implicitly {@link proto.Msg_GetAllianceRankingListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetAllianceRankingListRsp
         * @static
         * @param {proto.IMsg_GetAllianceRankingListRsp} m Msg_GetAllianceRankingListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetAllianceRankingListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankingList != null && m.rankingList.length) {
                for (var i = 0; i < m.rankingList.length; ++i)
                    $root.proto.RankingOfAllianceData.encode(m.rankingList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetAllianceRankingListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetAllianceRankingListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetAllianceRankingListRsp} Msg_GetAllianceRankingListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetAllianceRankingListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetAllianceRankingListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rankingList && m.rankingList.length))
                        m.rankingList = [];
                    m.rankingList.push($root.proto.RankingOfAllianceData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetAllianceRankingListRsp;
    })();

    proto.Msg_ExchangeCodeReq = (function() {

        /**
         * Properties of a Msg_ExchangeCodeReq.
         * @memberof proto
         * @interface IMsg_ExchangeCodeReq
         * @property {string|null} [code] Msg_ExchangeCodeReq code
         */

        /**
         * Constructs a new Msg_ExchangeCodeReq.
         * @memberof proto
         * @classdesc Represents a Msg_ExchangeCodeReq.
         * @implements IMsg_ExchangeCodeReq
         * @constructor
         * @param {proto.IMsg_ExchangeCodeReq=} [p] Properties to set
         */
        function Msg_ExchangeCodeReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ExchangeCodeReq code.
         * @member {string} code
         * @memberof proto.Msg_ExchangeCodeReq
         * @instance
         */
        Msg_ExchangeCodeReq.prototype.code = "";

        /**
         * Encodes the specified Msg_ExchangeCodeReq message. Does not implicitly {@link proto.Msg_ExchangeCodeReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ExchangeCodeReq
         * @static
         * @param {proto.IMsg_ExchangeCodeReq} m Msg_ExchangeCodeReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ExchangeCodeReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.code != null && Object.hasOwnProperty.call(m, "code"))
                w.uint32(10).string(m.code);
            return w;
        };

        /**
         * Decodes a Msg_ExchangeCodeReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ExchangeCodeReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ExchangeCodeReq} Msg_ExchangeCodeReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ExchangeCodeReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ExchangeCodeReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.code = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ExchangeCodeReq;
    })();

    proto.Msg_ExchangeCodeRsp = (function() {

        /**
         * Properties of a Msg_ExchangeCodeRsp.
         * @memberof proto
         * @interface IMsg_ExchangeCodeRsp
         * @property {proto.Msg_ExchangeCodeRsp.ErrorCode|null} [result] Msg_ExchangeCodeRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_ExchangeCodeRsp rewards
         */

        /**
         * Constructs a new Msg_ExchangeCodeRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ExchangeCodeRsp.
         * @implements IMsg_ExchangeCodeRsp
         * @constructor
         * @param {proto.IMsg_ExchangeCodeRsp=} [p] Properties to set
         */
        function Msg_ExchangeCodeRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ExchangeCodeRsp result.
         * @member {proto.Msg_ExchangeCodeRsp.ErrorCode} result
         * @memberof proto.Msg_ExchangeCodeRsp
         * @instance
         */
        Msg_ExchangeCodeRsp.prototype.result = 0;

        /**
         * Msg_ExchangeCodeRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_ExchangeCodeRsp
         * @instance
         */
        Msg_ExchangeCodeRsp.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_ExchangeCodeRsp message. Does not implicitly {@link proto.Msg_ExchangeCodeRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ExchangeCodeRsp
         * @static
         * @param {proto.IMsg_ExchangeCodeRsp} m Msg_ExchangeCodeRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ExchangeCodeRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ExchangeCodeRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ExchangeCodeRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ExchangeCodeRsp} Msg_ExchangeCodeRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ExchangeCodeRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ExchangeCodeRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 3:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ExchangeCodeRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Invalid=1 Invalid value
         * @property {number} AlreadyExchange=2 AlreadyExchange value
         */
        Msg_ExchangeCodeRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Invalid"] = 1;
            values[valuesById[2] = "AlreadyExchange"] = 2;
            return values;
        })();

        return Msg_ExchangeCodeRsp;
    })();

    /**
     * MailType enum.
     * @name proto.MailType
     * @enum {number}
     * @property {number} MailType_GM=0 MailType_GM value
     * @property {number} MailType_Alliance=1 MailType_Alliance value
     */
    proto.MailType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MailType_GM"] = 0;
        values[valuesById[1] = "MailType_Alliance"] = 1;
        return values;
    })();

    /**
     * MailState enum.
     * @name proto.MailState
     * @enum {number}
     * @property {number} MailState_AlreadyRead=0 MailState_AlreadyRead value
     * @property {number} MailState_UnRead=1 MailState_UnRead value
     * @property {number} MailState_AlreadyReceive=2 MailState_AlreadyReceive value
     * @property {number} MailState_UnReceive=3 MailState_UnReceive value
     */
    proto.MailState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MailState_AlreadyRead"] = 0;
        values[valuesById[1] = "MailState_UnRead"] = 1;
        values[valuesById[2] = "MailState_AlreadyReceive"] = 2;
        values[valuesById[3] = "MailState_UnReceive"] = 3;
        return values;
    })();

    proto.MailInfoData = (function() {

        /**
         * Properties of a MailInfoData.
         * @memberof proto
         * @interface IMailInfoData
         * @property {proto.MailType|null} [type] MailInfoData type
         * @property {string|null} [mailID] MailInfoData mailID
         * @property {number|null} [mailTimestamp] MailInfoData mailTimestamp
         * @property {number|null} [iconID] MailInfoData iconID
         * @property {string|null} [mailTitle] MailInfoData mailTitle
         * @property {string|null} [mailContent] MailInfoData mailContent
         * @property {string|null} [senderName] MailInfoData senderName
         * @property {proto.MailState|null} [mailState] MailInfoData mailState
         * @property {number|null} [rewardValidTime] MailInfoData rewardValidTime
         * @property {proto.IRewardSimpleInfo|null} [reward] MailInfoData reward
         */

        /**
         * Constructs a new MailInfoData.
         * @memberof proto
         * @classdesc Represents a MailInfoData.
         * @implements IMailInfoData
         * @constructor
         * @param {proto.IMailInfoData=} [p] Properties to set
         */
        function MailInfoData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * MailInfoData type.
         * @member {proto.MailType} type
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.type = 0;

        /**
         * MailInfoData mailID.
         * @member {string} mailID
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.mailID = "";

        /**
         * MailInfoData mailTimestamp.
         * @member {number} mailTimestamp
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.mailTimestamp = 0;

        /**
         * MailInfoData iconID.
         * @member {number} iconID
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.iconID = 0;

        /**
         * MailInfoData mailTitle.
         * @member {string} mailTitle
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.mailTitle = "";

        /**
         * MailInfoData mailContent.
         * @member {string} mailContent
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.mailContent = "";

        /**
         * MailInfoData senderName.
         * @member {string} senderName
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.senderName = "";

        /**
         * MailInfoData mailState.
         * @member {proto.MailState} mailState
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.mailState = 0;

        /**
         * MailInfoData rewardValidTime.
         * @member {number} rewardValidTime
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.rewardValidTime = 0;

        /**
         * MailInfoData reward.
         * @member {proto.IRewardSimpleInfo|null|undefined} reward
         * @memberof proto.MailInfoData
         * @instance
         */
        MailInfoData.prototype.reward = null;

        /**
         * Encodes the specified MailInfoData message. Does not implicitly {@link proto.MailInfoData.verify|verify} messages.
         * @function encode
         * @memberof proto.MailInfoData
         * @static
         * @param {proto.IMailInfoData} m MailInfoData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MailInfoData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.mailID != null && Object.hasOwnProperty.call(m, "mailID"))
                w.uint32(18).string(m.mailID);
            if (m.mailTimestamp != null && Object.hasOwnProperty.call(m, "mailTimestamp"))
                w.uint32(24).int32(m.mailTimestamp);
            if (m.iconID != null && Object.hasOwnProperty.call(m, "iconID"))
                w.uint32(32).int32(m.iconID);
            if (m.mailTitle != null && Object.hasOwnProperty.call(m, "mailTitle"))
                w.uint32(42).string(m.mailTitle);
            if (m.mailContent != null && Object.hasOwnProperty.call(m, "mailContent"))
                w.uint32(50).string(m.mailContent);
            if (m.senderName != null && Object.hasOwnProperty.call(m, "senderName"))
                w.uint32(58).string(m.senderName);
            if (m.mailState != null && Object.hasOwnProperty.call(m, "mailState"))
                w.uint32(64).int32(m.mailState);
            if (m.rewardValidTime != null && Object.hasOwnProperty.call(m, "rewardValidTime"))
                w.uint32(72).int32(m.rewardValidTime);
            if (m.reward != null && Object.hasOwnProperty.call(m, "reward"))
                $root.proto.RewardSimpleInfo.encode(m.reward, w.uint32(82).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a MailInfoData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.MailInfoData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.MailInfoData} MailInfoData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MailInfoData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.MailInfoData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.mailID = r.string();
                    break;
                case 3:
                    m.mailTimestamp = r.int32();
                    break;
                case 4:
                    m.iconID = r.int32();
                    break;
                case 5:
                    m.mailTitle = r.string();
                    break;
                case 6:
                    m.mailContent = r.string();
                    break;
                case 7:
                    m.senderName = r.string();
                    break;
                case 8:
                    m.mailState = r.int32();
                    break;
                case 9:
                    m.rewardValidTime = r.int32();
                    break;
                case 10:
                    m.reward = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return MailInfoData;
    })();

    proto.Msg_GetMailInfoListReq = (function() {

        /**
         * Properties of a Msg_GetMailInfoListReq.
         * @memberof proto
         * @interface IMsg_GetMailInfoListReq
         */

        /**
         * Constructs a new Msg_GetMailInfoListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetMailInfoListReq.
         * @implements IMsg_GetMailInfoListReq
         * @constructor
         * @param {proto.IMsg_GetMailInfoListReq=} [p] Properties to set
         */
        function Msg_GetMailInfoListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetMailInfoListReq message. Does not implicitly {@link proto.Msg_GetMailInfoListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetMailInfoListReq
         * @static
         * @param {proto.IMsg_GetMailInfoListReq} m Msg_GetMailInfoListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetMailInfoListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetMailInfoListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetMailInfoListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetMailInfoListReq} Msg_GetMailInfoListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetMailInfoListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetMailInfoListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetMailInfoListReq;
    })();

    proto.Msg_GetMailInfoListRsp = (function() {

        /**
         * Properties of a Msg_GetMailInfoListRsp.
         * @memberof proto
         * @interface IMsg_GetMailInfoListRsp
         * @property {Array.<proto.IMailInfoData>|null} [mailInfoList] Msg_GetMailInfoListRsp mailInfoList
         */

        /**
         * Constructs a new Msg_GetMailInfoListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetMailInfoListRsp.
         * @implements IMsg_GetMailInfoListRsp
         * @constructor
         * @param {proto.IMsg_GetMailInfoListRsp=} [p] Properties to set
         */
        function Msg_GetMailInfoListRsp(p) {
            this.mailInfoList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetMailInfoListRsp mailInfoList.
         * @member {Array.<proto.IMailInfoData>} mailInfoList
         * @memberof proto.Msg_GetMailInfoListRsp
         * @instance
         */
        Msg_GetMailInfoListRsp.prototype.mailInfoList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetMailInfoListRsp message. Does not implicitly {@link proto.Msg_GetMailInfoListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetMailInfoListRsp
         * @static
         * @param {proto.IMsg_GetMailInfoListRsp} m Msg_GetMailInfoListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetMailInfoListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mailInfoList != null && m.mailInfoList.length) {
                for (var i = 0; i < m.mailInfoList.length; ++i)
                    $root.proto.MailInfoData.encode(m.mailInfoList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetMailInfoListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetMailInfoListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetMailInfoListRsp} Msg_GetMailInfoListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetMailInfoListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetMailInfoListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.mailInfoList && m.mailInfoList.length))
                        m.mailInfoList = [];
                    m.mailInfoList.push($root.proto.MailInfoData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetMailInfoListRsp;
    })();

    proto.Msg_ReceiveMailRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveMailRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveMailRewardReq
         * @property {string|null} [mailID] Msg_ReceiveMailRewardReq mailID
         */

        /**
         * Constructs a new Msg_ReceiveMailRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveMailRewardReq.
         * @implements IMsg_ReceiveMailRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveMailRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveMailRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveMailRewardReq mailID.
         * @member {string} mailID
         * @memberof proto.Msg_ReceiveMailRewardReq
         * @instance
         */
        Msg_ReceiveMailRewardReq.prototype.mailID = "";

        /**
         * Encodes the specified Msg_ReceiveMailRewardReq message. Does not implicitly {@link proto.Msg_ReceiveMailRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveMailRewardReq
         * @static
         * @param {proto.IMsg_ReceiveMailRewardReq} m Msg_ReceiveMailRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveMailRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mailID != null && Object.hasOwnProperty.call(m, "mailID"))
                w.uint32(10).string(m.mailID);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveMailRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveMailRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveMailRewardReq} Msg_ReceiveMailRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveMailRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveMailRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mailID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveMailRewardReq;
    })();

    proto.Msg_ReceiveMailRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveMailRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveMailRewardRsp
         * @property {proto.Msg_ReceiveMailRewardRsp.ErrorCode|null} [result] Msg_ReceiveMailRewardRsp result
         * @property {string|null} [mailID] Msg_ReceiveMailRewardRsp mailID
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ReceiveMailRewardRsp reward
         */

        /**
         * Constructs a new Msg_ReceiveMailRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveMailRewardRsp.
         * @implements IMsg_ReceiveMailRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveMailRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveMailRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveMailRewardRsp result.
         * @member {proto.Msg_ReceiveMailRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveMailRewardRsp
         * @instance
         */
        Msg_ReceiveMailRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveMailRewardRsp mailID.
         * @member {string} mailID
         * @memberof proto.Msg_ReceiveMailRewardRsp
         * @instance
         */
        Msg_ReceiveMailRewardRsp.prototype.mailID = "";

        /**
         * Msg_ReceiveMailRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ReceiveMailRewardRsp
         * @instance
         */
        Msg_ReceiveMailRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReceiveMailRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveMailRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveMailRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveMailRewardRsp} m Msg_ReceiveMailRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveMailRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.mailID != null && Object.hasOwnProperty.call(m, "mailID"))
                w.uint32(18).string(m.mailID);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReceiveMailRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveMailRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveMailRewardRsp} Msg_ReceiveMailRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveMailRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveMailRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.mailID = r.string();
                    break;
                case 3:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveMailRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} PastDue=1 PastDue value
         * @property {number} AlreadyReceive=2 AlreadyReceive value
         * @property {number} Inexistence=3 Inexistence value
         */
        Msg_ReceiveMailRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "PastDue"] = 1;
            values[valuesById[2] = "AlreadyReceive"] = 2;
            values[valuesById[3] = "Inexistence"] = 3;
            return values;
        })();

        return Msg_ReceiveMailRewardRsp;
    })();

    proto.Msg_ReadMailReq = (function() {

        /**
         * Properties of a Msg_ReadMailReq.
         * @memberof proto
         * @interface IMsg_ReadMailReq
         * @property {string|null} [mailID] Msg_ReadMailReq mailID
         */

        /**
         * Constructs a new Msg_ReadMailReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReadMailReq.
         * @implements IMsg_ReadMailReq
         * @constructor
         * @param {proto.IMsg_ReadMailReq=} [p] Properties to set
         */
        function Msg_ReadMailReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReadMailReq mailID.
         * @member {string} mailID
         * @memberof proto.Msg_ReadMailReq
         * @instance
         */
        Msg_ReadMailReq.prototype.mailID = "";

        /**
         * Encodes the specified Msg_ReadMailReq message. Does not implicitly {@link proto.Msg_ReadMailReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReadMailReq
         * @static
         * @param {proto.IMsg_ReadMailReq} m Msg_ReadMailReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReadMailReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mailID != null && Object.hasOwnProperty.call(m, "mailID"))
                w.uint32(10).string(m.mailID);
            return w;
        };

        /**
         * Decodes a Msg_ReadMailReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReadMailReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReadMailReq} Msg_ReadMailReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReadMailReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReadMailReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mailID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReadMailReq;
    })();

    proto.Msg_RemoveReadMailReq = (function() {

        /**
         * Properties of a Msg_RemoveReadMailReq.
         * @memberof proto
         * @interface IMsg_RemoveReadMailReq
         */

        /**
         * Constructs a new Msg_RemoveReadMailReq.
         * @memberof proto
         * @classdesc Represents a Msg_RemoveReadMailReq.
         * @implements IMsg_RemoveReadMailReq
         * @constructor
         * @param {proto.IMsg_RemoveReadMailReq=} [p] Properties to set
         */
        function Msg_RemoveReadMailReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_RemoveReadMailReq message. Does not implicitly {@link proto.Msg_RemoveReadMailReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RemoveReadMailReq
         * @static
         * @param {proto.IMsg_RemoveReadMailReq} m Msg_RemoveReadMailReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RemoveReadMailReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_RemoveReadMailReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RemoveReadMailReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RemoveReadMailReq} Msg_RemoveReadMailReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RemoveReadMailReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RemoveReadMailReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RemoveReadMailReq;
    })();

    proto.Msg_RemoveReadMailRsp = (function() {

        /**
         * Properties of a Msg_RemoveReadMailRsp.
         * @memberof proto
         * @interface IMsg_RemoveReadMailRsp
         * @property {Array.<string>|null} [mailIDList] Msg_RemoveReadMailRsp mailIDList
         */

        /**
         * Constructs a new Msg_RemoveReadMailRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RemoveReadMailRsp.
         * @implements IMsg_RemoveReadMailRsp
         * @constructor
         * @param {proto.IMsg_RemoveReadMailRsp=} [p] Properties to set
         */
        function Msg_RemoveReadMailRsp(p) {
            this.mailIDList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RemoveReadMailRsp mailIDList.
         * @member {Array.<string>} mailIDList
         * @memberof proto.Msg_RemoveReadMailRsp
         * @instance
         */
        Msg_RemoveReadMailRsp.prototype.mailIDList = $util.emptyArray;

        /**
         * Encodes the specified Msg_RemoveReadMailRsp message. Does not implicitly {@link proto.Msg_RemoveReadMailRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RemoveReadMailRsp
         * @static
         * @param {proto.IMsg_RemoveReadMailRsp} m Msg_RemoveReadMailRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RemoveReadMailRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mailIDList != null && m.mailIDList.length) {
                for (var i = 0; i < m.mailIDList.length; ++i)
                    w.uint32(10).string(m.mailIDList[i]);
            }
            return w;
        };

        /**
         * Decodes a Msg_RemoveReadMailRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RemoveReadMailRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RemoveReadMailRsp} Msg_RemoveReadMailRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RemoveReadMailRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RemoveReadMailRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.mailIDList && m.mailIDList.length))
                        m.mailIDList = [];
                    m.mailIDList.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RemoveReadMailRsp;
    })();

    proto.Msg_PushNewMailTip = (function() {

        /**
         * Properties of a Msg_PushNewMailTip.
         * @memberof proto
         * @interface IMsg_PushNewMailTip
         * @property {boolean|null} [bNewMail] Msg_PushNewMailTip bNewMail
         */

        /**
         * Constructs a new Msg_PushNewMailTip.
         * @memberof proto
         * @classdesc Represents a Msg_PushNewMailTip.
         * @implements IMsg_PushNewMailTip
         * @constructor
         * @param {proto.IMsg_PushNewMailTip=} [p] Properties to set
         */
        function Msg_PushNewMailTip(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushNewMailTip bNewMail.
         * @member {boolean} bNewMail
         * @memberof proto.Msg_PushNewMailTip
         * @instance
         */
        Msg_PushNewMailTip.prototype.bNewMail = false;

        /**
         * Encodes the specified Msg_PushNewMailTip message. Does not implicitly {@link proto.Msg_PushNewMailTip.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushNewMailTip
         * @static
         * @param {proto.IMsg_PushNewMailTip} m Msg_PushNewMailTip message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushNewMailTip.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bNewMail != null && Object.hasOwnProperty.call(m, "bNewMail"))
                w.uint32(8).bool(m.bNewMail);
            return w;
        };

        /**
         * Decodes a Msg_PushNewMailTip message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushNewMailTip
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushNewMailTip} Msg_PushNewMailTip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushNewMailTip.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushNewMailTip();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bNewMail = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushNewMailTip;
    })();

    proto.Msg_WriteAllianceMailReq = (function() {

        /**
         * Properties of a Msg_WriteAllianceMailReq.
         * @memberof proto
         * @interface IMsg_WriteAllianceMailReq
         * @property {string|null} [title] Msg_WriteAllianceMailReq title
         * @property {string|null} [content] Msg_WriteAllianceMailReq content
         */

        /**
         * Constructs a new Msg_WriteAllianceMailReq.
         * @memberof proto
         * @classdesc Represents a Msg_WriteAllianceMailReq.
         * @implements IMsg_WriteAllianceMailReq
         * @constructor
         * @param {proto.IMsg_WriteAllianceMailReq=} [p] Properties to set
         */
        function Msg_WriteAllianceMailReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_WriteAllianceMailReq title.
         * @member {string} title
         * @memberof proto.Msg_WriteAllianceMailReq
         * @instance
         */
        Msg_WriteAllianceMailReq.prototype.title = "";

        /**
         * Msg_WriteAllianceMailReq content.
         * @member {string} content
         * @memberof proto.Msg_WriteAllianceMailReq
         * @instance
         */
        Msg_WriteAllianceMailReq.prototype.content = "";

        /**
         * Encodes the specified Msg_WriteAllianceMailReq message. Does not implicitly {@link proto.Msg_WriteAllianceMailReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WriteAllianceMailReq
         * @static
         * @param {proto.IMsg_WriteAllianceMailReq} m Msg_WriteAllianceMailReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WriteAllianceMailReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.title != null && Object.hasOwnProperty.call(m, "title"))
                w.uint32(10).string(m.title);
            if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                w.uint32(18).string(m.content);
            return w;
        };

        /**
         * Decodes a Msg_WriteAllianceMailReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WriteAllianceMailReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WriteAllianceMailReq} Msg_WriteAllianceMailReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WriteAllianceMailReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WriteAllianceMailReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.title = r.string();
                    break;
                case 2:
                    m.content = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_WriteAllianceMailReq;
    })();

    proto.Msg_WriteAllianceMailRsp = (function() {

        /**
         * Properties of a Msg_WriteAllianceMailRsp.
         * @memberof proto
         * @interface IMsg_WriteAllianceMailRsp
         * @property {proto.Msg_WriteAllianceMailRsp.ErrorCode|null} [result] Msg_WriteAllianceMailRsp result
         */

        /**
         * Constructs a new Msg_WriteAllianceMailRsp.
         * @memberof proto
         * @classdesc Represents a Msg_WriteAllianceMailRsp.
         * @implements IMsg_WriteAllianceMailRsp
         * @constructor
         * @param {proto.IMsg_WriteAllianceMailRsp=} [p] Properties to set
         */
        function Msg_WriteAllianceMailRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_WriteAllianceMailRsp result.
         * @member {proto.Msg_WriteAllianceMailRsp.ErrorCode} result
         * @memberof proto.Msg_WriteAllianceMailRsp
         * @instance
         */
        Msg_WriteAllianceMailRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_WriteAllianceMailRsp message. Does not implicitly {@link proto.Msg_WriteAllianceMailRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WriteAllianceMailRsp
         * @static
         * @param {proto.IMsg_WriteAllianceMailRsp} m Msg_WriteAllianceMailRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WriteAllianceMailRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_WriteAllianceMailRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WriteAllianceMailRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WriteAllianceMailRsp} Msg_WriteAllianceMailRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WriteAllianceMailRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WriteAllianceMailRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_WriteAllianceMailRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} SensitiveWordError=1 SensitiveWordError value
         * @property {number} TitleEmpty=2 TitleEmpty value
         * @property {number} ContentEmpty=3 ContentEmpty value
         */
        Msg_WriteAllianceMailRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "SensitiveWordError"] = 1;
            values[valuesById[2] = "TitleEmpty"] = 2;
            values[valuesById[3] = "ContentEmpty"] = 3;
            return values;
        })();

        return Msg_WriteAllianceMailRsp;
    })();

    proto.FriendBaseInfo = (function() {

        /**
         * Properties of a FriendBaseInfo.
         * @memberof proto
         * @interface IFriendBaseInfo
         * @property {string|null} [roleID] FriendBaseInfo roleID
         * @property {string|null} [roleName] FriendBaseInfo roleName
         * @property {number|null} [headID] FriendBaseInfo headID
         * @property {number|null} [allianceIconIdx] FriendBaseInfo allianceIconIdx
         * @property {string|null} [allianceName] FriendBaseInfo allianceName
         * @property {number|null} [seasonScore] FriendBaseInfo seasonScore
         */

        /**
         * Constructs a new FriendBaseInfo.
         * @memberof proto
         * @classdesc Represents a FriendBaseInfo.
         * @implements IFriendBaseInfo
         * @constructor
         * @param {proto.IFriendBaseInfo=} [p] Properties to set
         */
        function FriendBaseInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FriendBaseInfo roleID.
         * @member {string} roleID
         * @memberof proto.FriendBaseInfo
         * @instance
         */
        FriendBaseInfo.prototype.roleID = "";

        /**
         * FriendBaseInfo roleName.
         * @member {string} roleName
         * @memberof proto.FriendBaseInfo
         * @instance
         */
        FriendBaseInfo.prototype.roleName = "";

        /**
         * FriendBaseInfo headID.
         * @member {number} headID
         * @memberof proto.FriendBaseInfo
         * @instance
         */
        FriendBaseInfo.prototype.headID = 0;

        /**
         * FriendBaseInfo allianceIconIdx.
         * @member {number} allianceIconIdx
         * @memberof proto.FriendBaseInfo
         * @instance
         */
        FriendBaseInfo.prototype.allianceIconIdx = 0;

        /**
         * FriendBaseInfo allianceName.
         * @member {string} allianceName
         * @memberof proto.FriendBaseInfo
         * @instance
         */
        FriendBaseInfo.prototype.allianceName = "";

        /**
         * FriendBaseInfo seasonScore.
         * @member {number} seasonScore
         * @memberof proto.FriendBaseInfo
         * @instance
         */
        FriendBaseInfo.prototype.seasonScore = 0;

        /**
         * Encodes the specified FriendBaseInfo message. Does not implicitly {@link proto.FriendBaseInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.FriendBaseInfo
         * @static
         * @param {proto.IFriendBaseInfo} m FriendBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendBaseInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(18).string(m.roleName);
            if (m.headID != null && Object.hasOwnProperty.call(m, "headID"))
                w.uint32(24).int32(m.headID);
            if (m.allianceIconIdx != null && Object.hasOwnProperty.call(m, "allianceIconIdx"))
                w.uint32(32).int32(m.allianceIconIdx);
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(42).string(m.allianceName);
            if (m.seasonScore != null && Object.hasOwnProperty.call(m, "seasonScore"))
                w.uint32(48).int32(m.seasonScore);
            return w;
        };

        /**
         * Decodes a FriendBaseInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FriendBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FriendBaseInfo} FriendBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendBaseInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FriendBaseInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.roleName = r.string();
                    break;
                case 3:
                    m.headID = r.int32();
                    break;
                case 4:
                    m.allianceIconIdx = r.int32();
                    break;
                case 5:
                    m.allianceName = r.string();
                    break;
                case 6:
                    m.seasonScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FriendBaseInfo;
    })();

    proto.FriendInfoData = (function() {

        /**
         * Properties of a FriendInfoData.
         * @memberof proto
         * @interface IFriendInfoData
         * @property {proto.IFriendBaseInfo|null} [baseInfo] FriendInfoData baseInfo
         * @property {boolean|null} [bOnline] FriendInfoData bOnline
         */

        /**
         * Constructs a new FriendInfoData.
         * @memberof proto
         * @classdesc Represents a FriendInfoData.
         * @implements IFriendInfoData
         * @constructor
         * @param {proto.IFriendInfoData=} [p] Properties to set
         */
        function FriendInfoData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FriendInfoData baseInfo.
         * @member {proto.IFriendBaseInfo|null|undefined} baseInfo
         * @memberof proto.FriendInfoData
         * @instance
         */
        FriendInfoData.prototype.baseInfo = null;

        /**
         * FriendInfoData bOnline.
         * @member {boolean} bOnline
         * @memberof proto.FriendInfoData
         * @instance
         */
        FriendInfoData.prototype.bOnline = false;

        /**
         * Encodes the specified FriendInfoData message. Does not implicitly {@link proto.FriendInfoData.verify|verify} messages.
         * @function encode
         * @memberof proto.FriendInfoData
         * @static
         * @param {proto.IFriendInfoData} m FriendInfoData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendInfoData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.baseInfo != null && Object.hasOwnProperty.call(m, "baseInfo"))
                $root.proto.FriendBaseInfo.encode(m.baseInfo, w.uint32(10).fork()).ldelim();
            if (m.bOnline != null && Object.hasOwnProperty.call(m, "bOnline"))
                w.uint32(16).bool(m.bOnline);
            return w;
        };

        /**
         * Decodes a FriendInfoData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FriendInfoData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FriendInfoData} FriendInfoData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendInfoData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FriendInfoData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.baseInfo = $root.proto.FriendBaseInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.bOnline = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FriendInfoData;
    })();

    proto.FriendApplyData = (function() {

        /**
         * Properties of a FriendApplyData.
         * @memberof proto
         * @interface IFriendApplyData
         * @property {proto.IFriendBaseInfo|null} [baseInfo] FriendApplyData baseInfo
         * @property {number|null} [applyTime] FriendApplyData applyTime
         */

        /**
         * Constructs a new FriendApplyData.
         * @memberof proto
         * @classdesc Represents a FriendApplyData.
         * @implements IFriendApplyData
         * @constructor
         * @param {proto.IFriendApplyData=} [p] Properties to set
         */
        function FriendApplyData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FriendApplyData baseInfo.
         * @member {proto.IFriendBaseInfo|null|undefined} baseInfo
         * @memberof proto.FriendApplyData
         * @instance
         */
        FriendApplyData.prototype.baseInfo = null;

        /**
         * FriendApplyData applyTime.
         * @member {number} applyTime
         * @memberof proto.FriendApplyData
         * @instance
         */
        FriendApplyData.prototype.applyTime = 0;

        /**
         * Encodes the specified FriendApplyData message. Does not implicitly {@link proto.FriendApplyData.verify|verify} messages.
         * @function encode
         * @memberof proto.FriendApplyData
         * @static
         * @param {proto.IFriendApplyData} m FriendApplyData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendApplyData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.baseInfo != null && Object.hasOwnProperty.call(m, "baseInfo"))
                $root.proto.FriendBaseInfo.encode(m.baseInfo, w.uint32(10).fork()).ldelim();
            if (m.applyTime != null && Object.hasOwnProperty.call(m, "applyTime"))
                w.uint32(16).int32(m.applyTime);
            return w;
        };

        /**
         * Decodes a FriendApplyData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FriendApplyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FriendApplyData} FriendApplyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendApplyData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FriendApplyData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.baseInfo = $root.proto.FriendBaseInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.applyTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FriendApplyData;
    })();

    proto.FriendFightInvitationData = (function() {

        /**
         * Properties of a FriendFightInvitationData.
         * @memberof proto
         * @interface IFriendFightInvitationData
         * @property {proto.FightType|null} [type] FriendFightInvitationData type
         * @property {number|null} [roomID] FriendFightInvitationData roomID
         * @property {string|null} [message] FriendFightInvitationData message
         * @property {string|null} [roleID] FriendFightInvitationData roleID
         * @property {string|null} [roleName] FriendFightInvitationData roleName
         * @property {number|null} [headID] FriendFightInvitationData headID
         * @property {number|null} [invitationTime] FriendFightInvitationData invitationTime
         */

        /**
         * Constructs a new FriendFightInvitationData.
         * @memberof proto
         * @classdesc Represents a FriendFightInvitationData.
         * @implements IFriendFightInvitationData
         * @constructor
         * @param {proto.IFriendFightInvitationData=} [p] Properties to set
         */
        function FriendFightInvitationData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FriendFightInvitationData type.
         * @member {proto.FightType} type
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.type = 0;

        /**
         * FriendFightInvitationData roomID.
         * @member {number} roomID
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.roomID = 0;

        /**
         * FriendFightInvitationData message.
         * @member {string} message
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.message = "";

        /**
         * FriendFightInvitationData roleID.
         * @member {string} roleID
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.roleID = "";

        /**
         * FriendFightInvitationData roleName.
         * @member {string} roleName
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.roleName = "";

        /**
         * FriendFightInvitationData headID.
         * @member {number} headID
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.headID = 0;

        /**
         * FriendFightInvitationData invitationTime.
         * @member {number} invitationTime
         * @memberof proto.FriendFightInvitationData
         * @instance
         */
        FriendFightInvitationData.prototype.invitationTime = 0;

        /**
         * Encodes the specified FriendFightInvitationData message. Does not implicitly {@link proto.FriendFightInvitationData.verify|verify} messages.
         * @function encode
         * @memberof proto.FriendFightInvitationData
         * @static
         * @param {proto.IFriendFightInvitationData} m FriendFightInvitationData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendFightInvitationData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(26).string(m.message);
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(34).string(m.roleID);
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(42).string(m.roleName);
            if (m.headID != null && Object.hasOwnProperty.call(m, "headID"))
                w.uint32(48).int32(m.headID);
            if (m.invitationTime != null && Object.hasOwnProperty.call(m, "invitationTime"))
                w.uint32(56).int32(m.invitationTime);
            return w;
        };

        /**
         * Decodes a FriendFightInvitationData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FriendFightInvitationData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FriendFightInvitationData} FriendFightInvitationData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendFightInvitationData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FriendFightInvitationData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                case 3:
                    m.message = r.string();
                    break;
                case 4:
                    m.roleID = r.string();
                    break;
                case 5:
                    m.roleName = r.string();
                    break;
                case 6:
                    m.headID = r.int32();
                    break;
                case 7:
                    m.invitationTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FriendFightInvitationData;
    })();

    proto.Msg_GetFriendInfoListReq = (function() {

        /**
         * Properties of a Msg_GetFriendInfoListReq.
         * @memberof proto
         * @interface IMsg_GetFriendInfoListReq
         */

        /**
         * Constructs a new Msg_GetFriendInfoListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetFriendInfoListReq.
         * @implements IMsg_GetFriendInfoListReq
         * @constructor
         * @param {proto.IMsg_GetFriendInfoListReq=} [p] Properties to set
         */
        function Msg_GetFriendInfoListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetFriendInfoListReq message. Does not implicitly {@link proto.Msg_GetFriendInfoListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFriendInfoListReq
         * @static
         * @param {proto.IMsg_GetFriendInfoListReq} m Msg_GetFriendInfoListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFriendInfoListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetFriendInfoListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFriendInfoListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFriendInfoListReq} Msg_GetFriendInfoListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFriendInfoListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFriendInfoListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFriendInfoListReq;
    })();

    proto.Msg_GetFriendInfoListRsp = (function() {

        /**
         * Properties of a Msg_GetFriendInfoListRsp.
         * @memberof proto
         * @interface IMsg_GetFriendInfoListRsp
         * @property {Array.<proto.IFriendInfoData>|null} [friendList] Msg_GetFriendInfoListRsp friendList
         */

        /**
         * Constructs a new Msg_GetFriendInfoListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetFriendInfoListRsp.
         * @implements IMsg_GetFriendInfoListRsp
         * @constructor
         * @param {proto.IMsg_GetFriendInfoListRsp=} [p] Properties to set
         */
        function Msg_GetFriendInfoListRsp(p) {
            this.friendList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetFriendInfoListRsp friendList.
         * @member {Array.<proto.IFriendInfoData>} friendList
         * @memberof proto.Msg_GetFriendInfoListRsp
         * @instance
         */
        Msg_GetFriendInfoListRsp.prototype.friendList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetFriendInfoListRsp message. Does not implicitly {@link proto.Msg_GetFriendInfoListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFriendInfoListRsp
         * @static
         * @param {proto.IMsg_GetFriendInfoListRsp} m Msg_GetFriendInfoListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFriendInfoListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.friendList != null && m.friendList.length) {
                for (var i = 0; i < m.friendList.length; ++i)
                    $root.proto.FriendInfoData.encode(m.friendList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetFriendInfoListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFriendInfoListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFriendInfoListRsp} Msg_GetFriendInfoListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFriendInfoListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFriendInfoListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.friendList && m.friendList.length))
                        m.friendList = [];
                    m.friendList.push($root.proto.FriendInfoData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFriendInfoListRsp;
    })();

    proto.FriendOnlineState = (function() {

        /**
         * Properties of a FriendOnlineState.
         * @memberof proto
         * @interface IFriendOnlineState
         * @property {string|null} [roleID] FriendOnlineState roleID
         * @property {boolean|null} [bOnline] FriendOnlineState bOnline
         */

        /**
         * Constructs a new FriendOnlineState.
         * @memberof proto
         * @classdesc Represents a FriendOnlineState.
         * @implements IFriendOnlineState
         * @constructor
         * @param {proto.IFriendOnlineState=} [p] Properties to set
         */
        function FriendOnlineState(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FriendOnlineState roleID.
         * @member {string} roleID
         * @memberof proto.FriendOnlineState
         * @instance
         */
        FriendOnlineState.prototype.roleID = "";

        /**
         * FriendOnlineState bOnline.
         * @member {boolean} bOnline
         * @memberof proto.FriendOnlineState
         * @instance
         */
        FriendOnlineState.prototype.bOnline = false;

        /**
         * Encodes the specified FriendOnlineState message. Does not implicitly {@link proto.FriendOnlineState.verify|verify} messages.
         * @function encode
         * @memberof proto.FriendOnlineState
         * @static
         * @param {proto.IFriendOnlineState} m FriendOnlineState message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FriendOnlineState.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.bOnline != null && Object.hasOwnProperty.call(m, "bOnline"))
                w.uint32(16).bool(m.bOnline);
            return w;
        };

        /**
         * Decodes a FriendOnlineState message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FriendOnlineState
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FriendOnlineState} FriendOnlineState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FriendOnlineState.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FriendOnlineState();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.bOnline = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FriendOnlineState;
    })();

    proto.Msg_GetFriendOnlineStateListReq = (function() {

        /**
         * Properties of a Msg_GetFriendOnlineStateListReq.
         * @memberof proto
         * @interface IMsg_GetFriendOnlineStateListReq
         */

        /**
         * Constructs a new Msg_GetFriendOnlineStateListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetFriendOnlineStateListReq.
         * @implements IMsg_GetFriendOnlineStateListReq
         * @constructor
         * @param {proto.IMsg_GetFriendOnlineStateListReq=} [p] Properties to set
         */
        function Msg_GetFriendOnlineStateListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetFriendOnlineStateListReq message. Does not implicitly {@link proto.Msg_GetFriendOnlineStateListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFriendOnlineStateListReq
         * @static
         * @param {proto.IMsg_GetFriendOnlineStateListReq} m Msg_GetFriendOnlineStateListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFriendOnlineStateListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetFriendOnlineStateListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFriendOnlineStateListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFriendOnlineStateListReq} Msg_GetFriendOnlineStateListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFriendOnlineStateListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFriendOnlineStateListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFriendOnlineStateListReq;
    })();

    proto.Msg_GetFriendOnlineStateListRsp = (function() {

        /**
         * Properties of a Msg_GetFriendOnlineStateListRsp.
         * @memberof proto
         * @interface IMsg_GetFriendOnlineStateListRsp
         * @property {Array.<proto.IFriendOnlineState>|null} [friendList] Msg_GetFriendOnlineStateListRsp friendList
         */

        /**
         * Constructs a new Msg_GetFriendOnlineStateListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetFriendOnlineStateListRsp.
         * @implements IMsg_GetFriendOnlineStateListRsp
         * @constructor
         * @param {proto.IMsg_GetFriendOnlineStateListRsp=} [p] Properties to set
         */
        function Msg_GetFriendOnlineStateListRsp(p) {
            this.friendList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetFriendOnlineStateListRsp friendList.
         * @member {Array.<proto.IFriendOnlineState>} friendList
         * @memberof proto.Msg_GetFriendOnlineStateListRsp
         * @instance
         */
        Msg_GetFriendOnlineStateListRsp.prototype.friendList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetFriendOnlineStateListRsp message. Does not implicitly {@link proto.Msg_GetFriendOnlineStateListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFriendOnlineStateListRsp
         * @static
         * @param {proto.IMsg_GetFriendOnlineStateListRsp} m Msg_GetFriendOnlineStateListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFriendOnlineStateListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.friendList != null && m.friendList.length) {
                for (var i = 0; i < m.friendList.length; ++i)
                    $root.proto.FriendOnlineState.encode(m.friendList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetFriendOnlineStateListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFriendOnlineStateListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFriendOnlineStateListRsp} Msg_GetFriendOnlineStateListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFriendOnlineStateListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFriendOnlineStateListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.friendList && m.friendList.length))
                        m.friendList = [];
                    m.friendList.push($root.proto.FriendOnlineState.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFriendOnlineStateListRsp;
    })();

    proto.Msg_GetFriendApplyListReq = (function() {

        /**
         * Properties of a Msg_GetFriendApplyListReq.
         * @memberof proto
         * @interface IMsg_GetFriendApplyListReq
         */

        /**
         * Constructs a new Msg_GetFriendApplyListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetFriendApplyListReq.
         * @implements IMsg_GetFriendApplyListReq
         * @constructor
         * @param {proto.IMsg_GetFriendApplyListReq=} [p] Properties to set
         */
        function Msg_GetFriendApplyListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetFriendApplyListReq message. Does not implicitly {@link proto.Msg_GetFriendApplyListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFriendApplyListReq
         * @static
         * @param {proto.IMsg_GetFriendApplyListReq} m Msg_GetFriendApplyListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFriendApplyListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetFriendApplyListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFriendApplyListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFriendApplyListReq} Msg_GetFriendApplyListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFriendApplyListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFriendApplyListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFriendApplyListReq;
    })();

    proto.Msg_GetFriendApplyListRsp = (function() {

        /**
         * Properties of a Msg_GetFriendApplyListRsp.
         * @memberof proto
         * @interface IMsg_GetFriendApplyListRsp
         * @property {Array.<proto.IFriendApplyData>|null} [friendApplyList] Msg_GetFriendApplyListRsp friendApplyList
         */

        /**
         * Constructs a new Msg_GetFriendApplyListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetFriendApplyListRsp.
         * @implements IMsg_GetFriendApplyListRsp
         * @constructor
         * @param {proto.IMsg_GetFriendApplyListRsp=} [p] Properties to set
         */
        function Msg_GetFriendApplyListRsp(p) {
            this.friendApplyList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetFriendApplyListRsp friendApplyList.
         * @member {Array.<proto.IFriendApplyData>} friendApplyList
         * @memberof proto.Msg_GetFriendApplyListRsp
         * @instance
         */
        Msg_GetFriendApplyListRsp.prototype.friendApplyList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetFriendApplyListRsp message. Does not implicitly {@link proto.Msg_GetFriendApplyListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFriendApplyListRsp
         * @static
         * @param {proto.IMsg_GetFriendApplyListRsp} m Msg_GetFriendApplyListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFriendApplyListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.friendApplyList != null && m.friendApplyList.length) {
                for (var i = 0; i < m.friendApplyList.length; ++i)
                    $root.proto.FriendApplyData.encode(m.friendApplyList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetFriendApplyListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFriendApplyListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFriendApplyListRsp} Msg_GetFriendApplyListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFriendApplyListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFriendApplyListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.friendApplyList && m.friendApplyList.length))
                        m.friendApplyList = [];
                    m.friendApplyList.push($root.proto.FriendApplyData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFriendApplyListRsp;
    })();

    proto.Msg_PushNewFriendApplyInfo = (function() {

        /**
         * Properties of a Msg_PushNewFriendApplyInfo.
         * @memberof proto
         * @interface IMsg_PushNewFriendApplyInfo
         * @property {boolean|null} [bNewFriendApply] Msg_PushNewFriendApplyInfo bNewFriendApply
         */

        /**
         * Constructs a new Msg_PushNewFriendApplyInfo.
         * @memberof proto
         * @classdesc Represents a Msg_PushNewFriendApplyInfo.
         * @implements IMsg_PushNewFriendApplyInfo
         * @constructor
         * @param {proto.IMsg_PushNewFriendApplyInfo=} [p] Properties to set
         */
        function Msg_PushNewFriendApplyInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushNewFriendApplyInfo bNewFriendApply.
         * @member {boolean} bNewFriendApply
         * @memberof proto.Msg_PushNewFriendApplyInfo
         * @instance
         */
        Msg_PushNewFriendApplyInfo.prototype.bNewFriendApply = false;

        /**
         * Encodes the specified Msg_PushNewFriendApplyInfo message. Does not implicitly {@link proto.Msg_PushNewFriendApplyInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushNewFriendApplyInfo
         * @static
         * @param {proto.IMsg_PushNewFriendApplyInfo} m Msg_PushNewFriendApplyInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushNewFriendApplyInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bNewFriendApply != null && Object.hasOwnProperty.call(m, "bNewFriendApply"))
                w.uint32(8).bool(m.bNewFriendApply);
            return w;
        };

        /**
         * Decodes a Msg_PushNewFriendApplyInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushNewFriendApplyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushNewFriendApplyInfo} Msg_PushNewFriendApplyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushNewFriendApplyInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushNewFriendApplyInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bNewFriendApply = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushNewFriendApplyInfo;
    })();

    proto.Msg_OperatorFriendApplyReq = (function() {

        /**
         * Properties of a Msg_OperatorFriendApplyReq.
         * @memberof proto
         * @interface IMsg_OperatorFriendApplyReq
         * @property {string|null} [roleID] Msg_OperatorFriendApplyReq roleID
         * @property {boolean|null} [bAgree] Msg_OperatorFriendApplyReq bAgree
         */

        /**
         * Constructs a new Msg_OperatorFriendApplyReq.
         * @memberof proto
         * @classdesc Represents a Msg_OperatorFriendApplyReq.
         * @implements IMsg_OperatorFriendApplyReq
         * @constructor
         * @param {proto.IMsg_OperatorFriendApplyReq=} [p] Properties to set
         */
        function Msg_OperatorFriendApplyReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OperatorFriendApplyReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_OperatorFriendApplyReq
         * @instance
         */
        Msg_OperatorFriendApplyReq.prototype.roleID = "";

        /**
         * Msg_OperatorFriendApplyReq bAgree.
         * @member {boolean} bAgree
         * @memberof proto.Msg_OperatorFriendApplyReq
         * @instance
         */
        Msg_OperatorFriendApplyReq.prototype.bAgree = false;

        /**
         * Encodes the specified Msg_OperatorFriendApplyReq message. Does not implicitly {@link proto.Msg_OperatorFriendApplyReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OperatorFriendApplyReq
         * @static
         * @param {proto.IMsg_OperatorFriendApplyReq} m Msg_OperatorFriendApplyReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OperatorFriendApplyReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            if (m.bAgree != null && Object.hasOwnProperty.call(m, "bAgree"))
                w.uint32(16).bool(m.bAgree);
            return w;
        };

        /**
         * Decodes a Msg_OperatorFriendApplyReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OperatorFriendApplyReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OperatorFriendApplyReq} Msg_OperatorFriendApplyReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OperatorFriendApplyReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OperatorFriendApplyReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                case 2:
                    m.bAgree = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OperatorFriendApplyReq;
    })();

    proto.Msg_OperatorFriendApplyRsp = (function() {

        /**
         * Properties of a Msg_OperatorFriendApplyRsp.
         * @memberof proto
         * @interface IMsg_OperatorFriendApplyRsp
         * @property {proto.Msg_OperatorFriendApplyRsp.ErrorCode|null} [result] Msg_OperatorFriendApplyRsp result
         * @property {proto.IFriendInfoData|null} [newFriendInfo] Msg_OperatorFriendApplyRsp newFriendInfo
         * @property {boolean|null} [bAgree] Msg_OperatorFriendApplyRsp bAgree
         */

        /**
         * Constructs a new Msg_OperatorFriendApplyRsp.
         * @memberof proto
         * @classdesc Represents a Msg_OperatorFriendApplyRsp.
         * @implements IMsg_OperatorFriendApplyRsp
         * @constructor
         * @param {proto.IMsg_OperatorFriendApplyRsp=} [p] Properties to set
         */
        function Msg_OperatorFriendApplyRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OperatorFriendApplyRsp result.
         * @member {proto.Msg_OperatorFriendApplyRsp.ErrorCode} result
         * @memberof proto.Msg_OperatorFriendApplyRsp
         * @instance
         */
        Msg_OperatorFriendApplyRsp.prototype.result = 0;

        /**
         * Msg_OperatorFriendApplyRsp newFriendInfo.
         * @member {proto.IFriendInfoData|null|undefined} newFriendInfo
         * @memberof proto.Msg_OperatorFriendApplyRsp
         * @instance
         */
        Msg_OperatorFriendApplyRsp.prototype.newFriendInfo = null;

        /**
         * Msg_OperatorFriendApplyRsp bAgree.
         * @member {boolean} bAgree
         * @memberof proto.Msg_OperatorFriendApplyRsp
         * @instance
         */
        Msg_OperatorFriendApplyRsp.prototype.bAgree = false;

        /**
         * Encodes the specified Msg_OperatorFriendApplyRsp message. Does not implicitly {@link proto.Msg_OperatorFriendApplyRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OperatorFriendApplyRsp
         * @static
         * @param {proto.IMsg_OperatorFriendApplyRsp} m Msg_OperatorFriendApplyRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OperatorFriendApplyRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.newFriendInfo != null && Object.hasOwnProperty.call(m, "newFriendInfo"))
                $root.proto.FriendInfoData.encode(m.newFriendInfo, w.uint32(18).fork()).ldelim();
            if (m.bAgree != null && Object.hasOwnProperty.call(m, "bAgree"))
                w.uint32(24).bool(m.bAgree);
            return w;
        };

        /**
         * Decodes a Msg_OperatorFriendApplyRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OperatorFriendApplyRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OperatorFriendApplyRsp} Msg_OperatorFriendApplyRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OperatorFriendApplyRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OperatorFriendApplyRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.newFriendInfo = $root.proto.FriendInfoData.decode(r, r.uint32());
                    break;
                case 3:
                    m.bAgree = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_OperatorFriendApplyRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ReachUpperLimit=1 ReachUpperLimit value
         */
        Msg_OperatorFriendApplyRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ReachUpperLimit"] = 1;
            return values;
        })();

        return Msg_OperatorFriendApplyRsp;
    })();

    proto.Msg_AddFriendReq = (function() {

        /**
         * Properties of a Msg_AddFriendReq.
         * @memberof proto
         * @interface IMsg_AddFriendReq
         * @property {string|null} [roleName] Msg_AddFriendReq roleName
         * @property {string|null} [roleID] Msg_AddFriendReq roleID
         */

        /**
         * Constructs a new Msg_AddFriendReq.
         * @memberof proto
         * @classdesc Represents a Msg_AddFriendReq.
         * @implements IMsg_AddFriendReq
         * @constructor
         * @param {proto.IMsg_AddFriendReq=} [p] Properties to set
         */
        function Msg_AddFriendReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AddFriendReq roleName.
         * @member {string} roleName
         * @memberof proto.Msg_AddFriendReq
         * @instance
         */
        Msg_AddFriendReq.prototype.roleName = "";

        /**
         * Msg_AddFriendReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_AddFriendReq
         * @instance
         */
        Msg_AddFriendReq.prototype.roleID = "";

        /**
         * Encodes the specified Msg_AddFriendReq message. Does not implicitly {@link proto.Msg_AddFriendReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AddFriendReq
         * @static
         * @param {proto.IMsg_AddFriendReq} m Msg_AddFriendReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AddFriendReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleName != null && Object.hasOwnProperty.call(m, "roleName"))
                w.uint32(10).string(m.roleName);
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(18).string(m.roleID);
            return w;
        };

        /**
         * Decodes a Msg_AddFriendReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AddFriendReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AddFriendReq} Msg_AddFriendReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AddFriendReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AddFriendReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleName = r.string();
                    break;
                case 2:
                    m.roleID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AddFriendReq;
    })();

    proto.Msg_AddFriendRsp = (function() {

        /**
         * Properties of a Msg_AddFriendRsp.
         * @memberof proto
         * @interface IMsg_AddFriendRsp
         * @property {proto.Msg_AddFriendRsp.ErrorCode|null} [result] Msg_AddFriendRsp result
         */

        /**
         * Constructs a new Msg_AddFriendRsp.
         * @memberof proto
         * @classdesc Represents a Msg_AddFriendRsp.
         * @implements IMsg_AddFriendRsp
         * @constructor
         * @param {proto.IMsg_AddFriendRsp=} [p] Properties to set
         */
        function Msg_AddFriendRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AddFriendRsp result.
         * @member {proto.Msg_AddFriendRsp.ErrorCode} result
         * @memberof proto.Msg_AddFriendRsp
         * @instance
         */
        Msg_AddFriendRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_AddFriendRsp message. Does not implicitly {@link proto.Msg_AddFriendRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AddFriendRsp
         * @static
         * @param {proto.IMsg_AddFriendRsp} m Msg_AddFriendRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AddFriendRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_AddFriendRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AddFriendRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AddFriendRsp} Msg_AddFriendRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AddFriendRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AddFriendRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_AddFriendRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ReachUpperLimit=1 ReachUpperLimit value
         * @property {number} RoleInexistence=2 RoleInexistence value
         * @property {number} AlreadyFriend=3 AlreadyFriend value
         */
        Msg_AddFriendRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ReachUpperLimit"] = 1;
            values[valuesById[2] = "RoleInexistence"] = 2;
            values[valuesById[3] = "AlreadyFriend"] = 3;
            return values;
        })();

        return Msg_AddFriendRsp;
    })();

    proto.Msg_DeleteFriendReq = (function() {

        /**
         * Properties of a Msg_DeleteFriendReq.
         * @memberof proto
         * @interface IMsg_DeleteFriendReq
         * @property {string|null} [roleID] Msg_DeleteFriendReq roleID
         */

        /**
         * Constructs a new Msg_DeleteFriendReq.
         * @memberof proto
         * @classdesc Represents a Msg_DeleteFriendReq.
         * @implements IMsg_DeleteFriendReq
         * @constructor
         * @param {proto.IMsg_DeleteFriendReq=} [p] Properties to set
         */
        function Msg_DeleteFriendReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_DeleteFriendReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_DeleteFriendReq
         * @instance
         */
        Msg_DeleteFriendReq.prototype.roleID = "";

        /**
         * Encodes the specified Msg_DeleteFriendReq message. Does not implicitly {@link proto.Msg_DeleteFriendReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_DeleteFriendReq
         * @static
         * @param {proto.IMsg_DeleteFriendReq} m Msg_DeleteFriendReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_DeleteFriendReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(10).string(m.roleID);
            return w;
        };

        /**
         * Decodes a Msg_DeleteFriendReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_DeleteFriendReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_DeleteFriendReq} Msg_DeleteFriendReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_DeleteFriendReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_DeleteFriendReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_DeleteFriendReq;
    })();

    proto.Msg_DeleteFriendRsp = (function() {

        /**
         * Properties of a Msg_DeleteFriendRsp.
         * @memberof proto
         * @interface IMsg_DeleteFriendRsp
         * @property {proto.Msg_DeleteFriendRsp.ErrorCode|null} [result] Msg_DeleteFriendRsp result
         * @property {string|null} [roleID] Msg_DeleteFriendRsp roleID
         */

        /**
         * Constructs a new Msg_DeleteFriendRsp.
         * @memberof proto
         * @classdesc Represents a Msg_DeleteFriendRsp.
         * @implements IMsg_DeleteFriendRsp
         * @constructor
         * @param {proto.IMsg_DeleteFriendRsp=} [p] Properties to set
         */
        function Msg_DeleteFriendRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_DeleteFriendRsp result.
         * @member {proto.Msg_DeleteFriendRsp.ErrorCode} result
         * @memberof proto.Msg_DeleteFriendRsp
         * @instance
         */
        Msg_DeleteFriendRsp.prototype.result = 0;

        /**
         * Msg_DeleteFriendRsp roleID.
         * @member {string} roleID
         * @memberof proto.Msg_DeleteFriendRsp
         * @instance
         */
        Msg_DeleteFriendRsp.prototype.roleID = "";

        /**
         * Encodes the specified Msg_DeleteFriendRsp message. Does not implicitly {@link proto.Msg_DeleteFriendRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_DeleteFriendRsp
         * @static
         * @param {proto.IMsg_DeleteFriendRsp} m Msg_DeleteFriendRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_DeleteFriendRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(18).string(m.roleID);
            return w;
        };

        /**
         * Decodes a Msg_DeleteFriendRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_DeleteFriendRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_DeleteFriendRsp} Msg_DeleteFriendRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_DeleteFriendRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_DeleteFriendRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.roleID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_DeleteFriendRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} FriendInexistence=1 FriendInexistence value
         */
        Msg_DeleteFriendRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "FriendInexistence"] = 1;
            return values;
        })();

        return Msg_DeleteFriendRsp;
    })();

    proto.Msg_ChangeFriendInfo = (function() {

        /**
         * Properties of a Msg_ChangeFriendInfo.
         * @memberof proto
         * @interface IMsg_ChangeFriendInfo
         * @property {boolean|null} [bDelete] Msg_ChangeFriendInfo bDelete
         * @property {proto.IFriendInfoData|null} [friendInfo] Msg_ChangeFriendInfo friendInfo
         */

        /**
         * Constructs a new Msg_ChangeFriendInfo.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeFriendInfo.
         * @implements IMsg_ChangeFriendInfo
         * @constructor
         * @param {proto.IMsg_ChangeFriendInfo=} [p] Properties to set
         */
        function Msg_ChangeFriendInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeFriendInfo bDelete.
         * @member {boolean} bDelete
         * @memberof proto.Msg_ChangeFriendInfo
         * @instance
         */
        Msg_ChangeFriendInfo.prototype.bDelete = false;

        /**
         * Msg_ChangeFriendInfo friendInfo.
         * @member {proto.IFriendInfoData|null|undefined} friendInfo
         * @memberof proto.Msg_ChangeFriendInfo
         * @instance
         */
        Msg_ChangeFriendInfo.prototype.friendInfo = null;

        /**
         * Encodes the specified Msg_ChangeFriendInfo message. Does not implicitly {@link proto.Msg_ChangeFriendInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeFriendInfo
         * @static
         * @param {proto.IMsg_ChangeFriendInfo} m Msg_ChangeFriendInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeFriendInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bDelete != null && Object.hasOwnProperty.call(m, "bDelete"))
                w.uint32(8).bool(m.bDelete);
            if (m.friendInfo != null && Object.hasOwnProperty.call(m, "friendInfo"))
                $root.proto.FriendInfoData.encode(m.friendInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_ChangeFriendInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeFriendInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeFriendInfo} Msg_ChangeFriendInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeFriendInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeFriendInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bDelete = r.bool();
                    break;
                case 2:
                    m.friendInfo = $root.proto.FriendInfoData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeFriendInfo;
    })();

    proto.Msg_InvitationFriendFightReq = (function() {

        /**
         * Properties of a Msg_InvitationFriendFightReq.
         * @memberof proto
         * @interface IMsg_InvitationFriendFightReq
         * @property {proto.FightType|null} [type] Msg_InvitationFriendFightReq type
         * @property {string|null} [message] Msg_InvitationFriendFightReq message
         * @property {string|null} [roleID] Msg_InvitationFriendFightReq roleID
         */

        /**
         * Constructs a new Msg_InvitationFriendFightReq.
         * @memberof proto
         * @classdesc Represents a Msg_InvitationFriendFightReq.
         * @implements IMsg_InvitationFriendFightReq
         * @constructor
         * @param {proto.IMsg_InvitationFriendFightReq=} [p] Properties to set
         */
        function Msg_InvitationFriendFightReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_InvitationFriendFightReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_InvitationFriendFightReq
         * @instance
         */
        Msg_InvitationFriendFightReq.prototype.type = 0;

        /**
         * Msg_InvitationFriendFightReq message.
         * @member {string} message
         * @memberof proto.Msg_InvitationFriendFightReq
         * @instance
         */
        Msg_InvitationFriendFightReq.prototype.message = "";

        /**
         * Msg_InvitationFriendFightReq roleID.
         * @member {string} roleID
         * @memberof proto.Msg_InvitationFriendFightReq
         * @instance
         */
        Msg_InvitationFriendFightReq.prototype.roleID = "";

        /**
         * Encodes the specified Msg_InvitationFriendFightReq message. Does not implicitly {@link proto.Msg_InvitationFriendFightReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_InvitationFriendFightReq
         * @static
         * @param {proto.IMsg_InvitationFriendFightReq} m Msg_InvitationFriendFightReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_InvitationFriendFightReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(18).string(m.message);
            if (m.roleID != null && Object.hasOwnProperty.call(m, "roleID"))
                w.uint32(26).string(m.roleID);
            return w;
        };

        /**
         * Decodes a Msg_InvitationFriendFightReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_InvitationFriendFightReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_InvitationFriendFightReq} Msg_InvitationFriendFightReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_InvitationFriendFightReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_InvitationFriendFightReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.message = r.string();
                    break;
                case 3:
                    m.roleID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_InvitationFriendFightReq;
    })();

    proto.Msg_InvitationFriendFightRsp = (function() {

        /**
         * Properties of a Msg_InvitationFriendFightRsp.
         * @memberof proto
         * @interface IMsg_InvitationFriendFightRsp
         * @property {proto.Msg_InvitationFriendFightRsp.ErrorCode|null} [result] Msg_InvitationFriendFightRsp result
         */

        /**
         * Constructs a new Msg_InvitationFriendFightRsp.
         * @memberof proto
         * @classdesc Represents a Msg_InvitationFriendFightRsp.
         * @implements IMsg_InvitationFriendFightRsp
         * @constructor
         * @param {proto.IMsg_InvitationFriendFightRsp=} [p] Properties to set
         */
        function Msg_InvitationFriendFightRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_InvitationFriendFightRsp result.
         * @member {proto.Msg_InvitationFriendFightRsp.ErrorCode} result
         * @memberof proto.Msg_InvitationFriendFightRsp
         * @instance
         */
        Msg_InvitationFriendFightRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_InvitationFriendFightRsp message. Does not implicitly {@link proto.Msg_InvitationFriendFightRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_InvitationFriendFightRsp
         * @static
         * @param {proto.IMsg_InvitationFriendFightRsp} m Msg_InvitationFriendFightRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_InvitationFriendFightRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_InvitationFriendFightRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_InvitationFriendFightRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_InvitationFriendFightRsp} Msg_InvitationFriendFightRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_InvitationFriendFightRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_InvitationFriendFightRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_InvitationFriendFightRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} FriendInexistence=1 FriendInexistence value
         * @property {number} FightingNow=2 FightingNow value
         * @property {number} RefuseInvite=3 RefuseInvite value
         */
        Msg_InvitationFriendFightRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "FriendInexistence"] = 1;
            values[valuesById[2] = "FightingNow"] = 2;
            values[valuesById[3] = "RefuseInvite"] = 3;
            return values;
        })();

        return Msg_InvitationFriendFightRsp;
    })();

    proto.Msg_PushInvitationFriendFight = (function() {

        /**
         * Properties of a Msg_PushInvitationFriendFight.
         * @memberof proto
         * @interface IMsg_PushInvitationFriendFight
         * @property {proto.IFriendFightInvitationData|null} [fightInvitation] Msg_PushInvitationFriendFight fightInvitation
         */

        /**
         * Constructs a new Msg_PushInvitationFriendFight.
         * @memberof proto
         * @classdesc Represents a Msg_PushInvitationFriendFight.
         * @implements IMsg_PushInvitationFriendFight
         * @constructor
         * @param {proto.IMsg_PushInvitationFriendFight=} [p] Properties to set
         */
        function Msg_PushInvitationFriendFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushInvitationFriendFight fightInvitation.
         * @member {proto.IFriendFightInvitationData|null|undefined} fightInvitation
         * @memberof proto.Msg_PushInvitationFriendFight
         * @instance
         */
        Msg_PushInvitationFriendFight.prototype.fightInvitation = null;

        /**
         * Encodes the specified Msg_PushInvitationFriendFight message. Does not implicitly {@link proto.Msg_PushInvitationFriendFight.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushInvitationFriendFight
         * @static
         * @param {proto.IMsg_PushInvitationFriendFight} m Msg_PushInvitationFriendFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushInvitationFriendFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightInvitation != null && Object.hasOwnProperty.call(m, "fightInvitation"))
                $root.proto.FriendFightInvitationData.encode(m.fightInvitation, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_PushInvitationFriendFight message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushInvitationFriendFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushInvitationFriendFight} Msg_PushInvitationFriendFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushInvitationFriendFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushInvitationFriendFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.fightInvitation = $root.proto.FriendFightInvitationData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushInvitationFriendFight;
    })();

    proto.Msg_OperatorFriendFightInvitationReq = (function() {

        /**
         * Properties of a Msg_OperatorFriendFightInvitationReq.
         * @memberof proto
         * @interface IMsg_OperatorFriendFightInvitationReq
         * @property {boolean|null} [bAgree] Msg_OperatorFriendFightInvitationReq bAgree
         * @property {number|null} [roomID] Msg_OperatorFriendFightInvitationReq roomID
         * @property {proto.FightType|null} [type] Msg_OperatorFriendFightInvitationReq type
         * @property {string|null} [createRoleID] Msg_OperatorFriendFightInvitationReq createRoleID
         */

        /**
         * Constructs a new Msg_OperatorFriendFightInvitationReq.
         * @memberof proto
         * @classdesc Represents a Msg_OperatorFriendFightInvitationReq.
         * @implements IMsg_OperatorFriendFightInvitationReq
         * @constructor
         * @param {proto.IMsg_OperatorFriendFightInvitationReq=} [p] Properties to set
         */
        function Msg_OperatorFriendFightInvitationReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OperatorFriendFightInvitationReq bAgree.
         * @member {boolean} bAgree
         * @memberof proto.Msg_OperatorFriendFightInvitationReq
         * @instance
         */
        Msg_OperatorFriendFightInvitationReq.prototype.bAgree = false;

        /**
         * Msg_OperatorFriendFightInvitationReq roomID.
         * @member {number} roomID
         * @memberof proto.Msg_OperatorFriendFightInvitationReq
         * @instance
         */
        Msg_OperatorFriendFightInvitationReq.prototype.roomID = 0;

        /**
         * Msg_OperatorFriendFightInvitationReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_OperatorFriendFightInvitationReq
         * @instance
         */
        Msg_OperatorFriendFightInvitationReq.prototype.type = 0;

        /**
         * Msg_OperatorFriendFightInvitationReq createRoleID.
         * @member {string} createRoleID
         * @memberof proto.Msg_OperatorFriendFightInvitationReq
         * @instance
         */
        Msg_OperatorFriendFightInvitationReq.prototype.createRoleID = "";

        /**
         * Encodes the specified Msg_OperatorFriendFightInvitationReq message. Does not implicitly {@link proto.Msg_OperatorFriendFightInvitationReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OperatorFriendFightInvitationReq
         * @static
         * @param {proto.IMsg_OperatorFriendFightInvitationReq} m Msg_OperatorFriendFightInvitationReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OperatorFriendFightInvitationReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bAgree != null && Object.hasOwnProperty.call(m, "bAgree"))
                w.uint32(8).bool(m.bAgree);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(24).int32(m.type);
            if (m.createRoleID != null && Object.hasOwnProperty.call(m, "createRoleID"))
                w.uint32(34).string(m.createRoleID);
            return w;
        };

        /**
         * Decodes a Msg_OperatorFriendFightInvitationReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OperatorFriendFightInvitationReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OperatorFriendFightInvitationReq} Msg_OperatorFriendFightInvitationReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OperatorFriendFightInvitationReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OperatorFriendFightInvitationReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bAgree = r.bool();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                case 3:
                    m.type = r.int32();
                    break;
                case 4:
                    m.createRoleID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OperatorFriendFightInvitationReq;
    })();

    proto.Msg_PushCancelFriendFight = (function() {

        /**
         * Properties of a Msg_PushCancelFriendFight.
         * @memberof proto
         * @interface IMsg_PushCancelFriendFight
         * @property {number|null} [roomID] Msg_PushCancelFriendFight roomID
         */

        /**
         * Constructs a new Msg_PushCancelFriendFight.
         * @memberof proto
         * @classdesc Represents a Msg_PushCancelFriendFight.
         * @implements IMsg_PushCancelFriendFight
         * @constructor
         * @param {proto.IMsg_PushCancelFriendFight=} [p] Properties to set
         */
        function Msg_PushCancelFriendFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushCancelFriendFight roomID.
         * @member {number} roomID
         * @memberof proto.Msg_PushCancelFriendFight
         * @instance
         */
        Msg_PushCancelFriendFight.prototype.roomID = 0;

        /**
         * Encodes the specified Msg_PushCancelFriendFight message. Does not implicitly {@link proto.Msg_PushCancelFriendFight.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushCancelFriendFight
         * @static
         * @param {proto.IMsg_PushCancelFriendFight} m Msg_PushCancelFriendFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushCancelFriendFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(8).int32(m.roomID);
            return w;
        };

        /**
         * Decodes a Msg_PushCancelFriendFight message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushCancelFriendFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushCancelFriendFight} Msg_PushCancelFriendFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushCancelFriendFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushCancelFriendFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roomID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushCancelFriendFight;
    })();

    proto.Msg_OperatorFriendFightInvitationRsp = (function() {

        /**
         * Properties of a Msg_OperatorFriendFightInvitationRsp.
         * @memberof proto
         * @interface IMsg_OperatorFriendFightInvitationRsp
         * @property {proto.Msg_OperatorFriendFightInvitationRsp.ErrorCode|null} [result] Msg_OperatorFriendFightInvitationRsp result
         * @property {number|null} [roomID] Msg_OperatorFriendFightInvitationRsp roomID
         * @property {proto.FightType|null} [type] Msg_OperatorFriendFightInvitationRsp type
         * @property {boolean|null} [bAgree] Msg_OperatorFriendFightInvitationRsp bAgree
         */

        /**
         * Constructs a new Msg_OperatorFriendFightInvitationRsp.
         * @memberof proto
         * @classdesc Represents a Msg_OperatorFriendFightInvitationRsp.
         * @implements IMsg_OperatorFriendFightInvitationRsp
         * @constructor
         * @param {proto.IMsg_OperatorFriendFightInvitationRsp=} [p] Properties to set
         */
        function Msg_OperatorFriendFightInvitationRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OperatorFriendFightInvitationRsp result.
         * @member {proto.Msg_OperatorFriendFightInvitationRsp.ErrorCode} result
         * @memberof proto.Msg_OperatorFriendFightInvitationRsp
         * @instance
         */
        Msg_OperatorFriendFightInvitationRsp.prototype.result = 0;

        /**
         * Msg_OperatorFriendFightInvitationRsp roomID.
         * @member {number} roomID
         * @memberof proto.Msg_OperatorFriendFightInvitationRsp
         * @instance
         */
        Msg_OperatorFriendFightInvitationRsp.prototype.roomID = 0;

        /**
         * Msg_OperatorFriendFightInvitationRsp type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_OperatorFriendFightInvitationRsp
         * @instance
         */
        Msg_OperatorFriendFightInvitationRsp.prototype.type = 0;

        /**
         * Msg_OperatorFriendFightInvitationRsp bAgree.
         * @member {boolean} bAgree
         * @memberof proto.Msg_OperatorFriendFightInvitationRsp
         * @instance
         */
        Msg_OperatorFriendFightInvitationRsp.prototype.bAgree = false;

        /**
         * Encodes the specified Msg_OperatorFriendFightInvitationRsp message. Does not implicitly {@link proto.Msg_OperatorFriendFightInvitationRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OperatorFriendFightInvitationRsp
         * @static
         * @param {proto.IMsg_OperatorFriendFightInvitationRsp} m Msg_OperatorFriendFightInvitationRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OperatorFriendFightInvitationRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(24).int32(m.type);
            if (m.bAgree != null && Object.hasOwnProperty.call(m, "bAgree"))
                w.uint32(32).bool(m.bAgree);
            return w;
        };

        /**
         * Decodes a Msg_OperatorFriendFightInvitationRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OperatorFriendFightInvitationRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OperatorFriendFightInvitationRsp} Msg_OperatorFriendFightInvitationRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OperatorFriendFightInvitationRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OperatorFriendFightInvitationRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                case 3:
                    m.type = r.int32();
                    break;
                case 4:
                    m.bAgree = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_OperatorFriendFightInvitationRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyCancel=1 AlreadyCancel value
         * @property {number} PveCountNotEnough=2 PveCountNotEnough value
         */
        Msg_OperatorFriendFightInvitationRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyCancel"] = 1;
            values[valuesById[2] = "PveCountNotEnough"] = 2;
            return values;
        })();

        return Msg_OperatorFriendFightInvitationRsp;
    })();

    proto.FightLogData = (function() {

        /**
         * Properties of a FightLogData.
         * @memberof proto
         * @interface IFightLogData
         * @property {Array.<proto.IFightData>|null} [FightDatas] FightLogData FightDatas
         * @property {number|null} [ChangeScore] FightLogData ChangeScore
         * @property {proto.FightType|null} [Type] FightLogData Type
         * @property {number|null} [WaveNum] FightLogData WaveNum
         * @property {string|null} [WinRoleId] FightLogData WinRoleId
         * @property {number|null} [ChallengeId] FightLogData ChallengeId
         * @property {number|Long|null} [UTC] FightLogData UTC
         * @property {boolean|null} [isReport] FightLogData isReport
         */

        /**
         * Constructs a new FightLogData.
         * @memberof proto
         * @classdesc Represents a FightLogData.
         * @implements IFightLogData
         * @constructor
         * @param {proto.IFightLogData=} [p] Properties to set
         */
        function FightLogData(p) {
            this.FightDatas = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * FightLogData FightDatas.
         * @member {Array.<proto.IFightData>} FightDatas
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.FightDatas = $util.emptyArray;

        /**
         * FightLogData ChangeScore.
         * @member {number} ChangeScore
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.ChangeScore = 0;

        /**
         * FightLogData Type.
         * @member {proto.FightType} Type
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.Type = 0;

        /**
         * FightLogData WaveNum.
         * @member {number} WaveNum
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.WaveNum = 0;

        /**
         * FightLogData WinRoleId.
         * @member {string} WinRoleId
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.WinRoleId = "";

        /**
         * FightLogData ChallengeId.
         * @member {number} ChallengeId
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.ChallengeId = 0;

        /**
         * FightLogData UTC.
         * @member {number|Long} UTC
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.UTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * FightLogData isReport.
         * @member {boolean} isReport
         * @memberof proto.FightLogData
         * @instance
         */
        FightLogData.prototype.isReport = false;

        /**
         * Encodes the specified FightLogData message. Does not implicitly {@link proto.FightLogData.verify|verify} messages.
         * @function encode
         * @memberof proto.FightLogData
         * @static
         * @param {proto.IFightLogData} m FightLogData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FightLogData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FightDatas != null && m.FightDatas.length) {
                for (var i = 0; i < m.FightDatas.length; ++i)
                    $root.proto.FightData.encode(m.FightDatas[i], w.uint32(10).fork()).ldelim();
            }
            if (m.ChangeScore != null && Object.hasOwnProperty.call(m, "ChangeScore"))
                w.uint32(16).int32(m.ChangeScore);
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(24).int32(m.Type);
            if (m.WaveNum != null && Object.hasOwnProperty.call(m, "WaveNum"))
                w.uint32(32).int32(m.WaveNum);
            if (m.WinRoleId != null && Object.hasOwnProperty.call(m, "WinRoleId"))
                w.uint32(42).string(m.WinRoleId);
            if (m.ChallengeId != null && Object.hasOwnProperty.call(m, "ChallengeId"))
                w.uint32(48).int32(m.ChallengeId);
            if (m.UTC != null && Object.hasOwnProperty.call(m, "UTC"))
                w.uint32(56).int64(m.UTC);
            if (m.isReport != null && Object.hasOwnProperty.call(m, "isReport"))
                w.uint32(64).bool(m.isReport);
            return w;
        };

        /**
         * Decodes a FightLogData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.FightLogData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.FightLogData} FightLogData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FightLogData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.FightLogData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.FightDatas && m.FightDatas.length))
                        m.FightDatas = [];
                    m.FightDatas.push($root.proto.FightData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.ChangeScore = r.int32();
                    break;
                case 3:
                    m.Type = r.int32();
                    break;
                case 4:
                    m.WaveNum = r.int32();
                    break;
                case 5:
                    m.WinRoleId = r.string();
                    break;
                case 6:
                    m.ChallengeId = r.int32();
                    break;
                case 7:
                    m.UTC = r.int64();
                    break;
                case 8:
                    m.isReport = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return FightLogData;
    })();

    proto.Msg_FightLogReq = (function() {

        /**
         * Properties of a Msg_FightLogReq.
         * @memberof proto
         * @interface IMsg_FightLogReq
         */

        /**
         * Constructs a new Msg_FightLogReq.
         * @memberof proto
         * @classdesc Represents a Msg_FightLogReq.
         * @implements IMsg_FightLogReq
         * @constructor
         * @param {proto.IMsg_FightLogReq=} [p] Properties to set
         */
        function Msg_FightLogReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_FightLogReq message. Does not implicitly {@link proto.Msg_FightLogReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightLogReq
         * @static
         * @param {proto.IMsg_FightLogReq} m Msg_FightLogReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightLogReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_FightLogReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightLogReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightLogReq} Msg_FightLogReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightLogReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightLogReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightLogReq;
    })();

    proto.Msg_FightLogRsp = (function() {

        /**
         * Properties of a Msg_FightLogRsp.
         * @memberof proto
         * @interface IMsg_FightLogRsp
         * @property {Array.<proto.IFightLogData>|null} [fightLogs] Msg_FightLogRsp fightLogs
         */

        /**
         * Constructs a new Msg_FightLogRsp.
         * @memberof proto
         * @classdesc Represents a Msg_FightLogRsp.
         * @implements IMsg_FightLogRsp
         * @constructor
         * @param {proto.IMsg_FightLogRsp=} [p] Properties to set
         */
        function Msg_FightLogRsp(p) {
            this.fightLogs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_FightLogRsp fightLogs.
         * @member {Array.<proto.IFightLogData>} fightLogs
         * @memberof proto.Msg_FightLogRsp
         * @instance
         */
        Msg_FightLogRsp.prototype.fightLogs = $util.emptyArray;

        /**
         * Encodes the specified Msg_FightLogRsp message. Does not implicitly {@link proto.Msg_FightLogRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_FightLogRsp
         * @static
         * @param {proto.IMsg_FightLogRsp} m Msg_FightLogRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_FightLogRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.fightLogs != null && m.fightLogs.length) {
                for (var i = 0; i < m.fightLogs.length; ++i)
                    $root.proto.FightLogData.encode(m.fightLogs[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_FightLogRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_FightLogRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_FightLogRsp} Msg_FightLogRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_FightLogRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_FightLogRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.fightLogs && m.fightLogs.length))
                        m.fightLogs = [];
                    m.fightLogs.push($root.proto.FightLogData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_FightLogRsp;
    })();

    proto.Msg_CopyDeckReq = (function() {

        /**
         * Properties of a Msg_CopyDeckReq.
         * @memberof proto
         * @interface IMsg_CopyDeckReq
         * @property {Array.<proto.IFightCardData>|null} [DeckData] Msg_CopyDeckReq DeckData
         * @property {proto.IFightCardData|null} [lordData] Msg_CopyDeckReq lordData
         * @property {proto.ITalentData|null} [talent] Msg_CopyDeckReq talent
         * @property {number|null} [deckIndex] Msg_CopyDeckReq deckIndex
         */

        /**
         * Constructs a new Msg_CopyDeckReq.
         * @memberof proto
         * @classdesc Represents a Msg_CopyDeckReq.
         * @implements IMsg_CopyDeckReq
         * @constructor
         * @param {proto.IMsg_CopyDeckReq=} [p] Properties to set
         */
        function Msg_CopyDeckReq(p) {
            this.DeckData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CopyDeckReq DeckData.
         * @member {Array.<proto.IFightCardData>} DeckData
         * @memberof proto.Msg_CopyDeckReq
         * @instance
         */
        Msg_CopyDeckReq.prototype.DeckData = $util.emptyArray;

        /**
         * Msg_CopyDeckReq lordData.
         * @member {proto.IFightCardData|null|undefined} lordData
         * @memberof proto.Msg_CopyDeckReq
         * @instance
         */
        Msg_CopyDeckReq.prototype.lordData = null;

        /**
         * Msg_CopyDeckReq talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.Msg_CopyDeckReq
         * @instance
         */
        Msg_CopyDeckReq.prototype.talent = null;

        /**
         * Msg_CopyDeckReq deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_CopyDeckReq
         * @instance
         */
        Msg_CopyDeckReq.prototype.deckIndex = 0;

        /**
         * Encodes the specified Msg_CopyDeckReq message. Does not implicitly {@link proto.Msg_CopyDeckReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CopyDeckReq
         * @static
         * @param {proto.IMsg_CopyDeckReq} m Msg_CopyDeckReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CopyDeckReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckData != null && m.DeckData.length) {
                for (var i = 0; i < m.DeckData.length; ++i)
                    $root.proto.FightCardData.encode(m.DeckData[i], w.uint32(10).fork()).ldelim();
            }
            if (m.lordData != null && Object.hasOwnProperty.call(m, "lordData"))
                $root.proto.FightCardData.encode(m.lordData, w.uint32(18).fork()).ldelim();
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(26).fork()).ldelim();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(32).int32(m.deckIndex);
            return w;
        };

        /**
         * Decodes a Msg_CopyDeckReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CopyDeckReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CopyDeckReq} Msg_CopyDeckReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CopyDeckReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CopyDeckReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.DeckData && m.DeckData.length))
                        m.DeckData = [];
                    m.DeckData.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.lordData = $root.proto.FightCardData.decode(r, r.uint32());
                    break;
                case 3:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                case 4:
                    m.deckIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CopyDeckReq;
    })();

    proto.Msg_CopyDeckRsp = (function() {

        /**
         * Properties of a Msg_CopyDeckRsp.
         * @memberof proto
         * @interface IMsg_CopyDeckRsp
         * @property {proto.Msg_CopyDeckRsp.ErrorCode|null} [result] Msg_CopyDeckRsp result
         * @property {Array.<proto.IFightCardData>|null} [DeckData] Msg_CopyDeckRsp DeckData
         * @property {proto.IFightCardData|null} [lordData] Msg_CopyDeckRsp lordData
         * @property {proto.ITalentData|null} [talent] Msg_CopyDeckRsp talent
         * @property {number|null} [deckIndex] Msg_CopyDeckRsp deckIndex
         */

        /**
         * Constructs a new Msg_CopyDeckRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CopyDeckRsp.
         * @implements IMsg_CopyDeckRsp
         * @constructor
         * @param {proto.IMsg_CopyDeckRsp=} [p] Properties to set
         */
        function Msg_CopyDeckRsp(p) {
            this.DeckData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CopyDeckRsp result.
         * @member {proto.Msg_CopyDeckRsp.ErrorCode} result
         * @memberof proto.Msg_CopyDeckRsp
         * @instance
         */
        Msg_CopyDeckRsp.prototype.result = 0;

        /**
         * Msg_CopyDeckRsp DeckData.
         * @member {Array.<proto.IFightCardData>} DeckData
         * @memberof proto.Msg_CopyDeckRsp
         * @instance
         */
        Msg_CopyDeckRsp.prototype.DeckData = $util.emptyArray;

        /**
         * Msg_CopyDeckRsp lordData.
         * @member {proto.IFightCardData|null|undefined} lordData
         * @memberof proto.Msg_CopyDeckRsp
         * @instance
         */
        Msg_CopyDeckRsp.prototype.lordData = null;

        /**
         * Msg_CopyDeckRsp talent.
         * @member {proto.ITalentData|null|undefined} talent
         * @memberof proto.Msg_CopyDeckRsp
         * @instance
         */
        Msg_CopyDeckRsp.prototype.talent = null;

        /**
         * Msg_CopyDeckRsp deckIndex.
         * @member {number} deckIndex
         * @memberof proto.Msg_CopyDeckRsp
         * @instance
         */
        Msg_CopyDeckRsp.prototype.deckIndex = 0;

        /**
         * Encodes the specified Msg_CopyDeckRsp message. Does not implicitly {@link proto.Msg_CopyDeckRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CopyDeckRsp
         * @static
         * @param {proto.IMsg_CopyDeckRsp} m Msg_CopyDeckRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CopyDeckRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.DeckData != null && m.DeckData.length) {
                for (var i = 0; i < m.DeckData.length; ++i)
                    $root.proto.FightCardData.encode(m.DeckData[i], w.uint32(18).fork()).ldelim();
            }
            if (m.lordData != null && Object.hasOwnProperty.call(m, "lordData"))
                $root.proto.FightCardData.encode(m.lordData, w.uint32(26).fork()).ldelim();
            if (m.talent != null && Object.hasOwnProperty.call(m, "talent"))
                $root.proto.TalentData.encode(m.talent, w.uint32(34).fork()).ldelim();
            if (m.deckIndex != null && Object.hasOwnProperty.call(m, "deckIndex"))
                w.uint32(40).int32(m.deckIndex);
            return w;
        };

        /**
         * Decodes a Msg_CopyDeckRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CopyDeckRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CopyDeckRsp} Msg_CopyDeckRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CopyDeckRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CopyDeckRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.DeckData && m.DeckData.length))
                        m.DeckData = [];
                    m.DeckData.push($root.proto.FightCardData.decode(r, r.uint32()));
                    break;
                case 3:
                    m.lordData = $root.proto.FightCardData.decode(r, r.uint32());
                    break;
                case 4:
                    m.talent = $root.proto.TalentData.decode(r, r.uint32());
                    break;
                case 5:
                    m.deckIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_CopyDeckRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ParamError=1 ParamError value
         * @property {number} LackCard=2 LackCard value
         */
        Msg_CopyDeckRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ParamError"] = 1;
            values[valuesById[2] = "LackCard"] = 2;
            return values;
        })();

        return Msg_CopyDeckRsp;
    })();

    proto.Msg_ReportReq = (function() {

        /**
         * Properties of a Msg_ReportReq.
         * @memberof proto
         * @interface IMsg_ReportReq
         * @property {number|null} [FightLogIndex] Msg_ReportReq FightLogIndex
         * @property {string|null} [roleId] Msg_ReportReq roleId
         */

        /**
         * Constructs a new Msg_ReportReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReportReq.
         * @implements IMsg_ReportReq
         * @constructor
         * @param {proto.IMsg_ReportReq=} [p] Properties to set
         */
        function Msg_ReportReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReportReq FightLogIndex.
         * @member {number} FightLogIndex
         * @memberof proto.Msg_ReportReq
         * @instance
         */
        Msg_ReportReq.prototype.FightLogIndex = 0;

        /**
         * Msg_ReportReq roleId.
         * @member {string} roleId
         * @memberof proto.Msg_ReportReq
         * @instance
         */
        Msg_ReportReq.prototype.roleId = "";

        /**
         * Encodes the specified Msg_ReportReq message. Does not implicitly {@link proto.Msg_ReportReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReportReq
         * @static
         * @param {proto.IMsg_ReportReq} m Msg_ReportReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReportReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FightLogIndex != null && Object.hasOwnProperty.call(m, "FightLogIndex"))
                w.uint32(8).int32(m.FightLogIndex);
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(18).string(m.roleId);
            return w;
        };

        /**
         * Decodes a Msg_ReportReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReportReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReportReq} Msg_ReportReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReportReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReportReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FightLogIndex = r.int32();
                    break;
                case 2:
                    m.roleId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReportReq;
    })();

    proto.Msg_ReportRsp = (function() {

        /**
         * Properties of a Msg_ReportRsp.
         * @memberof proto
         * @interface IMsg_ReportRsp
         * @property {proto.Msg_ReportRsp.ErrorCode|null} [result] Msg_ReportRsp result
         * @property {number|null} [FightLogIndex] Msg_ReportRsp FightLogIndex
         * @property {string|null} [roleId] Msg_ReportRsp roleId
         */

        /**
         * Constructs a new Msg_ReportRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReportRsp.
         * @implements IMsg_ReportRsp
         * @constructor
         * @param {proto.IMsg_ReportRsp=} [p] Properties to set
         */
        function Msg_ReportRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReportRsp result.
         * @member {proto.Msg_ReportRsp.ErrorCode} result
         * @memberof proto.Msg_ReportRsp
         * @instance
         */
        Msg_ReportRsp.prototype.result = 0;

        /**
         * Msg_ReportRsp FightLogIndex.
         * @member {number} FightLogIndex
         * @memberof proto.Msg_ReportRsp
         * @instance
         */
        Msg_ReportRsp.prototype.FightLogIndex = 0;

        /**
         * Msg_ReportRsp roleId.
         * @member {string} roleId
         * @memberof proto.Msg_ReportRsp
         * @instance
         */
        Msg_ReportRsp.prototype.roleId = "";

        /**
         * Encodes the specified Msg_ReportRsp message. Does not implicitly {@link proto.Msg_ReportRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReportRsp
         * @static
         * @param {proto.IMsg_ReportRsp} m Msg_ReportRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReportRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.FightLogIndex != null && Object.hasOwnProperty.call(m, "FightLogIndex"))
                w.uint32(16).int32(m.FightLogIndex);
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(26).string(m.roleId);
            return w;
        };

        /**
         * Decodes a Msg_ReportRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReportRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReportRsp} Msg_ReportRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReportRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReportRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.FightLogIndex = r.int32();
                    break;
                case 3:
                    m.roleId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReportRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ParamError=1 ParamError value
         * @property {number} NonPve=2 NonPve value
         * @property {number} CountExceeded=3 CountExceeded value
         * @property {number} OutTime=4 OutTime value
         */
        Msg_ReportRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ParamError"] = 1;
            values[valuesById[2] = "NonPve"] = 2;
            values[valuesById[3] = "CountExceeded"] = 3;
            values[valuesById[4] = "OutTime"] = 4;
            return values;
        })();

        return Msg_ReportRsp;
    })();

    proto.Msg_PushPveForbidInfo = (function() {

        /**
         * Properties of a Msg_PushPveForbidInfo.
         * @memberof proto
         * @interface IMsg_PushPveForbidInfo
         * @property {number|Long|null} [unsealUTC] Msg_PushPveForbidInfo unsealUTC
         */

        /**
         * Constructs a new Msg_PushPveForbidInfo.
         * @memberof proto
         * @classdesc Represents a Msg_PushPveForbidInfo.
         * @implements IMsg_PushPveForbidInfo
         * @constructor
         * @param {proto.IMsg_PushPveForbidInfo=} [p] Properties to set
         */
        function Msg_PushPveForbidInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushPveForbidInfo unsealUTC.
         * @member {number|Long} unsealUTC
         * @memberof proto.Msg_PushPveForbidInfo
         * @instance
         */
        Msg_PushPveForbidInfo.prototype.unsealUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified Msg_PushPveForbidInfo message. Does not implicitly {@link proto.Msg_PushPveForbidInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushPveForbidInfo
         * @static
         * @param {proto.IMsg_PushPveForbidInfo} m Msg_PushPveForbidInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushPveForbidInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unsealUTC != null && Object.hasOwnProperty.call(m, "unsealUTC"))
                w.uint32(8).int64(m.unsealUTC);
            return w;
        };

        /**
         * Decodes a Msg_PushPveForbidInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushPveForbidInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushPveForbidInfo} Msg_PushPveForbidInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushPveForbidInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushPveForbidInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unsealUTC = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushPveForbidInfo;
    })();

    proto.RainbowRewardData = (function() {

        /**
         * Properties of a RainbowRewardData.
         * @memberof proto
         * @interface IRainbowRewardData
         * @property {proto.IRewardSimpleInfo|null} [rewardInfo] RainbowRewardData rewardInfo
         * @property {proto.TaskState|null} [rewardState] RainbowRewardData rewardState
         */

        /**
         * Constructs a new RainbowRewardData.
         * @memberof proto
         * @classdesc Represents a RainbowRewardData.
         * @implements IRainbowRewardData
         * @constructor
         * @param {proto.IRainbowRewardData=} [p] Properties to set
         */
        function RainbowRewardData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RainbowRewardData rewardInfo.
         * @member {proto.IRewardSimpleInfo|null|undefined} rewardInfo
         * @memberof proto.RainbowRewardData
         * @instance
         */
        RainbowRewardData.prototype.rewardInfo = null;

        /**
         * RainbowRewardData rewardState.
         * @member {proto.TaskState} rewardState
         * @memberof proto.RainbowRewardData
         * @instance
         */
        RainbowRewardData.prototype.rewardState = 0;

        /**
         * Encodes the specified RainbowRewardData message. Does not implicitly {@link proto.RainbowRewardData.verify|verify} messages.
         * @function encode
         * @memberof proto.RainbowRewardData
         * @static
         * @param {proto.IRainbowRewardData} m RainbowRewardData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RainbowRewardData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardInfo != null && Object.hasOwnProperty.call(m, "rewardInfo"))
                $root.proto.RewardSimpleInfo.encode(m.rewardInfo, w.uint32(10).fork()).ldelim();
            if (m.rewardState != null && Object.hasOwnProperty.call(m, "rewardState"))
                w.uint32(16).int32(m.rewardState);
            return w;
        };

        /**
         * Decodes a RainbowRewardData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RainbowRewardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RainbowRewardData} RainbowRewardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RainbowRewardData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RainbowRewardData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardInfo = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.rewardState = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RainbowRewardData;
    })();

    proto.RainbowInfoData = (function() {

        /**
         * Properties of a RainbowInfoData.
         * @memberof proto
         * @interface IRainbowInfoData
         * @property {proto.ITaskData|null} [data] RainbowInfoData data
         * @property {proto.IRainbowRewardData|null} [leftReward] RainbowInfoData leftReward
         * @property {proto.IRainbowRewardData|null} [rightReward] RainbowInfoData rightReward
         */

        /**
         * Constructs a new RainbowInfoData.
         * @memberof proto
         * @classdesc Represents a RainbowInfoData.
         * @implements IRainbowInfoData
         * @constructor
         * @param {proto.IRainbowInfoData=} [p] Properties to set
         */
        function RainbowInfoData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RainbowInfoData data.
         * @member {proto.ITaskData|null|undefined} data
         * @memberof proto.RainbowInfoData
         * @instance
         */
        RainbowInfoData.prototype.data = null;

        /**
         * RainbowInfoData leftReward.
         * @member {proto.IRainbowRewardData|null|undefined} leftReward
         * @memberof proto.RainbowInfoData
         * @instance
         */
        RainbowInfoData.prototype.leftReward = null;

        /**
         * RainbowInfoData rightReward.
         * @member {proto.IRainbowRewardData|null|undefined} rightReward
         * @memberof proto.RainbowInfoData
         * @instance
         */
        RainbowInfoData.prototype.rightReward = null;

        /**
         * Encodes the specified RainbowInfoData message. Does not implicitly {@link proto.RainbowInfoData.verify|verify} messages.
         * @function encode
         * @memberof proto.RainbowInfoData
         * @static
         * @param {proto.IRainbowInfoData} m RainbowInfoData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RainbowInfoData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.proto.TaskData.encode(m.data, w.uint32(10).fork()).ldelim();
            if (m.leftReward != null && Object.hasOwnProperty.call(m, "leftReward"))
                $root.proto.RainbowRewardData.encode(m.leftReward, w.uint32(18).fork()).ldelim();
            if (m.rightReward != null && Object.hasOwnProperty.call(m, "rightReward"))
                $root.proto.RainbowRewardData.encode(m.rightReward, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a RainbowInfoData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RainbowInfoData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RainbowInfoData} RainbowInfoData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RainbowInfoData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RainbowInfoData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.data = $root.proto.TaskData.decode(r, r.uint32());
                    break;
                case 2:
                    m.leftReward = $root.proto.RainbowRewardData.decode(r, r.uint32());
                    break;
                case 3:
                    m.rightReward = $root.proto.RainbowRewardData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RainbowInfoData;
    })();

    proto.RainbowTaskData = (function() {

        /**
         * Properties of a RainbowTaskData.
         * @memberof proto
         * @interface IRainbowTaskData
         * @property {Array.<proto.IRainbowInfoData>|null} [rainbowTaskList] RainbowTaskData rainbowTaskList
         * @property {number|null} [periodID] RainbowTaskData periodID
         * @property {number|null} [todayFreeRefreshCount] RainbowTaskData todayFreeRefreshCount
         * @property {number|null} [todayADRefreshCount] RainbowTaskData todayADRefreshCount
         * @property {boolean|null} [canLevelUp] RainbowTaskData canLevelUp
         * @property {number|null} [runningStarLv] RainbowTaskData runningStarLv
         */

        /**
         * Constructs a new RainbowTaskData.
         * @memberof proto
         * @classdesc Represents a RainbowTaskData.
         * @implements IRainbowTaskData
         * @constructor
         * @param {proto.IRainbowTaskData=} [p] Properties to set
         */
        function RainbowTaskData(p) {
            this.rainbowTaskList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RainbowTaskData rainbowTaskList.
         * @member {Array.<proto.IRainbowInfoData>} rainbowTaskList
         * @memberof proto.RainbowTaskData
         * @instance
         */
        RainbowTaskData.prototype.rainbowTaskList = $util.emptyArray;

        /**
         * RainbowTaskData periodID.
         * @member {number} periodID
         * @memberof proto.RainbowTaskData
         * @instance
         */
        RainbowTaskData.prototype.periodID = 0;

        /**
         * RainbowTaskData todayFreeRefreshCount.
         * @member {number} todayFreeRefreshCount
         * @memberof proto.RainbowTaskData
         * @instance
         */
        RainbowTaskData.prototype.todayFreeRefreshCount = 0;

        /**
         * RainbowTaskData todayADRefreshCount.
         * @member {number} todayADRefreshCount
         * @memberof proto.RainbowTaskData
         * @instance
         */
        RainbowTaskData.prototype.todayADRefreshCount = 0;

        /**
         * RainbowTaskData canLevelUp.
         * @member {boolean} canLevelUp
         * @memberof proto.RainbowTaskData
         * @instance
         */
        RainbowTaskData.prototype.canLevelUp = false;

        /**
         * RainbowTaskData runningStarLv.
         * @member {number} runningStarLv
         * @memberof proto.RainbowTaskData
         * @instance
         */
        RainbowTaskData.prototype.runningStarLv = 0;

        /**
         * Encodes the specified RainbowTaskData message. Does not implicitly {@link proto.RainbowTaskData.verify|verify} messages.
         * @function encode
         * @memberof proto.RainbowTaskData
         * @static
         * @param {proto.IRainbowTaskData} m RainbowTaskData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RainbowTaskData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rainbowTaskList != null && m.rainbowTaskList.length) {
                for (var i = 0; i < m.rainbowTaskList.length; ++i)
                    $root.proto.RainbowInfoData.encode(m.rainbowTaskList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.periodID != null && Object.hasOwnProperty.call(m, "periodID"))
                w.uint32(16).int32(m.periodID);
            if (m.todayFreeRefreshCount != null && Object.hasOwnProperty.call(m, "todayFreeRefreshCount"))
                w.uint32(24).int32(m.todayFreeRefreshCount);
            if (m.todayADRefreshCount != null && Object.hasOwnProperty.call(m, "todayADRefreshCount"))
                w.uint32(32).int32(m.todayADRefreshCount);
            if (m.canLevelUp != null && Object.hasOwnProperty.call(m, "canLevelUp"))
                w.uint32(40).bool(m.canLevelUp);
            if (m.runningStarLv != null && Object.hasOwnProperty.call(m, "runningStarLv"))
                w.uint32(48).int32(m.runningStarLv);
            return w;
        };

        /**
         * Decodes a RainbowTaskData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RainbowTaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RainbowTaskData} RainbowTaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RainbowTaskData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RainbowTaskData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rainbowTaskList && m.rainbowTaskList.length))
                        m.rainbowTaskList = [];
                    m.rainbowTaskList.push($root.proto.RainbowInfoData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.periodID = r.int32();
                    break;
                case 3:
                    m.todayFreeRefreshCount = r.int32();
                    break;
                case 4:
                    m.todayADRefreshCount = r.int32();
                    break;
                case 5:
                    m.canLevelUp = r.bool();
                    break;
                case 6:
                    m.runningStarLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RainbowTaskData;
    })();

    proto.Msg_RainbowTaskListReq = (function() {

        /**
         * Properties of a Msg_RainbowTaskListReq.
         * @memberof proto
         * @interface IMsg_RainbowTaskListReq
         */

        /**
         * Constructs a new Msg_RainbowTaskListReq.
         * @memberof proto
         * @classdesc Represents a Msg_RainbowTaskListReq.
         * @implements IMsg_RainbowTaskListReq
         * @constructor
         * @param {proto.IMsg_RainbowTaskListReq=} [p] Properties to set
         */
        function Msg_RainbowTaskListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_RainbowTaskListReq message. Does not implicitly {@link proto.Msg_RainbowTaskListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RainbowTaskListReq
         * @static
         * @param {proto.IMsg_RainbowTaskListReq} m Msg_RainbowTaskListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RainbowTaskListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_RainbowTaskListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RainbowTaskListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RainbowTaskListReq} Msg_RainbowTaskListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RainbowTaskListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RainbowTaskListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RainbowTaskListReq;
    })();

    proto.Msg_RainbowTaskListRsp = (function() {

        /**
         * Properties of a Msg_RainbowTaskListRsp.
         * @memberof proto
         * @interface IMsg_RainbowTaskListRsp
         * @property {boolean|null} [bCanUpLv] Msg_RainbowTaskListRsp bCanUpLv
         * @property {number|null} [overUTC] Msg_RainbowTaskListRsp overUTC
         * @property {number|null} [leftAdCount] Msg_RainbowTaskListRsp leftAdCount
         * @property {boolean|null} [bFreeRefreshTask] Msg_RainbowTaskListRsp bFreeRefreshTask
         * @property {Array.<proto.IRainbowInfoData>|null} [taskList] Msg_RainbowTaskListRsp taskList
         */

        /**
         * Constructs a new Msg_RainbowTaskListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RainbowTaskListRsp.
         * @implements IMsg_RainbowTaskListRsp
         * @constructor
         * @param {proto.IMsg_RainbowTaskListRsp=} [p] Properties to set
         */
        function Msg_RainbowTaskListRsp(p) {
            this.taskList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RainbowTaskListRsp bCanUpLv.
         * @member {boolean} bCanUpLv
         * @memberof proto.Msg_RainbowTaskListRsp
         * @instance
         */
        Msg_RainbowTaskListRsp.prototype.bCanUpLv = false;

        /**
         * Msg_RainbowTaskListRsp overUTC.
         * @member {number} overUTC
         * @memberof proto.Msg_RainbowTaskListRsp
         * @instance
         */
        Msg_RainbowTaskListRsp.prototype.overUTC = 0;

        /**
         * Msg_RainbowTaskListRsp leftAdCount.
         * @member {number} leftAdCount
         * @memberof proto.Msg_RainbowTaskListRsp
         * @instance
         */
        Msg_RainbowTaskListRsp.prototype.leftAdCount = 0;

        /**
         * Msg_RainbowTaskListRsp bFreeRefreshTask.
         * @member {boolean} bFreeRefreshTask
         * @memberof proto.Msg_RainbowTaskListRsp
         * @instance
         */
        Msg_RainbowTaskListRsp.prototype.bFreeRefreshTask = false;

        /**
         * Msg_RainbowTaskListRsp taskList.
         * @member {Array.<proto.IRainbowInfoData>} taskList
         * @memberof proto.Msg_RainbowTaskListRsp
         * @instance
         */
        Msg_RainbowTaskListRsp.prototype.taskList = $util.emptyArray;

        /**
         * Encodes the specified Msg_RainbowTaskListRsp message. Does not implicitly {@link proto.Msg_RainbowTaskListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RainbowTaskListRsp
         * @static
         * @param {proto.IMsg_RainbowTaskListRsp} m Msg_RainbowTaskListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RainbowTaskListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bCanUpLv != null && Object.hasOwnProperty.call(m, "bCanUpLv"))
                w.uint32(8).bool(m.bCanUpLv);
            if (m.overUTC != null && Object.hasOwnProperty.call(m, "overUTC"))
                w.uint32(16).int32(m.overUTC);
            if (m.leftAdCount != null && Object.hasOwnProperty.call(m, "leftAdCount"))
                w.uint32(24).int32(m.leftAdCount);
            if (m.bFreeRefreshTask != null && Object.hasOwnProperty.call(m, "bFreeRefreshTask"))
                w.uint32(32).bool(m.bFreeRefreshTask);
            if (m.taskList != null && m.taskList.length) {
                for (var i = 0; i < m.taskList.length; ++i)
                    $root.proto.RainbowInfoData.encode(m.taskList[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_RainbowTaskListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RainbowTaskListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RainbowTaskListRsp} Msg_RainbowTaskListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RainbowTaskListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RainbowTaskListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bCanUpLv = r.bool();
                    break;
                case 2:
                    m.overUTC = r.int32();
                    break;
                case 3:
                    m.leftAdCount = r.int32();
                    break;
                case 4:
                    m.bFreeRefreshTask = r.bool();
                    break;
                case 5:
                    if (!(m.taskList && m.taskList.length))
                        m.taskList = [];
                    m.taskList.push($root.proto.RainbowInfoData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RainbowTaskListRsp;
    })();

    proto.Msg_UpLvRainbowReq = (function() {

        /**
         * Properties of a Msg_UpLvRainbowReq.
         * @memberof proto
         * @interface IMsg_UpLvRainbowReq
         */

        /**
         * Constructs a new Msg_UpLvRainbowReq.
         * @memberof proto
         * @classdesc Represents a Msg_UpLvRainbowReq.
         * @implements IMsg_UpLvRainbowReq
         * @constructor
         * @param {proto.IMsg_UpLvRainbowReq=} [p] Properties to set
         */
        function Msg_UpLvRainbowReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_UpLvRainbowReq message. Does not implicitly {@link proto.Msg_UpLvRainbowReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_UpLvRainbowReq
         * @static
         * @param {proto.IMsg_UpLvRainbowReq} m Msg_UpLvRainbowReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_UpLvRainbowReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_UpLvRainbowReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_UpLvRainbowReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_UpLvRainbowReq} Msg_UpLvRainbowReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_UpLvRainbowReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_UpLvRainbowReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_UpLvRainbowReq;
    })();

    proto.Msg_UpLvRainbowRsp = (function() {

        /**
         * Properties of a Msg_UpLvRainbowRsp.
         * @memberof proto
         * @interface IMsg_UpLvRainbowRsp
         * @property {proto.Msg_UpLvRainbowRsp.ErrorCode|null} [result] Msg_UpLvRainbowRsp result
         */

        /**
         * Constructs a new Msg_UpLvRainbowRsp.
         * @memberof proto
         * @classdesc Represents a Msg_UpLvRainbowRsp.
         * @implements IMsg_UpLvRainbowRsp
         * @constructor
         * @param {proto.IMsg_UpLvRainbowRsp=} [p] Properties to set
         */
        function Msg_UpLvRainbowRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_UpLvRainbowRsp result.
         * @member {proto.Msg_UpLvRainbowRsp.ErrorCode} result
         * @memberof proto.Msg_UpLvRainbowRsp
         * @instance
         */
        Msg_UpLvRainbowRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_UpLvRainbowRsp message. Does not implicitly {@link proto.Msg_UpLvRainbowRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_UpLvRainbowRsp
         * @static
         * @param {proto.IMsg_UpLvRainbowRsp} m Msg_UpLvRainbowRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_UpLvRainbowRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_UpLvRainbowRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_UpLvRainbowRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_UpLvRainbowRsp} Msg_UpLvRainbowRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_UpLvRainbowRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_UpLvRainbowRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_UpLvRainbowRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} DiamondNotEnough=1 DiamondNotEnough value
         * @property {number} AlreadyUpLv=2 AlreadyUpLv value
         * @property {number} TaskOver=3 TaskOver value
         * @property {number} BanLvUpTime=4 BanLvUpTime value
         */
        Msg_UpLvRainbowRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "DiamondNotEnough"] = 1;
            values[valuesById[2] = "AlreadyUpLv"] = 2;
            values[valuesById[3] = "TaskOver"] = 3;
            values[valuesById[4] = "BanLvUpTime"] = 4;
            return values;
        })();

        return Msg_UpLvRainbowRsp;
    })();

    proto.Msg_ImmFinishRainbowTaskReq = (function() {

        /**
         * Properties of a Msg_ImmFinishRainbowTaskReq.
         * @memberof proto
         * @interface IMsg_ImmFinishRainbowTaskReq
         * @property {string|null} [taskUUID] Msg_ImmFinishRainbowTaskReq taskUUID
         * @property {boolean|null} [bCostGold] Msg_ImmFinishRainbowTaskReq bCostGold
         */

        /**
         * Constructs a new Msg_ImmFinishRainbowTaskReq.
         * @memberof proto
         * @classdesc Represents a Msg_ImmFinishRainbowTaskReq.
         * @implements IMsg_ImmFinishRainbowTaskReq
         * @constructor
         * @param {proto.IMsg_ImmFinishRainbowTaskReq=} [p] Properties to set
         */
        function Msg_ImmFinishRainbowTaskReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ImmFinishRainbowTaskReq taskUUID.
         * @member {string} taskUUID
         * @memberof proto.Msg_ImmFinishRainbowTaskReq
         * @instance
         */
        Msg_ImmFinishRainbowTaskReq.prototype.taskUUID = "";

        /**
         * Msg_ImmFinishRainbowTaskReq bCostGold.
         * @member {boolean} bCostGold
         * @memberof proto.Msg_ImmFinishRainbowTaskReq
         * @instance
         */
        Msg_ImmFinishRainbowTaskReq.prototype.bCostGold = false;

        /**
         * Encodes the specified Msg_ImmFinishRainbowTaskReq message. Does not implicitly {@link proto.Msg_ImmFinishRainbowTaskReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ImmFinishRainbowTaskReq
         * @static
         * @param {proto.IMsg_ImmFinishRainbowTaskReq} m Msg_ImmFinishRainbowTaskReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ImmFinishRainbowTaskReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskUUID != null && Object.hasOwnProperty.call(m, "taskUUID"))
                w.uint32(10).string(m.taskUUID);
            if (m.bCostGold != null && Object.hasOwnProperty.call(m, "bCostGold"))
                w.uint32(16).bool(m.bCostGold);
            return w;
        };

        /**
         * Decodes a Msg_ImmFinishRainbowTaskReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ImmFinishRainbowTaskReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ImmFinishRainbowTaskReq} Msg_ImmFinishRainbowTaskReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ImmFinishRainbowTaskReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ImmFinishRainbowTaskReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskUUID = r.string();
                    break;
                case 2:
                    m.bCostGold = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ImmFinishRainbowTaskReq;
    })();

    proto.Msg_ImmFinishRainbowTaskRsp = (function() {

        /**
         * Properties of a Msg_ImmFinishRainbowTaskRsp.
         * @memberof proto
         * @interface IMsg_ImmFinishRainbowTaskRsp
         * @property {proto.Msg_ImmFinishRainbowTaskRsp.ErrorCode|null} [result] Msg_ImmFinishRainbowTaskRsp result
         * @property {string|null} [taskUUID] Msg_ImmFinishRainbowTaskRsp taskUUID
         * @property {proto.IRainbowTaskPushData|null} [data] Msg_ImmFinishRainbowTaskRsp data
         */

        /**
         * Constructs a new Msg_ImmFinishRainbowTaskRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ImmFinishRainbowTaskRsp.
         * @implements IMsg_ImmFinishRainbowTaskRsp
         * @constructor
         * @param {proto.IMsg_ImmFinishRainbowTaskRsp=} [p] Properties to set
         */
        function Msg_ImmFinishRainbowTaskRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ImmFinishRainbowTaskRsp result.
         * @member {proto.Msg_ImmFinishRainbowTaskRsp.ErrorCode} result
         * @memberof proto.Msg_ImmFinishRainbowTaskRsp
         * @instance
         */
        Msg_ImmFinishRainbowTaskRsp.prototype.result = 0;

        /**
         * Msg_ImmFinishRainbowTaskRsp taskUUID.
         * @member {string} taskUUID
         * @memberof proto.Msg_ImmFinishRainbowTaskRsp
         * @instance
         */
        Msg_ImmFinishRainbowTaskRsp.prototype.taskUUID = "";

        /**
         * Msg_ImmFinishRainbowTaskRsp data.
         * @member {proto.IRainbowTaskPushData|null|undefined} data
         * @memberof proto.Msg_ImmFinishRainbowTaskRsp
         * @instance
         */
        Msg_ImmFinishRainbowTaskRsp.prototype.data = null;

        /**
         * Encodes the specified Msg_ImmFinishRainbowTaskRsp message. Does not implicitly {@link proto.Msg_ImmFinishRainbowTaskRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ImmFinishRainbowTaskRsp
         * @static
         * @param {proto.IMsg_ImmFinishRainbowTaskRsp} m Msg_ImmFinishRainbowTaskRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ImmFinishRainbowTaskRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.taskUUID != null && Object.hasOwnProperty.call(m, "taskUUID"))
                w.uint32(18).string(m.taskUUID);
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.proto.RainbowTaskPushData.encode(m.data, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_ImmFinishRainbowTaskRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ImmFinishRainbowTaskRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ImmFinishRainbowTaskRsp} Msg_ImmFinishRainbowTaskRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ImmFinishRainbowTaskRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ImmFinishRainbowTaskRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.taskUUID = r.string();
                    break;
                case 3:
                    m.data = $root.proto.RainbowTaskPushData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ImmFinishRainbowTaskRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} DiamondNotEnough=1 DiamondNotEnough value
         * @property {number} GoldNotEnough=2 GoldNotEnough value
         * @property {number} TaskInExistence=3 TaskInExistence value
         * @property {number} TaskOver=4 TaskOver value
         * @property {number} TaskUnOpen=5 TaskUnOpen value
         */
        Msg_ImmFinishRainbowTaskRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "DiamondNotEnough"] = 1;
            values[valuesById[2] = "GoldNotEnough"] = 2;
            values[valuesById[3] = "TaskInExistence"] = 3;
            values[valuesById[4] = "TaskOver"] = 4;
            values[valuesById[5] = "TaskUnOpen"] = 5;
            return values;
        })();

        return Msg_ImmFinishRainbowTaskRsp;
    })();

    proto.Msg_RefreshRainbowTaskReq = (function() {

        /**
         * Properties of a Msg_RefreshRainbowTaskReq.
         * @memberof proto
         * @interface IMsg_RefreshRainbowTaskReq
         * @property {string|null} [taskUUID] Msg_RefreshRainbowTaskReq taskUUID
         * @property {number|null} [taskStarLv] Msg_RefreshRainbowTaskReq taskStarLv
         */

        /**
         * Constructs a new Msg_RefreshRainbowTaskReq.
         * @memberof proto
         * @classdesc Represents a Msg_RefreshRainbowTaskReq.
         * @implements IMsg_RefreshRainbowTaskReq
         * @constructor
         * @param {proto.IMsg_RefreshRainbowTaskReq=} [p] Properties to set
         */
        function Msg_RefreshRainbowTaskReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RefreshRainbowTaskReq taskUUID.
         * @member {string} taskUUID
         * @memberof proto.Msg_RefreshRainbowTaskReq
         * @instance
         */
        Msg_RefreshRainbowTaskReq.prototype.taskUUID = "";

        /**
         * Msg_RefreshRainbowTaskReq taskStarLv.
         * @member {number} taskStarLv
         * @memberof proto.Msg_RefreshRainbowTaskReq
         * @instance
         */
        Msg_RefreshRainbowTaskReq.prototype.taskStarLv = 0;

        /**
         * Encodes the specified Msg_RefreshRainbowTaskReq message. Does not implicitly {@link proto.Msg_RefreshRainbowTaskReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RefreshRainbowTaskReq
         * @static
         * @param {proto.IMsg_RefreshRainbowTaskReq} m Msg_RefreshRainbowTaskReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RefreshRainbowTaskReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskUUID != null && Object.hasOwnProperty.call(m, "taskUUID"))
                w.uint32(10).string(m.taskUUID);
            if (m.taskStarLv != null && Object.hasOwnProperty.call(m, "taskStarLv"))
                w.uint32(16).int32(m.taskStarLv);
            return w;
        };

        /**
         * Decodes a Msg_RefreshRainbowTaskReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RefreshRainbowTaskReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RefreshRainbowTaskReq} Msg_RefreshRainbowTaskReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RefreshRainbowTaskReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RefreshRainbowTaskReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskUUID = r.string();
                    break;
                case 2:
                    m.taskStarLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RefreshRainbowTaskReq;
    })();

    proto.Msg_RefreshRainbowTaskRsp = (function() {

        /**
         * Properties of a Msg_RefreshRainbowTaskRsp.
         * @memberof proto
         * @interface IMsg_RefreshRainbowTaskRsp
         * @property {proto.Msg_RefreshRainbowTaskRsp.ErrorCode|null} [result] Msg_RefreshRainbowTaskRsp result
         * @property {proto.IRainbowInfoData|null} [newTask] Msg_RefreshRainbowTaskRsp newTask
         * @property {number|null} [taskStarLv] Msg_RefreshRainbowTaskRsp taskStarLv
         */

        /**
         * Constructs a new Msg_RefreshRainbowTaskRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RefreshRainbowTaskRsp.
         * @implements IMsg_RefreshRainbowTaskRsp
         * @constructor
         * @param {proto.IMsg_RefreshRainbowTaskRsp=} [p] Properties to set
         */
        function Msg_RefreshRainbowTaskRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RefreshRainbowTaskRsp result.
         * @member {proto.Msg_RefreshRainbowTaskRsp.ErrorCode} result
         * @memberof proto.Msg_RefreshRainbowTaskRsp
         * @instance
         */
        Msg_RefreshRainbowTaskRsp.prototype.result = 0;

        /**
         * Msg_RefreshRainbowTaskRsp newTask.
         * @member {proto.IRainbowInfoData|null|undefined} newTask
         * @memberof proto.Msg_RefreshRainbowTaskRsp
         * @instance
         */
        Msg_RefreshRainbowTaskRsp.prototype.newTask = null;

        /**
         * Msg_RefreshRainbowTaskRsp taskStarLv.
         * @member {number} taskStarLv
         * @memberof proto.Msg_RefreshRainbowTaskRsp
         * @instance
         */
        Msg_RefreshRainbowTaskRsp.prototype.taskStarLv = 0;

        /**
         * Encodes the specified Msg_RefreshRainbowTaskRsp message. Does not implicitly {@link proto.Msg_RefreshRainbowTaskRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RefreshRainbowTaskRsp
         * @static
         * @param {proto.IMsg_RefreshRainbowTaskRsp} m Msg_RefreshRainbowTaskRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RefreshRainbowTaskRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.newTask != null && Object.hasOwnProperty.call(m, "newTask"))
                $root.proto.RainbowInfoData.encode(m.newTask, w.uint32(18).fork()).ldelim();
            if (m.taskStarLv != null && Object.hasOwnProperty.call(m, "taskStarLv"))
                w.uint32(24).int32(m.taskStarLv);
            return w;
        };

        /**
         * Decodes a Msg_RefreshRainbowTaskRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RefreshRainbowTaskRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RefreshRainbowTaskRsp} Msg_RefreshRainbowTaskRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RefreshRainbowTaskRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RefreshRainbowTaskRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.newTask = $root.proto.RainbowInfoData.decode(r, r.uint32());
                    break;
                case 3:
                    m.taskStarLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_RefreshRainbowTaskRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TaskInExistence=1 TaskInExistence value
         * @property {number} TaskOver=2 TaskOver value
         * @property {number} TaskUnOpen=3 TaskUnOpen value
         */
        Msg_RefreshRainbowTaskRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TaskInExistence"] = 1;
            values[valuesById[2] = "TaskOver"] = 2;
            values[valuesById[3] = "TaskUnOpen"] = 3;
            return values;
        })();

        return Msg_RefreshRainbowTaskRsp;
    })();

    proto.Msg_ReceiveRainbowRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveRainbowRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveRainbowRewardReq
         * @property {number|null} [taskStarLv] Msg_ReceiveRainbowRewardReq taskStarLv
         * @property {boolean|null} [bLeftReward] Msg_ReceiveRainbowRewardReq bLeftReward
         */

        /**
         * Constructs a new Msg_ReceiveRainbowRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveRainbowRewardReq.
         * @implements IMsg_ReceiveRainbowRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveRainbowRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveRainbowRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveRainbowRewardReq taskStarLv.
         * @member {number} taskStarLv
         * @memberof proto.Msg_ReceiveRainbowRewardReq
         * @instance
         */
        Msg_ReceiveRainbowRewardReq.prototype.taskStarLv = 0;

        /**
         * Msg_ReceiveRainbowRewardReq bLeftReward.
         * @member {boolean} bLeftReward
         * @memberof proto.Msg_ReceiveRainbowRewardReq
         * @instance
         */
        Msg_ReceiveRainbowRewardReq.prototype.bLeftReward = false;

        /**
         * Encodes the specified Msg_ReceiveRainbowRewardReq message. Does not implicitly {@link proto.Msg_ReceiveRainbowRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveRainbowRewardReq
         * @static
         * @param {proto.IMsg_ReceiveRainbowRewardReq} m Msg_ReceiveRainbowRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveRainbowRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskStarLv != null && Object.hasOwnProperty.call(m, "taskStarLv"))
                w.uint32(8).int32(m.taskStarLv);
            if (m.bLeftReward != null && Object.hasOwnProperty.call(m, "bLeftReward"))
                w.uint32(16).bool(m.bLeftReward);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveRainbowRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveRainbowRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveRainbowRewardReq} Msg_ReceiveRainbowRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveRainbowRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveRainbowRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskStarLv = r.int32();
                    break;
                case 2:
                    m.bLeftReward = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveRainbowRewardReq;
    })();

    proto.Msg_ReceiveRainbowRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveRainbowRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveRainbowRewardRsp
         * @property {proto.Msg_ReceiveRainbowRewardRsp.ErrorCode|null} [result] Msg_ReceiveRainbowRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ReceiveRainbowRewardRsp reward
         * @property {number|null} [taskStarLv] Msg_ReceiveRainbowRewardRsp taskStarLv
         * @property {boolean|null} [bLeftReward] Msg_ReceiveRainbowRewardRsp bLeftReward
         */

        /**
         * Constructs a new Msg_ReceiveRainbowRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveRainbowRewardRsp.
         * @implements IMsg_ReceiveRainbowRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveRainbowRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveRainbowRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveRainbowRewardRsp result.
         * @member {proto.Msg_ReceiveRainbowRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveRainbowRewardRsp
         * @instance
         */
        Msg_ReceiveRainbowRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveRainbowRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ReceiveRainbowRewardRsp
         * @instance
         */
        Msg_ReceiveRainbowRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Msg_ReceiveRainbowRewardRsp taskStarLv.
         * @member {number} taskStarLv
         * @memberof proto.Msg_ReceiveRainbowRewardRsp
         * @instance
         */
        Msg_ReceiveRainbowRewardRsp.prototype.taskStarLv = 0;

        /**
         * Msg_ReceiveRainbowRewardRsp bLeftReward.
         * @member {boolean} bLeftReward
         * @memberof proto.Msg_ReceiveRainbowRewardRsp
         * @instance
         */
        Msg_ReceiveRainbowRewardRsp.prototype.bLeftReward = false;

        /**
         * Encodes the specified Msg_ReceiveRainbowRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveRainbowRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveRainbowRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveRainbowRewardRsp} m Msg_ReceiveRainbowRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveRainbowRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            if (m.taskStarLv != null && Object.hasOwnProperty.call(m, "taskStarLv"))
                w.uint32(24).int32(m.taskStarLv);
            if (m.bLeftReward != null && Object.hasOwnProperty.call(m, "bLeftReward"))
                w.uint32(32).bool(m.bLeftReward);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveRainbowRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveRainbowRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveRainbowRewardRsp} Msg_ReceiveRainbowRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveRainbowRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveRainbowRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.taskStarLv = r.int32();
                    break;
                case 4:
                    m.bLeftReward = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveRainbowRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TaskInExistence=1 TaskInExistence value
         * @property {number} TaskOver=2 TaskOver value
         * @property {number} TaskUnOpen=3 TaskUnOpen value
         * @property {number} AlreadyReceived=4 AlreadyReceived value
         * @property {number} NotUpLvTask=5 NotUpLvTask value
         */
        Msg_ReceiveRainbowRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TaskInExistence"] = 1;
            values[valuesById[2] = "TaskOver"] = 2;
            values[valuesById[3] = "TaskUnOpen"] = 3;
            values[valuesById[4] = "AlreadyReceived"] = 4;
            values[valuesById[5] = "NotUpLvTask"] = 5;
            return values;
        })();

        return Msg_ReceiveRainbowRewardRsp;
    })();

    proto.RainbowTaskPushData = (function() {

        /**
         * Properties of a RainbowTaskPushData.
         * @memberof proto
         * @interface IRainbowTaskPushData
         * @property {proto.ITaskData|null} [data] RainbowTaskPushData data
         * @property {number|null} [taskStarLv] RainbowTaskPushData taskStarLv
         */

        /**
         * Constructs a new RainbowTaskPushData.
         * @memberof proto
         * @classdesc Represents a RainbowTaskPushData.
         * @implements IRainbowTaskPushData
         * @constructor
         * @param {proto.IRainbowTaskPushData=} [p] Properties to set
         */
        function RainbowTaskPushData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * RainbowTaskPushData data.
         * @member {proto.ITaskData|null|undefined} data
         * @memberof proto.RainbowTaskPushData
         * @instance
         */
        RainbowTaskPushData.prototype.data = null;

        /**
         * RainbowTaskPushData taskStarLv.
         * @member {number} taskStarLv
         * @memberof proto.RainbowTaskPushData
         * @instance
         */
        RainbowTaskPushData.prototype.taskStarLv = 0;

        /**
         * Encodes the specified RainbowTaskPushData message. Does not implicitly {@link proto.RainbowTaskPushData.verify|verify} messages.
         * @function encode
         * @memberof proto.RainbowTaskPushData
         * @static
         * @param {proto.IRainbowTaskPushData} m RainbowTaskPushData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RainbowTaskPushData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.proto.TaskData.encode(m.data, w.uint32(10).fork()).ldelim();
            if (m.taskStarLv != null && Object.hasOwnProperty.call(m, "taskStarLv"))
                w.uint32(16).int32(m.taskStarLv);
            return w;
        };

        /**
         * Decodes a RainbowTaskPushData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.RainbowTaskPushData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.RainbowTaskPushData} RainbowTaskPushData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RainbowTaskPushData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.RainbowTaskPushData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.data = $root.proto.TaskData.decode(r, r.uint32());
                    break;
                case 2:
                    m.taskStarLv = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return RainbowTaskPushData;
    })();

    proto.Msg_PushRainbowTaskUpdate = (function() {

        /**
         * Properties of a Msg_PushRainbowTaskUpdate.
         * @memberof proto
         * @interface IMsg_PushRainbowTaskUpdate
         * @property {proto.IRainbowTaskPushData|null} [data] Msg_PushRainbowTaskUpdate data
         */

        /**
         * Constructs a new Msg_PushRainbowTaskUpdate.
         * @memberof proto
         * @classdesc Represents a Msg_PushRainbowTaskUpdate.
         * @implements IMsg_PushRainbowTaskUpdate
         * @constructor
         * @param {proto.IMsg_PushRainbowTaskUpdate=} [p] Properties to set
         */
        function Msg_PushRainbowTaskUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushRainbowTaskUpdate data.
         * @member {proto.IRainbowTaskPushData|null|undefined} data
         * @memberof proto.Msg_PushRainbowTaskUpdate
         * @instance
         */
        Msg_PushRainbowTaskUpdate.prototype.data = null;

        /**
         * Encodes the specified Msg_PushRainbowTaskUpdate message. Does not implicitly {@link proto.Msg_PushRainbowTaskUpdate.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushRainbowTaskUpdate
         * @static
         * @param {proto.IMsg_PushRainbowTaskUpdate} m Msg_PushRainbowTaskUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushRainbowTaskUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.proto.RainbowTaskPushData.encode(m.data, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_PushRainbowTaskUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushRainbowTaskUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushRainbowTaskUpdate} Msg_PushRainbowTaskUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushRainbowTaskUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushRainbowTaskUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.data = $root.proto.RainbowTaskPushData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushRainbowTaskUpdate;
    })();

    proto.Msg_PushRainbowTaskExpireRefresh = (function() {

        /**
         * Properties of a Msg_PushRainbowTaskExpireRefresh.
         * @memberof proto
         * @interface IMsg_PushRainbowTaskExpireRefresh
         * @property {proto.ITaskData|null} [runningTaskData] Msg_PushRainbowTaskExpireRefresh runningTaskData
         */

        /**
         * Constructs a new Msg_PushRainbowTaskExpireRefresh.
         * @memberof proto
         * @classdesc Represents a Msg_PushRainbowTaskExpireRefresh.
         * @implements IMsg_PushRainbowTaskExpireRefresh
         * @constructor
         * @param {proto.IMsg_PushRainbowTaskExpireRefresh=} [p] Properties to set
         */
        function Msg_PushRainbowTaskExpireRefresh(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushRainbowTaskExpireRefresh runningTaskData.
         * @member {proto.ITaskData|null|undefined} runningTaskData
         * @memberof proto.Msg_PushRainbowTaskExpireRefresh
         * @instance
         */
        Msg_PushRainbowTaskExpireRefresh.prototype.runningTaskData = null;

        /**
         * Encodes the specified Msg_PushRainbowTaskExpireRefresh message. Does not implicitly {@link proto.Msg_PushRainbowTaskExpireRefresh.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushRainbowTaskExpireRefresh
         * @static
         * @param {proto.IMsg_PushRainbowTaskExpireRefresh} m Msg_PushRainbowTaskExpireRefresh message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushRainbowTaskExpireRefresh.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.runningTaskData != null && Object.hasOwnProperty.call(m, "runningTaskData"))
                $root.proto.TaskData.encode(m.runningTaskData, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_PushRainbowTaskExpireRefresh message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushRainbowTaskExpireRefresh
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushRainbowTaskExpireRefresh} Msg_PushRainbowTaskExpireRefresh
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushRainbowTaskExpireRefresh.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushRainbowTaskExpireRefresh();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.runningTaskData = $root.proto.TaskData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushRainbowTaskExpireRefresh;
    })();

    proto.Msg_PushRainbowTaskRedDotStatus = (function() {

        /**
         * Properties of a Msg_PushRainbowTaskRedDotStatus.
         * @memberof proto
         * @interface IMsg_PushRainbowTaskRedDotStatus
         * @property {boolean|null} [bHave] Msg_PushRainbowTaskRedDotStatus bHave
         */

        /**
         * Constructs a new Msg_PushRainbowTaskRedDotStatus.
         * @memberof proto
         * @classdesc Represents a Msg_PushRainbowTaskRedDotStatus.
         * @implements IMsg_PushRainbowTaskRedDotStatus
         * @constructor
         * @param {proto.IMsg_PushRainbowTaskRedDotStatus=} [p] Properties to set
         */
        function Msg_PushRainbowTaskRedDotStatus(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushRainbowTaskRedDotStatus bHave.
         * @member {boolean} bHave
         * @memberof proto.Msg_PushRainbowTaskRedDotStatus
         * @instance
         */
        Msg_PushRainbowTaskRedDotStatus.prototype.bHave = false;

        /**
         * Encodes the specified Msg_PushRainbowTaskRedDotStatus message. Does not implicitly {@link proto.Msg_PushRainbowTaskRedDotStatus.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushRainbowTaskRedDotStatus
         * @static
         * @param {proto.IMsg_PushRainbowTaskRedDotStatus} m Msg_PushRainbowTaskRedDotStatus message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushRainbowTaskRedDotStatus.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bHave != null && Object.hasOwnProperty.call(m, "bHave"))
                w.uint32(8).bool(m.bHave);
            return w;
        };

        /**
         * Decodes a Msg_PushRainbowTaskRedDotStatus message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushRainbowTaskRedDotStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushRainbowTaskRedDotStatus} Msg_PushRainbowTaskRedDotStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushRainbowTaskRedDotStatus.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushRainbowTaskRedDotStatus();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bHave = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushRainbowTaskRedDotStatus;
    })();

    proto.SevenDaySignInDBData = (function() {

        /**
         * Properties of a SevenDaySignInDBData.
         * @memberof proto
         * @interface ISevenDaySignInDBData
         * @property {Array.<proto.ISevenDaySignInData>|null} [rewardData] SevenDaySignInDBData rewardData
         * @property {number|null} [curLoginDay] SevenDaySignInDBData curLoginDay
         * @property {number|Long|null} [startTime] SevenDaySignInDBData startTime
         * @property {number|Long|null} [endTime] SevenDaySignInDBData endTime
         * @property {number|null} [lastSignInTime] SevenDaySignInDBData lastSignInTime
         */

        /**
         * Constructs a new SevenDaySignInDBData.
         * @memberof proto
         * @classdesc Represents a SevenDaySignInDBData.
         * @implements ISevenDaySignInDBData
         * @constructor
         * @param {proto.ISevenDaySignInDBData=} [p] Properties to set
         */
        function SevenDaySignInDBData(p) {
            this.rewardData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * SevenDaySignInDBData rewardData.
         * @member {Array.<proto.ISevenDaySignInData>} rewardData
         * @memberof proto.SevenDaySignInDBData
         * @instance
         */
        SevenDaySignInDBData.prototype.rewardData = $util.emptyArray;

        /**
         * SevenDaySignInDBData curLoginDay.
         * @member {number} curLoginDay
         * @memberof proto.SevenDaySignInDBData
         * @instance
         */
        SevenDaySignInDBData.prototype.curLoginDay = 0;

        /**
         * SevenDaySignInDBData startTime.
         * @member {number|Long} startTime
         * @memberof proto.SevenDaySignInDBData
         * @instance
         */
        SevenDaySignInDBData.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SevenDaySignInDBData endTime.
         * @member {number|Long} endTime
         * @memberof proto.SevenDaySignInDBData
         * @instance
         */
        SevenDaySignInDBData.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SevenDaySignInDBData lastSignInTime.
         * @member {number} lastSignInTime
         * @memberof proto.SevenDaySignInDBData
         * @instance
         */
        SevenDaySignInDBData.prototype.lastSignInTime = 0;

        /**
         * Encodes the specified SevenDaySignInDBData message. Does not implicitly {@link proto.SevenDaySignInDBData.verify|verify} messages.
         * @function encode
         * @memberof proto.SevenDaySignInDBData
         * @static
         * @param {proto.ISevenDaySignInDBData} m SevenDaySignInDBData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SevenDaySignInDBData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardData != null && m.rewardData.length) {
                for (var i = 0; i < m.rewardData.length; ++i)
                    $root.proto.SevenDaySignInData.encode(m.rewardData[i], w.uint32(10).fork()).ldelim();
            }
            if (m.curLoginDay != null && Object.hasOwnProperty.call(m, "curLoginDay"))
                w.uint32(16).int32(m.curLoginDay);
            if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime"))
                w.uint32(24).int64(m.startTime);
            if (m.endTime != null && Object.hasOwnProperty.call(m, "endTime"))
                w.uint32(32).int64(m.endTime);
            if (m.lastSignInTime != null && Object.hasOwnProperty.call(m, "lastSignInTime"))
                w.uint32(40).int32(m.lastSignInTime);
            return w;
        };

        /**
         * Decodes a SevenDaySignInDBData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.SevenDaySignInDBData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.SevenDaySignInDBData} SevenDaySignInDBData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SevenDaySignInDBData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SevenDaySignInDBData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rewardData && m.rewardData.length))
                        m.rewardData = [];
                    m.rewardData.push($root.proto.SevenDaySignInData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.curLoginDay = r.int32();
                    break;
                case 3:
                    m.startTime = r.int64();
                    break;
                case 4:
                    m.endTime = r.int64();
                    break;
                case 5:
                    m.lastSignInTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SevenDaySignInDBData;
    })();

    proto.SevenDaySignInData = (function() {

        /**
         * Properties of a SevenDaySignInData.
         * @memberof proto
         * @interface ISevenDaySignInData
         * @property {proto.IRewardSimpleInfo|null} [rewardInfo] SevenDaySignInData rewardInfo
         * @property {boolean|null} [bReceived] SevenDaySignInData bReceived
         */

        /**
         * Constructs a new SevenDaySignInData.
         * @memberof proto
         * @classdesc Represents a SevenDaySignInData.
         * @implements ISevenDaySignInData
         * @constructor
         * @param {proto.ISevenDaySignInData=} [p] Properties to set
         */
        function SevenDaySignInData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * SevenDaySignInData rewardInfo.
         * @member {proto.IRewardSimpleInfo|null|undefined} rewardInfo
         * @memberof proto.SevenDaySignInData
         * @instance
         */
        SevenDaySignInData.prototype.rewardInfo = null;

        /**
         * SevenDaySignInData bReceived.
         * @member {boolean} bReceived
         * @memberof proto.SevenDaySignInData
         * @instance
         */
        SevenDaySignInData.prototype.bReceived = false;

        /**
         * Encodes the specified SevenDaySignInData message. Does not implicitly {@link proto.SevenDaySignInData.verify|verify} messages.
         * @function encode
         * @memberof proto.SevenDaySignInData
         * @static
         * @param {proto.ISevenDaySignInData} m SevenDaySignInData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SevenDaySignInData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardInfo != null && Object.hasOwnProperty.call(m, "rewardInfo"))
                $root.proto.RewardSimpleInfo.encode(m.rewardInfo, w.uint32(10).fork()).ldelim();
            if (m.bReceived != null && Object.hasOwnProperty.call(m, "bReceived"))
                w.uint32(16).bool(m.bReceived);
            return w;
        };

        /**
         * Decodes a SevenDaySignInData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.SevenDaySignInData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.SevenDaySignInData} SevenDaySignInData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SevenDaySignInData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SevenDaySignInData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardInfo = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.bReceived = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SevenDaySignInData;
    })();

    proto.Msg_PushSevenDaySignInData = (function() {

        /**
         * Properties of a Msg_PushSevenDaySignInData.
         * @memberof proto
         * @interface IMsg_PushSevenDaySignInData
         * @property {Array.<proto.ISevenDaySignInData>|null} [actDataList] Msg_PushSevenDaySignInData actDataList
         * @property {number|null} [curLoginDay] Msg_PushSevenDaySignInData curLoginDay
         * @property {number|Long|null} [startTime] Msg_PushSevenDaySignInData startTime
         * @property {number|Long|null} [overTimes] Msg_PushSevenDaySignInData overTimes
         */

        /**
         * Constructs a new Msg_PushSevenDaySignInData.
         * @memberof proto
         * @classdesc Represents a Msg_PushSevenDaySignInData.
         * @implements IMsg_PushSevenDaySignInData
         * @constructor
         * @param {proto.IMsg_PushSevenDaySignInData=} [p] Properties to set
         */
        function Msg_PushSevenDaySignInData(p) {
            this.actDataList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushSevenDaySignInData actDataList.
         * @member {Array.<proto.ISevenDaySignInData>} actDataList
         * @memberof proto.Msg_PushSevenDaySignInData
         * @instance
         */
        Msg_PushSevenDaySignInData.prototype.actDataList = $util.emptyArray;

        /**
         * Msg_PushSevenDaySignInData curLoginDay.
         * @member {number} curLoginDay
         * @memberof proto.Msg_PushSevenDaySignInData
         * @instance
         */
        Msg_PushSevenDaySignInData.prototype.curLoginDay = 0;

        /**
         * Msg_PushSevenDaySignInData startTime.
         * @member {number|Long} startTime
         * @memberof proto.Msg_PushSevenDaySignInData
         * @instance
         */
        Msg_PushSevenDaySignInData.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Msg_PushSevenDaySignInData overTimes.
         * @member {number|Long} overTimes
         * @memberof proto.Msg_PushSevenDaySignInData
         * @instance
         */
        Msg_PushSevenDaySignInData.prototype.overTimes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified Msg_PushSevenDaySignInData message. Does not implicitly {@link proto.Msg_PushSevenDaySignInData.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushSevenDaySignInData
         * @static
         * @param {proto.IMsg_PushSevenDaySignInData} m Msg_PushSevenDaySignInData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushSevenDaySignInData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.actDataList != null && m.actDataList.length) {
                for (var i = 0; i < m.actDataList.length; ++i)
                    $root.proto.SevenDaySignInData.encode(m.actDataList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.curLoginDay != null && Object.hasOwnProperty.call(m, "curLoginDay"))
                w.uint32(16).int32(m.curLoginDay);
            if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime"))
                w.uint32(24).int64(m.startTime);
            if (m.overTimes != null && Object.hasOwnProperty.call(m, "overTimes"))
                w.uint32(32).int64(m.overTimes);
            return w;
        };

        /**
         * Decodes a Msg_PushSevenDaySignInData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushSevenDaySignInData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushSevenDaySignInData} Msg_PushSevenDaySignInData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushSevenDaySignInData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushSevenDaySignInData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.actDataList && m.actDataList.length))
                        m.actDataList = [];
                    m.actDataList.push($root.proto.SevenDaySignInData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.curLoginDay = r.int32();
                    break;
                case 3:
                    m.startTime = r.int64();
                    break;
                case 4:
                    m.overTimes = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushSevenDaySignInData;
    })();

    proto.Msg_ReceiveSevenDaySignInRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveSevenDaySignInRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveSevenDaySignInRewardReq
         * @property {number|null} [day] Msg_ReceiveSevenDaySignInRewardReq day
         */

        /**
         * Constructs a new Msg_ReceiveSevenDaySignInRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveSevenDaySignInRewardReq.
         * @implements IMsg_ReceiveSevenDaySignInRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveSevenDaySignInRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveSevenDaySignInRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveSevenDaySignInRewardReq day.
         * @member {number} day
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardReq
         * @instance
         */
        Msg_ReceiveSevenDaySignInRewardReq.prototype.day = 0;

        /**
         * Encodes the specified Msg_ReceiveSevenDaySignInRewardReq message. Does not implicitly {@link proto.Msg_ReceiveSevenDaySignInRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardReq
         * @static
         * @param {proto.IMsg_ReceiveSevenDaySignInRewardReq} m Msg_ReceiveSevenDaySignInRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveSevenDaySignInRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.day != null && Object.hasOwnProperty.call(m, "day"))
                w.uint32(8).int32(m.day);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveSevenDaySignInRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveSevenDaySignInRewardReq} Msg_ReceiveSevenDaySignInRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveSevenDaySignInRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveSevenDaySignInRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.day = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveSevenDaySignInRewardReq;
    })();

    proto.Msg_ReceiveSevenDaySignInRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveSevenDaySignInRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveSevenDaySignInRewardRsp
         * @property {proto.Msg_ReceiveSevenDaySignInRewardRsp.ErrorCode|null} [result] Msg_ReceiveSevenDaySignInRewardRsp result
         * @property {number|null} [day] Msg_ReceiveSevenDaySignInRewardRsp day
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewardList] Msg_ReceiveSevenDaySignInRewardRsp rewardList
         */

        /**
         * Constructs a new Msg_ReceiveSevenDaySignInRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveSevenDaySignInRewardRsp.
         * @implements IMsg_ReceiveSevenDaySignInRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveSevenDaySignInRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveSevenDaySignInRewardRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveSevenDaySignInRewardRsp result.
         * @member {proto.Msg_ReceiveSevenDaySignInRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardRsp
         * @instance
         */
        Msg_ReceiveSevenDaySignInRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveSevenDaySignInRewardRsp day.
         * @member {number} day
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardRsp
         * @instance
         */
        Msg_ReceiveSevenDaySignInRewardRsp.prototype.day = 0;

        /**
         * Msg_ReceiveSevenDaySignInRewardRsp rewardList.
         * @member {Array.<proto.IRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardRsp
         * @instance
         */
        Msg_ReceiveSevenDaySignInRewardRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReceiveSevenDaySignInRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveSevenDaySignInRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveSevenDaySignInRewardRsp} m Msg_ReceiveSevenDaySignInRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveSevenDaySignInRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.day != null && Object.hasOwnProperty.call(m, "day"))
                w.uint32(16).int32(m.day);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewardList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReceiveSevenDaySignInRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveSevenDaySignInRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveSevenDaySignInRewardRsp} Msg_ReceiveSevenDaySignInRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveSevenDaySignInRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveSevenDaySignInRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.day = r.int32();
                    break;
                case 3:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveSevenDaySignInRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyReceived=1 AlreadyReceived value
         * @property {number} ActivityOver=2 ActivityOver value
         * @property {number} UnReachReceiveCond=3 UnReachReceiveCond value
         */
        Msg_ReceiveSevenDaySignInRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyReceived"] = 1;
            values[valuesById[2] = "ActivityOver"] = 2;
            values[valuesById[3] = "UnReachReceiveCond"] = 3;
            return values;
        })();

        return Msg_ReceiveSevenDaySignInRewardRsp;
    })();

    proto.GroutTaskData = (function() {

        /**
         * Properties of a GroutTaskData.
         * @memberof proto
         * @interface IGroutTaskData
         * @property {proto.IRewardSimpleInfo|null} [rewardInfo] GroutTaskData rewardInfo
         * @property {proto.ITaskData|null} [taskData] GroutTaskData taskData
         */

        /**
         * Constructs a new GroutTaskData.
         * @memberof proto
         * @classdesc Represents a GroutTaskData.
         * @implements IGroutTaskData
         * @constructor
         * @param {proto.IGroutTaskData=} [p] Properties to set
         */
        function GroutTaskData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GroutTaskData rewardInfo.
         * @member {proto.IRewardSimpleInfo|null|undefined} rewardInfo
         * @memberof proto.GroutTaskData
         * @instance
         */
        GroutTaskData.prototype.rewardInfo = null;

        /**
         * GroutTaskData taskData.
         * @member {proto.ITaskData|null|undefined} taskData
         * @memberof proto.GroutTaskData
         * @instance
         */
        GroutTaskData.prototype.taskData = null;

        /**
         * Encodes the specified GroutTaskData message. Does not implicitly {@link proto.GroutTaskData.verify|verify} messages.
         * @function encode
         * @memberof proto.GroutTaskData
         * @static
         * @param {proto.IGroutTaskData} m GroutTaskData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroutTaskData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardInfo != null && Object.hasOwnProperty.call(m, "rewardInfo"))
                $root.proto.RewardSimpleInfo.encode(m.rewardInfo, w.uint32(10).fork()).ldelim();
            if (m.taskData != null && Object.hasOwnProperty.call(m, "taskData"))
                $root.proto.TaskData.encode(m.taskData, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a GroutTaskData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GroutTaskData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GroutTaskData} GroutTaskData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroutTaskData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GroutTaskData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardInfo = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.taskData = $root.proto.TaskData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GroutTaskData;
    })();

    proto.Msg_GroutTaskListReq = (function() {

        /**
         * Properties of a Msg_GroutTaskListReq.
         * @memberof proto
         * @interface IMsg_GroutTaskListReq
         * @property {number|null} [taskStep] Msg_GroutTaskListReq taskStep
         */

        /**
         * Constructs a new Msg_GroutTaskListReq.
         * @memberof proto
         * @classdesc Represents a Msg_GroutTaskListReq.
         * @implements IMsg_GroutTaskListReq
         * @constructor
         * @param {proto.IMsg_GroutTaskListReq=} [p] Properties to set
         */
        function Msg_GroutTaskListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GroutTaskListReq taskStep.
         * @member {number} taskStep
         * @memberof proto.Msg_GroutTaskListReq
         * @instance
         */
        Msg_GroutTaskListReq.prototype.taskStep = 0;

        /**
         * Encodes the specified Msg_GroutTaskListReq message. Does not implicitly {@link proto.Msg_GroutTaskListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GroutTaskListReq
         * @static
         * @param {proto.IMsg_GroutTaskListReq} m Msg_GroutTaskListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GroutTaskListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskStep != null && Object.hasOwnProperty.call(m, "taskStep"))
                w.uint32(8).int32(m.taskStep);
            return w;
        };

        /**
         * Decodes a Msg_GroutTaskListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GroutTaskListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GroutTaskListReq} Msg_GroutTaskListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GroutTaskListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GroutTaskListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskStep = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GroutTaskListReq;
    })();

    proto.Msg_GroutTaskListRsp = (function() {

        /**
         * Properties of a Msg_GroutTaskListRsp.
         * @memberof proto
         * @interface IMsg_GroutTaskListRsp
         * @property {Array.<proto.IGroutTaskData>|null} [taskDataList] Msg_GroutTaskListRsp taskDataList
         * @property {Array.<boolean>|null} [bReceivedList] Msg_GroutTaskListRsp bReceivedList
         */

        /**
         * Constructs a new Msg_GroutTaskListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GroutTaskListRsp.
         * @implements IMsg_GroutTaskListRsp
         * @constructor
         * @param {proto.IMsg_GroutTaskListRsp=} [p] Properties to set
         */
        function Msg_GroutTaskListRsp(p) {
            this.taskDataList = [];
            this.bReceivedList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GroutTaskListRsp taskDataList.
         * @member {Array.<proto.IGroutTaskData>} taskDataList
         * @memberof proto.Msg_GroutTaskListRsp
         * @instance
         */
        Msg_GroutTaskListRsp.prototype.taskDataList = $util.emptyArray;

        /**
         * Msg_GroutTaskListRsp bReceivedList.
         * @member {Array.<boolean>} bReceivedList
         * @memberof proto.Msg_GroutTaskListRsp
         * @instance
         */
        Msg_GroutTaskListRsp.prototype.bReceivedList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GroutTaskListRsp message. Does not implicitly {@link proto.Msg_GroutTaskListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GroutTaskListRsp
         * @static
         * @param {proto.IMsg_GroutTaskListRsp} m Msg_GroutTaskListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GroutTaskListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskDataList != null && m.taskDataList.length) {
                for (var i = 0; i < m.taskDataList.length; ++i)
                    $root.proto.GroutTaskData.encode(m.taskDataList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.bReceivedList != null && m.bReceivedList.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.bReceivedList.length; ++i)
                    w.bool(m.bReceivedList[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GroutTaskListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GroutTaskListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GroutTaskListRsp} Msg_GroutTaskListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GroutTaskListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GroutTaskListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.taskDataList && m.taskDataList.length))
                        m.taskDataList = [];
                    m.taskDataList.push($root.proto.GroutTaskData.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.bReceivedList && m.bReceivedList.length))
                        m.bReceivedList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.bReceivedList.push(r.bool());
                    } else
                        m.bReceivedList.push(r.bool());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GroutTaskListRsp;
    })();

    proto.Msg_ReceiveGroutTaskRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveGroutTaskRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveGroutTaskRewardReq
         * @property {string|null} [taskUUID] Msg_ReceiveGroutTaskRewardReq taskUUID
         */

        /**
         * Constructs a new Msg_ReceiveGroutTaskRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveGroutTaskRewardReq.
         * @implements IMsg_ReceiveGroutTaskRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveGroutTaskRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveGroutTaskRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveGroutTaskRewardReq taskUUID.
         * @member {string} taskUUID
         * @memberof proto.Msg_ReceiveGroutTaskRewardReq
         * @instance
         */
        Msg_ReceiveGroutTaskRewardReq.prototype.taskUUID = "";

        /**
         * Encodes the specified Msg_ReceiveGroutTaskRewardReq message. Does not implicitly {@link proto.Msg_ReceiveGroutTaskRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveGroutTaskRewardReq
         * @static
         * @param {proto.IMsg_ReceiveGroutTaskRewardReq} m Msg_ReceiveGroutTaskRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveGroutTaskRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskUUID != null && Object.hasOwnProperty.call(m, "taskUUID"))
                w.uint32(10).string(m.taskUUID);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveGroutTaskRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveGroutTaskRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveGroutTaskRewardReq} Msg_ReceiveGroutTaskRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveGroutTaskRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveGroutTaskRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveGroutTaskRewardReq;
    })();

    proto.Msg_ReceiveGroutTaskRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveGroutTaskRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveGroutTaskRewardRsp
         * @property {proto.Msg_ReceiveGroutTaskRewardRsp.ErrorCode|null} [result] Msg_ReceiveGroutTaskRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ReceiveGroutTaskRewardRsp reward
         * @property {string|null} [taskUUID] Msg_ReceiveGroutTaskRewardRsp taskUUID
         */

        /**
         * Constructs a new Msg_ReceiveGroutTaskRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveGroutTaskRewardRsp.
         * @implements IMsg_ReceiveGroutTaskRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveGroutTaskRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveGroutTaskRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveGroutTaskRewardRsp result.
         * @member {proto.Msg_ReceiveGroutTaskRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveGroutTaskRewardRsp
         * @instance
         */
        Msg_ReceiveGroutTaskRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveGroutTaskRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ReceiveGroutTaskRewardRsp
         * @instance
         */
        Msg_ReceiveGroutTaskRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Msg_ReceiveGroutTaskRewardRsp taskUUID.
         * @member {string} taskUUID
         * @memberof proto.Msg_ReceiveGroutTaskRewardRsp
         * @instance
         */
        Msg_ReceiveGroutTaskRewardRsp.prototype.taskUUID = "";

        /**
         * Encodes the specified Msg_ReceiveGroutTaskRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveGroutTaskRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveGroutTaskRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveGroutTaskRewardRsp} m Msg_ReceiveGroutTaskRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveGroutTaskRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            if (m.taskUUID != null && Object.hasOwnProperty.call(m, "taskUUID"))
                w.uint32(26).string(m.taskUUID);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveGroutTaskRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveGroutTaskRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveGroutTaskRewardRsp} Msg_ReceiveGroutTaskRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveGroutTaskRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveGroutTaskRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.taskUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveGroutTaskRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TaskInExistence=1 TaskInExistence value
         * @property {number} TaskUnOpen=2 TaskUnOpen value
         * @property {number} AlreadyReceived=3 AlreadyReceived value
         */
        Msg_ReceiveGroutTaskRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TaskInExistence"] = 1;
            values[valuesById[2] = "TaskUnOpen"] = 2;
            values[valuesById[3] = "AlreadyReceived"] = 3;
            return values;
        })();

        return Msg_ReceiveGroutTaskRewardRsp;
    })();

    proto.Msg_ReceiveGroutTaskStepRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveGroutTaskStepRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveGroutTaskStepRewardReq
         * @property {number|null} [taskStep] Msg_ReceiveGroutTaskStepRewardReq taskStep
         */

        /**
         * Constructs a new Msg_ReceiveGroutTaskStepRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveGroutTaskStepRewardReq.
         * @implements IMsg_ReceiveGroutTaskStepRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveGroutTaskStepRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveGroutTaskStepRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveGroutTaskStepRewardReq taskStep.
         * @member {number} taskStep
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardReq
         * @instance
         */
        Msg_ReceiveGroutTaskStepRewardReq.prototype.taskStep = 0;

        /**
         * Encodes the specified Msg_ReceiveGroutTaskStepRewardReq message. Does not implicitly {@link proto.Msg_ReceiveGroutTaskStepRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardReq
         * @static
         * @param {proto.IMsg_ReceiveGroutTaskStepRewardReq} m Msg_ReceiveGroutTaskStepRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveGroutTaskStepRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskStep != null && Object.hasOwnProperty.call(m, "taskStep"))
                w.uint32(8).int32(m.taskStep);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveGroutTaskStepRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveGroutTaskStepRewardReq} Msg_ReceiveGroutTaskStepRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveGroutTaskStepRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveGroutTaskStepRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskStep = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveGroutTaskStepRewardReq;
    })();

    proto.Msg_ReceiveGroutTaskStepRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveGroutTaskStepRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveGroutTaskStepRewardRsp
         * @property {proto.Msg_ReceiveGroutTaskStepRewardRsp.ErrorCode|null} [result] Msg_ReceiveGroutTaskStepRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ReceiveGroutTaskStepRewardRsp reward
         * @property {number|null} [taskStep] Msg_ReceiveGroutTaskStepRewardRsp taskStep
         */

        /**
         * Constructs a new Msg_ReceiveGroutTaskStepRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveGroutTaskStepRewardRsp.
         * @implements IMsg_ReceiveGroutTaskStepRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveGroutTaskStepRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveGroutTaskStepRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveGroutTaskStepRewardRsp result.
         * @member {proto.Msg_ReceiveGroutTaskStepRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveGroutTaskStepRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveGroutTaskStepRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveGroutTaskStepRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Msg_ReceiveGroutTaskStepRewardRsp taskStep.
         * @member {number} taskStep
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveGroutTaskStepRewardRsp.prototype.taskStep = 0;

        /**
         * Encodes the specified Msg_ReceiveGroutTaskStepRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveGroutTaskStepRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveGroutTaskStepRewardRsp} m Msg_ReceiveGroutTaskStepRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveGroutTaskStepRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            if (m.taskStep != null && Object.hasOwnProperty.call(m, "taskStep"))
                w.uint32(24).int32(m.taskStep);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveGroutTaskStepRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveGroutTaskStepRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveGroutTaskStepRewardRsp} Msg_ReceiveGroutTaskStepRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveGroutTaskStepRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveGroutTaskStepRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.taskStep = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveGroutTaskStepRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} UnFinishTaskStep=1 UnFinishTaskStep value
         * @property {number} AlreadyReceived=2 AlreadyReceived value
         */
        Msg_ReceiveGroutTaskStepRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "UnFinishTaskStep"] = 1;
            values[valuesById[2] = "AlreadyReceived"] = 2;
            return values;
        })();

        return Msg_ReceiveGroutTaskStepRewardRsp;
    })();

    proto.Msg_PushGroutTaskUpate = (function() {

        /**
         * Properties of a Msg_PushGroutTaskUpate.
         * @memberof proto
         * @interface IMsg_PushGroutTaskUpate
         * @property {proto.ITaskData|null} [taskData] Msg_PushGroutTaskUpate taskData
         * @property {number|null} [currentStep] Msg_PushGroutTaskUpate currentStep
         * @property {boolean|null} [bLoginPush] Msg_PushGroutTaskUpate bLoginPush
         * @property {boolean|null} [bFinish] Msg_PushGroutTaskUpate bFinish
         */

        /**
         * Constructs a new Msg_PushGroutTaskUpate.
         * @memberof proto
         * @classdesc Represents a Msg_PushGroutTaskUpate.
         * @implements IMsg_PushGroutTaskUpate
         * @constructor
         * @param {proto.IMsg_PushGroutTaskUpate=} [p] Properties to set
         */
        function Msg_PushGroutTaskUpate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushGroutTaskUpate taskData.
         * @member {proto.ITaskData|null|undefined} taskData
         * @memberof proto.Msg_PushGroutTaskUpate
         * @instance
         */
        Msg_PushGroutTaskUpate.prototype.taskData = null;

        /**
         * Msg_PushGroutTaskUpate currentStep.
         * @member {number} currentStep
         * @memberof proto.Msg_PushGroutTaskUpate
         * @instance
         */
        Msg_PushGroutTaskUpate.prototype.currentStep = 0;

        /**
         * Msg_PushGroutTaskUpate bLoginPush.
         * @member {boolean} bLoginPush
         * @memberof proto.Msg_PushGroutTaskUpate
         * @instance
         */
        Msg_PushGroutTaskUpate.prototype.bLoginPush = false;

        /**
         * Msg_PushGroutTaskUpate bFinish.
         * @member {boolean} bFinish
         * @memberof proto.Msg_PushGroutTaskUpate
         * @instance
         */
        Msg_PushGroutTaskUpate.prototype.bFinish = false;

        /**
         * Encodes the specified Msg_PushGroutTaskUpate message. Does not implicitly {@link proto.Msg_PushGroutTaskUpate.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushGroutTaskUpate
         * @static
         * @param {proto.IMsg_PushGroutTaskUpate} m Msg_PushGroutTaskUpate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushGroutTaskUpate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskData != null && Object.hasOwnProperty.call(m, "taskData"))
                $root.proto.TaskData.encode(m.taskData, w.uint32(10).fork()).ldelim();
            if (m.currentStep != null && Object.hasOwnProperty.call(m, "currentStep"))
                w.uint32(16).int32(m.currentStep);
            if (m.bLoginPush != null && Object.hasOwnProperty.call(m, "bLoginPush"))
                w.uint32(24).bool(m.bLoginPush);
            if (m.bFinish != null && Object.hasOwnProperty.call(m, "bFinish"))
                w.uint32(32).bool(m.bFinish);
            return w;
        };

        /**
         * Decodes a Msg_PushGroutTaskUpate message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushGroutTaskUpate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushGroutTaskUpate} Msg_PushGroutTaskUpate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushGroutTaskUpate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushGroutTaskUpate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskData = $root.proto.TaskData.decode(r, r.uint32());
                    break;
                case 2:
                    m.currentStep = r.int32();
                    break;
                case 3:
                    m.bLoginPush = r.bool();
                    break;
                case 4:
                    m.bFinish = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushGroutTaskUpate;
    })();

    proto.GroutTaskDBData = (function() {

        /**
         * Properties of a GroutTaskDBData.
         * @memberof proto
         * @interface IGroutTaskDBData
         * @property {Array.<proto.IGroutTaskData>|null} [groutTaskList] GroutTaskDBData groutTaskList
         * @property {number|null} [runningTaskIndex] GroutTaskDBData runningTaskIndex
         * @property {number|null} [runningStep] GroutTaskDBData runningStep
         * @property {number|null} [receivedRewardStep] GroutTaskDBData receivedRewardStep
         */

        /**
         * Constructs a new GroutTaskDBData.
         * @memberof proto
         * @classdesc Represents a GroutTaskDBData.
         * @implements IGroutTaskDBData
         * @constructor
         * @param {proto.IGroutTaskDBData=} [p] Properties to set
         */
        function GroutTaskDBData(p) {
            this.groutTaskList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GroutTaskDBData groutTaskList.
         * @member {Array.<proto.IGroutTaskData>} groutTaskList
         * @memberof proto.GroutTaskDBData
         * @instance
         */
        GroutTaskDBData.prototype.groutTaskList = $util.emptyArray;

        /**
         * GroutTaskDBData runningTaskIndex.
         * @member {number} runningTaskIndex
         * @memberof proto.GroutTaskDBData
         * @instance
         */
        GroutTaskDBData.prototype.runningTaskIndex = 0;

        /**
         * GroutTaskDBData runningStep.
         * @member {number} runningStep
         * @memberof proto.GroutTaskDBData
         * @instance
         */
        GroutTaskDBData.prototype.runningStep = 0;

        /**
         * GroutTaskDBData receivedRewardStep.
         * @member {number} receivedRewardStep
         * @memberof proto.GroutTaskDBData
         * @instance
         */
        GroutTaskDBData.prototype.receivedRewardStep = 0;

        /**
         * Encodes the specified GroutTaskDBData message. Does not implicitly {@link proto.GroutTaskDBData.verify|verify} messages.
         * @function encode
         * @memberof proto.GroutTaskDBData
         * @static
         * @param {proto.IGroutTaskDBData} m GroutTaskDBData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroutTaskDBData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.groutTaskList != null && m.groutTaskList.length) {
                for (var i = 0; i < m.groutTaskList.length; ++i)
                    $root.proto.GroutTaskData.encode(m.groutTaskList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.runningTaskIndex != null && Object.hasOwnProperty.call(m, "runningTaskIndex"))
                w.uint32(16).int32(m.runningTaskIndex);
            if (m.runningStep != null && Object.hasOwnProperty.call(m, "runningStep"))
                w.uint32(24).int32(m.runningStep);
            if (m.receivedRewardStep != null && Object.hasOwnProperty.call(m, "receivedRewardStep"))
                w.uint32(32).int32(m.receivedRewardStep);
            return w;
        };

        /**
         * Decodes a GroutTaskDBData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GroutTaskDBData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GroutTaskDBData} GroutTaskDBData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroutTaskDBData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GroutTaskDBData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.groutTaskList && m.groutTaskList.length))
                        m.groutTaskList = [];
                    m.groutTaskList.push($root.proto.GroutTaskData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.runningTaskIndex = r.int32();
                    break;
                case 3:
                    m.runningStep = r.int32();
                    break;
                case 4:
                    m.receivedRewardStep = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GroutTaskDBData;
    })();

    /**
     * GamePublishChannelType enum.
     * @name proto.GamePublishChannelType
     * @enum {number}
     * @property {number} _37ChannelType=0 _37ChannelType value
     * @property {number} TencentYouLiangHui=1 TencentYouLiangHui value
     */
    proto.GamePublishChannelType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "_37ChannelType"] = 0;
        values[valuesById[1] = "TencentYouLiangHui"] = 1;
        return values;
    })();

    proto.Msg_PayStartReq = (function() {

        /**
         * Properties of a Msg_PayStartReq.
         * @memberof proto
         * @interface IMsg_PayStartReq
         * @property {number|null} [rechargeID] Msg_PayStartReq rechargeID
         * @property {proto.GamePublishChannelType|null} [type] Msg_PayStartReq type
         */

        /**
         * Constructs a new Msg_PayStartReq.
         * @memberof proto
         * @classdesc Represents a Msg_PayStartReq.
         * @implements IMsg_PayStartReq
         * @constructor
         * @param {proto.IMsg_PayStartReq=} [p] Properties to set
         */
        function Msg_PayStartReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PayStartReq rechargeID.
         * @member {number} rechargeID
         * @memberof proto.Msg_PayStartReq
         * @instance
         */
        Msg_PayStartReq.prototype.rechargeID = 0;

        /**
         * Msg_PayStartReq type.
         * @member {proto.GamePublishChannelType} type
         * @memberof proto.Msg_PayStartReq
         * @instance
         */
        Msg_PayStartReq.prototype.type = 0;

        /**
         * Encodes the specified Msg_PayStartReq message. Does not implicitly {@link proto.Msg_PayStartReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PayStartReq
         * @static
         * @param {proto.IMsg_PayStartReq} m Msg_PayStartReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PayStartReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rechargeID != null && Object.hasOwnProperty.call(m, "rechargeID"))
                w.uint32(8).int32(m.rechargeID);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(16).int32(m.type);
            return w;
        };

        /**
         * Decodes a Msg_PayStartReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PayStartReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PayStartReq} Msg_PayStartReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PayStartReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PayStartReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rechargeID = r.int32();
                    break;
                case 2:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PayStartReq;
    })();

    proto.Msg_PayStartRsp = (function() {

        /**
         * Properties of a Msg_PayStartRsp.
         * @memberof proto
         * @interface IMsg_PayStartRsp
         * @property {proto.Msg_PayStartRsp.ErrorCode|null} [errCode] Msg_PayStartRsp errCode
         * @property {string|null} [orderID] Msg_PayStartRsp orderID
         * @property {number|null} [rechargeID] Msg_PayStartRsp rechargeID
         */

        /**
         * Constructs a new Msg_PayStartRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PayStartRsp.
         * @implements IMsg_PayStartRsp
         * @constructor
         * @param {proto.IMsg_PayStartRsp=} [p] Properties to set
         */
        function Msg_PayStartRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PayStartRsp errCode.
         * @member {proto.Msg_PayStartRsp.ErrorCode} errCode
         * @memberof proto.Msg_PayStartRsp
         * @instance
         */
        Msg_PayStartRsp.prototype.errCode = 0;

        /**
         * Msg_PayStartRsp orderID.
         * @member {string} orderID
         * @memberof proto.Msg_PayStartRsp
         * @instance
         */
        Msg_PayStartRsp.prototype.orderID = "";

        /**
         * Msg_PayStartRsp rechargeID.
         * @member {number} rechargeID
         * @memberof proto.Msg_PayStartRsp
         * @instance
         */
        Msg_PayStartRsp.prototype.rechargeID = 0;

        /**
         * Encodes the specified Msg_PayStartRsp message. Does not implicitly {@link proto.Msg_PayStartRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PayStartRsp
         * @static
         * @param {proto.IMsg_PayStartRsp} m Msg_PayStartRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PayStartRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.errCode != null && Object.hasOwnProperty.call(m, "errCode"))
                w.uint32(8).int32(m.errCode);
            if (m.orderID != null && Object.hasOwnProperty.call(m, "orderID"))
                w.uint32(18).string(m.orderID);
            if (m.rechargeID != null && Object.hasOwnProperty.call(m, "rechargeID"))
                w.uint32(24).int32(m.rechargeID);
            return w;
        };

        /**
         * Decodes a Msg_PayStartRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PayStartRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PayStartRsp} Msg_PayStartRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PayStartRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PayStartRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.errCode = r.int32();
                    break;
                case 2:
                    m.orderID = r.string();
                    break;
                case 3:
                    m.rechargeID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_PayStartRsp.ErrorCode
         * @enum {number}
         * @property {number} Ok=0 Ok value
         * @property {number} Pending=1 Pending value
         * @property {number} Limited=2 Limited value
         * @property {number} Forbidden=3 Forbidden value
         * @property {number} Other=4 Other value
         */
        Msg_PayStartRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Ok"] = 0;
            values[valuesById[1] = "Pending"] = 1;
            values[valuesById[2] = "Limited"] = 2;
            values[valuesById[3] = "Forbidden"] = 3;
            values[valuesById[4] = "Other"] = 4;
            return values;
        })();

        return Msg_PayStartRsp;
    })();

    proto.Msg_PrePayWechatRsp = (function() {

        /**
         * Properties of a Msg_PrePayWechatRsp.
         * @memberof proto
         * @interface IMsg_PrePayWechatRsp
         * @property {proto.GamePublishChannelType|null} [type] Msg_PrePayWechatRsp type
         * @property {string|null} [prepayID] Msg_PrePayWechatRsp prepayID
         * @property {number|null} [timestamp] Msg_PrePayWechatRsp timestamp
         * @property {string|null} [noncestr] Msg_PrePayWechatRsp noncestr
         * @property {string|null} [sign] Msg_PrePayWechatRsp sign
         */

        /**
         * Constructs a new Msg_PrePayWechatRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PrePayWechatRsp.
         * @implements IMsg_PrePayWechatRsp
         * @constructor
         * @param {proto.IMsg_PrePayWechatRsp=} [p] Properties to set
         */
        function Msg_PrePayWechatRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PrePayWechatRsp type.
         * @member {proto.GamePublishChannelType} type
         * @memberof proto.Msg_PrePayWechatRsp
         * @instance
         */
        Msg_PrePayWechatRsp.prototype.type = 0;

        /**
         * Msg_PrePayWechatRsp prepayID.
         * @member {string} prepayID
         * @memberof proto.Msg_PrePayWechatRsp
         * @instance
         */
        Msg_PrePayWechatRsp.prototype.prepayID = "";

        /**
         * Msg_PrePayWechatRsp timestamp.
         * @member {number} timestamp
         * @memberof proto.Msg_PrePayWechatRsp
         * @instance
         */
        Msg_PrePayWechatRsp.prototype.timestamp = 0;

        /**
         * Msg_PrePayWechatRsp noncestr.
         * @member {string} noncestr
         * @memberof proto.Msg_PrePayWechatRsp
         * @instance
         */
        Msg_PrePayWechatRsp.prototype.noncestr = "";

        /**
         * Msg_PrePayWechatRsp sign.
         * @member {string} sign
         * @memberof proto.Msg_PrePayWechatRsp
         * @instance
         */
        Msg_PrePayWechatRsp.prototype.sign = "";

        /**
         * Encodes the specified Msg_PrePayWechatRsp message. Does not implicitly {@link proto.Msg_PrePayWechatRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PrePayWechatRsp
         * @static
         * @param {proto.IMsg_PrePayWechatRsp} m Msg_PrePayWechatRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PrePayWechatRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.prepayID != null && Object.hasOwnProperty.call(m, "prepayID"))
                w.uint32(18).string(m.prepayID);
            if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp"))
                w.uint32(24).int32(m.timestamp);
            if (m.noncestr != null && Object.hasOwnProperty.call(m, "noncestr"))
                w.uint32(34).string(m.noncestr);
            if (m.sign != null && Object.hasOwnProperty.call(m, "sign"))
                w.uint32(42).string(m.sign);
            return w;
        };

        /**
         * Decodes a Msg_PrePayWechatRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PrePayWechatRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PrePayWechatRsp} Msg_PrePayWechatRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PrePayWechatRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PrePayWechatRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.prepayID = r.string();
                    break;
                case 3:
                    m.timestamp = r.int32();
                    break;
                case 4:
                    m.noncestr = r.string();
                    break;
                case 5:
                    m.sign = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PrePayWechatRsp;
    })();

    proto.Msg_PayEndReq = (function() {

        /**
         * Properties of a Msg_PayEndReq.
         * @memberof proto
         * @interface IMsg_PayEndReq
         * @property {string|null} [orderID] Msg_PayEndReq orderID
         * @property {number|null} [rechargeID] Msg_PayEndReq rechargeID
         * @property {boolean|null} [dev] Msg_PayEndReq dev
         */

        /**
         * Constructs a new Msg_PayEndReq.
         * @memberof proto
         * @classdesc Represents a Msg_PayEndReq.
         * @implements IMsg_PayEndReq
         * @constructor
         * @param {proto.IMsg_PayEndReq=} [p] Properties to set
         */
        function Msg_PayEndReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PayEndReq orderID.
         * @member {string} orderID
         * @memberof proto.Msg_PayEndReq
         * @instance
         */
        Msg_PayEndReq.prototype.orderID = "";

        /**
         * Msg_PayEndReq rechargeID.
         * @member {number} rechargeID
         * @memberof proto.Msg_PayEndReq
         * @instance
         */
        Msg_PayEndReq.prototype.rechargeID = 0;

        /**
         * Msg_PayEndReq dev.
         * @member {boolean} dev
         * @memberof proto.Msg_PayEndReq
         * @instance
         */
        Msg_PayEndReq.prototype.dev = false;

        /**
         * Encodes the specified Msg_PayEndReq message. Does not implicitly {@link proto.Msg_PayEndReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PayEndReq
         * @static
         * @param {proto.IMsg_PayEndReq} m Msg_PayEndReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PayEndReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.orderID != null && Object.hasOwnProperty.call(m, "orderID"))
                w.uint32(10).string(m.orderID);
            if (m.rechargeID != null && Object.hasOwnProperty.call(m, "rechargeID"))
                w.uint32(16).int32(m.rechargeID);
            if (m.dev != null && Object.hasOwnProperty.call(m, "dev"))
                w.uint32(24).bool(m.dev);
            return w;
        };

        /**
         * Decodes a Msg_PayEndReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PayEndReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PayEndReq} Msg_PayEndReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PayEndReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PayEndReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.orderID = r.string();
                    break;
                case 2:
                    m.rechargeID = r.int32();
                    break;
                case 3:
                    m.dev = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PayEndReq;
    })();

    proto.Msg_PayEndRsp = (function() {

        /**
         * Properties of a Msg_PayEndRsp.
         * @memberof proto
         * @interface IMsg_PayEndRsp
         */

        /**
         * Constructs a new Msg_PayEndRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PayEndRsp.
         * @implements IMsg_PayEndRsp
         * @constructor
         * @param {proto.IMsg_PayEndRsp=} [p] Properties to set
         */
        function Msg_PayEndRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_PayEndRsp message. Does not implicitly {@link proto.Msg_PayEndRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PayEndRsp
         * @static
         * @param {proto.IMsg_PayEndRsp} m Msg_PayEndRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PayEndRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_PayEndRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PayEndRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PayEndRsp} Msg_PayEndRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PayEndRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PayEndRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PayEndRsp;
    })();

    proto.Msg_ReportedAdvertTypeReq = (function() {

        /**
         * Properties of a Msg_ReportedAdvertTypeReq.
         * @memberof proto
         * @interface IMsg_ReportedAdvertTypeReq
         * @property {number|null} [AdvertType] Msg_ReportedAdvertTypeReq AdvertType
         * @property {number|null} [viewStatus] Msg_ReportedAdvertTypeReq viewStatus
         */

        /**
         * Constructs a new Msg_ReportedAdvertTypeReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReportedAdvertTypeReq.
         * @implements IMsg_ReportedAdvertTypeReq
         * @constructor
         * @param {proto.IMsg_ReportedAdvertTypeReq=} [p] Properties to set
         */
        function Msg_ReportedAdvertTypeReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReportedAdvertTypeReq AdvertType.
         * @member {number} AdvertType
         * @memberof proto.Msg_ReportedAdvertTypeReq
         * @instance
         */
        Msg_ReportedAdvertTypeReq.prototype.AdvertType = 0;

        /**
         * Msg_ReportedAdvertTypeReq viewStatus.
         * @member {number} viewStatus
         * @memberof proto.Msg_ReportedAdvertTypeReq
         * @instance
         */
        Msg_ReportedAdvertTypeReq.prototype.viewStatus = 0;

        /**
         * Encodes the specified Msg_ReportedAdvertTypeReq message. Does not implicitly {@link proto.Msg_ReportedAdvertTypeReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReportedAdvertTypeReq
         * @static
         * @param {proto.IMsg_ReportedAdvertTypeReq} m Msg_ReportedAdvertTypeReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReportedAdvertTypeReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AdvertType != null && Object.hasOwnProperty.call(m, "AdvertType"))
                w.uint32(8).int32(m.AdvertType);
            if (m.viewStatus != null && Object.hasOwnProperty.call(m, "viewStatus"))
                w.uint32(16).int32(m.viewStatus);
            return w;
        };

        /**
         * Decodes a Msg_ReportedAdvertTypeReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReportedAdvertTypeReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReportedAdvertTypeReq} Msg_ReportedAdvertTypeReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReportedAdvertTypeReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReportedAdvertTypeReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AdvertType = r.int32();
                    break;
                case 2:
                    m.viewStatus = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReportedAdvertTypeReq;
    })();

    proto.Msg_SetGid = (function() {

        /**
         * Properties of a Msg_SetGid.
         * @memberof proto
         * @interface IMsg_SetGid
         * @property {string|null} [gid] Msg_SetGid gid
         * @property {string|null} [pid] Msg_SetGid pid
         */

        /**
         * Constructs a new Msg_SetGid.
         * @memberof proto
         * @classdesc Represents a Msg_SetGid.
         * @implements IMsg_SetGid
         * @constructor
         * @param {proto.IMsg_SetGid=} [p] Properties to set
         */
        function Msg_SetGid(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SetGid gid.
         * @member {string} gid
         * @memberof proto.Msg_SetGid
         * @instance
         */
        Msg_SetGid.prototype.gid = "";

        /**
         * Msg_SetGid pid.
         * @member {string} pid
         * @memberof proto.Msg_SetGid
         * @instance
         */
        Msg_SetGid.prototype.pid = "";

        /**
         * Encodes the specified Msg_SetGid message. Does not implicitly {@link proto.Msg_SetGid.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SetGid
         * @static
         * @param {proto.IMsg_SetGid} m Msg_SetGid message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SetGid.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.gid != null && Object.hasOwnProperty.call(m, "gid"))
                w.uint32(10).string(m.gid);
            if (m.pid != null && Object.hasOwnProperty.call(m, "pid"))
                w.uint32(18).string(m.pid);
            return w;
        };

        /**
         * Decodes a Msg_SetGid message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SetGid
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SetGid} Msg_SetGid
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SetGid.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SetGid();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.gid = r.string();
                    break;
                case 2:
                    m.pid = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SetGid;
    })();

    proto.Msg_KickOff = (function() {

        /**
         * Properties of a Msg_KickOff.
         * @memberof proto
         * @interface IMsg_KickOff
         */

        /**
         * Constructs a new Msg_KickOff.
         * @memberof proto
         * @classdesc Represents a Msg_KickOff.
         * @implements IMsg_KickOff
         * @constructor
         * @param {proto.IMsg_KickOff=} [p] Properties to set
         */
        function Msg_KickOff(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_KickOff message. Does not implicitly {@link proto.Msg_KickOff.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_KickOff
         * @static
         * @param {proto.IMsg_KickOff} m Msg_KickOff message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_KickOff.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_KickOff message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_KickOff
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_KickOff} Msg_KickOff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_KickOff.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_KickOff();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_KickOff;
    })();

    proto.SharedFriends = (function() {

        /**
         * Properties of a SharedFriends.
         * @memberof proto
         * @interface ISharedFriends
         * @property {number|null} [rankScore] SharedFriends rankScore
         * @property {string|null} [name] SharedFriends name
         * @property {number|null} [indexCard] SharedFriends indexCard
         * @property {string|null} [playerUid] SharedFriends playerUid
         * @property {string|null} [wechatHeadIconURl] SharedFriends wechatHeadIconURl
         * @property {string|null} [wechatName] SharedFriends wechatName
         */

        /**
         * Constructs a new SharedFriends.
         * @memberof proto
         * @classdesc Represents a SharedFriends.
         * @implements ISharedFriends
         * @constructor
         * @param {proto.ISharedFriends=} [p] Properties to set
         */
        function SharedFriends(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * SharedFriends rankScore.
         * @member {number} rankScore
         * @memberof proto.SharedFriends
         * @instance
         */
        SharedFriends.prototype.rankScore = 0;

        /**
         * SharedFriends name.
         * @member {string} name
         * @memberof proto.SharedFriends
         * @instance
         */
        SharedFriends.prototype.name = "";

        /**
         * SharedFriends indexCard.
         * @member {number} indexCard
         * @memberof proto.SharedFriends
         * @instance
         */
        SharedFriends.prototype.indexCard = 0;

        /**
         * SharedFriends playerUid.
         * @member {string} playerUid
         * @memberof proto.SharedFriends
         * @instance
         */
        SharedFriends.prototype.playerUid = "";

        /**
         * SharedFriends wechatHeadIconURl.
         * @member {string} wechatHeadIconURl
         * @memberof proto.SharedFriends
         * @instance
         */
        SharedFriends.prototype.wechatHeadIconURl = "";

        /**
         * SharedFriends wechatName.
         * @member {string} wechatName
         * @memberof proto.SharedFriends
         * @instance
         */
        SharedFriends.prototype.wechatName = "";

        /**
         * Encodes the specified SharedFriends message. Does not implicitly {@link proto.SharedFriends.verify|verify} messages.
         * @function encode
         * @memberof proto.SharedFriends
         * @static
         * @param {proto.ISharedFriends} m SharedFriends message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SharedFriends.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rankScore != null && Object.hasOwnProperty.call(m, "rankScore"))
                w.uint32(8).int32(m.rankScore);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.indexCard != null && Object.hasOwnProperty.call(m, "indexCard"))
                w.uint32(24).int32(m.indexCard);
            if (m.playerUid != null && Object.hasOwnProperty.call(m, "playerUid"))
                w.uint32(34).string(m.playerUid);
            if (m.wechatHeadIconURl != null && Object.hasOwnProperty.call(m, "wechatHeadIconURl"))
                w.uint32(42).string(m.wechatHeadIconURl);
            if (m.wechatName != null && Object.hasOwnProperty.call(m, "wechatName"))
                w.uint32(50).string(m.wechatName);
            return w;
        };

        /**
         * Decodes a SharedFriends message from the specified reader or buffer.
         * @function decode
         * @memberof proto.SharedFriends
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.SharedFriends} SharedFriends
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SharedFriends.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SharedFriends();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rankScore = r.int32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.indexCard = r.int32();
                    break;
                case 4:
                    m.playerUid = r.string();
                    break;
                case 5:
                    m.wechatHeadIconURl = r.string();
                    break;
                case 6:
                    m.wechatName = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SharedFriends;
    })();

    proto.Msg_SharedGameReq = (function() {

        /**
         * Properties of a Msg_SharedGameReq.
         * @memberof proto
         * @interface IMsg_SharedGameReq
         */

        /**
         * Constructs a new Msg_SharedGameReq.
         * @memberof proto
         * @classdesc Represents a Msg_SharedGameReq.
         * @implements IMsg_SharedGameReq
         * @constructor
         * @param {proto.IMsg_SharedGameReq=} [p] Properties to set
         */
        function Msg_SharedGameReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_SharedGameReq message. Does not implicitly {@link proto.Msg_SharedGameReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SharedGameReq
         * @static
         * @param {proto.IMsg_SharedGameReq} m Msg_SharedGameReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SharedGameReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_SharedGameReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SharedGameReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SharedGameReq} Msg_SharedGameReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SharedGameReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SharedGameReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SharedGameReq;
    })();

    proto.Msg_SharedGameRsp = (function() {

        /**
         * Properties of a Msg_SharedGameRsp.
         * @memberof proto
         * @interface IMsg_SharedGameRsp
         * @property {number|null} [SharedFriendsCnt] Msg_SharedGameRsp SharedFriendsCnt
         * @property {number|null} [CurIndex] Msg_SharedGameRsp CurIndex
         */

        /**
         * Constructs a new Msg_SharedGameRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SharedGameRsp.
         * @implements IMsg_SharedGameRsp
         * @constructor
         * @param {proto.IMsg_SharedGameRsp=} [p] Properties to set
         */
        function Msg_SharedGameRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SharedGameRsp SharedFriendsCnt.
         * @member {number} SharedFriendsCnt
         * @memberof proto.Msg_SharedGameRsp
         * @instance
         */
        Msg_SharedGameRsp.prototype.SharedFriendsCnt = 0;

        /**
         * Msg_SharedGameRsp CurIndex.
         * @member {number} CurIndex
         * @memberof proto.Msg_SharedGameRsp
         * @instance
         */
        Msg_SharedGameRsp.prototype.CurIndex = 0;

        /**
         * Encodes the specified Msg_SharedGameRsp message. Does not implicitly {@link proto.Msg_SharedGameRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SharedGameRsp
         * @static
         * @param {proto.IMsg_SharedGameRsp} m Msg_SharedGameRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SharedGameRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.SharedFriendsCnt != null && Object.hasOwnProperty.call(m, "SharedFriendsCnt"))
                w.uint32(8).int32(m.SharedFriendsCnt);
            if (m.CurIndex != null && Object.hasOwnProperty.call(m, "CurIndex"))
                w.uint32(16).int32(m.CurIndex);
            return w;
        };

        /**
         * Decodes a Msg_SharedGameRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SharedGameRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SharedGameRsp} Msg_SharedGameRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SharedGameRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SharedGameRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.SharedFriendsCnt = r.int32();
                    break;
                case 2:
                    m.CurIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SharedGameRsp;
    })();

    proto.Msg_SharedListReq = (function() {

        /**
         * Properties of a Msg_SharedListReq.
         * @memberof proto
         * @interface IMsg_SharedListReq
         */

        /**
         * Constructs a new Msg_SharedListReq.
         * @memberof proto
         * @classdesc Represents a Msg_SharedListReq.
         * @implements IMsg_SharedListReq
         * @constructor
         * @param {proto.IMsg_SharedListReq=} [p] Properties to set
         */
        function Msg_SharedListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_SharedListReq message. Does not implicitly {@link proto.Msg_SharedListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SharedListReq
         * @static
         * @param {proto.IMsg_SharedListReq} m Msg_SharedListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SharedListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_SharedListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SharedListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SharedListReq} Msg_SharedListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SharedListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SharedListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SharedListReq;
    })();

    proto.Msg_SharedListRsp = (function() {

        /**
         * Properties of a Msg_SharedListRsp.
         * @memberof proto
         * @interface IMsg_SharedListRsp
         * @property {Array.<proto.ISharedFriends>|null} [sharedFriends] Msg_SharedListRsp sharedFriends
         */

        /**
         * Constructs a new Msg_SharedListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SharedListRsp.
         * @implements IMsg_SharedListRsp
         * @constructor
         * @param {proto.IMsg_SharedListRsp=} [p] Properties to set
         */
        function Msg_SharedListRsp(p) {
            this.sharedFriends = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SharedListRsp sharedFriends.
         * @member {Array.<proto.ISharedFriends>} sharedFriends
         * @memberof proto.Msg_SharedListRsp
         * @instance
         */
        Msg_SharedListRsp.prototype.sharedFriends = $util.emptyArray;

        /**
         * Encodes the specified Msg_SharedListRsp message. Does not implicitly {@link proto.Msg_SharedListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SharedListRsp
         * @static
         * @param {proto.IMsg_SharedListRsp} m Msg_SharedListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SharedListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.sharedFriends != null && m.sharedFriends.length) {
                for (var i = 0; i < m.sharedFriends.length; ++i)
                    $root.proto.SharedFriends.encode(m.sharedFriends[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_SharedListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SharedListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SharedListRsp} Msg_SharedListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SharedListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SharedListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.sharedFriends && m.sharedFriends.length))
                        m.sharedFriends = [];
                    m.sharedFriends.push($root.proto.SharedFriends.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SharedListRsp;
    })();

    proto.Msg_GetSharedAwardReq = (function() {

        /**
         * Properties of a Msg_GetSharedAwardReq.
         * @memberof proto
         * @interface IMsg_GetSharedAwardReq
         * @property {number|null} [id] Msg_GetSharedAwardReq id
         */

        /**
         * Constructs a new Msg_GetSharedAwardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetSharedAwardReq.
         * @implements IMsg_GetSharedAwardReq
         * @constructor
         * @param {proto.IMsg_GetSharedAwardReq=} [p] Properties to set
         */
        function Msg_GetSharedAwardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetSharedAwardReq id.
         * @member {number} id
         * @memberof proto.Msg_GetSharedAwardReq
         * @instance
         */
        Msg_GetSharedAwardReq.prototype.id = 0;

        /**
         * Encodes the specified Msg_GetSharedAwardReq message. Does not implicitly {@link proto.Msg_GetSharedAwardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetSharedAwardReq
         * @static
         * @param {proto.IMsg_GetSharedAwardReq} m Msg_GetSharedAwardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetSharedAwardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(8).int32(m.id);
            return w;
        };

        /**
         * Decodes a Msg_GetSharedAwardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetSharedAwardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetSharedAwardReq} Msg_GetSharedAwardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetSharedAwardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetSharedAwardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.id = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetSharedAwardReq;
    })();

    proto.Msg_GetSharedAwardRsp = (function() {

        /**
         * Properties of a Msg_GetSharedAwardRsp.
         * @memberof proto
         * @interface IMsg_GetSharedAwardRsp
         * @property {proto.Msg_GetSharedAwardRsp.ErrorCode|null} [result] Msg_GetSharedAwardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [awards] Msg_GetSharedAwardRsp awards
         */

        /**
         * Constructs a new Msg_GetSharedAwardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetSharedAwardRsp.
         * @implements IMsg_GetSharedAwardRsp
         * @constructor
         * @param {proto.IMsg_GetSharedAwardRsp=} [p] Properties to set
         */
        function Msg_GetSharedAwardRsp(p) {
            this.awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetSharedAwardRsp result.
         * @member {proto.Msg_GetSharedAwardRsp.ErrorCode} result
         * @memberof proto.Msg_GetSharedAwardRsp
         * @instance
         */
        Msg_GetSharedAwardRsp.prototype.result = 0;

        /**
         * Msg_GetSharedAwardRsp awards.
         * @member {Array.<proto.IRewardSimpleInfo>} awards
         * @memberof proto.Msg_GetSharedAwardRsp
         * @instance
         */
        Msg_GetSharedAwardRsp.prototype.awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetSharedAwardRsp message. Does not implicitly {@link proto.Msg_GetSharedAwardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetSharedAwardRsp
         * @static
         * @param {proto.IMsg_GetSharedAwardRsp} m Msg_GetSharedAwardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetSharedAwardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.awards != null && m.awards.length) {
                for (var i = 0; i < m.awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.awards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetSharedAwardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetSharedAwardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetSharedAwardRsp} Msg_GetSharedAwardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetSharedAwardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetSharedAwardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.awards && m.awards.length))
                        m.awards = [];
                    m.awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GetSharedAwardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Error=1 Error value
         */
        Msg_GetSharedAwardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Error"] = 1;
            return values;
        })();

        return Msg_GetSharedAwardRsp;
    })();

    proto.InviteRecommendData = (function() {

        /**
         * Properties of an InviteRecommendData.
         * @memberof proto
         * @interface IInviteRecommendData
         * @property {number|null} [step] InviteRecommendData step
         * @property {Array.<string>|null} [inviteList] InviteRecommendData inviteList
         */

        /**
         * Constructs a new InviteRecommendData.
         * @memberof proto
         * @classdesc Represents an InviteRecommendData.
         * @implements IInviteRecommendData
         * @constructor
         * @param {proto.IInviteRecommendData=} [p] Properties to set
         */
        function InviteRecommendData(p) {
            this.inviteList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * InviteRecommendData step.
         * @member {number} step
         * @memberof proto.InviteRecommendData
         * @instance
         */
        InviteRecommendData.prototype.step = 0;

        /**
         * InviteRecommendData inviteList.
         * @member {Array.<string>} inviteList
         * @memberof proto.InviteRecommendData
         * @instance
         */
        InviteRecommendData.prototype.inviteList = $util.emptyArray;

        /**
         * Encodes the specified InviteRecommendData message. Does not implicitly {@link proto.InviteRecommendData.verify|verify} messages.
         * @function encode
         * @memberof proto.InviteRecommendData
         * @static
         * @param {proto.IInviteRecommendData} m InviteRecommendData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InviteRecommendData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.step != null && Object.hasOwnProperty.call(m, "step"))
                w.uint32(8).int32(m.step);
            if (m.inviteList != null && m.inviteList.length) {
                for (var i = 0; i < m.inviteList.length; ++i)
                    w.uint32(18).string(m.inviteList[i]);
            }
            return w;
        };

        /**
         * Decodes an InviteRecommendData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.InviteRecommendData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.InviteRecommendData} InviteRecommendData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InviteRecommendData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.InviteRecommendData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.step = r.int32();
                    break;
                case 2:
                    if (!(m.inviteList && m.inviteList.length))
                        m.inviteList = [];
                    m.inviteList.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return InviteRecommendData;
    })();

    proto.DailyInviteRecommendData = (function() {

        /**
         * Properties of a DailyInviteRecommendData.
         * @memberof proto
         * @interface IDailyInviteRecommendData
         * @property {number|null} [rewardLoopID] DailyInviteRecommendData rewardLoopID
         * @property {Array.<string>|null} [inviteList] DailyInviteRecommendData inviteList
         * @property {boolean|null} [gotReward] DailyInviteRecommendData gotReward
         * @property {number|null} [lastRefreshTime] DailyInviteRecommendData lastRefreshTime
         */

        /**
         * Constructs a new DailyInviteRecommendData.
         * @memberof proto
         * @classdesc Represents a DailyInviteRecommendData.
         * @implements IDailyInviteRecommendData
         * @constructor
         * @param {proto.IDailyInviteRecommendData=} [p] Properties to set
         */
        function DailyInviteRecommendData(p) {
            this.inviteList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * DailyInviteRecommendData rewardLoopID.
         * @member {number} rewardLoopID
         * @memberof proto.DailyInviteRecommendData
         * @instance
         */
        DailyInviteRecommendData.prototype.rewardLoopID = 0;

        /**
         * DailyInviteRecommendData inviteList.
         * @member {Array.<string>} inviteList
         * @memberof proto.DailyInviteRecommendData
         * @instance
         */
        DailyInviteRecommendData.prototype.inviteList = $util.emptyArray;

        /**
         * DailyInviteRecommendData gotReward.
         * @member {boolean} gotReward
         * @memberof proto.DailyInviteRecommendData
         * @instance
         */
        DailyInviteRecommendData.prototype.gotReward = false;

        /**
         * DailyInviteRecommendData lastRefreshTime.
         * @member {number} lastRefreshTime
         * @memberof proto.DailyInviteRecommendData
         * @instance
         */
        DailyInviteRecommendData.prototype.lastRefreshTime = 0;

        /**
         * Encodes the specified DailyInviteRecommendData message. Does not implicitly {@link proto.DailyInviteRecommendData.verify|verify} messages.
         * @function encode
         * @memberof proto.DailyInviteRecommendData
         * @static
         * @param {proto.IDailyInviteRecommendData} m DailyInviteRecommendData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyInviteRecommendData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardLoopID != null && Object.hasOwnProperty.call(m, "rewardLoopID"))
                w.uint32(8).int32(m.rewardLoopID);
            if (m.inviteList != null && m.inviteList.length) {
                for (var i = 0; i < m.inviteList.length; ++i)
                    w.uint32(18).string(m.inviteList[i]);
            }
            if (m.gotReward != null && Object.hasOwnProperty.call(m, "gotReward"))
                w.uint32(24).bool(m.gotReward);
            if (m.lastRefreshTime != null && Object.hasOwnProperty.call(m, "lastRefreshTime"))
                w.uint32(32).int32(m.lastRefreshTime);
            return w;
        };

        /**
         * Decodes a DailyInviteRecommendData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.DailyInviteRecommendData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.DailyInviteRecommendData} DailyInviteRecommendData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyInviteRecommendData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DailyInviteRecommendData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardLoopID = r.int32();
                    break;
                case 2:
                    if (!(m.inviteList && m.inviteList.length))
                        m.inviteList = [];
                    m.inviteList.push(r.string());
                    break;
                case 3:
                    m.gotReward = r.bool();
                    break;
                case 4:
                    m.lastRefreshTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return DailyInviteRecommendData;
    })();

    proto.SharedOfTodayObj = (function() {

        /**
         * Properties of a SharedOfTodayObj.
         * @memberof proto
         * @interface ISharedOfTodayObj
         * @property {number|null} [type] SharedOfTodayObj type
         * @property {number|null} [sharedCntOfToday] SharedOfTodayObj sharedCntOfToday
         */

        /**
         * Constructs a new SharedOfTodayObj.
         * @memberof proto
         * @classdesc Represents a SharedOfTodayObj.
         * @implements ISharedOfTodayObj
         * @constructor
         * @param {proto.ISharedOfTodayObj=} [p] Properties to set
         */
        function SharedOfTodayObj(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * SharedOfTodayObj type.
         * @member {number} type
         * @memberof proto.SharedOfTodayObj
         * @instance
         */
        SharedOfTodayObj.prototype.type = 0;

        /**
         * SharedOfTodayObj sharedCntOfToday.
         * @member {number} sharedCntOfToday
         * @memberof proto.SharedOfTodayObj
         * @instance
         */
        SharedOfTodayObj.prototype.sharedCntOfToday = 0;

        /**
         * Encodes the specified SharedOfTodayObj message. Does not implicitly {@link proto.SharedOfTodayObj.verify|verify} messages.
         * @function encode
         * @memberof proto.SharedOfTodayObj
         * @static
         * @param {proto.ISharedOfTodayObj} m SharedOfTodayObj message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SharedOfTodayObj.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.sharedCntOfToday != null && Object.hasOwnProperty.call(m, "sharedCntOfToday"))
                w.uint32(16).int32(m.sharedCntOfToday);
            return w;
        };

        /**
         * Decodes a SharedOfTodayObj message from the specified reader or buffer.
         * @function decode
         * @memberof proto.SharedOfTodayObj
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.SharedOfTodayObj} SharedOfTodayObj
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SharedOfTodayObj.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SharedOfTodayObj();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.sharedCntOfToday = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SharedOfTodayObj;
    })();

    proto.Msg_PushSharedOfToday = (function() {

        /**
         * Properties of a Msg_PushSharedOfToday.
         * @memberof proto
         * @interface IMsg_PushSharedOfToday
         * @property {Array.<proto.ISharedOfTodayObj>|null} [sharedList] Msg_PushSharedOfToday sharedList
         */

        /**
         * Constructs a new Msg_PushSharedOfToday.
         * @memberof proto
         * @classdesc Represents a Msg_PushSharedOfToday.
         * @implements IMsg_PushSharedOfToday
         * @constructor
         * @param {proto.IMsg_PushSharedOfToday=} [p] Properties to set
         */
        function Msg_PushSharedOfToday(p) {
            this.sharedList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushSharedOfToday sharedList.
         * @member {Array.<proto.ISharedOfTodayObj>} sharedList
         * @memberof proto.Msg_PushSharedOfToday
         * @instance
         */
        Msg_PushSharedOfToday.prototype.sharedList = $util.emptyArray;

        /**
         * Encodes the specified Msg_PushSharedOfToday message. Does not implicitly {@link proto.Msg_PushSharedOfToday.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushSharedOfToday
         * @static
         * @param {proto.IMsg_PushSharedOfToday} m Msg_PushSharedOfToday message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushSharedOfToday.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.sharedList != null && m.sharedList.length) {
                for (var i = 0; i < m.sharedList.length; ++i)
                    $root.proto.SharedOfTodayObj.encode(m.sharedList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_PushSharedOfToday message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushSharedOfToday
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushSharedOfToday} Msg_PushSharedOfToday
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushSharedOfToday.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushSharedOfToday();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.sharedList && m.sharedList.length))
                        m.sharedList = [];
                    m.sharedList.push($root.proto.SharedOfTodayObj.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushSharedOfToday;
    })();

    proto.DailyShareData = (function() {

        /**
         * Properties of a DailyShareData.
         * @memberof proto
         * @interface IDailyShareData
         * @property {Array.<proto.ISharedOfTodayObj>|null} [dailyShareList] DailyShareData dailyShareList
         * @property {number|null} [legendCardShareTimes] DailyShareData legendCardShareTimes
         */

        /**
         * Constructs a new DailyShareData.
         * @memberof proto
         * @classdesc Represents a DailyShareData.
         * @implements IDailyShareData
         * @constructor
         * @param {proto.IDailyShareData=} [p] Properties to set
         */
        function DailyShareData(p) {
            this.dailyShareList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * DailyShareData dailyShareList.
         * @member {Array.<proto.ISharedOfTodayObj>} dailyShareList
         * @memberof proto.DailyShareData
         * @instance
         */
        DailyShareData.prototype.dailyShareList = $util.emptyArray;

        /**
         * DailyShareData legendCardShareTimes.
         * @member {number} legendCardShareTimes
         * @memberof proto.DailyShareData
         * @instance
         */
        DailyShareData.prototype.legendCardShareTimes = 0;

        /**
         * Encodes the specified DailyShareData message. Does not implicitly {@link proto.DailyShareData.verify|verify} messages.
         * @function encode
         * @memberof proto.DailyShareData
         * @static
         * @param {proto.IDailyShareData} m DailyShareData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyShareData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.dailyShareList != null && m.dailyShareList.length) {
                for (var i = 0; i < m.dailyShareList.length; ++i)
                    $root.proto.SharedOfTodayObj.encode(m.dailyShareList[i], w.uint32(10).fork()).ldelim();
            }
            if (m.legendCardShareTimes != null && Object.hasOwnProperty.call(m, "legendCardShareTimes"))
                w.uint32(16).int32(m.legendCardShareTimes);
            return w;
        };

        /**
         * Decodes a DailyShareData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.DailyShareData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.DailyShareData} DailyShareData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyShareData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.DailyShareData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.dailyShareList && m.dailyShareList.length))
                        m.dailyShareList = [];
                    m.dailyShareList.push($root.proto.SharedOfTodayObj.decode(r, r.uint32()));
                    break;
                case 2:
                    m.legendCardShareTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return DailyShareData;
    })();

    proto.Msg_AfterSharedRewardReq = (function() {

        /**
         * Properties of a Msg_AfterSharedRewardReq.
         * @memberof proto
         * @interface IMsg_AfterSharedRewardReq
         * @property {number|null} [shareType] Msg_AfterSharedRewardReq shareType
         */

        /**
         * Constructs a new Msg_AfterSharedRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_AfterSharedRewardReq.
         * @implements IMsg_AfterSharedRewardReq
         * @constructor
         * @param {proto.IMsg_AfterSharedRewardReq=} [p] Properties to set
         */
        function Msg_AfterSharedRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AfterSharedRewardReq shareType.
         * @member {number} shareType
         * @memberof proto.Msg_AfterSharedRewardReq
         * @instance
         */
        Msg_AfterSharedRewardReq.prototype.shareType = 0;

        /**
         * Encodes the specified Msg_AfterSharedRewardReq message. Does not implicitly {@link proto.Msg_AfterSharedRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AfterSharedRewardReq
         * @static
         * @param {proto.IMsg_AfterSharedRewardReq} m Msg_AfterSharedRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AfterSharedRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.shareType != null && Object.hasOwnProperty.call(m, "shareType"))
                w.uint32(8).int32(m.shareType);
            return w;
        };

        /**
         * Decodes a Msg_AfterSharedRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AfterSharedRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AfterSharedRewardReq} Msg_AfterSharedRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AfterSharedRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AfterSharedRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.shareType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_AfterSharedRewardReq;
    })();

    proto.Msg_AfterSharedRewardRsp = (function() {

        /**
         * Properties of a Msg_AfterSharedRewardRsp.
         * @memberof proto
         * @interface IMsg_AfterSharedRewardRsp
         * @property {proto.Msg_AfterSharedRewardRsp.ErrorCode|null} [result] Msg_AfterSharedRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_AfterSharedRewardRsp reward
         * @property {Array.<proto.ISharedOfTodayObj>|null} [sharedList] Msg_AfterSharedRewardRsp sharedList
         */

        /**
         * Constructs a new Msg_AfterSharedRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_AfterSharedRewardRsp.
         * @implements IMsg_AfterSharedRewardRsp
         * @constructor
         * @param {proto.IMsg_AfterSharedRewardRsp=} [p] Properties to set
         */
        function Msg_AfterSharedRewardRsp(p) {
            this.reward = [];
            this.sharedList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_AfterSharedRewardRsp result.
         * @member {proto.Msg_AfterSharedRewardRsp.ErrorCode} result
         * @memberof proto.Msg_AfterSharedRewardRsp
         * @instance
         */
        Msg_AfterSharedRewardRsp.prototype.result = 0;

        /**
         * Msg_AfterSharedRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_AfterSharedRewardRsp
         * @instance
         */
        Msg_AfterSharedRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Msg_AfterSharedRewardRsp sharedList.
         * @member {Array.<proto.ISharedOfTodayObj>} sharedList
         * @memberof proto.Msg_AfterSharedRewardRsp
         * @instance
         */
        Msg_AfterSharedRewardRsp.prototype.sharedList = $util.emptyArray;

        /**
         * Encodes the specified Msg_AfterSharedRewardRsp message. Does not implicitly {@link proto.Msg_AfterSharedRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_AfterSharedRewardRsp
         * @static
         * @param {proto.IMsg_AfterSharedRewardRsp} m Msg_AfterSharedRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_AfterSharedRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            if (m.sharedList != null && m.sharedList.length) {
                for (var i = 0; i < m.sharedList.length; ++i)
                    $root.proto.SharedOfTodayObj.encode(m.sharedList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_AfterSharedRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_AfterSharedRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_AfterSharedRewardRsp} Msg_AfterSharedRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_AfterSharedRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_AfterSharedRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.sharedList && m.sharedList.length))
                        m.sharedList = [];
                    m.sharedList.push($root.proto.SharedOfTodayObj.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_AfterSharedRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyReceivedReward=1 AlreadyReceivedReward value
         * @property {number} NoneFirstWinOfToday=2 NoneFirstWinOfToday value
         */
        Msg_AfterSharedRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyReceivedReward"] = 1;
            values[valuesById[2] = "NoneFirstWinOfToday"] = 2;
            return values;
        })();

        return Msg_AfterSharedRewardRsp;
    })();

    proto.Msg_WatchAdResumeSeasonScoreReq = (function() {

        /**
         * Properties of a Msg_WatchAdResumeSeasonScoreReq.
         * @memberof proto
         * @interface IMsg_WatchAdResumeSeasonScoreReq
         */

        /**
         * Constructs a new Msg_WatchAdResumeSeasonScoreReq.
         * @memberof proto
         * @classdesc Represents a Msg_WatchAdResumeSeasonScoreReq.
         * @implements IMsg_WatchAdResumeSeasonScoreReq
         * @constructor
         * @param {proto.IMsg_WatchAdResumeSeasonScoreReq=} [p] Properties to set
         */
        function Msg_WatchAdResumeSeasonScoreReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_WatchAdResumeSeasonScoreReq message. Does not implicitly {@link proto.Msg_WatchAdResumeSeasonScoreReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WatchAdResumeSeasonScoreReq
         * @static
         * @param {proto.IMsg_WatchAdResumeSeasonScoreReq} m Msg_WatchAdResumeSeasonScoreReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WatchAdResumeSeasonScoreReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_WatchAdResumeSeasonScoreReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WatchAdResumeSeasonScoreReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WatchAdResumeSeasonScoreReq} Msg_WatchAdResumeSeasonScoreReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WatchAdResumeSeasonScoreReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WatchAdResumeSeasonScoreReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_WatchAdResumeSeasonScoreReq;
    })();

    proto.Msg_WatchAdResumeSeasonScoreRsp = (function() {

        /**
         * Properties of a Msg_WatchAdResumeSeasonScoreRsp.
         * @memberof proto
         * @interface IMsg_WatchAdResumeSeasonScoreRsp
         * @property {proto.Msg_WatchAdResumeSeasonScoreRsp.ErrorCode|null} [result] Msg_WatchAdResumeSeasonScoreRsp result
         */

        /**
         * Constructs a new Msg_WatchAdResumeSeasonScoreRsp.
         * @memberof proto
         * @classdesc Represents a Msg_WatchAdResumeSeasonScoreRsp.
         * @implements IMsg_WatchAdResumeSeasonScoreRsp
         * @constructor
         * @param {proto.IMsg_WatchAdResumeSeasonScoreRsp=} [p] Properties to set
         */
        function Msg_WatchAdResumeSeasonScoreRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_WatchAdResumeSeasonScoreRsp result.
         * @member {proto.Msg_WatchAdResumeSeasonScoreRsp.ErrorCode} result
         * @memberof proto.Msg_WatchAdResumeSeasonScoreRsp
         * @instance
         */
        Msg_WatchAdResumeSeasonScoreRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_WatchAdResumeSeasonScoreRsp message. Does not implicitly {@link proto.Msg_WatchAdResumeSeasonScoreRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WatchAdResumeSeasonScoreRsp
         * @static
         * @param {proto.IMsg_WatchAdResumeSeasonScoreRsp} m Msg_WatchAdResumeSeasonScoreRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WatchAdResumeSeasonScoreRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_WatchAdResumeSeasonScoreRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WatchAdResumeSeasonScoreRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WatchAdResumeSeasonScoreRsp} Msg_WatchAdResumeSeasonScoreRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WatchAdResumeSeasonScoreRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WatchAdResumeSeasonScoreRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_WatchAdResumeSeasonScoreRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} UseUpWatchAd=1 UseUpWatchAd value
         */
        Msg_WatchAdResumeSeasonScoreRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "UseUpWatchAd"] = 1;
            return values;
        })();

        return Msg_WatchAdResumeSeasonScoreRsp;
    })();

    proto.EmotionData = (function() {

        /**
         * Properties of an EmotionData.
         * @memberof proto
         * @interface IEmotionData
         * @property {Array.<number>|null} [emotionList] EmotionData emotionList
         */

        /**
         * Constructs a new EmotionData.
         * @memberof proto
         * @classdesc Represents an EmotionData.
         * @implements IEmotionData
         * @constructor
         * @param {proto.IEmotionData=} [p] Properties to set
         */
        function EmotionData(p) {
            this.emotionList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * EmotionData emotionList.
         * @member {Array.<number>} emotionList
         * @memberof proto.EmotionData
         * @instance
         */
        EmotionData.prototype.emotionList = $util.emptyArray;

        /**
         * Encodes the specified EmotionData message. Does not implicitly {@link proto.EmotionData.verify|verify} messages.
         * @function encode
         * @memberof proto.EmotionData
         * @static
         * @param {proto.IEmotionData} m EmotionData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EmotionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.emotionList != null && m.emotionList.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.emotionList.length; ++i)
                    w.int32(m.emotionList[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes an EmotionData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.EmotionData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.EmotionData} EmotionData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EmotionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.EmotionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.emotionList && m.emotionList.length))
                        m.emotionList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.emotionList.push(r.int32());
                    } else
                        m.emotionList.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return EmotionData;
    })();

    proto.Msg_SwitchEmotionReq = (function() {

        /**
         * Properties of a Msg_SwitchEmotionReq.
         * @memberof proto
         * @interface IMsg_SwitchEmotionReq
         * @property {number|null} [originalIdx] Msg_SwitchEmotionReq originalIdx
         * @property {number|null} [replaceIdx] Msg_SwitchEmotionReq replaceIdx
         */

        /**
         * Constructs a new Msg_SwitchEmotionReq.
         * @memberof proto
         * @classdesc Represents a Msg_SwitchEmotionReq.
         * @implements IMsg_SwitchEmotionReq
         * @constructor
         * @param {proto.IMsg_SwitchEmotionReq=} [p] Properties to set
         */
        function Msg_SwitchEmotionReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SwitchEmotionReq originalIdx.
         * @member {number} originalIdx
         * @memberof proto.Msg_SwitchEmotionReq
         * @instance
         */
        Msg_SwitchEmotionReq.prototype.originalIdx = 0;

        /**
         * Msg_SwitchEmotionReq replaceIdx.
         * @member {number} replaceIdx
         * @memberof proto.Msg_SwitchEmotionReq
         * @instance
         */
        Msg_SwitchEmotionReq.prototype.replaceIdx = 0;

        /**
         * Encodes the specified Msg_SwitchEmotionReq message. Does not implicitly {@link proto.Msg_SwitchEmotionReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SwitchEmotionReq
         * @static
         * @param {proto.IMsg_SwitchEmotionReq} m Msg_SwitchEmotionReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SwitchEmotionReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.originalIdx != null && Object.hasOwnProperty.call(m, "originalIdx"))
                w.uint32(8).int32(m.originalIdx);
            if (m.replaceIdx != null && Object.hasOwnProperty.call(m, "replaceIdx"))
                w.uint32(16).int32(m.replaceIdx);
            return w;
        };

        /**
         * Decodes a Msg_SwitchEmotionReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SwitchEmotionReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SwitchEmotionReq} Msg_SwitchEmotionReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SwitchEmotionReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SwitchEmotionReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.originalIdx = r.int32();
                    break;
                case 2:
                    m.replaceIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SwitchEmotionReq;
    })();

    proto.Msg_SwitchEmotionRsp = (function() {

        /**
         * Properties of a Msg_SwitchEmotionRsp.
         * @memberof proto
         * @interface IMsg_SwitchEmotionRsp
         * @property {proto.Msg_SwitchEmotionRsp.ErrorCode|null} [result] Msg_SwitchEmotionRsp result
         * @property {number|null} [originalIdx] Msg_SwitchEmotionRsp originalIdx
         * @property {number|null} [replaceIdx] Msg_SwitchEmotionRsp replaceIdx
         */

        /**
         * Constructs a new Msg_SwitchEmotionRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SwitchEmotionRsp.
         * @implements IMsg_SwitchEmotionRsp
         * @constructor
         * @param {proto.IMsg_SwitchEmotionRsp=} [p] Properties to set
         */
        function Msg_SwitchEmotionRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SwitchEmotionRsp result.
         * @member {proto.Msg_SwitchEmotionRsp.ErrorCode} result
         * @memberof proto.Msg_SwitchEmotionRsp
         * @instance
         */
        Msg_SwitchEmotionRsp.prototype.result = 0;

        /**
         * Msg_SwitchEmotionRsp originalIdx.
         * @member {number} originalIdx
         * @memberof proto.Msg_SwitchEmotionRsp
         * @instance
         */
        Msg_SwitchEmotionRsp.prototype.originalIdx = 0;

        /**
         * Msg_SwitchEmotionRsp replaceIdx.
         * @member {number} replaceIdx
         * @memberof proto.Msg_SwitchEmotionRsp
         * @instance
         */
        Msg_SwitchEmotionRsp.prototype.replaceIdx = 0;

        /**
         * Encodes the specified Msg_SwitchEmotionRsp message. Does not implicitly {@link proto.Msg_SwitchEmotionRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SwitchEmotionRsp
         * @static
         * @param {proto.IMsg_SwitchEmotionRsp} m Msg_SwitchEmotionRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SwitchEmotionRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.originalIdx != null && Object.hasOwnProperty.call(m, "originalIdx"))
                w.uint32(16).int32(m.originalIdx);
            if (m.replaceIdx != null && Object.hasOwnProperty.call(m, "replaceIdx"))
                w.uint32(24).int32(m.replaceIdx);
            return w;
        };

        /**
         * Decodes a Msg_SwitchEmotionRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SwitchEmotionRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SwitchEmotionRsp} Msg_SwitchEmotionRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SwitchEmotionRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SwitchEmotionRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.originalIdx = r.int32();
                    break;
                case 3:
                    m.replaceIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_SwitchEmotionRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} NonEmotion=1 NonEmotion value
         * @property {number} AlreadyReplace=2 AlreadyReplace value
         */
        Msg_SwitchEmotionRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "NonEmotion"] = 1;
            values[valuesById[2] = "AlreadyReplace"] = 2;
            return values;
        })();

        return Msg_SwitchEmotionRsp;
    })();

    proto.Msg_SetWechatUserInfo = (function() {

        /**
         * Properties of a Msg_SetWechatUserInfo.
         * @memberof proto
         * @interface IMsg_SetWechatUserInfo
         * @property {string|null} [wechatNickname] Msg_SetWechatUserInfo wechatNickname
         * @property {string|null} [wechatAvatarUrl] Msg_SetWechatUserInfo wechatAvatarUrl
         */

        /**
         * Constructs a new Msg_SetWechatUserInfo.
         * @memberof proto
         * @classdesc Represents a Msg_SetWechatUserInfo.
         * @implements IMsg_SetWechatUserInfo
         * @constructor
         * @param {proto.IMsg_SetWechatUserInfo=} [p] Properties to set
         */
        function Msg_SetWechatUserInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SetWechatUserInfo wechatNickname.
         * @member {string} wechatNickname
         * @memberof proto.Msg_SetWechatUserInfo
         * @instance
         */
        Msg_SetWechatUserInfo.prototype.wechatNickname = "";

        /**
         * Msg_SetWechatUserInfo wechatAvatarUrl.
         * @member {string} wechatAvatarUrl
         * @memberof proto.Msg_SetWechatUserInfo
         * @instance
         */
        Msg_SetWechatUserInfo.prototype.wechatAvatarUrl = "";

        /**
         * Encodes the specified Msg_SetWechatUserInfo message. Does not implicitly {@link proto.Msg_SetWechatUserInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SetWechatUserInfo
         * @static
         * @param {proto.IMsg_SetWechatUserInfo} m Msg_SetWechatUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SetWechatUserInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.wechatNickname != null && Object.hasOwnProperty.call(m, "wechatNickname"))
                w.uint32(10).string(m.wechatNickname);
            if (m.wechatAvatarUrl != null && Object.hasOwnProperty.call(m, "wechatAvatarUrl"))
                w.uint32(18).string(m.wechatAvatarUrl);
            return w;
        };

        /**
         * Decodes a Msg_SetWechatUserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SetWechatUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SetWechatUserInfo} Msg_SetWechatUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SetWechatUserInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SetWechatUserInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.wechatNickname = r.string();
                    break;
                case 2:
                    m.wechatAvatarUrl = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SetWechatUserInfo;
    })();

    proto.BattleMapData = (function() {

        /**
         * Properties of a BattleMapData.
         * @memberof proto
         * @interface IBattleMapData
         * @property {Array.<number>|null} [battleMapList] BattleMapData battleMapList
         * @property {number|null} [usedBattleMap] BattleMapData usedBattleMap
         */

        /**
         * Constructs a new BattleMapData.
         * @memberof proto
         * @classdesc Represents a BattleMapData.
         * @implements IBattleMapData
         * @constructor
         * @param {proto.IBattleMapData=} [p] Properties to set
         */
        function BattleMapData(p) {
            this.battleMapList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * BattleMapData battleMapList.
         * @member {Array.<number>} battleMapList
         * @memberof proto.BattleMapData
         * @instance
         */
        BattleMapData.prototype.battleMapList = $util.emptyArray;

        /**
         * BattleMapData usedBattleMap.
         * @member {number} usedBattleMap
         * @memberof proto.BattleMapData
         * @instance
         */
        BattleMapData.prototype.usedBattleMap = 0;

        /**
         * Encodes the specified BattleMapData message. Does not implicitly {@link proto.BattleMapData.verify|verify} messages.
         * @function encode
         * @memberof proto.BattleMapData
         * @static
         * @param {proto.IBattleMapData} m BattleMapData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BattleMapData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.battleMapList != null && m.battleMapList.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.battleMapList.length; ++i)
                    w.int32(m.battleMapList[i]);
                w.ldelim();
            }
            if (m.usedBattleMap != null && Object.hasOwnProperty.call(m, "usedBattleMap"))
                w.uint32(16).int32(m.usedBattleMap);
            return w;
        };

        /**
         * Decodes a BattleMapData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.BattleMapData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.BattleMapData} BattleMapData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BattleMapData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BattleMapData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.battleMapList && m.battleMapList.length))
                        m.battleMapList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.battleMapList.push(r.int32());
                    } else
                        m.battleMapList.push(r.int32());
                    break;
                case 2:
                    m.usedBattleMap = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return BattleMapData;
    })();

    /**
     * BattleMapState enum.
     * @name proto.BattleMapState
     * @enum {number}
     * @property {number} Equipment=0 Equipment value
     * @property {number} AlreadyHold=1 AlreadyHold value
     * @property {number} NonHold=2 NonHold value
     */
    proto.BattleMapState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Equipment"] = 0;
        values[valuesById[1] = "AlreadyHold"] = 1;
        values[valuesById[2] = "NonHold"] = 2;
        return values;
    })();

    proto.Msg_GetBattleMapReq = (function() {

        /**
         * Properties of a Msg_GetBattleMapReq.
         * @memberof proto
         * @interface IMsg_GetBattleMapReq
         */

        /**
         * Constructs a new Msg_GetBattleMapReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetBattleMapReq.
         * @implements IMsg_GetBattleMapReq
         * @constructor
         * @param {proto.IMsg_GetBattleMapReq=} [p] Properties to set
         */
        function Msg_GetBattleMapReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetBattleMapReq message. Does not implicitly {@link proto.Msg_GetBattleMapReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetBattleMapReq
         * @static
         * @param {proto.IMsg_GetBattleMapReq} m Msg_GetBattleMapReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetBattleMapReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetBattleMapReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetBattleMapReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetBattleMapReq} Msg_GetBattleMapReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetBattleMapReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetBattleMapReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetBattleMapReq;
    })();

    proto.Msg_GetBattleMapRsp = (function() {

        /**
         * Properties of a Msg_GetBattleMapRsp.
         * @memberof proto
         * @interface IMsg_GetBattleMapRsp
         * @property {Array.<number>|null} [alreadyHoldMaps] Msg_GetBattleMapRsp alreadyHoldMaps
         * @property {Array.<number>|null} [nonHoldMaps] Msg_GetBattleMapRsp nonHoldMaps
         */

        /**
         * Constructs a new Msg_GetBattleMapRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetBattleMapRsp.
         * @implements IMsg_GetBattleMapRsp
         * @constructor
         * @param {proto.IMsg_GetBattleMapRsp=} [p] Properties to set
         */
        function Msg_GetBattleMapRsp(p) {
            this.alreadyHoldMaps = [];
            this.nonHoldMaps = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetBattleMapRsp alreadyHoldMaps.
         * @member {Array.<number>} alreadyHoldMaps
         * @memberof proto.Msg_GetBattleMapRsp
         * @instance
         */
        Msg_GetBattleMapRsp.prototype.alreadyHoldMaps = $util.emptyArray;

        /**
         * Msg_GetBattleMapRsp nonHoldMaps.
         * @member {Array.<number>} nonHoldMaps
         * @memberof proto.Msg_GetBattleMapRsp
         * @instance
         */
        Msg_GetBattleMapRsp.prototype.nonHoldMaps = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetBattleMapRsp message. Does not implicitly {@link proto.Msg_GetBattleMapRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetBattleMapRsp
         * @static
         * @param {proto.IMsg_GetBattleMapRsp} m Msg_GetBattleMapRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetBattleMapRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.alreadyHoldMaps != null && m.alreadyHoldMaps.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.alreadyHoldMaps.length; ++i)
                    w.int32(m.alreadyHoldMaps[i]);
                w.ldelim();
            }
            if (m.nonHoldMaps != null && m.nonHoldMaps.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.nonHoldMaps.length; ++i)
                    w.int32(m.nonHoldMaps[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetBattleMapRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetBattleMapRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetBattleMapRsp} Msg_GetBattleMapRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetBattleMapRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetBattleMapRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.alreadyHoldMaps && m.alreadyHoldMaps.length))
                        m.alreadyHoldMaps = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.alreadyHoldMaps.push(r.int32());
                    } else
                        m.alreadyHoldMaps.push(r.int32());
                    break;
                case 2:
                    if (!(m.nonHoldMaps && m.nonHoldMaps.length))
                        m.nonHoldMaps = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.nonHoldMaps.push(r.int32());
                    } else
                        m.nonHoldMaps.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetBattleMapRsp;
    })();

    proto.Msg_ReplaceBattleMapReq = (function() {

        /**
         * Properties of a Msg_ReplaceBattleMapReq.
         * @memberof proto
         * @interface IMsg_ReplaceBattleMapReq
         * @property {number|null} [mapID] Msg_ReplaceBattleMapReq mapID
         */

        /**
         * Constructs a new Msg_ReplaceBattleMapReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReplaceBattleMapReq.
         * @implements IMsg_ReplaceBattleMapReq
         * @constructor
         * @param {proto.IMsg_ReplaceBattleMapReq=} [p] Properties to set
         */
        function Msg_ReplaceBattleMapReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReplaceBattleMapReq mapID.
         * @member {number} mapID
         * @memberof proto.Msg_ReplaceBattleMapReq
         * @instance
         */
        Msg_ReplaceBattleMapReq.prototype.mapID = 0;

        /**
         * Encodes the specified Msg_ReplaceBattleMapReq message. Does not implicitly {@link proto.Msg_ReplaceBattleMapReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReplaceBattleMapReq
         * @static
         * @param {proto.IMsg_ReplaceBattleMapReq} m Msg_ReplaceBattleMapReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReplaceBattleMapReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mapID != null && Object.hasOwnProperty.call(m, "mapID"))
                w.uint32(8).int32(m.mapID);
            return w;
        };

        /**
         * Decodes a Msg_ReplaceBattleMapReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReplaceBattleMapReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReplaceBattleMapReq} Msg_ReplaceBattleMapReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReplaceBattleMapReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReplaceBattleMapReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mapID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReplaceBattleMapReq;
    })();

    proto.Msg_ReplaceBattleMapRsp = (function() {

        /**
         * Properties of a Msg_ReplaceBattleMapRsp.
         * @memberof proto
         * @interface IMsg_ReplaceBattleMapRsp
         * @property {proto.Msg_ReplaceBattleMapRsp.ErrorCode|null} [result] Msg_ReplaceBattleMapRsp result
         * @property {number|null} [curUsedMapID] Msg_ReplaceBattleMapRsp curUsedMapID
         */

        /**
         * Constructs a new Msg_ReplaceBattleMapRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReplaceBattleMapRsp.
         * @implements IMsg_ReplaceBattleMapRsp
         * @constructor
         * @param {proto.IMsg_ReplaceBattleMapRsp=} [p] Properties to set
         */
        function Msg_ReplaceBattleMapRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReplaceBattleMapRsp result.
         * @member {proto.Msg_ReplaceBattleMapRsp.ErrorCode} result
         * @memberof proto.Msg_ReplaceBattleMapRsp
         * @instance
         */
        Msg_ReplaceBattleMapRsp.prototype.result = 0;

        /**
         * Msg_ReplaceBattleMapRsp curUsedMapID.
         * @member {number} curUsedMapID
         * @memberof proto.Msg_ReplaceBattleMapRsp
         * @instance
         */
        Msg_ReplaceBattleMapRsp.prototype.curUsedMapID = 0;

        /**
         * Encodes the specified Msg_ReplaceBattleMapRsp message. Does not implicitly {@link proto.Msg_ReplaceBattleMapRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReplaceBattleMapRsp
         * @static
         * @param {proto.IMsg_ReplaceBattleMapRsp} m Msg_ReplaceBattleMapRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReplaceBattleMapRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.curUsedMapID != null && Object.hasOwnProperty.call(m, "curUsedMapID"))
                w.uint32(16).int32(m.curUsedMapID);
            return w;
        };

        /**
         * Decodes a Msg_ReplaceBattleMapRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReplaceBattleMapRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReplaceBattleMapRsp} Msg_ReplaceBattleMapRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReplaceBattleMapRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReplaceBattleMapRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.curUsedMapID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReplaceBattleMapRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} NonBattleMapID=1 NonBattleMapID value
         * @property {number} BattleMapAlreadyUsed=2 BattleMapAlreadyUsed value
         */
        Msg_ReplaceBattleMapRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "NonBattleMapID"] = 1;
            values[valuesById[2] = "BattleMapAlreadyUsed"] = 2;
            return values;
        })();

        return Msg_ReplaceBattleMapRsp;
    })();

    proto.Msg_BuyEmotionReq = (function() {

        /**
         * Properties of a Msg_BuyEmotionReq.
         * @memberof proto
         * @interface IMsg_BuyEmotionReq
         * @property {number|null} [emotionID] Msg_BuyEmotionReq emotionID
         * @property {number|null} [goodsIdx] Msg_BuyEmotionReq goodsIdx
         */

        /**
         * Constructs a new Msg_BuyEmotionReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyEmotionReq.
         * @implements IMsg_BuyEmotionReq
         * @constructor
         * @param {proto.IMsg_BuyEmotionReq=} [p] Properties to set
         */
        function Msg_BuyEmotionReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyEmotionReq emotionID.
         * @member {number} emotionID
         * @memberof proto.Msg_BuyEmotionReq
         * @instance
         */
        Msg_BuyEmotionReq.prototype.emotionID = 0;

        /**
         * Msg_BuyEmotionReq goodsIdx.
         * @member {number} goodsIdx
         * @memberof proto.Msg_BuyEmotionReq
         * @instance
         */
        Msg_BuyEmotionReq.prototype.goodsIdx = 0;

        /**
         * Encodes the specified Msg_BuyEmotionReq message. Does not implicitly {@link proto.Msg_BuyEmotionReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyEmotionReq
         * @static
         * @param {proto.IMsg_BuyEmotionReq} m Msg_BuyEmotionReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyEmotionReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.emotionID != null && Object.hasOwnProperty.call(m, "emotionID"))
                w.uint32(8).int32(m.emotionID);
            if (m.goodsIdx != null && Object.hasOwnProperty.call(m, "goodsIdx"))
                w.uint32(16).int32(m.goodsIdx);
            return w;
        };

        /**
         * Decodes a Msg_BuyEmotionReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyEmotionReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyEmotionReq} Msg_BuyEmotionReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyEmotionReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyEmotionReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.emotionID = r.int32();
                    break;
                case 2:
                    m.goodsIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyEmotionReq;
    })();

    proto.Msg_BuyEmotionRsp = (function() {

        /**
         * Properties of a Msg_BuyEmotionRsp.
         * @memberof proto
         * @interface IMsg_BuyEmotionRsp
         * @property {proto.Msg_BuyEmotionRsp.ErrorCode|null} [result] Msg_BuyEmotionRsp result
         * @property {number|null} [emotionID] Msg_BuyEmotionRsp emotionID
         * @property {number|null} [goodsIdx] Msg_BuyEmotionRsp goodsIdx
         */

        /**
         * Constructs a new Msg_BuyEmotionRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyEmotionRsp.
         * @implements IMsg_BuyEmotionRsp
         * @constructor
         * @param {proto.IMsg_BuyEmotionRsp=} [p] Properties to set
         */
        function Msg_BuyEmotionRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyEmotionRsp result.
         * @member {proto.Msg_BuyEmotionRsp.ErrorCode} result
         * @memberof proto.Msg_BuyEmotionRsp
         * @instance
         */
        Msg_BuyEmotionRsp.prototype.result = 0;

        /**
         * Msg_BuyEmotionRsp emotionID.
         * @member {number} emotionID
         * @memberof proto.Msg_BuyEmotionRsp
         * @instance
         */
        Msg_BuyEmotionRsp.prototype.emotionID = 0;

        /**
         * Msg_BuyEmotionRsp goodsIdx.
         * @member {number} goodsIdx
         * @memberof proto.Msg_BuyEmotionRsp
         * @instance
         */
        Msg_BuyEmotionRsp.prototype.goodsIdx = 0;

        /**
         * Encodes the specified Msg_BuyEmotionRsp message. Does not implicitly {@link proto.Msg_BuyEmotionRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyEmotionRsp
         * @static
         * @param {proto.IMsg_BuyEmotionRsp} m Msg_BuyEmotionRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyEmotionRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.emotionID != null && Object.hasOwnProperty.call(m, "emotionID"))
                w.uint32(16).int32(m.emotionID);
            if (m.goodsIdx != null && Object.hasOwnProperty.call(m, "goodsIdx"))
                w.uint32(24).int32(m.goodsIdx);
            return w;
        };

        /**
         * Decodes a Msg_BuyEmotionRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyEmotionRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyEmotionRsp} Msg_BuyEmotionRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyEmotionRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyEmotionRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.emotionID = r.int32();
                    break;
                case 3:
                    m.goodsIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyEmotionRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyHoldEmotion=1 AlreadyHoldEmotion value
         * @property {number} NonEmotion=2 NonEmotion value
         */
        Msg_BuyEmotionRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyHoldEmotion"] = 1;
            values[valuesById[2] = "NonEmotion"] = 2;
            return values;
        })();

        return Msg_BuyEmotionRsp;
    })();

    proto.Msg_Echo = (function() {

        /**
         * Properties of a Msg_Echo.
         * @memberof proto
         * @interface IMsg_Echo
         * @property {number|null} [index] Msg_Echo index
         */

        /**
         * Constructs a new Msg_Echo.
         * @memberof proto
         * @classdesc Represents a Msg_Echo.
         * @implements IMsg_Echo
         * @constructor
         * @param {proto.IMsg_Echo=} [p] Properties to set
         */
        function Msg_Echo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_Echo index.
         * @member {number} index
         * @memberof proto.Msg_Echo
         * @instance
         */
        Msg_Echo.prototype.index = 0;

        /**
         * Encodes the specified Msg_Echo message. Does not implicitly {@link proto.Msg_Echo.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_Echo
         * @static
         * @param {proto.IMsg_Echo} m Msg_Echo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_Echo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.index != null && Object.hasOwnProperty.call(m, "index"))
                w.uint32(8).uint32(m.index);
            return w;
        };

        /**
         * Decodes a Msg_Echo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_Echo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_Echo} Msg_Echo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_Echo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_Echo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.index = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_Echo;
    })();

    proto.ScrollMsg = (function() {

        /**
         * Properties of a ScrollMsg.
         * @memberof proto
         * @interface IScrollMsg
         * @property {string|null} [ID] ScrollMsg ID
         * @property {number|null} [beginTimeUTC] ScrollMsg beginTimeUTC
         * @property {number|null} [endTimeUTC] ScrollMsg endTimeUTC
         * @property {string|null} [contentTXT] ScrollMsg contentTXT
         * @property {number|null} [playInterval] ScrollMsg playInterval
         */

        /**
         * Constructs a new ScrollMsg.
         * @memberof proto
         * @classdesc Represents a ScrollMsg.
         * @implements IScrollMsg
         * @constructor
         * @param {proto.IScrollMsg=} [p] Properties to set
         */
        function ScrollMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ScrollMsg ID.
         * @member {string} ID
         * @memberof proto.ScrollMsg
         * @instance
         */
        ScrollMsg.prototype.ID = "";

        /**
         * ScrollMsg beginTimeUTC.
         * @member {number} beginTimeUTC
         * @memberof proto.ScrollMsg
         * @instance
         */
        ScrollMsg.prototype.beginTimeUTC = 0;

        /**
         * ScrollMsg endTimeUTC.
         * @member {number} endTimeUTC
         * @memberof proto.ScrollMsg
         * @instance
         */
        ScrollMsg.prototype.endTimeUTC = 0;

        /**
         * ScrollMsg contentTXT.
         * @member {string} contentTXT
         * @memberof proto.ScrollMsg
         * @instance
         */
        ScrollMsg.prototype.contentTXT = "";

        /**
         * ScrollMsg playInterval.
         * @member {number} playInterval
         * @memberof proto.ScrollMsg
         * @instance
         */
        ScrollMsg.prototype.playInterval = 0;

        /**
         * Encodes the specified ScrollMsg message. Does not implicitly {@link proto.ScrollMsg.verify|verify} messages.
         * @function encode
         * @memberof proto.ScrollMsg
         * @static
         * @param {proto.IScrollMsg} m ScrollMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ScrollMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(10).string(m.ID);
            if (m.beginTimeUTC != null && Object.hasOwnProperty.call(m, "beginTimeUTC"))
                w.uint32(16).int32(m.beginTimeUTC);
            if (m.endTimeUTC != null && Object.hasOwnProperty.call(m, "endTimeUTC"))
                w.uint32(24).int32(m.endTimeUTC);
            if (m.contentTXT != null && Object.hasOwnProperty.call(m, "contentTXT"))
                w.uint32(34).string(m.contentTXT);
            if (m.playInterval != null && Object.hasOwnProperty.call(m, "playInterval"))
                w.uint32(40).int32(m.playInterval);
            return w;
        };

        /**
         * Decodes a ScrollMsg message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ScrollMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ScrollMsg} ScrollMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ScrollMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ScrollMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.string();
                    break;
                case 2:
                    m.beginTimeUTC = r.int32();
                    break;
                case 3:
                    m.endTimeUTC = r.int32();
                    break;
                case 4:
                    m.contentTXT = r.string();
                    break;
                case 5:
                    m.playInterval = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ScrollMsg;
    })();

    proto.Msg_ScrollNoticeReq = (function() {

        /**
         * Properties of a Msg_ScrollNoticeReq.
         * @memberof proto
         * @interface IMsg_ScrollNoticeReq
         */

        /**
         * Constructs a new Msg_ScrollNoticeReq.
         * @memberof proto
         * @classdesc Represents a Msg_ScrollNoticeReq.
         * @implements IMsg_ScrollNoticeReq
         * @constructor
         * @param {proto.IMsg_ScrollNoticeReq=} [p] Properties to set
         */
        function Msg_ScrollNoticeReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ScrollNoticeReq message. Does not implicitly {@link proto.Msg_ScrollNoticeReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ScrollNoticeReq
         * @static
         * @param {proto.IMsg_ScrollNoticeReq} m Msg_ScrollNoticeReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ScrollNoticeReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ScrollNoticeReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ScrollNoticeReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ScrollNoticeReq} Msg_ScrollNoticeReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ScrollNoticeReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ScrollNoticeReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ScrollNoticeReq;
    })();

    proto.Msg_ScrollNoticeRsp = (function() {

        /**
         * Properties of a Msg_ScrollNoticeRsp.
         * @memberof proto
         * @interface IMsg_ScrollNoticeRsp
         * @property {Array.<proto.IScrollMsg>|null} [notices] Msg_ScrollNoticeRsp notices
         */

        /**
         * Constructs a new Msg_ScrollNoticeRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ScrollNoticeRsp.
         * @implements IMsg_ScrollNoticeRsp
         * @constructor
         * @param {proto.IMsg_ScrollNoticeRsp=} [p] Properties to set
         */
        function Msg_ScrollNoticeRsp(p) {
            this.notices = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ScrollNoticeRsp notices.
         * @member {Array.<proto.IScrollMsg>} notices
         * @memberof proto.Msg_ScrollNoticeRsp
         * @instance
         */
        Msg_ScrollNoticeRsp.prototype.notices = $util.emptyArray;

        /**
         * Encodes the specified Msg_ScrollNoticeRsp message. Does not implicitly {@link proto.Msg_ScrollNoticeRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ScrollNoticeRsp
         * @static
         * @param {proto.IMsg_ScrollNoticeRsp} m Msg_ScrollNoticeRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ScrollNoticeRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.notices != null && m.notices.length) {
                for (var i = 0; i < m.notices.length; ++i)
                    $root.proto.ScrollMsg.encode(m.notices[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ScrollNoticeRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ScrollNoticeRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ScrollNoticeRsp} Msg_ScrollNoticeRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ScrollNoticeRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ScrollNoticeRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.notices && m.notices.length))
                        m.notices = [];
                    m.notices.push($root.proto.ScrollMsg.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ScrollNoticeRsp;
    })();

    /**
     * GFCellAwardState enum.
     * @name proto.GFCellAwardState
     * @enum {number}
     * @property {number} NotGet=0 NotGet value
     * @property {number} GetFree=1 GetFree value
     * @property {number} GetAll=2 GetAll value
     */
    proto.GFCellAwardState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NotGet"] = 0;
        values[valuesById[1] = "GetFree"] = 1;
        values[valuesById[2] = "GetAll"] = 2;
        return values;
    })();

    proto.GFCell = (function() {

        /**
         * Properties of a GFCell.
         * @memberof proto
         * @interface IGFCell
         * @property {number|null} [ID] GFCell ID
         * @property {proto.GFCellAwardState|null} [GetAwardType] GFCell GetAwardType
         */

        /**
         * Constructs a new GFCell.
         * @memberof proto
         * @classdesc Represents a GFCell.
         * @implements IGFCell
         * @constructor
         * @param {proto.IGFCell=} [p] Properties to set
         */
        function GFCell(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GFCell ID.
         * @member {number} ID
         * @memberof proto.GFCell
         * @instance
         */
        GFCell.prototype.ID = 0;

        /**
         * GFCell GetAwardType.
         * @member {proto.GFCellAwardState} GetAwardType
         * @memberof proto.GFCell
         * @instance
         */
        GFCell.prototype.GetAwardType = 0;

        /**
         * Encodes the specified GFCell message. Does not implicitly {@link proto.GFCell.verify|verify} messages.
         * @function encode
         * @memberof proto.GFCell
         * @static
         * @param {proto.IGFCell} m GFCell message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GFCell.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(8).int32(m.ID);
            if (m.GetAwardType != null && Object.hasOwnProperty.call(m, "GetAwardType"))
                w.uint32(16).int32(m.GetAwardType);
            return w;
        };

        /**
         * Decodes a GFCell message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GFCell
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GFCell} GFCell
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GFCell.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GFCell();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.int32();
                    break;
                case 2:
                    m.GetAwardType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GFCell;
    })();

    proto.GrowFundData = (function() {

        /**
         * Properties of a GrowFundData.
         * @memberof proto
         * @interface IGrowFundData
         * @property {number|null} [HistoryRankScore] GrowFundData HistoryRankScore
         * @property {Array.<proto.IGFCell>|null} [Cell] GrowFundData Cell
         * @property {boolean|null} [UnlockFund] GrowFundData UnlockFund
         */

        /**
         * Constructs a new GrowFundData.
         * @memberof proto
         * @classdesc Represents a GrowFundData.
         * @implements IGrowFundData
         * @constructor
         * @param {proto.IGrowFundData=} [p] Properties to set
         */
        function GrowFundData(p) {
            this.Cell = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * GrowFundData HistoryRankScore.
         * @member {number} HistoryRankScore
         * @memberof proto.GrowFundData
         * @instance
         */
        GrowFundData.prototype.HistoryRankScore = 0;

        /**
         * GrowFundData Cell.
         * @member {Array.<proto.IGFCell>} Cell
         * @memberof proto.GrowFundData
         * @instance
         */
        GrowFundData.prototype.Cell = $util.emptyArray;

        /**
         * GrowFundData UnlockFund.
         * @member {boolean} UnlockFund
         * @memberof proto.GrowFundData
         * @instance
         */
        GrowFundData.prototype.UnlockFund = false;

        /**
         * Encodes the specified GrowFundData message. Does not implicitly {@link proto.GrowFundData.verify|verify} messages.
         * @function encode
         * @memberof proto.GrowFundData
         * @static
         * @param {proto.IGrowFundData} m GrowFundData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GrowFundData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.HistoryRankScore != null && Object.hasOwnProperty.call(m, "HistoryRankScore"))
                w.uint32(8).int32(m.HistoryRankScore);
            if (m.Cell != null && m.Cell.length) {
                for (var i = 0; i < m.Cell.length; ++i)
                    $root.proto.GFCell.encode(m.Cell[i], w.uint32(18).fork()).ldelim();
            }
            if (m.UnlockFund != null && Object.hasOwnProperty.call(m, "UnlockFund"))
                w.uint32(24).bool(m.UnlockFund);
            return w;
        };

        /**
         * Decodes a GrowFundData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.GrowFundData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.GrowFundData} GrowFundData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GrowFundData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.GrowFundData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.HistoryRankScore = r.int32();
                    break;
                case 2:
                    if (!(m.Cell && m.Cell.length))
                        m.Cell = [];
                    m.Cell.push($root.proto.GFCell.decode(r, r.uint32()));
                    break;
                case 3:
                    m.UnlockFund = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GrowFundData;
    })();

    proto.MonthAndWeekCardData = (function() {

        /**
         * Properties of a MonthAndWeekCardData.
         * @memberof proto
         * @interface IMonthAndWeekCardData
         * @property {proto.IRewardSimpleInfo|null} [reward] MonthAndWeekCardData reward
         * @property {number|null} [everyDayMailRewardCount] MonthAndWeekCardData everyDayMailRewardCount
         * @property {number|null} [overTimes] MonthAndWeekCardData overTimes
         * @property {number|null} [rechargeID] MonthAndWeekCardData rechargeID
         */

        /**
         * Constructs a new MonthAndWeekCardData.
         * @memberof proto
         * @classdesc Represents a MonthAndWeekCardData.
         * @implements IMonthAndWeekCardData
         * @constructor
         * @param {proto.IMonthAndWeekCardData=} [p] Properties to set
         */
        function MonthAndWeekCardData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * MonthAndWeekCardData reward.
         * @member {proto.IRewardSimpleInfo|null|undefined} reward
         * @memberof proto.MonthAndWeekCardData
         * @instance
         */
        MonthAndWeekCardData.prototype.reward = null;

        /**
         * MonthAndWeekCardData everyDayMailRewardCount.
         * @member {number} everyDayMailRewardCount
         * @memberof proto.MonthAndWeekCardData
         * @instance
         */
        MonthAndWeekCardData.prototype.everyDayMailRewardCount = 0;

        /**
         * MonthAndWeekCardData overTimes.
         * @member {number} overTimes
         * @memberof proto.MonthAndWeekCardData
         * @instance
         */
        MonthAndWeekCardData.prototype.overTimes = 0;

        /**
         * MonthAndWeekCardData rechargeID.
         * @member {number} rechargeID
         * @memberof proto.MonthAndWeekCardData
         * @instance
         */
        MonthAndWeekCardData.prototype.rechargeID = 0;

        /**
         * Encodes the specified MonthAndWeekCardData message. Does not implicitly {@link proto.MonthAndWeekCardData.verify|verify} messages.
         * @function encode
         * @memberof proto.MonthAndWeekCardData
         * @static
         * @param {proto.IMonthAndWeekCardData} m MonthAndWeekCardData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MonthAndWeekCardData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.reward != null && Object.hasOwnProperty.call(m, "reward"))
                $root.proto.RewardSimpleInfo.encode(m.reward, w.uint32(10).fork()).ldelim();
            if (m.everyDayMailRewardCount != null && Object.hasOwnProperty.call(m, "everyDayMailRewardCount"))
                w.uint32(16).int32(m.everyDayMailRewardCount);
            if (m.overTimes != null && Object.hasOwnProperty.call(m, "overTimes"))
                w.uint32(24).int32(m.overTimes);
            if (m.rechargeID != null && Object.hasOwnProperty.call(m, "rechargeID"))
                w.uint32(32).int32(m.rechargeID);
            return w;
        };

        /**
         * Decodes a MonthAndWeekCardData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.MonthAndWeekCardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.MonthAndWeekCardData} MonthAndWeekCardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MonthAndWeekCardData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.MonthAndWeekCardData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.reward = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.everyDayMailRewardCount = r.int32();
                    break;
                case 3:
                    m.overTimes = r.int32();
                    break;
                case 4:
                    m.rechargeID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return MonthAndWeekCardData;
    })();

    proto.MonthAndWeekCardDataGroup = (function() {

        /**
         * Properties of a MonthAndWeekCardDataGroup.
         * @memberof proto
         * @interface IMonthAndWeekCardDataGroup
         * @property {proto.IMonthAndWeekCardData|null} [monthCardData] MonthAndWeekCardDataGroup monthCardData
         * @property {proto.IMonthAndWeekCardData|null} [advertCardData] MonthAndWeekCardDataGroup advertCardData
         */

        /**
         * Constructs a new MonthAndWeekCardDataGroup.
         * @memberof proto
         * @classdesc Represents a MonthAndWeekCardDataGroup.
         * @implements IMonthAndWeekCardDataGroup
         * @constructor
         * @param {proto.IMonthAndWeekCardDataGroup=} [p] Properties to set
         */
        function MonthAndWeekCardDataGroup(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * MonthAndWeekCardDataGroup monthCardData.
         * @member {proto.IMonthAndWeekCardData|null|undefined} monthCardData
         * @memberof proto.MonthAndWeekCardDataGroup
         * @instance
         */
        MonthAndWeekCardDataGroup.prototype.monthCardData = null;

        /**
         * MonthAndWeekCardDataGroup advertCardData.
         * @member {proto.IMonthAndWeekCardData|null|undefined} advertCardData
         * @memberof proto.MonthAndWeekCardDataGroup
         * @instance
         */
        MonthAndWeekCardDataGroup.prototype.advertCardData = null;

        /**
         * Encodes the specified MonthAndWeekCardDataGroup message. Does not implicitly {@link proto.MonthAndWeekCardDataGroup.verify|verify} messages.
         * @function encode
         * @memberof proto.MonthAndWeekCardDataGroup
         * @static
         * @param {proto.IMonthAndWeekCardDataGroup} m MonthAndWeekCardDataGroup message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MonthAndWeekCardDataGroup.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.monthCardData != null && Object.hasOwnProperty.call(m, "monthCardData"))
                $root.proto.MonthAndWeekCardData.encode(m.monthCardData, w.uint32(10).fork()).ldelim();
            if (m.advertCardData != null && Object.hasOwnProperty.call(m, "advertCardData"))
                $root.proto.MonthAndWeekCardData.encode(m.advertCardData, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a MonthAndWeekCardDataGroup message from the specified reader or buffer.
         * @function decode
         * @memberof proto.MonthAndWeekCardDataGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.MonthAndWeekCardDataGroup} MonthAndWeekCardDataGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MonthAndWeekCardDataGroup.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.MonthAndWeekCardDataGroup();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.monthCardData = $root.proto.MonthAndWeekCardData.decode(r, r.uint32());
                    break;
                case 2:
                    m.advertCardData = $root.proto.MonthAndWeekCardData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return MonthAndWeekCardDataGroup;
    })();

    proto.UnpackRebateData = (function() {

        /**
         * Properties of an UnpackRebateData.
         * @memberof proto
         * @interface IUnpackRebateData
         * @property {number|null} [unpackRebateCount] UnpackRebateData unpackRebateCount
         * @property {Array.<number>|null} [goldCardIDList] UnpackRebateData goldCardIDList
         */

        /**
         * Constructs a new UnpackRebateData.
         * @memberof proto
         * @classdesc Represents an UnpackRebateData.
         * @implements IUnpackRebateData
         * @constructor
         * @param {proto.IUnpackRebateData=} [p] Properties to set
         */
        function UnpackRebateData(p) {
            this.goldCardIDList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * UnpackRebateData unpackRebateCount.
         * @member {number} unpackRebateCount
         * @memberof proto.UnpackRebateData
         * @instance
         */
        UnpackRebateData.prototype.unpackRebateCount = 0;

        /**
         * UnpackRebateData goldCardIDList.
         * @member {Array.<number>} goldCardIDList
         * @memberof proto.UnpackRebateData
         * @instance
         */
        UnpackRebateData.prototype.goldCardIDList = $util.emptyArray;

        /**
         * Encodes the specified UnpackRebateData message. Does not implicitly {@link proto.UnpackRebateData.verify|verify} messages.
         * @function encode
         * @memberof proto.UnpackRebateData
         * @static
         * @param {proto.IUnpackRebateData} m UnpackRebateData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UnpackRebateData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unpackRebateCount != null && Object.hasOwnProperty.call(m, "unpackRebateCount"))
                w.uint32(8).int32(m.unpackRebateCount);
            if (m.goldCardIDList != null && m.goldCardIDList.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.goldCardIDList.length; ++i)
                    w.int32(m.goldCardIDList[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes an UnpackRebateData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.UnpackRebateData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.UnpackRebateData} UnpackRebateData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UnpackRebateData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.UnpackRebateData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unpackRebateCount = r.int32();
                    break;
                case 2:
                    if (!(m.goldCardIDList && m.goldCardIDList.length))
                        m.goldCardIDList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.goldCardIDList.push(r.int32());
                    } else
                        m.goldCardIDList.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return UnpackRebateData;
    })();

    proto.ActivityInfo = (function() {

        /**
         * Properties of an ActivityInfo.
         * @memberof proto
         * @interface IActivityInfo
         * @property {number|null} [ID] ActivityInfo ID
         * @property {number|null} [endTimeUTC] ActivityInfo endTimeUTC
         * @property {number|null} [beginTimeUTC] ActivityInfo beginTimeUTC
         * @property {proto.IGrowFundData|null} [GrowFund] ActivityInfo GrowFund
         * @property {proto.IMonthAndWeekCardDataGroup|null} [cardData] ActivityInfo cardData
         * @property {proto.IUnpackRebateData|null} [unpackRebateInfo] ActivityInfo unpackRebateInfo
         */

        /**
         * Constructs a new ActivityInfo.
         * @memberof proto
         * @classdesc Represents an ActivityInfo.
         * @implements IActivityInfo
         * @constructor
         * @param {proto.IActivityInfo=} [p] Properties to set
         */
        function ActivityInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ActivityInfo ID.
         * @member {number} ID
         * @memberof proto.ActivityInfo
         * @instance
         */
        ActivityInfo.prototype.ID = 0;

        /**
         * ActivityInfo endTimeUTC.
         * @member {number} endTimeUTC
         * @memberof proto.ActivityInfo
         * @instance
         */
        ActivityInfo.prototype.endTimeUTC = 0;

        /**
         * ActivityInfo beginTimeUTC.
         * @member {number} beginTimeUTC
         * @memberof proto.ActivityInfo
         * @instance
         */
        ActivityInfo.prototype.beginTimeUTC = 0;

        /**
         * ActivityInfo GrowFund.
         * @member {proto.IGrowFundData|null|undefined} GrowFund
         * @memberof proto.ActivityInfo
         * @instance
         */
        ActivityInfo.prototype.GrowFund = null;

        /**
         * ActivityInfo cardData.
         * @member {proto.IMonthAndWeekCardDataGroup|null|undefined} cardData
         * @memberof proto.ActivityInfo
         * @instance
         */
        ActivityInfo.prototype.cardData = null;

        /**
         * ActivityInfo unpackRebateInfo.
         * @member {proto.IUnpackRebateData|null|undefined} unpackRebateInfo
         * @memberof proto.ActivityInfo
         * @instance
         */
        ActivityInfo.prototype.unpackRebateInfo = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * ActivityInfo ActData.
         * @member {"GrowFund"|"cardData"|"unpackRebateInfo"|undefined} ActData
         * @memberof proto.ActivityInfo
         * @instance
         */
        Object.defineProperty(ActivityInfo.prototype, "ActData", {
            get: $util.oneOfGetter($oneOfFields = ["GrowFund", "cardData", "unpackRebateInfo"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified ActivityInfo message. Does not implicitly {@link proto.ActivityInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.ActivityInfo
         * @static
         * @param {proto.IActivityInfo} m ActivityInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivityInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(8).int32(m.ID);
            if (m.endTimeUTC != null && Object.hasOwnProperty.call(m, "endTimeUTC"))
                w.uint32(16).int32(m.endTimeUTC);
            if (m.beginTimeUTC != null && Object.hasOwnProperty.call(m, "beginTimeUTC"))
                w.uint32(24).int32(m.beginTimeUTC);
            if (m.GrowFund != null && Object.hasOwnProperty.call(m, "GrowFund"))
                $root.proto.GrowFundData.encode(m.GrowFund, w.uint32(34).fork()).ldelim();
            if (m.cardData != null && Object.hasOwnProperty.call(m, "cardData"))
                $root.proto.MonthAndWeekCardDataGroup.encode(m.cardData, w.uint32(42).fork()).ldelim();
            if (m.unpackRebateInfo != null && Object.hasOwnProperty.call(m, "unpackRebateInfo"))
                $root.proto.UnpackRebateData.encode(m.unpackRebateInfo, w.uint32(50).fork()).ldelim();
            return w;
        };

        /**
         * Decodes an ActivityInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ActivityInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ActivityInfo} ActivityInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivityInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ActivityInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.int32();
                    break;
                case 2:
                    m.endTimeUTC = r.int32();
                    break;
                case 3:
                    m.beginTimeUTC = r.int32();
                    break;
                case 4:
                    m.GrowFund = $root.proto.GrowFundData.decode(r, r.uint32());
                    break;
                case 5:
                    m.cardData = $root.proto.MonthAndWeekCardDataGroup.decode(r, r.uint32());
                    break;
                case 6:
                    m.unpackRebateInfo = $root.proto.UnpackRebateData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ActivityInfo;
    })();

    proto.Msg_LimitActivityReq = (function() {

        /**
         * Properties of a Msg_LimitActivityReq.
         * @memberof proto
         * @interface IMsg_LimitActivityReq
         */

        /**
         * Constructs a new Msg_LimitActivityReq.
         * @memberof proto
         * @classdesc Represents a Msg_LimitActivityReq.
         * @implements IMsg_LimitActivityReq
         * @constructor
         * @param {proto.IMsg_LimitActivityReq=} [p] Properties to set
         */
        function Msg_LimitActivityReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_LimitActivityReq message. Does not implicitly {@link proto.Msg_LimitActivityReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LimitActivityReq
         * @static
         * @param {proto.IMsg_LimitActivityReq} m Msg_LimitActivityReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LimitActivityReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_LimitActivityReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LimitActivityReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LimitActivityReq} Msg_LimitActivityReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LimitActivityReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LimitActivityReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LimitActivityReq;
    })();

    proto.Msg_LimitActivityRsp = (function() {

        /**
         * Properties of a Msg_LimitActivityRsp.
         * @memberof proto
         * @interface IMsg_LimitActivityRsp
         * @property {Array.<proto.IActivityInfo>|null} [openingActivities] Msg_LimitActivityRsp openingActivities
         */

        /**
         * Constructs a new Msg_LimitActivityRsp.
         * @memberof proto
         * @classdesc Represents a Msg_LimitActivityRsp.
         * @implements IMsg_LimitActivityRsp
         * @constructor
         * @param {proto.IMsg_LimitActivityRsp=} [p] Properties to set
         */
        function Msg_LimitActivityRsp(p) {
            this.openingActivities = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LimitActivityRsp openingActivities.
         * @member {Array.<proto.IActivityInfo>} openingActivities
         * @memberof proto.Msg_LimitActivityRsp
         * @instance
         */
        Msg_LimitActivityRsp.prototype.openingActivities = $util.emptyArray;

        /**
         * Encodes the specified Msg_LimitActivityRsp message. Does not implicitly {@link proto.Msg_LimitActivityRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LimitActivityRsp
         * @static
         * @param {proto.IMsg_LimitActivityRsp} m Msg_LimitActivityRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LimitActivityRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.openingActivities != null && m.openingActivities.length) {
                for (var i = 0; i < m.openingActivities.length; ++i)
                    $root.proto.ActivityInfo.encode(m.openingActivities[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_LimitActivityRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LimitActivityRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LimitActivityRsp} Msg_LimitActivityRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LimitActivityRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LimitActivityRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.openingActivities && m.openingActivities.length))
                        m.openingActivities = [];
                    m.openingActivities.push($root.proto.ActivityInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LimitActivityRsp;
    })();

    proto.Msg_GrowFundGetAwardReq = (function() {

        /**
         * Properties of a Msg_GrowFundGetAwardReq.
         * @memberof proto
         * @interface IMsg_GrowFundGetAwardReq
         * @property {number|null} [ID] Msg_GrowFundGetAwardReq ID
         */

        /**
         * Constructs a new Msg_GrowFundGetAwardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GrowFundGetAwardReq.
         * @implements IMsg_GrowFundGetAwardReq
         * @constructor
         * @param {proto.IMsg_GrowFundGetAwardReq=} [p] Properties to set
         */
        function Msg_GrowFundGetAwardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GrowFundGetAwardReq ID.
         * @member {number} ID
         * @memberof proto.Msg_GrowFundGetAwardReq
         * @instance
         */
        Msg_GrowFundGetAwardReq.prototype.ID = 0;

        /**
         * Encodes the specified Msg_GrowFundGetAwardReq message. Does not implicitly {@link proto.Msg_GrowFundGetAwardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GrowFundGetAwardReq
         * @static
         * @param {proto.IMsg_GrowFundGetAwardReq} m Msg_GrowFundGetAwardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GrowFundGetAwardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(8).int32(m.ID);
            return w;
        };

        /**
         * Decodes a Msg_GrowFundGetAwardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GrowFundGetAwardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GrowFundGetAwardReq} Msg_GrowFundGetAwardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GrowFundGetAwardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GrowFundGetAwardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GrowFundGetAwardReq;
    })();

    proto.Msg_GrowFundGetAwardRsp = (function() {

        /**
         * Properties of a Msg_GrowFundGetAwardRsp.
         * @memberof proto
         * @interface IMsg_GrowFundGetAwardRsp
         * @property {proto.Msg_GrowFundGetAwardRsp.ErrorCode|null} [result] Msg_GrowFundGetAwardRsp result
         * @property {proto.IGFCell|null} [info] Msg_GrowFundGetAwardRsp info
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [Awards] Msg_GrowFundGetAwardRsp Awards
         */

        /**
         * Constructs a new Msg_GrowFundGetAwardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GrowFundGetAwardRsp.
         * @implements IMsg_GrowFundGetAwardRsp
         * @constructor
         * @param {proto.IMsg_GrowFundGetAwardRsp=} [p] Properties to set
         */
        function Msg_GrowFundGetAwardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GrowFundGetAwardRsp result.
         * @member {proto.Msg_GrowFundGetAwardRsp.ErrorCode} result
         * @memberof proto.Msg_GrowFundGetAwardRsp
         * @instance
         */
        Msg_GrowFundGetAwardRsp.prototype.result = 0;

        /**
         * Msg_GrowFundGetAwardRsp info.
         * @member {proto.IGFCell|null|undefined} info
         * @memberof proto.Msg_GrowFundGetAwardRsp
         * @instance
         */
        Msg_GrowFundGetAwardRsp.prototype.info = null;

        /**
         * Msg_GrowFundGetAwardRsp Awards.
         * @member {Array.<proto.IVecRewardSimpleInfo>} Awards
         * @memberof proto.Msg_GrowFundGetAwardRsp
         * @instance
         */
        Msg_GrowFundGetAwardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GrowFundGetAwardRsp message. Does not implicitly {@link proto.Msg_GrowFundGetAwardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GrowFundGetAwardRsp
         * @static
         * @param {proto.IMsg_GrowFundGetAwardRsp} m Msg_GrowFundGetAwardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GrowFundGetAwardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.info != null && Object.hasOwnProperty.call(m, "info"))
                $root.proto.GFCell.encode(m.info, w.uint32(18).fork()).ldelim();
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.Awards[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GrowFundGetAwardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GrowFundGetAwardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GrowFundGetAwardRsp} Msg_GrowFundGetAwardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GrowFundGetAwardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GrowFundGetAwardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.info = $root.proto.GFCell.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GrowFundGetAwardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         */
        Msg_GrowFundGetAwardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            return values;
        })();

        return Msg_GrowFundGetAwardRsp;
    })();

    proto.MembershipData = (function() {

        /**
         * Properties of a MembershipData.
         * @memberof proto
         * @interface IMembershipData
         * @property {number|Long|null} [MonthlyCardVaildTime] MembershipData MonthlyCardVaildTime
         * @property {number|Long|null} [MonthlyCardAwardTime] MembershipData MonthlyCardAwardTime
         * @property {number|Long|null} [LifetimeCardBuyTime] MembershipData LifetimeCardBuyTime
         * @property {number|Long|null} [LifetimeCardAwardTime] MembershipData LifetimeCardAwardTime
         */

        /**
         * Constructs a new MembershipData.
         * @memberof proto
         * @classdesc Represents a MembershipData.
         * @implements IMembershipData
         * @constructor
         * @param {proto.IMembershipData=} [p] Properties to set
         */
        function MembershipData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * MembershipData MonthlyCardVaildTime.
         * @member {number|Long} MonthlyCardVaildTime
         * @memberof proto.MembershipData
         * @instance
         */
        MembershipData.prototype.MonthlyCardVaildTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MembershipData MonthlyCardAwardTime.
         * @member {number|Long} MonthlyCardAwardTime
         * @memberof proto.MembershipData
         * @instance
         */
        MembershipData.prototype.MonthlyCardAwardTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MembershipData LifetimeCardBuyTime.
         * @member {number|Long} LifetimeCardBuyTime
         * @memberof proto.MembershipData
         * @instance
         */
        MembershipData.prototype.LifetimeCardBuyTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MembershipData LifetimeCardAwardTime.
         * @member {number|Long} LifetimeCardAwardTime
         * @memberof proto.MembershipData
         * @instance
         */
        MembershipData.prototype.LifetimeCardAwardTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified MembershipData message. Does not implicitly {@link proto.MembershipData.verify|verify} messages.
         * @function encode
         * @memberof proto.MembershipData
         * @static
         * @param {proto.IMembershipData} m MembershipData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MembershipData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MonthlyCardVaildTime != null && Object.hasOwnProperty.call(m, "MonthlyCardVaildTime"))
                w.uint32(8).int64(m.MonthlyCardVaildTime);
            if (m.MonthlyCardAwardTime != null && Object.hasOwnProperty.call(m, "MonthlyCardAwardTime"))
                w.uint32(16).int64(m.MonthlyCardAwardTime);
            if (m.LifetimeCardBuyTime != null && Object.hasOwnProperty.call(m, "LifetimeCardBuyTime"))
                w.uint32(24).int64(m.LifetimeCardBuyTime);
            if (m.LifetimeCardAwardTime != null && Object.hasOwnProperty.call(m, "LifetimeCardAwardTime"))
                w.uint32(32).int64(m.LifetimeCardAwardTime);
            return w;
        };

        /**
         * Decodes a MembershipData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.MembershipData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.MembershipData} MembershipData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MembershipData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.MembershipData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MonthlyCardVaildTime = r.int64();
                    break;
                case 2:
                    m.MonthlyCardAwardTime = r.int64();
                    break;
                case 3:
                    m.LifetimeCardBuyTime = r.int64();
                    break;
                case 4:
                    m.LifetimeCardAwardTime = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return MembershipData;
    })();

    proto.Msg_GetMembershipRewardReq = (function() {

        /**
         * Properties of a Msg_GetMembershipRewardReq.
         * @memberof proto
         * @interface IMsg_GetMembershipRewardReq
         * @property {proto.Msg_GetMembershipRewardReq.Type|null} [type] Msg_GetMembershipRewardReq type
         */

        /**
         * Constructs a new Msg_GetMembershipRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetMembershipRewardReq.
         * @implements IMsg_GetMembershipRewardReq
         * @constructor
         * @param {proto.IMsg_GetMembershipRewardReq=} [p] Properties to set
         */
        function Msg_GetMembershipRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetMembershipRewardReq type.
         * @member {proto.Msg_GetMembershipRewardReq.Type} type
         * @memberof proto.Msg_GetMembershipRewardReq
         * @instance
         */
        Msg_GetMembershipRewardReq.prototype.type = 0;

        /**
         * Encodes the specified Msg_GetMembershipRewardReq message. Does not implicitly {@link proto.Msg_GetMembershipRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetMembershipRewardReq
         * @static
         * @param {proto.IMsg_GetMembershipRewardReq} m Msg_GetMembershipRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetMembershipRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            return w;
        };

        /**
         * Decodes a Msg_GetMembershipRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetMembershipRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetMembershipRewardReq} Msg_GetMembershipRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetMembershipRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetMembershipRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Type enum.
         * @name proto.Msg_GetMembershipRewardReq.Type
         * @enum {number}
         * @property {number} Lifetime=0 Lifetime value
         * @property {number} Monthly=1 Monthly value
         * @property {number} All=2 All value
         */
        Msg_GetMembershipRewardReq.Type = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Lifetime"] = 0;
            values[valuesById[1] = "Monthly"] = 1;
            values[valuesById[2] = "All"] = 2;
            return values;
        })();

        return Msg_GetMembershipRewardReq;
    })();

    proto.Msg_GetMembershipRewardRsp = (function() {

        /**
         * Properties of a Msg_GetMembershipRewardRsp.
         * @memberof proto
         * @interface IMsg_GetMembershipRewardRsp
         * @property {proto.Msg_GetMembershipRewardRsp.Source|null} [Opt] Msg_GetMembershipRewardRsp Opt
         * @property {proto.Msg_GetMembershipRewardRsp.ErrorCode|null} [Result] Msg_GetMembershipRewardRsp Result
         * @property {proto.IMembershipData|null} [Data] Msg_GetMembershipRewardRsp Data
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_GetMembershipRewardRsp Awards
         */

        /**
         * Constructs a new Msg_GetMembershipRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetMembershipRewardRsp.
         * @implements IMsg_GetMembershipRewardRsp
         * @constructor
         * @param {proto.IMsg_GetMembershipRewardRsp=} [p] Properties to set
         */
        function Msg_GetMembershipRewardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetMembershipRewardRsp Opt.
         * @member {proto.Msg_GetMembershipRewardRsp.Source} Opt
         * @memberof proto.Msg_GetMembershipRewardRsp
         * @instance
         */
        Msg_GetMembershipRewardRsp.prototype.Opt = 0;

        /**
         * Msg_GetMembershipRewardRsp Result.
         * @member {proto.Msg_GetMembershipRewardRsp.ErrorCode} Result
         * @memberof proto.Msg_GetMembershipRewardRsp
         * @instance
         */
        Msg_GetMembershipRewardRsp.prototype.Result = 0;

        /**
         * Msg_GetMembershipRewardRsp Data.
         * @member {proto.IMembershipData|null|undefined} Data
         * @memberof proto.Msg_GetMembershipRewardRsp
         * @instance
         */
        Msg_GetMembershipRewardRsp.prototype.Data = null;

        /**
         * Msg_GetMembershipRewardRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_GetMembershipRewardRsp
         * @instance
         */
        Msg_GetMembershipRewardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetMembershipRewardRsp message. Does not implicitly {@link proto.Msg_GetMembershipRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetMembershipRewardRsp
         * @static
         * @param {proto.IMsg_GetMembershipRewardRsp} m Msg_GetMembershipRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetMembershipRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Opt != null && Object.hasOwnProperty.call(m, "Opt"))
                w.uint32(8).int32(m.Opt);
            if (m.Result != null && Object.hasOwnProperty.call(m, "Result"))
                w.uint32(16).int32(m.Result);
            if (m.Data != null && Object.hasOwnProperty.call(m, "Data"))
                $root.proto.MembershipData.encode(m.Data, w.uint32(26).fork()).ldelim();
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetMembershipRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetMembershipRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetMembershipRewardRsp} Msg_GetMembershipRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetMembershipRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetMembershipRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Opt = r.int32();
                    break;
                case 2:
                    m.Result = r.int32();
                    break;
                case 3:
                    m.Data = $root.proto.MembershipData.decode(r, r.uint32());
                    break;
                case 4:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Source enum.
         * @name proto.Msg_GetMembershipRewardRsp.Source
         * @enum {number}
         * @property {number} BuyMonthlyCard=0 BuyMonthlyCard value
         * @property {number} BuyLifetimeCard=1 BuyLifetimeCard value
         * @property {number} GetMonthlyReward=2 GetMonthlyReward value
         * @property {number} GetLifetimeReward=3 GetLifetimeReward value
         * @property {number} GetAllReward=4 GetAllReward value
         */
        Msg_GetMembershipRewardRsp.Source = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BuyMonthlyCard"] = 0;
            values[valuesById[1] = "BuyLifetimeCard"] = 1;
            values[valuesById[2] = "GetMonthlyReward"] = 2;
            values[valuesById[3] = "GetLifetimeReward"] = 3;
            values[valuesById[4] = "GetAllReward"] = 4;
            return values;
        })();

        /**
         * ErrorCode enum.
         * @name proto.Msg_GetMembershipRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} LackMonthlyId=1 LackMonthlyId value
         * @property {number} GotMonthly=2 GotMonthly value
         * @property {number} LackLifetimeId=3 LackLifetimeId value
         * @property {number} GotLifetime=4 GotLifetime value
         */
        Msg_GetMembershipRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "LackMonthlyId"] = 1;
            values[valuesById[2] = "GotMonthly"] = 2;
            values[valuesById[3] = "LackLifetimeId"] = 3;
            values[valuesById[4] = "GotLifetime"] = 4;
            return values;
        })();

        return Msg_GetMembershipRewardRsp;
    })();

    proto.Msg_ReceiveUnpackRebateCardReq = (function() {

        /**
         * Properties of a Msg_ReceiveUnpackRebateCardReq.
         * @memberof proto
         * @interface IMsg_ReceiveUnpackRebateCardReq
         * @property {number|null} [selectCardID] Msg_ReceiveUnpackRebateCardReq selectCardID
         */

        /**
         * Constructs a new Msg_ReceiveUnpackRebateCardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveUnpackRebateCardReq.
         * @implements IMsg_ReceiveUnpackRebateCardReq
         * @constructor
         * @param {proto.IMsg_ReceiveUnpackRebateCardReq=} [p] Properties to set
         */
        function Msg_ReceiveUnpackRebateCardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveUnpackRebateCardReq selectCardID.
         * @member {number} selectCardID
         * @memberof proto.Msg_ReceiveUnpackRebateCardReq
         * @instance
         */
        Msg_ReceiveUnpackRebateCardReq.prototype.selectCardID = 0;

        /**
         * Encodes the specified Msg_ReceiveUnpackRebateCardReq message. Does not implicitly {@link proto.Msg_ReceiveUnpackRebateCardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveUnpackRebateCardReq
         * @static
         * @param {proto.IMsg_ReceiveUnpackRebateCardReq} m Msg_ReceiveUnpackRebateCardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveUnpackRebateCardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.selectCardID != null && Object.hasOwnProperty.call(m, "selectCardID"))
                w.uint32(8).int32(m.selectCardID);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveUnpackRebateCardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveUnpackRebateCardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveUnpackRebateCardReq} Msg_ReceiveUnpackRebateCardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveUnpackRebateCardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveUnpackRebateCardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.selectCardID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveUnpackRebateCardReq;
    })();

    proto.Msg_ReceiveUnpackRebateCardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveUnpackRebateCardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveUnpackRebateCardRsp
         * @property {proto.Msg_ReceiveUnpackRebateCardRsp.ErrorCode|null} [result] Msg_ReceiveUnpackRebateCardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_ReceiveUnpackRebateCardRsp Awards
         */

        /**
         * Constructs a new Msg_ReceiveUnpackRebateCardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveUnpackRebateCardRsp.
         * @implements IMsg_ReceiveUnpackRebateCardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveUnpackRebateCardRsp=} [p] Properties to set
         */
        function Msg_ReceiveUnpackRebateCardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveUnpackRebateCardRsp result.
         * @member {proto.Msg_ReceiveUnpackRebateCardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveUnpackRebateCardRsp
         * @instance
         */
        Msg_ReceiveUnpackRebateCardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveUnpackRebateCardRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_ReceiveUnpackRebateCardRsp
         * @instance
         */
        Msg_ReceiveUnpackRebateCardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReceiveUnpackRebateCardRsp message. Does not implicitly {@link proto.Msg_ReceiveUnpackRebateCardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveUnpackRebateCardRsp
         * @static
         * @param {proto.IMsg_ReceiveUnpackRebateCardRsp} m Msg_ReceiveUnpackRebateCardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveUnpackRebateCardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReceiveUnpackRebateCardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveUnpackRebateCardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveUnpackRebateCardRsp} Msg_ReceiveUnpackRebateCardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveUnpackRebateCardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveUnpackRebateCardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveUnpackRebateCardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ReceiveCountNotEnough=1 ReceiveCountNotEnough value
         */
        Msg_ReceiveUnpackRebateCardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ReceiveCountNotEnough"] = 1;
            return values;
        })();

        return Msg_ReceiveUnpackRebateCardRsp;
    })();

    proto.Msg_ActivityRechargeRsp = (function() {

        /**
         * Properties of a Msg_ActivityRechargeRsp.
         * @memberof proto
         * @interface IMsg_ActivityRechargeRsp
         * @property {proto.Msg_ActivityRechargeRsp.ErrorCode|null} [result] Msg_ActivityRechargeRsp result
         * @property {number|null} [RechargeId] Msg_ActivityRechargeRsp RechargeId
         */

        /**
         * Constructs a new Msg_ActivityRechargeRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ActivityRechargeRsp.
         * @implements IMsg_ActivityRechargeRsp
         * @constructor
         * @param {proto.IMsg_ActivityRechargeRsp=} [p] Properties to set
         */
        function Msg_ActivityRechargeRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ActivityRechargeRsp result.
         * @member {proto.Msg_ActivityRechargeRsp.ErrorCode} result
         * @memberof proto.Msg_ActivityRechargeRsp
         * @instance
         */
        Msg_ActivityRechargeRsp.prototype.result = 0;

        /**
         * Msg_ActivityRechargeRsp RechargeId.
         * @member {number} RechargeId
         * @memberof proto.Msg_ActivityRechargeRsp
         * @instance
         */
        Msg_ActivityRechargeRsp.prototype.RechargeId = 0;

        /**
         * Encodes the specified Msg_ActivityRechargeRsp message. Does not implicitly {@link proto.Msg_ActivityRechargeRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ActivityRechargeRsp
         * @static
         * @param {proto.IMsg_ActivityRechargeRsp} m Msg_ActivityRechargeRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ActivityRechargeRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.RechargeId != null && Object.hasOwnProperty.call(m, "RechargeId"))
                w.uint32(16).int32(m.RechargeId);
            return w;
        };

        /**
         * Decodes a Msg_ActivityRechargeRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ActivityRechargeRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ActivityRechargeRsp} Msg_ActivityRechargeRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ActivityRechargeRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ActivityRechargeRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.RechargeId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ActivityRechargeRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         * @property {number} ActivityOver=2 ActivityOver value
         */
        Msg_ActivityRechargeRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            values[valuesById[2] = "ActivityOver"] = 2;
            return values;
        })();

        return Msg_ActivityRechargeRsp;
    })();

    proto.Msg_ChangeActivityRsp = (function() {

        /**
         * Properties of a Msg_ChangeActivityRsp.
         * @memberof proto
         * @interface IMsg_ChangeActivityRsp
         * @property {proto.IActivityInfo|null} [changeInfo] Msg_ChangeActivityRsp changeInfo
         */

        /**
         * Constructs a new Msg_ChangeActivityRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChangeActivityRsp.
         * @implements IMsg_ChangeActivityRsp
         * @constructor
         * @param {proto.IMsg_ChangeActivityRsp=} [p] Properties to set
         */
        function Msg_ChangeActivityRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChangeActivityRsp changeInfo.
         * @member {proto.IActivityInfo|null|undefined} changeInfo
         * @memberof proto.Msg_ChangeActivityRsp
         * @instance
         */
        Msg_ChangeActivityRsp.prototype.changeInfo = null;

        /**
         * Encodes the specified Msg_ChangeActivityRsp message. Does not implicitly {@link proto.Msg_ChangeActivityRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChangeActivityRsp
         * @static
         * @param {proto.IMsg_ChangeActivityRsp} m Msg_ChangeActivityRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChangeActivityRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.changeInfo != null && Object.hasOwnProperty.call(m, "changeInfo"))
                $root.proto.ActivityInfo.encode(m.changeInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_ChangeActivityRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChangeActivityRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChangeActivityRsp} Msg_ChangeActivityRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChangeActivityRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChangeActivityRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.changeInfo = $root.proto.ActivityInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChangeActivityRsp;
    })();

    proto.Msg_BoxAwardSelectReq = (function() {

        /**
         * Properties of a Msg_BoxAwardSelectReq.
         * @memberof proto
         * @interface IMsg_BoxAwardSelectReq
         * @property {number|null} [boxIndex] Msg_BoxAwardSelectReq boxIndex
         * @property {number|null} [awardIndex] Msg_BoxAwardSelectReq awardIndex
         * @property {number|null} [selectIndex] Msg_BoxAwardSelectReq selectIndex
         */

        /**
         * Constructs a new Msg_BoxAwardSelectReq.
         * @memberof proto
         * @classdesc Represents a Msg_BoxAwardSelectReq.
         * @implements IMsg_BoxAwardSelectReq
         * @constructor
         * @param {proto.IMsg_BoxAwardSelectReq=} [p] Properties to set
         */
        function Msg_BoxAwardSelectReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BoxAwardSelectReq boxIndex.
         * @member {number} boxIndex
         * @memberof proto.Msg_BoxAwardSelectReq
         * @instance
         */
        Msg_BoxAwardSelectReq.prototype.boxIndex = 0;

        /**
         * Msg_BoxAwardSelectReq awardIndex.
         * @member {number} awardIndex
         * @memberof proto.Msg_BoxAwardSelectReq
         * @instance
         */
        Msg_BoxAwardSelectReq.prototype.awardIndex = 0;

        /**
         * Msg_BoxAwardSelectReq selectIndex.
         * @member {number} selectIndex
         * @memberof proto.Msg_BoxAwardSelectReq
         * @instance
         */
        Msg_BoxAwardSelectReq.prototype.selectIndex = 0;

        /**
         * Encodes the specified Msg_BoxAwardSelectReq message. Does not implicitly {@link proto.Msg_BoxAwardSelectReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BoxAwardSelectReq
         * @static
         * @param {proto.IMsg_BoxAwardSelectReq} m Msg_BoxAwardSelectReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BoxAwardSelectReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boxIndex != null && Object.hasOwnProperty.call(m, "boxIndex"))
                w.uint32(8).int32(m.boxIndex);
            if (m.awardIndex != null && Object.hasOwnProperty.call(m, "awardIndex"))
                w.uint32(16).int32(m.awardIndex);
            if (m.selectIndex != null && Object.hasOwnProperty.call(m, "selectIndex"))
                w.uint32(24).int32(m.selectIndex);
            return w;
        };

        /**
         * Decodes a Msg_BoxAwardSelectReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BoxAwardSelectReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BoxAwardSelectReq} Msg_BoxAwardSelectReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BoxAwardSelectReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BoxAwardSelectReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.boxIndex = r.int32();
                    break;
                case 2:
                    m.awardIndex = r.int32();
                    break;
                case 3:
                    m.selectIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BoxAwardSelectReq;
    })();

    proto.Msg_BoxAwardSelectRsp = (function() {

        /**
         * Properties of a Msg_BoxAwardSelectRsp.
         * @memberof proto
         * @interface IMsg_BoxAwardSelectRsp
         * @property {proto.Msg_BoxAwardSelectRsp.ErrorCode|null} [result] Msg_BoxAwardSelectRsp result
         * @property {proto.IRewardSimpleInfo|null} [award] Msg_BoxAwardSelectRsp award
         */

        /**
         * Constructs a new Msg_BoxAwardSelectRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BoxAwardSelectRsp.
         * @implements IMsg_BoxAwardSelectRsp
         * @constructor
         * @param {proto.IMsg_BoxAwardSelectRsp=} [p] Properties to set
         */
        function Msg_BoxAwardSelectRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BoxAwardSelectRsp result.
         * @member {proto.Msg_BoxAwardSelectRsp.ErrorCode} result
         * @memberof proto.Msg_BoxAwardSelectRsp
         * @instance
         */
        Msg_BoxAwardSelectRsp.prototype.result = 0;

        /**
         * Msg_BoxAwardSelectRsp award.
         * @member {proto.IRewardSimpleInfo|null|undefined} award
         * @memberof proto.Msg_BoxAwardSelectRsp
         * @instance
         */
        Msg_BoxAwardSelectRsp.prototype.award = null;

        /**
         * Encodes the specified Msg_BoxAwardSelectRsp message. Does not implicitly {@link proto.Msg_BoxAwardSelectRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BoxAwardSelectRsp
         * @static
         * @param {proto.IMsg_BoxAwardSelectRsp} m Msg_BoxAwardSelectRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BoxAwardSelectRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.award != null && Object.hasOwnProperty.call(m, "award"))
                $root.proto.RewardSimpleInfo.encode(m.award, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Msg_BoxAwardSelectRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BoxAwardSelectRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BoxAwardSelectRsp} Msg_BoxAwardSelectRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BoxAwardSelectRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BoxAwardSelectRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.award = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BoxAwardSelectRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         */
        Msg_BoxAwardSelectRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            return values;
        })();

        return Msg_BoxAwardSelectRsp;
    })();

    proto.Msg_DailyShareInviteReq = (function() {

        /**
         * Properties of a Msg_DailyShareInviteReq.
         * @memberof proto
         * @interface IMsg_DailyShareInviteReq
         */

        /**
         * Constructs a new Msg_DailyShareInviteReq.
         * @memberof proto
         * @classdesc Represents a Msg_DailyShareInviteReq.
         * @implements IMsg_DailyShareInviteReq
         * @constructor
         * @param {proto.IMsg_DailyShareInviteReq=} [p] Properties to set
         */
        function Msg_DailyShareInviteReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_DailyShareInviteReq message. Does not implicitly {@link proto.Msg_DailyShareInviteReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_DailyShareInviteReq
         * @static
         * @param {proto.IMsg_DailyShareInviteReq} m Msg_DailyShareInviteReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_DailyShareInviteReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_DailyShareInviteReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_DailyShareInviteReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_DailyShareInviteReq} Msg_DailyShareInviteReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_DailyShareInviteReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_DailyShareInviteReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_DailyShareInviteReq;
    })();

    proto.Msg_DailyShareInviteRsp = (function() {

        /**
         * Properties of a Msg_DailyShareInviteRsp.
         * @memberof proto
         * @interface IMsg_DailyShareInviteRsp
         * @property {Array.<proto.ISharedFriends>|null} [sharedFriends] Msg_DailyShareInviteRsp sharedFriends
         * @property {proto.IRewardSimpleInfo|null} [reward] Msg_DailyShareInviteRsp reward
         * @property {boolean|null} [todayFinish] Msg_DailyShareInviteRsp todayFinish
         */

        /**
         * Constructs a new Msg_DailyShareInviteRsp.
         * @memberof proto
         * @classdesc Represents a Msg_DailyShareInviteRsp.
         * @implements IMsg_DailyShareInviteRsp
         * @constructor
         * @param {proto.IMsg_DailyShareInviteRsp=} [p] Properties to set
         */
        function Msg_DailyShareInviteRsp(p) {
            this.sharedFriends = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_DailyShareInviteRsp sharedFriends.
         * @member {Array.<proto.ISharedFriends>} sharedFriends
         * @memberof proto.Msg_DailyShareInviteRsp
         * @instance
         */
        Msg_DailyShareInviteRsp.prototype.sharedFriends = $util.emptyArray;

        /**
         * Msg_DailyShareInviteRsp reward.
         * @member {proto.IRewardSimpleInfo|null|undefined} reward
         * @memberof proto.Msg_DailyShareInviteRsp
         * @instance
         */
        Msg_DailyShareInviteRsp.prototype.reward = null;

        /**
         * Msg_DailyShareInviteRsp todayFinish.
         * @member {boolean} todayFinish
         * @memberof proto.Msg_DailyShareInviteRsp
         * @instance
         */
        Msg_DailyShareInviteRsp.prototype.todayFinish = false;

        /**
         * Encodes the specified Msg_DailyShareInviteRsp message. Does not implicitly {@link proto.Msg_DailyShareInviteRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_DailyShareInviteRsp
         * @static
         * @param {proto.IMsg_DailyShareInviteRsp} m Msg_DailyShareInviteRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_DailyShareInviteRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.sharedFriends != null && m.sharedFriends.length) {
                for (var i = 0; i < m.sharedFriends.length; ++i)
                    $root.proto.SharedFriends.encode(m.sharedFriends[i], w.uint32(10).fork()).ldelim();
            }
            if (m.reward != null && Object.hasOwnProperty.call(m, "reward"))
                $root.proto.RewardSimpleInfo.encode(m.reward, w.uint32(18).fork()).ldelim();
            if (m.todayFinish != null && Object.hasOwnProperty.call(m, "todayFinish"))
                w.uint32(24).bool(m.todayFinish);
            return w;
        };

        /**
         * Decodes a Msg_DailyShareInviteRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_DailyShareInviteRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_DailyShareInviteRsp} Msg_DailyShareInviteRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_DailyShareInviteRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_DailyShareInviteRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.sharedFriends && m.sharedFriends.length))
                        m.sharedFriends = [];
                    m.sharedFriends.push($root.proto.SharedFriends.decode(r, r.uint32()));
                    break;
                case 2:
                    m.reward = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 3:
                    m.todayFinish = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_DailyShareInviteRsp;
    })();

    proto.Msg_GetDailyShareInviteRewardReq = (function() {

        /**
         * Properties of a Msg_GetDailyShareInviteRewardReq.
         * @memberof proto
         * @interface IMsg_GetDailyShareInviteRewardReq
         */

        /**
         * Constructs a new Msg_GetDailyShareInviteRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetDailyShareInviteRewardReq.
         * @implements IMsg_GetDailyShareInviteRewardReq
         * @constructor
         * @param {proto.IMsg_GetDailyShareInviteRewardReq=} [p] Properties to set
         */
        function Msg_GetDailyShareInviteRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetDailyShareInviteRewardReq message. Does not implicitly {@link proto.Msg_GetDailyShareInviteRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetDailyShareInviteRewardReq
         * @static
         * @param {proto.IMsg_GetDailyShareInviteRewardReq} m Msg_GetDailyShareInviteRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetDailyShareInviteRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetDailyShareInviteRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetDailyShareInviteRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetDailyShareInviteRewardReq} Msg_GetDailyShareInviteRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetDailyShareInviteRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetDailyShareInviteRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetDailyShareInviteRewardReq;
    })();

    proto.Msg_GetDailyShareInviteRewardRsp = (function() {

        /**
         * Properties of a Msg_GetDailyShareInviteRewardRsp.
         * @memberof proto
         * @interface IMsg_GetDailyShareInviteRewardRsp
         * @property {proto.Msg_GetDailyShareInviteRewardRsp.ErrorCode|null} [result] Msg_GetDailyShareInviteRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_GetDailyShareInviteRewardRsp reward
         */

        /**
         * Constructs a new Msg_GetDailyShareInviteRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetDailyShareInviteRewardRsp.
         * @implements IMsg_GetDailyShareInviteRewardRsp
         * @constructor
         * @param {proto.IMsg_GetDailyShareInviteRewardRsp=} [p] Properties to set
         */
        function Msg_GetDailyShareInviteRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetDailyShareInviteRewardRsp result.
         * @member {proto.Msg_GetDailyShareInviteRewardRsp.ErrorCode} result
         * @memberof proto.Msg_GetDailyShareInviteRewardRsp
         * @instance
         */
        Msg_GetDailyShareInviteRewardRsp.prototype.result = 0;

        /**
         * Msg_GetDailyShareInviteRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_GetDailyShareInviteRewardRsp
         * @instance
         */
        Msg_GetDailyShareInviteRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetDailyShareInviteRewardRsp message. Does not implicitly {@link proto.Msg_GetDailyShareInviteRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetDailyShareInviteRewardRsp
         * @static
         * @param {proto.IMsg_GetDailyShareInviteRewardRsp} m Msg_GetDailyShareInviteRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetDailyShareInviteRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetDailyShareInviteRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetDailyShareInviteRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetDailyShareInviteRewardRsp} Msg_GetDailyShareInviteRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetDailyShareInviteRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetDailyShareInviteRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GetDailyShareInviteRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         */
        Msg_GetDailyShareInviteRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            return values;
        })();

        return Msg_GetDailyShareInviteRewardRsp;
    })();

    proto.Msg_PushDailyShareInviteTips = (function() {

        /**
         * Properties of a Msg_PushDailyShareInviteTips.
         * @memberof proto
         * @interface IMsg_PushDailyShareInviteTips
         * @property {boolean|null} [bHave] Msg_PushDailyShareInviteTips bHave
         */

        /**
         * Constructs a new Msg_PushDailyShareInviteTips.
         * @memberof proto
         * @classdesc Represents a Msg_PushDailyShareInviteTips.
         * @implements IMsg_PushDailyShareInviteTips
         * @constructor
         * @param {proto.IMsg_PushDailyShareInviteTips=} [p] Properties to set
         */
        function Msg_PushDailyShareInviteTips(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushDailyShareInviteTips bHave.
         * @member {boolean} bHave
         * @memberof proto.Msg_PushDailyShareInviteTips
         * @instance
         */
        Msg_PushDailyShareInviteTips.prototype.bHave = false;

        /**
         * Encodes the specified Msg_PushDailyShareInviteTips message. Does not implicitly {@link proto.Msg_PushDailyShareInviteTips.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushDailyShareInviteTips
         * @static
         * @param {proto.IMsg_PushDailyShareInviteTips} m Msg_PushDailyShareInviteTips message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushDailyShareInviteTips.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bHave != null && Object.hasOwnProperty.call(m, "bHave"))
                w.uint32(8).bool(m.bHave);
            return w;
        };

        /**
         * Decodes a Msg_PushDailyShareInviteTips message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushDailyShareInviteTips
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushDailyShareInviteTips} Msg_PushDailyShareInviteTips
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushDailyShareInviteTips.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushDailyShareInviteTips();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bHave = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushDailyShareInviteTips;
    })();

    proto.Msg_LookADAddBoxSpeedUpTimeInfoReq = (function() {

        /**
         * Properties of a Msg_LookADAddBoxSpeedUpTimeInfoReq.
         * @memberof proto
         * @interface IMsg_LookADAddBoxSpeedUpTimeInfoReq
         */

        /**
         * Constructs a new Msg_LookADAddBoxSpeedUpTimeInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_LookADAddBoxSpeedUpTimeInfoReq.
         * @implements IMsg_LookADAddBoxSpeedUpTimeInfoReq
         * @constructor
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeInfoReq=} [p] Properties to set
         */
        function Msg_LookADAddBoxSpeedUpTimeInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_LookADAddBoxSpeedUpTimeInfoReq message. Does not implicitly {@link proto.Msg_LookADAddBoxSpeedUpTimeInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeInfoReq
         * @static
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeInfoReq} m Msg_LookADAddBoxSpeedUpTimeInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LookADAddBoxSpeedUpTimeInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_LookADAddBoxSpeedUpTimeInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LookADAddBoxSpeedUpTimeInfoReq} Msg_LookADAddBoxSpeedUpTimeInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LookADAddBoxSpeedUpTimeInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LookADAddBoxSpeedUpTimeInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LookADAddBoxSpeedUpTimeInfoReq;
    })();

    proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp = (function() {

        /**
         * Properties of a Msg_LookADAddBoxSpeedUpTimeInfoRsp.
         * @memberof proto
         * @interface IMsg_LookADAddBoxSpeedUpTimeInfoRsp
         * @property {proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp.ErrorCode|null} [result] Msg_LookADAddBoxSpeedUpTimeInfoRsp result
         * @property {number|null} [times] Msg_LookADAddBoxSpeedUpTimeInfoRsp times
         */

        /**
         * Constructs a new Msg_LookADAddBoxSpeedUpTimeInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_LookADAddBoxSpeedUpTimeInfoRsp.
         * @implements IMsg_LookADAddBoxSpeedUpTimeInfoRsp
         * @constructor
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeInfoRsp=} [p] Properties to set
         */
        function Msg_LookADAddBoxSpeedUpTimeInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LookADAddBoxSpeedUpTimeInfoRsp result.
         * @member {proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp.ErrorCode} result
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp
         * @instance
         */
        Msg_LookADAddBoxSpeedUpTimeInfoRsp.prototype.result = 0;

        /**
         * Msg_LookADAddBoxSpeedUpTimeInfoRsp times.
         * @member {number} times
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp
         * @instance
         */
        Msg_LookADAddBoxSpeedUpTimeInfoRsp.prototype.times = 0;

        /**
         * Encodes the specified Msg_LookADAddBoxSpeedUpTimeInfoRsp message. Does not implicitly {@link proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp
         * @static
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeInfoRsp} m Msg_LookADAddBoxSpeedUpTimeInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LookADAddBoxSpeedUpTimeInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.times != null && Object.hasOwnProperty.call(m, "times"))
                w.uint32(16).int32(m.times);
            return w;
        };

        /**
         * Decodes a Msg_LookADAddBoxSpeedUpTimeInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp} Msg_LookADAddBoxSpeedUpTimeInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LookADAddBoxSpeedUpTimeInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.times = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_LookADAddBoxSpeedUpTimeInfoRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         */
        Msg_LookADAddBoxSpeedUpTimeInfoRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            return values;
        })();

        return Msg_LookADAddBoxSpeedUpTimeInfoRsp;
    })();

    proto.Msg_LookADAddBoxSpeedUpTimeReq = (function() {

        /**
         * Properties of a Msg_LookADAddBoxSpeedUpTimeReq.
         * @memberof proto
         * @interface IMsg_LookADAddBoxSpeedUpTimeReq
         */

        /**
         * Constructs a new Msg_LookADAddBoxSpeedUpTimeReq.
         * @memberof proto
         * @classdesc Represents a Msg_LookADAddBoxSpeedUpTimeReq.
         * @implements IMsg_LookADAddBoxSpeedUpTimeReq
         * @constructor
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeReq=} [p] Properties to set
         */
        function Msg_LookADAddBoxSpeedUpTimeReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_LookADAddBoxSpeedUpTimeReq message. Does not implicitly {@link proto.Msg_LookADAddBoxSpeedUpTimeReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeReq
         * @static
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeReq} m Msg_LookADAddBoxSpeedUpTimeReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LookADAddBoxSpeedUpTimeReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_LookADAddBoxSpeedUpTimeReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LookADAddBoxSpeedUpTimeReq} Msg_LookADAddBoxSpeedUpTimeReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LookADAddBoxSpeedUpTimeReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LookADAddBoxSpeedUpTimeReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LookADAddBoxSpeedUpTimeReq;
    })();

    proto.Msg_LookADAddBoxSpeedUpTimeRsp = (function() {

        /**
         * Properties of a Msg_LookADAddBoxSpeedUpTimeRsp.
         * @memberof proto
         * @interface IMsg_LookADAddBoxSpeedUpTimeRsp
         * @property {proto.Msg_LookADAddBoxSpeedUpTimeRsp.ErrorCode|null} [result] Msg_LookADAddBoxSpeedUpTimeRsp result
         * @property {number|null} [times] Msg_LookADAddBoxSpeedUpTimeRsp times
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_LookADAddBoxSpeedUpTimeRsp reward
         */

        /**
         * Constructs a new Msg_LookADAddBoxSpeedUpTimeRsp.
         * @memberof proto
         * @classdesc Represents a Msg_LookADAddBoxSpeedUpTimeRsp.
         * @implements IMsg_LookADAddBoxSpeedUpTimeRsp
         * @constructor
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeRsp=} [p] Properties to set
         */
        function Msg_LookADAddBoxSpeedUpTimeRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LookADAddBoxSpeedUpTimeRsp result.
         * @member {proto.Msg_LookADAddBoxSpeedUpTimeRsp.ErrorCode} result
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeRsp
         * @instance
         */
        Msg_LookADAddBoxSpeedUpTimeRsp.prototype.result = 0;

        /**
         * Msg_LookADAddBoxSpeedUpTimeRsp times.
         * @member {number} times
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeRsp
         * @instance
         */
        Msg_LookADAddBoxSpeedUpTimeRsp.prototype.times = 0;

        /**
         * Msg_LookADAddBoxSpeedUpTimeRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeRsp
         * @instance
         */
        Msg_LookADAddBoxSpeedUpTimeRsp.prototype.reward = $util.emptyArray;

        /**
         * Encodes the specified Msg_LookADAddBoxSpeedUpTimeRsp message. Does not implicitly {@link proto.Msg_LookADAddBoxSpeedUpTimeRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeRsp
         * @static
         * @param {proto.IMsg_LookADAddBoxSpeedUpTimeRsp} m Msg_LookADAddBoxSpeedUpTimeRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LookADAddBoxSpeedUpTimeRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.times != null && Object.hasOwnProperty.call(m, "times"))
                w.uint32(16).int32(m.times);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_LookADAddBoxSpeedUpTimeRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LookADAddBoxSpeedUpTimeRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LookADAddBoxSpeedUpTimeRsp} Msg_LookADAddBoxSpeedUpTimeRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LookADAddBoxSpeedUpTimeRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LookADAddBoxSpeedUpTimeRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.times = r.int32();
                    break;
                case 3:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_LookADAddBoxSpeedUpTimeRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         */
        Msg_LookADAddBoxSpeedUpTimeRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            return values;
        })();

        return Msg_LookADAddBoxSpeedUpTimeRsp;
    })();

    proto.Msg_GetOneYuanToBuyInfoReq = (function() {

        /**
         * Properties of a Msg_GetOneYuanToBuyInfoReq.
         * @memberof proto
         * @interface IMsg_GetOneYuanToBuyInfoReq
         */

        /**
         * Constructs a new Msg_GetOneYuanToBuyInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetOneYuanToBuyInfoReq.
         * @implements IMsg_GetOneYuanToBuyInfoReq
         * @constructor
         * @param {proto.IMsg_GetOneYuanToBuyInfoReq=} [p] Properties to set
         */
        function Msg_GetOneYuanToBuyInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetOneYuanToBuyInfoReq message. Does not implicitly {@link proto.Msg_GetOneYuanToBuyInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetOneYuanToBuyInfoReq
         * @static
         * @param {proto.IMsg_GetOneYuanToBuyInfoReq} m Msg_GetOneYuanToBuyInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetOneYuanToBuyInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetOneYuanToBuyInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetOneYuanToBuyInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetOneYuanToBuyInfoReq} Msg_GetOneYuanToBuyInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetOneYuanToBuyInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetOneYuanToBuyInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetOneYuanToBuyInfoReq;
    })();

    proto.Msg_GetOneYuanToBuyInfoRsp = (function() {

        /**
         * Properties of a Msg_GetOneYuanToBuyInfoRsp.
         * @memberof proto
         * @interface IMsg_GetOneYuanToBuyInfoRsp
         * @property {boolean|null} [buy] Msg_GetOneYuanToBuyInfoRsp buy
         * @property {number|null} [overTimes] Msg_GetOneYuanToBuyInfoRsp overTimes
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewardList] Msg_GetOneYuanToBuyInfoRsp rewardList
         */

        /**
         * Constructs a new Msg_GetOneYuanToBuyInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetOneYuanToBuyInfoRsp.
         * @implements IMsg_GetOneYuanToBuyInfoRsp
         * @constructor
         * @param {proto.IMsg_GetOneYuanToBuyInfoRsp=} [p] Properties to set
         */
        function Msg_GetOneYuanToBuyInfoRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetOneYuanToBuyInfoRsp buy.
         * @member {boolean} buy
         * @memberof proto.Msg_GetOneYuanToBuyInfoRsp
         * @instance
         */
        Msg_GetOneYuanToBuyInfoRsp.prototype.buy = false;

        /**
         * Msg_GetOneYuanToBuyInfoRsp overTimes.
         * @member {number} overTimes
         * @memberof proto.Msg_GetOneYuanToBuyInfoRsp
         * @instance
         */
        Msg_GetOneYuanToBuyInfoRsp.prototype.overTimes = 0;

        /**
         * Msg_GetOneYuanToBuyInfoRsp rewardList.
         * @member {Array.<proto.IRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_GetOneYuanToBuyInfoRsp
         * @instance
         */
        Msg_GetOneYuanToBuyInfoRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetOneYuanToBuyInfoRsp message. Does not implicitly {@link proto.Msg_GetOneYuanToBuyInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetOneYuanToBuyInfoRsp
         * @static
         * @param {proto.IMsg_GetOneYuanToBuyInfoRsp} m Msg_GetOneYuanToBuyInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetOneYuanToBuyInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.buy != null && Object.hasOwnProperty.call(m, "buy"))
                w.uint32(8).bool(m.buy);
            if (m.overTimes != null && Object.hasOwnProperty.call(m, "overTimes"))
                w.uint32(16).int32(m.overTimes);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewardList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetOneYuanToBuyInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetOneYuanToBuyInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetOneYuanToBuyInfoRsp} Msg_GetOneYuanToBuyInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetOneYuanToBuyInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetOneYuanToBuyInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.buy = r.bool();
                    break;
                case 2:
                    m.overTimes = r.int32();
                    break;
                case 3:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetOneYuanToBuyInfoRsp;
    })();

    proto.Msg_ReceiveOneYuanRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveOneYuanRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveOneYuanRewardReq
         */

        /**
         * Constructs a new Msg_ReceiveOneYuanRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveOneYuanRewardReq.
         * @implements IMsg_ReceiveOneYuanRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveOneYuanRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveOneYuanRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ReceiveOneYuanRewardReq message. Does not implicitly {@link proto.Msg_ReceiveOneYuanRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveOneYuanRewardReq
         * @static
         * @param {proto.IMsg_ReceiveOneYuanRewardReq} m Msg_ReceiveOneYuanRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveOneYuanRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ReceiveOneYuanRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveOneYuanRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveOneYuanRewardReq} Msg_ReceiveOneYuanRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveOneYuanRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveOneYuanRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveOneYuanRewardReq;
    })();

    proto.Msg_ReceiveOneYuanRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveOneYuanRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveOneYuanRewardRsp
         * @property {proto.Msg_ReceiveOneYuanRewardRsp.ErrorCode|null} [result] Msg_ReceiveOneYuanRewardRsp result
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [rewardList] Msg_ReceiveOneYuanRewardRsp rewardList
         */

        /**
         * Constructs a new Msg_ReceiveOneYuanRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveOneYuanRewardRsp.
         * @implements IMsg_ReceiveOneYuanRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveOneYuanRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveOneYuanRewardRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveOneYuanRewardRsp result.
         * @member {proto.Msg_ReceiveOneYuanRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveOneYuanRewardRsp
         * @instance
         */
        Msg_ReceiveOneYuanRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveOneYuanRewardRsp rewardList.
         * @member {Array.<proto.IVecRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_ReceiveOneYuanRewardRsp
         * @instance
         */
        Msg_ReceiveOneYuanRewardRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReceiveOneYuanRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveOneYuanRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveOneYuanRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveOneYuanRewardRsp} m Msg_ReceiveOneYuanRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveOneYuanRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.rewardList[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReceiveOneYuanRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveOneYuanRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveOneYuanRewardRsp} Msg_ReceiveOneYuanRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveOneYuanRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveOneYuanRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveOneYuanRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyReceived=1 AlreadyReceived value
         * @property {number} ActivityOver=2 ActivityOver value
         * @property {number} ScoreShortage=3 ScoreShortage value
         */
        Msg_ReceiveOneYuanRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyReceived"] = 1;
            values[valuesById[2] = "ActivityOver"] = 2;
            values[valuesById[3] = "ScoreShortage"] = 3;
            return values;
        })();

        return Msg_ReceiveOneYuanRewardRsp;
    })();

    /**
     * BuyAVDType enum.
     * @name proto.BuyAVDType
     * @enum {number}
     * @property {number} BuyAVDNone=0 BuyAVDNone value
     * @property {number} BuyAVDItem=1 BuyAVDItem value
     * @property {number} BuyAVDGold=2 BuyAVDGold value
     */
    proto.BuyAVDType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "BuyAVDNone"] = 0;
        values[valuesById[1] = "BuyAVDItem"] = 1;
        values[valuesById[2] = "BuyAVDGold"] = 2;
        return values;
    })();

    proto.Msg_CostSomeThingToGetAvdRewardReq = (function() {

        /**
         * Properties of a Msg_CostSomeThingToGetAvdRewardReq.
         * @memberof proto
         * @interface IMsg_CostSomeThingToGetAvdRewardReq
         * @property {proto.BuyAVDType|null} [ntype] Msg_CostSomeThingToGetAvdRewardReq ntype
         */

        /**
         * Constructs a new Msg_CostSomeThingToGetAvdRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_CostSomeThingToGetAvdRewardReq.
         * @implements IMsg_CostSomeThingToGetAvdRewardReq
         * @constructor
         * @param {proto.IMsg_CostSomeThingToGetAvdRewardReq=} [p] Properties to set
         */
        function Msg_CostSomeThingToGetAvdRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CostSomeThingToGetAvdRewardReq ntype.
         * @member {proto.BuyAVDType} ntype
         * @memberof proto.Msg_CostSomeThingToGetAvdRewardReq
         * @instance
         */
        Msg_CostSomeThingToGetAvdRewardReq.prototype.ntype = 0;

        /**
         * Encodes the specified Msg_CostSomeThingToGetAvdRewardReq message. Does not implicitly {@link proto.Msg_CostSomeThingToGetAvdRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CostSomeThingToGetAvdRewardReq
         * @static
         * @param {proto.IMsg_CostSomeThingToGetAvdRewardReq} m Msg_CostSomeThingToGetAvdRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CostSomeThingToGetAvdRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ntype != null && Object.hasOwnProperty.call(m, "ntype"))
                w.uint32(8).int32(m.ntype);
            return w;
        };

        /**
         * Decodes a Msg_CostSomeThingToGetAvdRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CostSomeThingToGetAvdRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CostSomeThingToGetAvdRewardReq} Msg_CostSomeThingToGetAvdRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CostSomeThingToGetAvdRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CostSomeThingToGetAvdRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ntype = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CostSomeThingToGetAvdRewardReq;
    })();

    proto.Msg_CostSomeThingToGetAvdRewardRsp = (function() {

        /**
         * Properties of a Msg_CostSomeThingToGetAvdRewardRsp.
         * @memberof proto
         * @interface IMsg_CostSomeThingToGetAvdRewardRsp
         * @property {proto.Msg_CostSomeThingToGetAvdRewardRsp.ErrorCode|null} [result] Msg_CostSomeThingToGetAvdRewardRsp result
         */

        /**
         * Constructs a new Msg_CostSomeThingToGetAvdRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CostSomeThingToGetAvdRewardRsp.
         * @implements IMsg_CostSomeThingToGetAvdRewardRsp
         * @constructor
         * @param {proto.IMsg_CostSomeThingToGetAvdRewardRsp=} [p] Properties to set
         */
        function Msg_CostSomeThingToGetAvdRewardRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CostSomeThingToGetAvdRewardRsp result.
         * @member {proto.Msg_CostSomeThingToGetAvdRewardRsp.ErrorCode} result
         * @memberof proto.Msg_CostSomeThingToGetAvdRewardRsp
         * @instance
         */
        Msg_CostSomeThingToGetAvdRewardRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_CostSomeThingToGetAvdRewardRsp message. Does not implicitly {@link proto.Msg_CostSomeThingToGetAvdRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CostSomeThingToGetAvdRewardRsp
         * @static
         * @param {proto.IMsg_CostSomeThingToGetAvdRewardRsp} m Msg_CostSomeThingToGetAvdRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CostSomeThingToGetAvdRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_CostSomeThingToGetAvdRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CostSomeThingToGetAvdRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CostSomeThingToGetAvdRewardRsp} Msg_CostSomeThingToGetAvdRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CostSomeThingToGetAvdRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CostSomeThingToGetAvdRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_CostSomeThingToGetAvdRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Fail=1 Fail value
         */
        Msg_CostSomeThingToGetAvdRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Fail"] = 1;
            return values;
        })();

        return Msg_CostSomeThingToGetAvdRewardRsp;
    })();

    proto.Msg_SharePointEventReported = (function() {

        /**
         * Properties of a Msg_SharePointEventReported.
         * @memberof proto
         * @interface IMsg_SharePointEventReported
         * @property {string|null} [shareDesc] Msg_SharePointEventReported shareDesc
         * @property {number|null} [shareType] Msg_SharePointEventReported shareType
         */

        /**
         * Constructs a new Msg_SharePointEventReported.
         * @memberof proto
         * @classdesc Represents a Msg_SharePointEventReported.
         * @implements IMsg_SharePointEventReported
         * @constructor
         * @param {proto.IMsg_SharePointEventReported=} [p] Properties to set
         */
        function Msg_SharePointEventReported(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SharePointEventReported shareDesc.
         * @member {string} shareDesc
         * @memberof proto.Msg_SharePointEventReported
         * @instance
         */
        Msg_SharePointEventReported.prototype.shareDesc = "";

        /**
         * Msg_SharePointEventReported shareType.
         * @member {number} shareType
         * @memberof proto.Msg_SharePointEventReported
         * @instance
         */
        Msg_SharePointEventReported.prototype.shareType = 0;

        /**
         * Encodes the specified Msg_SharePointEventReported message. Does not implicitly {@link proto.Msg_SharePointEventReported.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SharePointEventReported
         * @static
         * @param {proto.IMsg_SharePointEventReported} m Msg_SharePointEventReported message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SharePointEventReported.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.shareDesc != null && Object.hasOwnProperty.call(m, "shareDesc"))
                w.uint32(10).string(m.shareDesc);
            if (m.shareType != null && Object.hasOwnProperty.call(m, "shareType"))
                w.uint32(16).int32(m.shareType);
            return w;
        };

        /**
         * Decodes a Msg_SharePointEventReported message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SharePointEventReported
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SharePointEventReported} Msg_SharePointEventReported
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SharePointEventReported.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SharePointEventReported();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.shareDesc = r.string();
                    break;
                case 2:
                    m.shareType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SharePointEventReported;
    })();

    proto.Msg_GetDiscountsGiftBagInfoReq = (function() {

        /**
         * Properties of a Msg_GetDiscountsGiftBagInfoReq.
         * @memberof proto
         * @interface IMsg_GetDiscountsGiftBagInfoReq
         */

        /**
         * Constructs a new Msg_GetDiscountsGiftBagInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetDiscountsGiftBagInfoReq.
         * @implements IMsg_GetDiscountsGiftBagInfoReq
         * @constructor
         * @param {proto.IMsg_GetDiscountsGiftBagInfoReq=} [p] Properties to set
         */
        function Msg_GetDiscountsGiftBagInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetDiscountsGiftBagInfoReq message. Does not implicitly {@link proto.Msg_GetDiscountsGiftBagInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetDiscountsGiftBagInfoReq
         * @static
         * @param {proto.IMsg_GetDiscountsGiftBagInfoReq} m Msg_GetDiscountsGiftBagInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetDiscountsGiftBagInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetDiscountsGiftBagInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetDiscountsGiftBagInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetDiscountsGiftBagInfoReq} Msg_GetDiscountsGiftBagInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetDiscountsGiftBagInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetDiscountsGiftBagInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetDiscountsGiftBagInfoReq;
    })();

    proto.Msg_GetDiscountsGiftBagInfoRsp = (function() {

        /**
         * Properties of a Msg_GetDiscountsGiftBagInfoRsp.
         * @memberof proto
         * @interface IMsg_GetDiscountsGiftBagInfoRsp
         * @property {boolean|null} [bBought] Msg_GetDiscountsGiftBagInfoRsp bBought
         * @property {number|null} [overTimes] Msg_GetDiscountsGiftBagInfoRsp overTimes
         * @property {number|null} [rechargeID] Msg_GetDiscountsGiftBagInfoRsp rechargeID
         * @property {number|null} [discountsNum] Msg_GetDiscountsGiftBagInfoRsp discountsNum
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewardList] Msg_GetDiscountsGiftBagInfoRsp rewardList
         */

        /**
         * Constructs a new Msg_GetDiscountsGiftBagInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetDiscountsGiftBagInfoRsp.
         * @implements IMsg_GetDiscountsGiftBagInfoRsp
         * @constructor
         * @param {proto.IMsg_GetDiscountsGiftBagInfoRsp=} [p] Properties to set
         */
        function Msg_GetDiscountsGiftBagInfoRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetDiscountsGiftBagInfoRsp bBought.
         * @member {boolean} bBought
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @instance
         */
        Msg_GetDiscountsGiftBagInfoRsp.prototype.bBought = false;

        /**
         * Msg_GetDiscountsGiftBagInfoRsp overTimes.
         * @member {number} overTimes
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @instance
         */
        Msg_GetDiscountsGiftBagInfoRsp.prototype.overTimes = 0;

        /**
         * Msg_GetDiscountsGiftBagInfoRsp rechargeID.
         * @member {number} rechargeID
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @instance
         */
        Msg_GetDiscountsGiftBagInfoRsp.prototype.rechargeID = 0;

        /**
         * Msg_GetDiscountsGiftBagInfoRsp discountsNum.
         * @member {number} discountsNum
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @instance
         */
        Msg_GetDiscountsGiftBagInfoRsp.prototype.discountsNum = 0;

        /**
         * Msg_GetDiscountsGiftBagInfoRsp rewardList.
         * @member {Array.<proto.IRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @instance
         */
        Msg_GetDiscountsGiftBagInfoRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetDiscountsGiftBagInfoRsp message. Does not implicitly {@link proto.Msg_GetDiscountsGiftBagInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @static
         * @param {proto.IMsg_GetDiscountsGiftBagInfoRsp} m Msg_GetDiscountsGiftBagInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetDiscountsGiftBagInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bBought != null && Object.hasOwnProperty.call(m, "bBought"))
                w.uint32(8).bool(m.bBought);
            if (m.overTimes != null && Object.hasOwnProperty.call(m, "overTimes"))
                w.uint32(16).int32(m.overTimes);
            if (m.rechargeID != null && Object.hasOwnProperty.call(m, "rechargeID"))
                w.uint32(24).int32(m.rechargeID);
            if (m.discountsNum != null && Object.hasOwnProperty.call(m, "discountsNum"))
                w.uint32(32).int32(m.discountsNum);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewardList[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetDiscountsGiftBagInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetDiscountsGiftBagInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetDiscountsGiftBagInfoRsp} Msg_GetDiscountsGiftBagInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetDiscountsGiftBagInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetDiscountsGiftBagInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bBought = r.bool();
                    break;
                case 2:
                    m.overTimes = r.int32();
                    break;
                case 3:
                    m.rechargeID = r.int32();
                    break;
                case 4:
                    m.discountsNum = r.int32();
                    break;
                case 5:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetDiscountsGiftBagInfoRsp;
    })();

    proto.Msg_ReceiveDiscountsGiftBagRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveDiscountsGiftBagRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveDiscountsGiftBagRewardReq
         */

        /**
         * Constructs a new Msg_ReceiveDiscountsGiftBagRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveDiscountsGiftBagRewardReq.
         * @implements IMsg_ReceiveDiscountsGiftBagRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveDiscountsGiftBagRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveDiscountsGiftBagRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ReceiveDiscountsGiftBagRewardReq message. Does not implicitly {@link proto.Msg_ReceiveDiscountsGiftBagRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveDiscountsGiftBagRewardReq
         * @static
         * @param {proto.IMsg_ReceiveDiscountsGiftBagRewardReq} m Msg_ReceiveDiscountsGiftBagRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveDiscountsGiftBagRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ReceiveDiscountsGiftBagRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveDiscountsGiftBagRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveDiscountsGiftBagRewardReq} Msg_ReceiveDiscountsGiftBagRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveDiscountsGiftBagRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveDiscountsGiftBagRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveDiscountsGiftBagRewardReq;
    })();

    proto.Msg_ReceiveDiscountsGiftBagRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveDiscountsGiftBagRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveDiscountsGiftBagRewardRsp
         * @property {proto.Msg_ReceiveDiscountsGiftBagRewardRsp.ErrorCode|null} [result] Msg_ReceiveDiscountsGiftBagRewardRsp result
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [rewardList] Msg_ReceiveDiscountsGiftBagRewardRsp rewardList
         */

        /**
         * Constructs a new Msg_ReceiveDiscountsGiftBagRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveDiscountsGiftBagRewardRsp.
         * @implements IMsg_ReceiveDiscountsGiftBagRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveDiscountsGiftBagRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveDiscountsGiftBagRewardRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveDiscountsGiftBagRewardRsp result.
         * @member {proto.Msg_ReceiveDiscountsGiftBagRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveDiscountsGiftBagRewardRsp
         * @instance
         */
        Msg_ReceiveDiscountsGiftBagRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveDiscountsGiftBagRewardRsp rewardList.
         * @member {Array.<proto.IVecRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_ReceiveDiscountsGiftBagRewardRsp
         * @instance
         */
        Msg_ReceiveDiscountsGiftBagRewardRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReceiveDiscountsGiftBagRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveDiscountsGiftBagRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveDiscountsGiftBagRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveDiscountsGiftBagRewardRsp} m Msg_ReceiveDiscountsGiftBagRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveDiscountsGiftBagRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.rewardList[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReceiveDiscountsGiftBagRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveDiscountsGiftBagRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveDiscountsGiftBagRewardRsp} Msg_ReceiveDiscountsGiftBagRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveDiscountsGiftBagRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveDiscountsGiftBagRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveDiscountsGiftBagRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyReceived=1 AlreadyReceived value
         * @property {number} ActivityOver=2 ActivityOver value
         * @property {number} FirstOneYuanBuy=3 FirstOneYuanBuy value
         * @property {number} FunctionNoOpen=4 FunctionNoOpen value
         */
        Msg_ReceiveDiscountsGiftBagRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyReceived"] = 1;
            values[valuesById[2] = "ActivityOver"] = 2;
            values[valuesById[3] = "FirstOneYuanBuy"] = 3;
            values[valuesById[4] = "FunctionNoOpen"] = 4;
            return values;
        })();

        return Msg_ReceiveDiscountsGiftBagRewardRsp;
    })();

    /**
     * HLTaskType enum.
     * @name proto.HLTaskType
     * @enum {number}
     * @property {number} Award=0 Award value
     * @property {number} GetNormalAward=1 GetNormalAward value
     * @property {number} TaskOpen=2 TaskOpen value
     * @property {number} GetADAward=3 GetADAward value
     */
    proto.HLTaskType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Award"] = 0;
        values[valuesById[1] = "GetNormalAward"] = 1;
        values[valuesById[2] = "TaskOpen"] = 2;
        values[valuesById[3] = "GetADAward"] = 3;
        return values;
    })();

    proto.HeroLoadTaskCell = (function() {

        /**
         * Properties of a HeroLoadTaskCell.
         * @memberof proto
         * @interface IHeroLoadTaskCell
         * @property {number|null} [taskID] HeroLoadTaskCell taskID
         * @property {number|null} [taskProgress] HeroLoadTaskCell taskProgress
         * @property {proto.HLTaskType|null} [state] HeroLoadTaskCell state
         */

        /**
         * Constructs a new HeroLoadTaskCell.
         * @memberof proto
         * @classdesc Represents a HeroLoadTaskCell.
         * @implements IHeroLoadTaskCell
         * @constructor
         * @param {proto.IHeroLoadTaskCell=} [p] Properties to set
         */
        function HeroLoadTaskCell(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * HeroLoadTaskCell taskID.
         * @member {number} taskID
         * @memberof proto.HeroLoadTaskCell
         * @instance
         */
        HeroLoadTaskCell.prototype.taskID = 0;

        /**
         * HeroLoadTaskCell taskProgress.
         * @member {number} taskProgress
         * @memberof proto.HeroLoadTaskCell
         * @instance
         */
        HeroLoadTaskCell.prototype.taskProgress = 0;

        /**
         * HeroLoadTaskCell state.
         * @member {proto.HLTaskType} state
         * @memberof proto.HeroLoadTaskCell
         * @instance
         */
        HeroLoadTaskCell.prototype.state = 0;

        /**
         * Encodes the specified HeroLoadTaskCell message. Does not implicitly {@link proto.HeroLoadTaskCell.verify|verify} messages.
         * @function encode
         * @memberof proto.HeroLoadTaskCell
         * @static
         * @param {proto.IHeroLoadTaskCell} m HeroLoadTaskCell message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HeroLoadTaskCell.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskID != null && Object.hasOwnProperty.call(m, "taskID"))
                w.uint32(8).int32(m.taskID);
            if (m.taskProgress != null && Object.hasOwnProperty.call(m, "taskProgress"))
                w.uint32(16).int32(m.taskProgress);
            if (m.state != null && Object.hasOwnProperty.call(m, "state"))
                w.uint32(24).int32(m.state);
            return w;
        };

        /**
         * Decodes a HeroLoadTaskCell message from the specified reader or buffer.
         * @function decode
         * @memberof proto.HeroLoadTaskCell
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.HeroLoadTaskCell} HeroLoadTaskCell
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HeroLoadTaskCell.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.HeroLoadTaskCell();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.taskID = r.int32();
                    break;
                case 2:
                    m.taskProgress = r.int32();
                    break;
                case 3:
                    m.state = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return HeroLoadTaskCell;
    })();

    proto.HeroLoadTaskDay = (function() {

        /**
         * Properties of a HeroLoadTaskDay.
         * @memberof proto
         * @interface IHeroLoadTaskDay
         * @property {Array.<proto.IHeroLoadTaskCell>|null} [tasks] HeroLoadTaskDay tasks
         */

        /**
         * Constructs a new HeroLoadTaskDay.
         * @memberof proto
         * @classdesc Represents a HeroLoadTaskDay.
         * @implements IHeroLoadTaskDay
         * @constructor
         * @param {proto.IHeroLoadTaskDay=} [p] Properties to set
         */
        function HeroLoadTaskDay(p) {
            this.tasks = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * HeroLoadTaskDay tasks.
         * @member {Array.<proto.IHeroLoadTaskCell>} tasks
         * @memberof proto.HeroLoadTaskDay
         * @instance
         */
        HeroLoadTaskDay.prototype.tasks = $util.emptyArray;

        /**
         * Encodes the specified HeroLoadTaskDay message. Does not implicitly {@link proto.HeroLoadTaskDay.verify|verify} messages.
         * @function encode
         * @memberof proto.HeroLoadTaskDay
         * @static
         * @param {proto.IHeroLoadTaskDay} m HeroLoadTaskDay message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HeroLoadTaskDay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.tasks != null && m.tasks.length) {
                for (var i = 0; i < m.tasks.length; ++i)
                    $root.proto.HeroLoadTaskCell.encode(m.tasks[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a HeroLoadTaskDay message from the specified reader or buffer.
         * @function decode
         * @memberof proto.HeroLoadTaskDay
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.HeroLoadTaskDay} HeroLoadTaskDay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HeroLoadTaskDay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.HeroLoadTaskDay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.tasks && m.tasks.length))
                        m.tasks = [];
                    m.tasks.push($root.proto.HeroLoadTaskCell.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return HeroLoadTaskDay;
    })();

    proto.Msg_HeroLoadTaskListReq = (function() {

        /**
         * Properties of a Msg_HeroLoadTaskListReq.
         * @memberof proto
         * @interface IMsg_HeroLoadTaskListReq
         */

        /**
         * Constructs a new Msg_HeroLoadTaskListReq.
         * @memberof proto
         * @classdesc Represents a Msg_HeroLoadTaskListReq.
         * @implements IMsg_HeroLoadTaskListReq
         * @constructor
         * @param {proto.IMsg_HeroLoadTaskListReq=} [p] Properties to set
         */
        function Msg_HeroLoadTaskListReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_HeroLoadTaskListReq message. Does not implicitly {@link proto.Msg_HeroLoadTaskListReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_HeroLoadTaskListReq
         * @static
         * @param {proto.IMsg_HeroLoadTaskListReq} m Msg_HeroLoadTaskListReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_HeroLoadTaskListReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_HeroLoadTaskListReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_HeroLoadTaskListReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_HeroLoadTaskListReq} Msg_HeroLoadTaskListReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_HeroLoadTaskListReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_HeroLoadTaskListReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_HeroLoadTaskListReq;
    })();

    proto.Msg_HeroLoadTaskListRsp = (function() {

        /**
         * Properties of a Msg_HeroLoadTaskListRsp.
         * @memberof proto
         * @interface IMsg_HeroLoadTaskListRsp
         * @property {Array.<proto.IHeroLoadTaskCell>|null} [tasks] Msg_HeroLoadTaskListRsp tasks
         * @property {number|null} [score] Msg_HeroLoadTaskListRsp score
         * @property {Array.<number>|null} [alreadyGetIDList] Msg_HeroLoadTaskListRsp alreadyGetIDList
         * @property {number|null} [endUTC] Msg_HeroLoadTaskListRsp endUTC
         * @property {number|null} [unlockDay] Msg_HeroLoadTaskListRsp unlockDay
         */

        /**
         * Constructs a new Msg_HeroLoadTaskListRsp.
         * @memberof proto
         * @classdesc Represents a Msg_HeroLoadTaskListRsp.
         * @implements IMsg_HeroLoadTaskListRsp
         * @constructor
         * @param {proto.IMsg_HeroLoadTaskListRsp=} [p] Properties to set
         */
        function Msg_HeroLoadTaskListRsp(p) {
            this.tasks = [];
            this.alreadyGetIDList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_HeroLoadTaskListRsp tasks.
         * @member {Array.<proto.IHeroLoadTaskCell>} tasks
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @instance
         */
        Msg_HeroLoadTaskListRsp.prototype.tasks = $util.emptyArray;

        /**
         * Msg_HeroLoadTaskListRsp score.
         * @member {number} score
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @instance
         */
        Msg_HeroLoadTaskListRsp.prototype.score = 0;

        /**
         * Msg_HeroLoadTaskListRsp alreadyGetIDList.
         * @member {Array.<number>} alreadyGetIDList
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @instance
         */
        Msg_HeroLoadTaskListRsp.prototype.alreadyGetIDList = $util.emptyArray;

        /**
         * Msg_HeroLoadTaskListRsp endUTC.
         * @member {number} endUTC
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @instance
         */
        Msg_HeroLoadTaskListRsp.prototype.endUTC = 0;

        /**
         * Msg_HeroLoadTaskListRsp unlockDay.
         * @member {number} unlockDay
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @instance
         */
        Msg_HeroLoadTaskListRsp.prototype.unlockDay = 0;

        /**
         * Encodes the specified Msg_HeroLoadTaskListRsp message. Does not implicitly {@link proto.Msg_HeroLoadTaskListRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @static
         * @param {proto.IMsg_HeroLoadTaskListRsp} m Msg_HeroLoadTaskListRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_HeroLoadTaskListRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.tasks != null && m.tasks.length) {
                for (var i = 0; i < m.tasks.length; ++i)
                    $root.proto.HeroLoadTaskCell.encode(m.tasks[i], w.uint32(10).fork()).ldelim();
            }
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(16).int32(m.score);
            if (m.alreadyGetIDList != null && m.alreadyGetIDList.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.alreadyGetIDList.length; ++i)
                    w.int32(m.alreadyGetIDList[i]);
                w.ldelim();
            }
            if (m.endUTC != null && Object.hasOwnProperty.call(m, "endUTC"))
                w.uint32(32).int32(m.endUTC);
            if (m.unlockDay != null && Object.hasOwnProperty.call(m, "unlockDay"))
                w.uint32(40).int32(m.unlockDay);
            return w;
        };

        /**
         * Decodes a Msg_HeroLoadTaskListRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_HeroLoadTaskListRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_HeroLoadTaskListRsp} Msg_HeroLoadTaskListRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_HeroLoadTaskListRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_HeroLoadTaskListRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.tasks && m.tasks.length))
                        m.tasks = [];
                    m.tasks.push($root.proto.HeroLoadTaskCell.decode(r, r.uint32()));
                    break;
                case 2:
                    m.score = r.int32();
                    break;
                case 3:
                    if (!(m.alreadyGetIDList && m.alreadyGetIDList.length))
                        m.alreadyGetIDList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.alreadyGetIDList.push(r.int32());
                    } else
                        m.alreadyGetIDList.push(r.int32());
                    break;
                case 4:
                    m.endUTC = r.int32();
                    break;
                case 5:
                    m.unlockDay = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_HeroLoadTaskListRsp;
    })();

    /**
     * HLAwardType enum.
     * @name proto.HLAwardType
     * @enum {number}
     * @property {number} NormalTaskType=0 NormalTaskType value
     * @property {number} ADTaskType=1 ADTaskType value
     */
    proto.HLAwardType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NormalTaskType"] = 0;
        values[valuesById[1] = "ADTaskType"] = 1;
        return values;
    })();

    proto.Msg_ReceiveHeroLoadTaskRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveHeroLoadTaskRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveHeroLoadTaskRewardReq
         * @property {number|null} [taskId] Msg_ReceiveHeroLoadTaskRewardReq taskId
         * @property {proto.HLAwardType|null} [ntype] Msg_ReceiveHeroLoadTaskRewardReq ntype
         */

        /**
         * Constructs a new Msg_ReceiveHeroLoadTaskRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveHeroLoadTaskRewardReq.
         * @implements IMsg_ReceiveHeroLoadTaskRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveHeroLoadTaskRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveHeroLoadTaskRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveHeroLoadTaskRewardReq taskId.
         * @member {number} taskId
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardReq
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardReq.prototype.taskId = 0;

        /**
         * Msg_ReceiveHeroLoadTaskRewardReq ntype.
         * @member {proto.HLAwardType} ntype
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardReq
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardReq.prototype.ntype = 0;

        /**
         * Encodes the specified Msg_ReceiveHeroLoadTaskRewardReq message. Does not implicitly {@link proto.Msg_ReceiveHeroLoadTaskRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardReq
         * @static
         * @param {proto.IMsg_ReceiveHeroLoadTaskRewardReq} m Msg_ReceiveHeroLoadTaskRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveHeroLoadTaskRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.taskId != null && Object.hasOwnProperty.call(m, "taskId"))
                w.uint32(16).int32(m.taskId);
            if (m.ntype != null && Object.hasOwnProperty.call(m, "ntype"))
                w.uint32(24).int32(m.ntype);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveHeroLoadTaskRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveHeroLoadTaskRewardReq} Msg_ReceiveHeroLoadTaskRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveHeroLoadTaskRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveHeroLoadTaskRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.taskId = r.int32();
                    break;
                case 3:
                    m.ntype = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveHeroLoadTaskRewardReq;
    })();

    proto.Msg_ReceiveHeroLoadTaskRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveHeroLoadTaskRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveHeroLoadTaskRewardRsp
         * @property {proto.Msg_ReceiveHeroLoadTaskRewardRsp.ErrorCode|null} [result] Msg_ReceiveHeroLoadTaskRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ReceiveHeroLoadTaskRewardRsp reward
         * @property {proto.IHeroLoadTaskCell|null} [taskCells] Msg_ReceiveHeroLoadTaskRewardRsp taskCells
         * @property {number|null} [endUTC] Msg_ReceiveHeroLoadTaskRewardRsp endUTC
         * @property {number|null} [HLScore] Msg_ReceiveHeroLoadTaskRewardRsp HLScore
         */

        /**
         * Constructs a new Msg_ReceiveHeroLoadTaskRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveHeroLoadTaskRewardRsp.
         * @implements IMsg_ReceiveHeroLoadTaskRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveHeroLoadTaskRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveHeroLoadTaskRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveHeroLoadTaskRewardRsp result.
         * @member {proto.Msg_ReceiveHeroLoadTaskRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveHeroLoadTaskRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Msg_ReceiveHeroLoadTaskRewardRsp taskCells.
         * @member {proto.IHeroLoadTaskCell|null|undefined} taskCells
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.prototype.taskCells = null;

        /**
         * Msg_ReceiveHeroLoadTaskRewardRsp endUTC.
         * @member {number} endUTC
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.prototype.endUTC = 0;

        /**
         * Msg_ReceiveHeroLoadTaskRewardRsp HLScore.
         * @member {number} HLScore
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.prototype.HLScore = 0;

        /**
         * Encodes the specified Msg_ReceiveHeroLoadTaskRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveHeroLoadTaskRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveHeroLoadTaskRewardRsp} m Msg_ReceiveHeroLoadTaskRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            if (m.taskCells != null && Object.hasOwnProperty.call(m, "taskCells"))
                $root.proto.HeroLoadTaskCell.encode(m.taskCells, w.uint32(34).fork()).ldelim();
            if (m.endUTC != null && Object.hasOwnProperty.call(m, "endUTC"))
                w.uint32(40).int32(m.endUTC);
            if (m.HLScore != null && Object.hasOwnProperty.call(m, "HLScore"))
                w.uint32(48).int32(m.HLScore);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveHeroLoadTaskRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveHeroLoadTaskRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveHeroLoadTaskRewardRsp} Msg_ReceiveHeroLoadTaskRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveHeroLoadTaskRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    m.taskCells = $root.proto.HeroLoadTaskCell.decode(r, r.uint32());
                    break;
                case 5:
                    m.endUTC = r.int32();
                    break;
                case 6:
                    m.HLScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveHeroLoadTaskRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TaskInExistence=1 TaskInExistence value
         * @property {number} TaskUnOpen=2 TaskUnOpen value
         * @property {number} AlreadyReceived=3 AlreadyReceived value
         */
        Msg_ReceiveHeroLoadTaskRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TaskInExistence"] = 1;
            values[valuesById[2] = "TaskUnOpen"] = 2;
            values[valuesById[3] = "AlreadyReceived"] = 3;
            return values;
        })();

        return Msg_ReceiveHeroLoadTaskRewardRsp;
    })();

    proto.Msg_ReceiveHeroLoadTaskStepRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveHeroLoadTaskStepRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveHeroLoadTaskStepRewardReq
         * @property {number|null} [scoreID] Msg_ReceiveHeroLoadTaskStepRewardReq scoreID
         */

        /**
         * Constructs a new Msg_ReceiveHeroLoadTaskStepRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveHeroLoadTaskStepRewardReq.
         * @implements IMsg_ReceiveHeroLoadTaskStepRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveHeroLoadTaskStepRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveHeroLoadTaskStepRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveHeroLoadTaskStepRewardReq scoreID.
         * @member {number} scoreID
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardReq
         * @instance
         */
        Msg_ReceiveHeroLoadTaskStepRewardReq.prototype.scoreID = 0;

        /**
         * Encodes the specified Msg_ReceiveHeroLoadTaskStepRewardReq message. Does not implicitly {@link proto.Msg_ReceiveHeroLoadTaskStepRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardReq
         * @static
         * @param {proto.IMsg_ReceiveHeroLoadTaskStepRewardReq} m Msg_ReceiveHeroLoadTaskStepRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveHeroLoadTaskStepRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.scoreID != null && Object.hasOwnProperty.call(m, "scoreID"))
                w.uint32(8).int32(m.scoreID);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveHeroLoadTaskStepRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveHeroLoadTaskStepRewardReq} Msg_ReceiveHeroLoadTaskStepRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveHeroLoadTaskStepRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveHeroLoadTaskStepRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.scoreID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveHeroLoadTaskStepRewardReq;
    })();

    proto.Msg_ReceiveHeroLoadTaskStepRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveHeroLoadTaskStepRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveHeroLoadTaskStepRewardRsp
         * @property {proto.Msg_ReceiveHeroLoadTaskStepRewardRsp.ErrorCode|null} [result] Msg_ReceiveHeroLoadTaskStepRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [reward] Msg_ReceiveHeroLoadTaskStepRewardRsp reward
         * @property {number|null} [scoreID] Msg_ReceiveHeroLoadTaskStepRewardRsp scoreID
         * @property {number|null} [endUTC] Msg_ReceiveHeroLoadTaskStepRewardRsp endUTC
         */

        /**
         * Constructs a new Msg_ReceiveHeroLoadTaskStepRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveHeroLoadTaskStepRewardRsp.
         * @implements IMsg_ReceiveHeroLoadTaskStepRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveHeroLoadTaskStepRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveHeroLoadTaskStepRewardRsp(p) {
            this.reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveHeroLoadTaskStepRewardRsp result.
         * @member {proto.Msg_ReceiveHeroLoadTaskStepRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveHeroLoadTaskStepRewardRsp reward.
         * @member {Array.<proto.IRewardSimpleInfo>} reward
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.prototype.reward = $util.emptyArray;

        /**
         * Msg_ReceiveHeroLoadTaskStepRewardRsp scoreID.
         * @member {number} scoreID
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.prototype.scoreID = 0;

        /**
         * Msg_ReceiveHeroLoadTaskStepRewardRsp endUTC.
         * @member {number} endUTC
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @instance
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.prototype.endUTC = 0;

        /**
         * Encodes the specified Msg_ReceiveHeroLoadTaskStepRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveHeroLoadTaskStepRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveHeroLoadTaskStepRewardRsp} m Msg_ReceiveHeroLoadTaskStepRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.reward != null && m.reward.length) {
                for (var i = 0; i < m.reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.reward[i], w.uint32(18).fork()).ldelim();
            }
            if (m.scoreID != null && Object.hasOwnProperty.call(m, "scoreID"))
                w.uint32(24).int32(m.scoreID);
            if (m.endUTC != null && Object.hasOwnProperty.call(m, "endUTC"))
                w.uint32(32).int32(m.endUTC);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveHeroLoadTaskStepRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveHeroLoadTaskStepRewardRsp} Msg_ReceiveHeroLoadTaskStepRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveHeroLoadTaskStepRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.reward && m.reward.length))
                        m.reward = [];
                    m.reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.scoreID = r.int32();
                    break;
                case 4:
                    m.endUTC = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveHeroLoadTaskStepRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} UnFinishTaskStep=1 UnFinishTaskStep value
         * @property {number} AlreadyReceived=2 AlreadyReceived value
         */
        Msg_ReceiveHeroLoadTaskStepRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "UnFinishTaskStep"] = 1;
            values[valuesById[2] = "AlreadyReceived"] = 2;
            return values;
        })();

        return Msg_ReceiveHeroLoadTaskStepRewardRsp;
    })();

    proto.Msg_PushHeroLoadTaskUpate = (function() {

        /**
         * Properties of a Msg_PushHeroLoadTaskUpate.
         * @memberof proto
         * @interface IMsg_PushHeroLoadTaskUpate
         * @property {Array.<proto.IHeroLoadTaskCell>|null} [tasks] Msg_PushHeroLoadTaskUpate tasks
         */

        /**
         * Constructs a new Msg_PushHeroLoadTaskUpate.
         * @memberof proto
         * @classdesc Represents a Msg_PushHeroLoadTaskUpate.
         * @implements IMsg_PushHeroLoadTaskUpate
         * @constructor
         * @param {proto.IMsg_PushHeroLoadTaskUpate=} [p] Properties to set
         */
        function Msg_PushHeroLoadTaskUpate(p) {
            this.tasks = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushHeroLoadTaskUpate tasks.
         * @member {Array.<proto.IHeroLoadTaskCell>} tasks
         * @memberof proto.Msg_PushHeroLoadTaskUpate
         * @instance
         */
        Msg_PushHeroLoadTaskUpate.prototype.tasks = $util.emptyArray;

        /**
         * Encodes the specified Msg_PushHeroLoadTaskUpate message. Does not implicitly {@link proto.Msg_PushHeroLoadTaskUpate.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushHeroLoadTaskUpate
         * @static
         * @param {proto.IMsg_PushHeroLoadTaskUpate} m Msg_PushHeroLoadTaskUpate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushHeroLoadTaskUpate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.tasks != null && m.tasks.length) {
                for (var i = 0; i < m.tasks.length; ++i)
                    $root.proto.HeroLoadTaskCell.encode(m.tasks[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_PushHeroLoadTaskUpate message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushHeroLoadTaskUpate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushHeroLoadTaskUpate} Msg_PushHeroLoadTaskUpate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushHeroLoadTaskUpate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushHeroLoadTaskUpate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.tasks && m.tasks.length))
                        m.tasks = [];
                    m.tasks.push($root.proto.HeroLoadTaskCell.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushHeroLoadTaskUpate;
    })();

    proto.QuestionnaireSurveyData = (function() {

        /**
         * Properties of a QuestionnaireSurveyData.
         * @memberof proto
         * @interface IQuestionnaireSurveyData
         * @property {number|null} [ID] QuestionnaireSurveyData ID
         * @property {Object.<string,string>|null} [answers] QuestionnaireSurveyData answers
         */

        /**
         * Constructs a new QuestionnaireSurveyData.
         * @memberof proto
         * @classdesc Represents a QuestionnaireSurveyData.
         * @implements IQuestionnaireSurveyData
         * @constructor
         * @param {proto.IQuestionnaireSurveyData=} [p] Properties to set
         */
        function QuestionnaireSurveyData(p) {
            this.answers = {};
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * QuestionnaireSurveyData ID.
         * @member {number} ID
         * @memberof proto.QuestionnaireSurveyData
         * @instance
         */
        QuestionnaireSurveyData.prototype.ID = 0;

        /**
         * QuestionnaireSurveyData answers.
         * @member {Object.<string,string>} answers
         * @memberof proto.QuestionnaireSurveyData
         * @instance
         */
        QuestionnaireSurveyData.prototype.answers = $util.emptyObject;

        /**
         * Encodes the specified QuestionnaireSurveyData message. Does not implicitly {@link proto.QuestionnaireSurveyData.verify|verify} messages.
         * @function encode
         * @memberof proto.QuestionnaireSurveyData
         * @static
         * @param {proto.IQuestionnaireSurveyData} m QuestionnaireSurveyData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        QuestionnaireSurveyData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ID != null && Object.hasOwnProperty.call(m, "ID"))
                w.uint32(8).int32(m.ID);
            if (m.answers != null && Object.hasOwnProperty.call(m, "answers")) {
                for (var ks = Object.keys(m.answers), i = 0; i < ks.length; ++i) {
                    w.uint32(18).fork().uint32(8).int32(ks[i]).uint32(18).string(m.answers[ks[i]]).ldelim();
                }
            }
            return w;
        };

        /**
         * Decodes a QuestionnaireSurveyData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.QuestionnaireSurveyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.QuestionnaireSurveyData} QuestionnaireSurveyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        QuestionnaireSurveyData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.QuestionnaireSurveyData(), k, value;
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ID = r.int32();
                    break;
                case 2:
                    if (m.answers === $util.emptyObject)
                        m.answers = {};
                    var c2 = r.uint32() + r.pos;
                    k = 0;
                    value = "";
                    while (r.pos < c2) {
                        var tag2 = r.uint32();
                        switch (tag2 >>> 3) {
                        case 1:
                            k = r.int32();
                            break;
                        case 2:
                            value = r.string();
                            break;
                        default:
                            r.skipType(tag2 & 7);
                            break;
                        }
                    }
                    m.answers[k] = value;
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return QuestionnaireSurveyData;
    })();

    proto.Msg_GetQuestionReq = (function() {

        /**
         * Properties of a Msg_GetQuestionReq.
         * @memberof proto
         * @interface IMsg_GetQuestionReq
         */

        /**
         * Constructs a new Msg_GetQuestionReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetQuestionReq.
         * @implements IMsg_GetQuestionReq
         * @constructor
         * @param {proto.IMsg_GetQuestionReq=} [p] Properties to set
         */
        function Msg_GetQuestionReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetQuestionReq message. Does not implicitly {@link proto.Msg_GetQuestionReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetQuestionReq
         * @static
         * @param {proto.IMsg_GetQuestionReq} m Msg_GetQuestionReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetQuestionReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetQuestionReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetQuestionReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetQuestionReq} Msg_GetQuestionReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetQuestionReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetQuestionReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetQuestionReq;
    })();

    proto.Msg_GetQuestionRsp = (function() {

        /**
         * Properties of a Msg_GetQuestionRsp.
         * @memberof proto
         * @interface IMsg_GetQuestionRsp
         * @property {boolean|null} [bReceivedReward] Msg_GetQuestionRsp bReceivedReward
         * @property {number|null} [startUTC] Msg_GetQuestionRsp startUTC
         * @property {number|null} [overUTC] Msg_GetQuestionRsp overUTC
         */

        /**
         * Constructs a new Msg_GetQuestionRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetQuestionRsp.
         * @implements IMsg_GetQuestionRsp
         * @constructor
         * @param {proto.IMsg_GetQuestionRsp=} [p] Properties to set
         */
        function Msg_GetQuestionRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetQuestionRsp bReceivedReward.
         * @member {boolean} bReceivedReward
         * @memberof proto.Msg_GetQuestionRsp
         * @instance
         */
        Msg_GetQuestionRsp.prototype.bReceivedReward = false;

        /**
         * Msg_GetQuestionRsp startUTC.
         * @member {number} startUTC
         * @memberof proto.Msg_GetQuestionRsp
         * @instance
         */
        Msg_GetQuestionRsp.prototype.startUTC = 0;

        /**
         * Msg_GetQuestionRsp overUTC.
         * @member {number} overUTC
         * @memberof proto.Msg_GetQuestionRsp
         * @instance
         */
        Msg_GetQuestionRsp.prototype.overUTC = 0;

        /**
         * Encodes the specified Msg_GetQuestionRsp message. Does not implicitly {@link proto.Msg_GetQuestionRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetQuestionRsp
         * @static
         * @param {proto.IMsg_GetQuestionRsp} m Msg_GetQuestionRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetQuestionRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bReceivedReward != null && Object.hasOwnProperty.call(m, "bReceivedReward"))
                w.uint32(8).bool(m.bReceivedReward);
            if (m.startUTC != null && Object.hasOwnProperty.call(m, "startUTC"))
                w.uint32(16).int32(m.startUTC);
            if (m.overUTC != null && Object.hasOwnProperty.call(m, "overUTC"))
                w.uint32(24).int32(m.overUTC);
            return w;
        };

        /**
         * Decodes a Msg_GetQuestionRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetQuestionRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetQuestionRsp} Msg_GetQuestionRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetQuestionRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetQuestionRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bReceivedReward = r.bool();
                    break;
                case 2:
                    m.startUTC = r.int32();
                    break;
                case 3:
                    m.overUTC = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetQuestionRsp;
    })();

    proto.Msg_SubmitQuestionReceiveRewardReq = (function() {

        /**
         * Properties of a Msg_SubmitQuestionReceiveRewardReq.
         * @memberof proto
         * @interface IMsg_SubmitQuestionReceiveRewardReq
         * @property {Array.<proto.IQuestionnaireSurveyData>|null} [answers] Msg_SubmitQuestionReceiveRewardReq answers
         */

        /**
         * Constructs a new Msg_SubmitQuestionReceiveRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_SubmitQuestionReceiveRewardReq.
         * @implements IMsg_SubmitQuestionReceiveRewardReq
         * @constructor
         * @param {proto.IMsg_SubmitQuestionReceiveRewardReq=} [p] Properties to set
         */
        function Msg_SubmitQuestionReceiveRewardReq(p) {
            this.answers = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SubmitQuestionReceiveRewardReq answers.
         * @member {Array.<proto.IQuestionnaireSurveyData>} answers
         * @memberof proto.Msg_SubmitQuestionReceiveRewardReq
         * @instance
         */
        Msg_SubmitQuestionReceiveRewardReq.prototype.answers = $util.emptyArray;

        /**
         * Encodes the specified Msg_SubmitQuestionReceiveRewardReq message. Does not implicitly {@link proto.Msg_SubmitQuestionReceiveRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SubmitQuestionReceiveRewardReq
         * @static
         * @param {proto.IMsg_SubmitQuestionReceiveRewardReq} m Msg_SubmitQuestionReceiveRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SubmitQuestionReceiveRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.answers != null && m.answers.length) {
                for (var i = 0; i < m.answers.length; ++i)
                    $root.proto.QuestionnaireSurveyData.encode(m.answers[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_SubmitQuestionReceiveRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SubmitQuestionReceiveRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SubmitQuestionReceiveRewardReq} Msg_SubmitQuestionReceiveRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SubmitQuestionReceiveRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SubmitQuestionReceiveRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.answers && m.answers.length))
                        m.answers = [];
                    m.answers.push($root.proto.QuestionnaireSurveyData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SubmitQuestionReceiveRewardReq;
    })();

    proto.Msg_SubmitQuestionReceiveRewardRsp = (function() {

        /**
         * Properties of a Msg_SubmitQuestionReceiveRewardRsp.
         * @memberof proto
         * @interface IMsg_SubmitQuestionReceiveRewardRsp
         * @property {proto.Msg_SubmitQuestionReceiveRewardRsp.ErrorCode|null} [result] Msg_SubmitQuestionReceiveRewardRsp result
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [rewardList] Msg_SubmitQuestionReceiveRewardRsp rewardList
         */

        /**
         * Constructs a new Msg_SubmitQuestionReceiveRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SubmitQuestionReceiveRewardRsp.
         * @implements IMsg_SubmitQuestionReceiveRewardRsp
         * @constructor
         * @param {proto.IMsg_SubmitQuestionReceiveRewardRsp=} [p] Properties to set
         */
        function Msg_SubmitQuestionReceiveRewardRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SubmitQuestionReceiveRewardRsp result.
         * @member {proto.Msg_SubmitQuestionReceiveRewardRsp.ErrorCode} result
         * @memberof proto.Msg_SubmitQuestionReceiveRewardRsp
         * @instance
         */
        Msg_SubmitQuestionReceiveRewardRsp.prototype.result = 0;

        /**
         * Msg_SubmitQuestionReceiveRewardRsp rewardList.
         * @member {Array.<proto.IVecRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_SubmitQuestionReceiveRewardRsp
         * @instance
         */
        Msg_SubmitQuestionReceiveRewardRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_SubmitQuestionReceiveRewardRsp message. Does not implicitly {@link proto.Msg_SubmitQuestionReceiveRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SubmitQuestionReceiveRewardRsp
         * @static
         * @param {proto.IMsg_SubmitQuestionReceiveRewardRsp} m Msg_SubmitQuestionReceiveRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SubmitQuestionReceiveRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.rewardList[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_SubmitQuestionReceiveRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SubmitQuestionReceiveRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SubmitQuestionReceiveRewardRsp} Msg_SubmitQuestionReceiveRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SubmitQuestionReceiveRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SubmitQuestionReceiveRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_SubmitQuestionReceiveRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} ActivityOver=1 ActivityOver value
         * @property {number} AlreadyReceived=2 AlreadyReceived value
         */
        Msg_SubmitQuestionReceiveRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "ActivityOver"] = 1;
            values[valuesById[2] = "AlreadyReceived"] = 2;
            return values;
        })();

        return Msg_SubmitQuestionReceiveRewardRsp;
    })();

    proto.Msg_ReportedFirstCreateRoleReq = (function() {

        /**
         * Properties of a Msg_ReportedFirstCreateRoleReq.
         * @memberof proto
         * @interface IMsg_ReportedFirstCreateRoleReq
         */

        /**
         * Constructs a new Msg_ReportedFirstCreateRoleReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReportedFirstCreateRoleReq.
         * @implements IMsg_ReportedFirstCreateRoleReq
         * @constructor
         * @param {proto.IMsg_ReportedFirstCreateRoleReq=} [p] Properties to set
         */
        function Msg_ReportedFirstCreateRoleReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ReportedFirstCreateRoleReq message. Does not implicitly {@link proto.Msg_ReportedFirstCreateRoleReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReportedFirstCreateRoleReq
         * @static
         * @param {proto.IMsg_ReportedFirstCreateRoleReq} m Msg_ReportedFirstCreateRoleReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReportedFirstCreateRoleReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ReportedFirstCreateRoleReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReportedFirstCreateRoleReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReportedFirstCreateRoleReq} Msg_ReportedFirstCreateRoleReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReportedFirstCreateRoleReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReportedFirstCreateRoleReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReportedFirstCreateRoleReq;
    })();

    proto.Msg_SearchDoubleEnergyInfoReq = (function() {

        /**
         * Properties of a Msg_SearchDoubleEnergyInfoReq.
         * @memberof proto
         * @interface IMsg_SearchDoubleEnergyInfoReq
         */

        /**
         * Constructs a new Msg_SearchDoubleEnergyInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_SearchDoubleEnergyInfoReq.
         * @implements IMsg_SearchDoubleEnergyInfoReq
         * @constructor
         * @param {proto.IMsg_SearchDoubleEnergyInfoReq=} [p] Properties to set
         */
        function Msg_SearchDoubleEnergyInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_SearchDoubleEnergyInfoReq message. Does not implicitly {@link proto.Msg_SearchDoubleEnergyInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SearchDoubleEnergyInfoReq
         * @static
         * @param {proto.IMsg_SearchDoubleEnergyInfoReq} m Msg_SearchDoubleEnergyInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SearchDoubleEnergyInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_SearchDoubleEnergyInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SearchDoubleEnergyInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SearchDoubleEnergyInfoReq} Msg_SearchDoubleEnergyInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SearchDoubleEnergyInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SearchDoubleEnergyInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SearchDoubleEnergyInfoReq;
    })();

    proto.Msg_SearchDoubleEnergyInfoRsp = (function() {

        /**
         * Properties of a Msg_SearchDoubleEnergyInfoRsp.
         * @memberof proto
         * @interface IMsg_SearchDoubleEnergyInfoRsp
         * @property {number|null} [startUTC] Msg_SearchDoubleEnergyInfoRsp startUTC
         * @property {number|null} [overUTC] Msg_SearchDoubleEnergyInfoRsp overUTC
         */

        /**
         * Constructs a new Msg_SearchDoubleEnergyInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SearchDoubleEnergyInfoRsp.
         * @implements IMsg_SearchDoubleEnergyInfoRsp
         * @constructor
         * @param {proto.IMsg_SearchDoubleEnergyInfoRsp=} [p] Properties to set
         */
        function Msg_SearchDoubleEnergyInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SearchDoubleEnergyInfoRsp startUTC.
         * @member {number} startUTC
         * @memberof proto.Msg_SearchDoubleEnergyInfoRsp
         * @instance
         */
        Msg_SearchDoubleEnergyInfoRsp.prototype.startUTC = 0;

        /**
         * Msg_SearchDoubleEnergyInfoRsp overUTC.
         * @member {number} overUTC
         * @memberof proto.Msg_SearchDoubleEnergyInfoRsp
         * @instance
         */
        Msg_SearchDoubleEnergyInfoRsp.prototype.overUTC = 0;

        /**
         * Encodes the specified Msg_SearchDoubleEnergyInfoRsp message. Does not implicitly {@link proto.Msg_SearchDoubleEnergyInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SearchDoubleEnergyInfoRsp
         * @static
         * @param {proto.IMsg_SearchDoubleEnergyInfoRsp} m Msg_SearchDoubleEnergyInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SearchDoubleEnergyInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.startUTC != null && Object.hasOwnProperty.call(m, "startUTC"))
                w.uint32(8).int32(m.startUTC);
            if (m.overUTC != null && Object.hasOwnProperty.call(m, "overUTC"))
                w.uint32(16).int32(m.overUTC);
            return w;
        };

        /**
         * Decodes a Msg_SearchDoubleEnergyInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SearchDoubleEnergyInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SearchDoubleEnergyInfoRsp} Msg_SearchDoubleEnergyInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SearchDoubleEnergyInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SearchDoubleEnergyInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.startUTC = r.int32();
                    break;
                case 2:
                    m.overUTC = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SearchDoubleEnergyInfoRsp;
    })();

    proto.SpringFestivalInfoData = (function() {

        /**
         * Properties of a SpringFestivalInfoData.
         * @memberof proto
         * @interface ISpringFestivalInfoData
         * @property {proto.IRewardSimpleInfo|null} [rewardInfo] SpringFestivalInfoData rewardInfo
         * @property {boolean|null} [bDoubleReward] SpringFestivalInfoData bDoubleReward
         * @property {boolean|null} [bReceived] SpringFestivalInfoData bReceived
         */

        /**
         * Constructs a new SpringFestivalInfoData.
         * @memberof proto
         * @classdesc Represents a SpringFestivalInfoData.
         * @implements ISpringFestivalInfoData
         * @constructor
         * @param {proto.ISpringFestivalInfoData=} [p] Properties to set
         */
        function SpringFestivalInfoData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * SpringFestivalInfoData rewardInfo.
         * @member {proto.IRewardSimpleInfo|null|undefined} rewardInfo
         * @memberof proto.SpringFestivalInfoData
         * @instance
         */
        SpringFestivalInfoData.prototype.rewardInfo = null;

        /**
         * SpringFestivalInfoData bDoubleReward.
         * @member {boolean} bDoubleReward
         * @memberof proto.SpringFestivalInfoData
         * @instance
         */
        SpringFestivalInfoData.prototype.bDoubleReward = false;

        /**
         * SpringFestivalInfoData bReceived.
         * @member {boolean} bReceived
         * @memberof proto.SpringFestivalInfoData
         * @instance
         */
        SpringFestivalInfoData.prototype.bReceived = false;

        /**
         * Encodes the specified SpringFestivalInfoData message. Does not implicitly {@link proto.SpringFestivalInfoData.verify|verify} messages.
         * @function encode
         * @memberof proto.SpringFestivalInfoData
         * @static
         * @param {proto.ISpringFestivalInfoData} m SpringFestivalInfoData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SpringFestivalInfoData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardInfo != null && Object.hasOwnProperty.call(m, "rewardInfo"))
                $root.proto.RewardSimpleInfo.encode(m.rewardInfo, w.uint32(10).fork()).ldelim();
            if (m.bDoubleReward != null && Object.hasOwnProperty.call(m, "bDoubleReward"))
                w.uint32(16).bool(m.bDoubleReward);
            if (m.bReceived != null && Object.hasOwnProperty.call(m, "bReceived"))
                w.uint32(24).bool(m.bReceived);
            return w;
        };

        /**
         * Decodes a SpringFestivalInfoData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.SpringFestivalInfoData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.SpringFestivalInfoData} SpringFestivalInfoData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SpringFestivalInfoData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SpringFestivalInfoData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rewardInfo = $root.proto.RewardSimpleInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.bDoubleReward = r.bool();
                    break;
                case 3:
                    m.bReceived = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SpringFestivalInfoData;
    })();

    proto.Msg_SearchSpringFestivalInfoReq = (function() {

        /**
         * Properties of a Msg_SearchSpringFestivalInfoReq.
         * @memberof proto
         * @interface IMsg_SearchSpringFestivalInfoReq
         */

        /**
         * Constructs a new Msg_SearchSpringFestivalInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_SearchSpringFestivalInfoReq.
         * @implements IMsg_SearchSpringFestivalInfoReq
         * @constructor
         * @param {proto.IMsg_SearchSpringFestivalInfoReq=} [p] Properties to set
         */
        function Msg_SearchSpringFestivalInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_SearchSpringFestivalInfoReq message. Does not implicitly {@link proto.Msg_SearchSpringFestivalInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SearchSpringFestivalInfoReq
         * @static
         * @param {proto.IMsg_SearchSpringFestivalInfoReq} m Msg_SearchSpringFestivalInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SearchSpringFestivalInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_SearchSpringFestivalInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SearchSpringFestivalInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SearchSpringFestivalInfoReq} Msg_SearchSpringFestivalInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SearchSpringFestivalInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SearchSpringFestivalInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SearchSpringFestivalInfoReq;
    })();

    proto.Msg_SearchSpringFestivalInfoRsp = (function() {

        /**
         * Properties of a Msg_SearchSpringFestivalInfoRsp.
         * @memberof proto
         * @interface IMsg_SearchSpringFestivalInfoRsp
         * @property {number|null} [curLoginDay] Msg_SearchSpringFestivalInfoRsp curLoginDay
         * @property {number|null} [startTime] Msg_SearchSpringFestivalInfoRsp startTime
         * @property {number|null} [overTime] Msg_SearchSpringFestivalInfoRsp overTime
         * @property {Array.<proto.ISpringFestivalInfoData>|null} [rewardInfoList] Msg_SearchSpringFestivalInfoRsp rewardInfoList
         */

        /**
         * Constructs a new Msg_SearchSpringFestivalInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SearchSpringFestivalInfoRsp.
         * @implements IMsg_SearchSpringFestivalInfoRsp
         * @constructor
         * @param {proto.IMsg_SearchSpringFestivalInfoRsp=} [p] Properties to set
         */
        function Msg_SearchSpringFestivalInfoRsp(p) {
            this.rewardInfoList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SearchSpringFestivalInfoRsp curLoginDay.
         * @member {number} curLoginDay
         * @memberof proto.Msg_SearchSpringFestivalInfoRsp
         * @instance
         */
        Msg_SearchSpringFestivalInfoRsp.prototype.curLoginDay = 0;

        /**
         * Msg_SearchSpringFestivalInfoRsp startTime.
         * @member {number} startTime
         * @memberof proto.Msg_SearchSpringFestivalInfoRsp
         * @instance
         */
        Msg_SearchSpringFestivalInfoRsp.prototype.startTime = 0;

        /**
         * Msg_SearchSpringFestivalInfoRsp overTime.
         * @member {number} overTime
         * @memberof proto.Msg_SearchSpringFestivalInfoRsp
         * @instance
         */
        Msg_SearchSpringFestivalInfoRsp.prototype.overTime = 0;

        /**
         * Msg_SearchSpringFestivalInfoRsp rewardInfoList.
         * @member {Array.<proto.ISpringFestivalInfoData>} rewardInfoList
         * @memberof proto.Msg_SearchSpringFestivalInfoRsp
         * @instance
         */
        Msg_SearchSpringFestivalInfoRsp.prototype.rewardInfoList = $util.emptyArray;

        /**
         * Encodes the specified Msg_SearchSpringFestivalInfoRsp message. Does not implicitly {@link proto.Msg_SearchSpringFestivalInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SearchSpringFestivalInfoRsp
         * @static
         * @param {proto.IMsg_SearchSpringFestivalInfoRsp} m Msg_SearchSpringFestivalInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SearchSpringFestivalInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.curLoginDay != null && Object.hasOwnProperty.call(m, "curLoginDay"))
                w.uint32(8).int32(m.curLoginDay);
            if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime"))
                w.uint32(16).int32(m.startTime);
            if (m.overTime != null && Object.hasOwnProperty.call(m, "overTime"))
                w.uint32(24).int32(m.overTime);
            if (m.rewardInfoList != null && m.rewardInfoList.length) {
                for (var i = 0; i < m.rewardInfoList.length; ++i)
                    $root.proto.SpringFestivalInfoData.encode(m.rewardInfoList[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_SearchSpringFestivalInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SearchSpringFestivalInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SearchSpringFestivalInfoRsp} Msg_SearchSpringFestivalInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SearchSpringFestivalInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SearchSpringFestivalInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.curLoginDay = r.int32();
                    break;
                case 2:
                    m.startTime = r.int32();
                    break;
                case 3:
                    m.overTime = r.int32();
                    break;
                case 4:
                    if (!(m.rewardInfoList && m.rewardInfoList.length))
                        m.rewardInfoList = [];
                    m.rewardInfoList.push($root.proto.SpringFestivalInfoData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SearchSpringFestivalInfoRsp;
    })();

    proto.Msg_ReceiveSpringFestivalRewardReq = (function() {

        /**
         * Properties of a Msg_ReceiveSpringFestivalRewardReq.
         * @memberof proto
         * @interface IMsg_ReceiveSpringFestivalRewardReq
         * @property {number|null} [day] Msg_ReceiveSpringFestivalRewardReq day
         * @property {boolean|null} [bDoubleReward] Msg_ReceiveSpringFestivalRewardReq bDoubleReward
         */

        /**
         * Constructs a new Msg_ReceiveSpringFestivalRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveSpringFestivalRewardReq.
         * @implements IMsg_ReceiveSpringFestivalRewardReq
         * @constructor
         * @param {proto.IMsg_ReceiveSpringFestivalRewardReq=} [p] Properties to set
         */
        function Msg_ReceiveSpringFestivalRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveSpringFestivalRewardReq day.
         * @member {number} day
         * @memberof proto.Msg_ReceiveSpringFestivalRewardReq
         * @instance
         */
        Msg_ReceiveSpringFestivalRewardReq.prototype.day = 0;

        /**
         * Msg_ReceiveSpringFestivalRewardReq bDoubleReward.
         * @member {boolean} bDoubleReward
         * @memberof proto.Msg_ReceiveSpringFestivalRewardReq
         * @instance
         */
        Msg_ReceiveSpringFestivalRewardReq.prototype.bDoubleReward = false;

        /**
         * Encodes the specified Msg_ReceiveSpringFestivalRewardReq message. Does not implicitly {@link proto.Msg_ReceiveSpringFestivalRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveSpringFestivalRewardReq
         * @static
         * @param {proto.IMsg_ReceiveSpringFestivalRewardReq} m Msg_ReceiveSpringFestivalRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveSpringFestivalRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.day != null && Object.hasOwnProperty.call(m, "day"))
                w.uint32(8).int32(m.day);
            if (m.bDoubleReward != null && Object.hasOwnProperty.call(m, "bDoubleReward"))
                w.uint32(16).bool(m.bDoubleReward);
            return w;
        };

        /**
         * Decodes a Msg_ReceiveSpringFestivalRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveSpringFestivalRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveSpringFestivalRewardReq} Msg_ReceiveSpringFestivalRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveSpringFestivalRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveSpringFestivalRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.day = r.int32();
                    break;
                case 2:
                    m.bDoubleReward = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ReceiveSpringFestivalRewardReq;
    })();

    proto.Msg_ReceiveSpringFestivalRewardRsp = (function() {

        /**
         * Properties of a Msg_ReceiveSpringFestivalRewardRsp.
         * @memberof proto
         * @interface IMsg_ReceiveSpringFestivalRewardRsp
         * @property {proto.Msg_ReceiveSpringFestivalRewardRsp.ErrorCode|null} [result] Msg_ReceiveSpringFestivalRewardRsp result
         * @property {number|null} [day] Msg_ReceiveSpringFestivalRewardRsp day
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [rewardList] Msg_ReceiveSpringFestivalRewardRsp rewardList
         */

        /**
         * Constructs a new Msg_ReceiveSpringFestivalRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ReceiveSpringFestivalRewardRsp.
         * @implements IMsg_ReceiveSpringFestivalRewardRsp
         * @constructor
         * @param {proto.IMsg_ReceiveSpringFestivalRewardRsp=} [p] Properties to set
         */
        function Msg_ReceiveSpringFestivalRewardRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ReceiveSpringFestivalRewardRsp result.
         * @member {proto.Msg_ReceiveSpringFestivalRewardRsp.ErrorCode} result
         * @memberof proto.Msg_ReceiveSpringFestivalRewardRsp
         * @instance
         */
        Msg_ReceiveSpringFestivalRewardRsp.prototype.result = 0;

        /**
         * Msg_ReceiveSpringFestivalRewardRsp day.
         * @member {number} day
         * @memberof proto.Msg_ReceiveSpringFestivalRewardRsp
         * @instance
         */
        Msg_ReceiveSpringFestivalRewardRsp.prototype.day = 0;

        /**
         * Msg_ReceiveSpringFestivalRewardRsp rewardList.
         * @member {Array.<proto.IVecRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_ReceiveSpringFestivalRewardRsp
         * @instance
         */
        Msg_ReceiveSpringFestivalRewardRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_ReceiveSpringFestivalRewardRsp message. Does not implicitly {@link proto.Msg_ReceiveSpringFestivalRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ReceiveSpringFestivalRewardRsp
         * @static
         * @param {proto.IMsg_ReceiveSpringFestivalRewardRsp} m Msg_ReceiveSpringFestivalRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ReceiveSpringFestivalRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.day != null && Object.hasOwnProperty.call(m, "day"))
                w.uint32(16).int32(m.day);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.rewardList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_ReceiveSpringFestivalRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ReceiveSpringFestivalRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ReceiveSpringFestivalRewardRsp} Msg_ReceiveSpringFestivalRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ReceiveSpringFestivalRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ReceiveSpringFestivalRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.day = r.int32();
                    break;
                case 3:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ReceiveSpringFestivalRewardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyReceived=1 AlreadyReceived value
         * @property {number} ActivityOver=2 ActivityOver value
         * @property {number} UnReachReceiveCond=3 UnReachReceiveCond value
         */
        Msg_ReceiveSpringFestivalRewardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyReceived"] = 1;
            values[valuesById[2] = "ActivityOver"] = 2;
            values[valuesById[3] = "UnReachReceiveCond"] = 3;
            return values;
        })();

        return Msg_ReceiveSpringFestivalRewardRsp;
    })();

    proto.OverBagGift = (function() {

        /**
         * Properties of an OverBagGift.
         * @memberof proto
         * @interface IOverBagGift
         * @property {number|null} [overBagGiftId] OverBagGift overBagGiftId
         * @property {number|null} [endUTC] OverBagGift endUTC
         * @property {number|Long|null} [buyUTC] OverBagGift buyUTC
         */

        /**
         * Constructs a new OverBagGift.
         * @memberof proto
         * @classdesc Represents an OverBagGift.
         * @implements IOverBagGift
         * @constructor
         * @param {proto.IOverBagGift=} [p] Properties to set
         */
        function OverBagGift(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * OverBagGift overBagGiftId.
         * @member {number} overBagGiftId
         * @memberof proto.OverBagGift
         * @instance
         */
        OverBagGift.prototype.overBagGiftId = 0;

        /**
         * OverBagGift endUTC.
         * @member {number} endUTC
         * @memberof proto.OverBagGift
         * @instance
         */
        OverBagGift.prototype.endUTC = 0;

        /**
         * OverBagGift buyUTC.
         * @member {number|Long} buyUTC
         * @memberof proto.OverBagGift
         * @instance
         */
        OverBagGift.prototype.buyUTC = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Encodes the specified OverBagGift message. Does not implicitly {@link proto.OverBagGift.verify|verify} messages.
         * @function encode
         * @memberof proto.OverBagGift
         * @static
         * @param {proto.IOverBagGift} m OverBagGift message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OverBagGift.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.overBagGiftId != null && Object.hasOwnProperty.call(m, "overBagGiftId"))
                w.uint32(8).int32(m.overBagGiftId);
            if (m.endUTC != null && Object.hasOwnProperty.call(m, "endUTC"))
                w.uint32(16).int32(m.endUTC);
            if (m.buyUTC != null && Object.hasOwnProperty.call(m, "buyUTC"))
                w.uint32(24).int64(m.buyUTC);
            return w;
        };

        /**
         * Decodes an OverBagGift message from the specified reader or buffer.
         * @function decode
         * @memberof proto.OverBagGift
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.OverBagGift} OverBagGift
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OverBagGift.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.OverBagGift();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.overBagGiftId = r.int32();
                    break;
                case 2:
                    m.endUTC = r.int32();
                    break;
                case 3:
                    m.buyUTC = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return OverBagGift;
    })();

    proto.Msg_OverBagGiftReq = (function() {

        /**
         * Properties of a Msg_OverBagGiftReq.
         * @memberof proto
         * @interface IMsg_OverBagGiftReq
         */

        /**
         * Constructs a new Msg_OverBagGiftReq.
         * @memberof proto
         * @classdesc Represents a Msg_OverBagGiftReq.
         * @implements IMsg_OverBagGiftReq
         * @constructor
         * @param {proto.IMsg_OverBagGiftReq=} [p] Properties to set
         */
        function Msg_OverBagGiftReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_OverBagGiftReq message. Does not implicitly {@link proto.Msg_OverBagGiftReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OverBagGiftReq
         * @static
         * @param {proto.IMsg_OverBagGiftReq} m Msg_OverBagGiftReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OverBagGiftReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_OverBagGiftReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OverBagGiftReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OverBagGiftReq} Msg_OverBagGiftReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OverBagGiftReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OverBagGiftReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OverBagGiftReq;
    })();

    proto.Msg_OverBagGiftRsp = (function() {

        /**
         * Properties of a Msg_OverBagGiftRsp.
         * @memberof proto
         * @interface IMsg_OverBagGiftRsp
         * @property {Array.<proto.IOverBagGift>|null} [bagGifts] Msg_OverBagGiftRsp bagGifts
         */

        /**
         * Constructs a new Msg_OverBagGiftRsp.
         * @memberof proto
         * @classdesc Represents a Msg_OverBagGiftRsp.
         * @implements IMsg_OverBagGiftRsp
         * @constructor
         * @param {proto.IMsg_OverBagGiftRsp=} [p] Properties to set
         */
        function Msg_OverBagGiftRsp(p) {
            this.bagGifts = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_OverBagGiftRsp bagGifts.
         * @member {Array.<proto.IOverBagGift>} bagGifts
         * @memberof proto.Msg_OverBagGiftRsp
         * @instance
         */
        Msg_OverBagGiftRsp.prototype.bagGifts = $util.emptyArray;

        /**
         * Encodes the specified Msg_OverBagGiftRsp message. Does not implicitly {@link proto.Msg_OverBagGiftRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_OverBagGiftRsp
         * @static
         * @param {proto.IMsg_OverBagGiftRsp} m Msg_OverBagGiftRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_OverBagGiftRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bagGifts != null && m.bagGifts.length) {
                for (var i = 0; i < m.bagGifts.length; ++i)
                    $root.proto.OverBagGift.encode(m.bagGifts[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_OverBagGiftRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_OverBagGiftRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_OverBagGiftRsp} Msg_OverBagGiftRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_OverBagGiftRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_OverBagGiftRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.bagGifts && m.bagGifts.length))
                        m.bagGifts = [];
                    m.bagGifts.push($root.proto.OverBagGift.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_OverBagGiftRsp;
    })();

    proto.Msg_BuyOverBagGiftReq = (function() {

        /**
         * Properties of a Msg_BuyOverBagGiftReq.
         * @memberof proto
         * @interface IMsg_BuyOverBagGiftReq
         * @property {number|null} [overBagGiftId] Msg_BuyOverBagGiftReq overBagGiftId
         */

        /**
         * Constructs a new Msg_BuyOverBagGiftReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyOverBagGiftReq.
         * @implements IMsg_BuyOverBagGiftReq
         * @constructor
         * @param {proto.IMsg_BuyOverBagGiftReq=} [p] Properties to set
         */
        function Msg_BuyOverBagGiftReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyOverBagGiftReq overBagGiftId.
         * @member {number} overBagGiftId
         * @memberof proto.Msg_BuyOverBagGiftReq
         * @instance
         */
        Msg_BuyOverBagGiftReq.prototype.overBagGiftId = 0;

        /**
         * Encodes the specified Msg_BuyOverBagGiftReq message. Does not implicitly {@link proto.Msg_BuyOverBagGiftReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyOverBagGiftReq
         * @static
         * @param {proto.IMsg_BuyOverBagGiftReq} m Msg_BuyOverBagGiftReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyOverBagGiftReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.overBagGiftId != null && Object.hasOwnProperty.call(m, "overBagGiftId"))
                w.uint32(8).int32(m.overBagGiftId);
            return w;
        };

        /**
         * Decodes a Msg_BuyOverBagGiftReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyOverBagGiftReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyOverBagGiftReq} Msg_BuyOverBagGiftReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyOverBagGiftReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyOverBagGiftReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.overBagGiftId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyOverBagGiftReq;
    })();

    proto.Msg_BuyOverBagGiftRsp = (function() {

        /**
         * Properties of a Msg_BuyOverBagGiftRsp.
         * @memberof proto
         * @interface IMsg_BuyOverBagGiftRsp
         * @property {proto.Msg_BuyOverBagGiftRsp.ErrorCode|null} [result] Msg_BuyOverBagGiftRsp result
         * @property {number|null} [overBagGiftId] Msg_BuyOverBagGiftRsp overBagGiftId
         * @property {Array.<proto.IVecRewardSimpleInfo>|null} [rewardList] Msg_BuyOverBagGiftRsp rewardList
         */

        /**
         * Constructs a new Msg_BuyOverBagGiftRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyOverBagGiftRsp.
         * @implements IMsg_BuyOverBagGiftRsp
         * @constructor
         * @param {proto.IMsg_BuyOverBagGiftRsp=} [p] Properties to set
         */
        function Msg_BuyOverBagGiftRsp(p) {
            this.rewardList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyOverBagGiftRsp result.
         * @member {proto.Msg_BuyOverBagGiftRsp.ErrorCode} result
         * @memberof proto.Msg_BuyOverBagGiftRsp
         * @instance
         */
        Msg_BuyOverBagGiftRsp.prototype.result = 0;

        /**
         * Msg_BuyOverBagGiftRsp overBagGiftId.
         * @member {number} overBagGiftId
         * @memberof proto.Msg_BuyOverBagGiftRsp
         * @instance
         */
        Msg_BuyOverBagGiftRsp.prototype.overBagGiftId = 0;

        /**
         * Msg_BuyOverBagGiftRsp rewardList.
         * @member {Array.<proto.IVecRewardSimpleInfo>} rewardList
         * @memberof proto.Msg_BuyOverBagGiftRsp
         * @instance
         */
        Msg_BuyOverBagGiftRsp.prototype.rewardList = $util.emptyArray;

        /**
         * Encodes the specified Msg_BuyOverBagGiftRsp message. Does not implicitly {@link proto.Msg_BuyOverBagGiftRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyOverBagGiftRsp
         * @static
         * @param {proto.IMsg_BuyOverBagGiftRsp} m Msg_BuyOverBagGiftRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyOverBagGiftRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.overBagGiftId != null && Object.hasOwnProperty.call(m, "overBagGiftId"))
                w.uint32(16).int32(m.overBagGiftId);
            if (m.rewardList != null && m.rewardList.length) {
                for (var i = 0; i < m.rewardList.length; ++i)
                    $root.proto.VecRewardSimpleInfo.encode(m.rewardList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BuyOverBagGiftRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyOverBagGiftRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyOverBagGiftRsp} Msg_BuyOverBagGiftRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyOverBagGiftRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyOverBagGiftRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.overBagGiftId = r.int32();
                    break;
                case 3:
                    if (!(m.rewardList && m.rewardList.length))
                        m.rewardList = [];
                    m.rewardList.push($root.proto.VecRewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyOverBagGiftRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyReceived=1 AlreadyReceived value
         * @property {number} ActivityOver=2 ActivityOver value
         * @property {number} Error=3 Error value
         */
        Msg_BuyOverBagGiftRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyReceived"] = 1;
            values[valuesById[2] = "ActivityOver"] = 2;
            values[valuesById[3] = "Error"] = 3;
            return values;
        })();

        return Msg_BuyOverBagGiftRsp;
    })();

    proto.Msg_PushOverBagGift = (function() {

        /**
         * Properties of a Msg_PushOverBagGift.
         * @memberof proto
         * @interface IMsg_PushOverBagGift
         * @property {Array.<proto.IOverBagGift>|null} [bagGifts] Msg_PushOverBagGift bagGifts
         */

        /**
         * Constructs a new Msg_PushOverBagGift.
         * @memberof proto
         * @classdesc Represents a Msg_PushOverBagGift.
         * @implements IMsg_PushOverBagGift
         * @constructor
         * @param {proto.IMsg_PushOverBagGift=} [p] Properties to set
         */
        function Msg_PushOverBagGift(p) {
            this.bagGifts = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushOverBagGift bagGifts.
         * @member {Array.<proto.IOverBagGift>} bagGifts
         * @memberof proto.Msg_PushOverBagGift
         * @instance
         */
        Msg_PushOverBagGift.prototype.bagGifts = $util.emptyArray;

        /**
         * Encodes the specified Msg_PushOverBagGift message. Does not implicitly {@link proto.Msg_PushOverBagGift.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushOverBagGift
         * @static
         * @param {proto.IMsg_PushOverBagGift} m Msg_PushOverBagGift message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushOverBagGift.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bagGifts != null && m.bagGifts.length) {
                for (var i = 0; i < m.bagGifts.length; ++i)
                    $root.proto.OverBagGift.encode(m.bagGifts[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_PushOverBagGift message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushOverBagGift
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushOverBagGift} Msg_PushOverBagGift
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushOverBagGift.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushOverBagGift();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.bagGifts && m.bagGifts.length))
                        m.bagGifts = [];
                    m.bagGifts.push($root.proto.OverBagGift.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushOverBagGift;
    })();

    proto.SpringFestivalSignInDBData = (function() {

        /**
         * Properties of a SpringFestivalSignInDBData.
         * @memberof proto
         * @interface ISpringFestivalSignInDBData
         * @property {Array.<proto.ISpringFestivalInfoData>|null} [rewardData] SpringFestivalSignInDBData rewardData
         * @property {number|null} [curLoginDay] SpringFestivalSignInDBData curLoginDay
         * @property {number|null} [startTime] SpringFestivalSignInDBData startTime
         * @property {number|null} [endTime] SpringFestivalSignInDBData endTime
         * @property {number|null} [lastSignInTime] SpringFestivalSignInDBData lastSignInTime
         */

        /**
         * Constructs a new SpringFestivalSignInDBData.
         * @memberof proto
         * @classdesc Represents a SpringFestivalSignInDBData.
         * @implements ISpringFestivalSignInDBData
         * @constructor
         * @param {proto.ISpringFestivalSignInDBData=} [p] Properties to set
         */
        function SpringFestivalSignInDBData(p) {
            this.rewardData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * SpringFestivalSignInDBData rewardData.
         * @member {Array.<proto.ISpringFestivalInfoData>} rewardData
         * @memberof proto.SpringFestivalSignInDBData
         * @instance
         */
        SpringFestivalSignInDBData.prototype.rewardData = $util.emptyArray;

        /**
         * SpringFestivalSignInDBData curLoginDay.
         * @member {number} curLoginDay
         * @memberof proto.SpringFestivalSignInDBData
         * @instance
         */
        SpringFestivalSignInDBData.prototype.curLoginDay = 0;

        /**
         * SpringFestivalSignInDBData startTime.
         * @member {number} startTime
         * @memberof proto.SpringFestivalSignInDBData
         * @instance
         */
        SpringFestivalSignInDBData.prototype.startTime = 0;

        /**
         * SpringFestivalSignInDBData endTime.
         * @member {number} endTime
         * @memberof proto.SpringFestivalSignInDBData
         * @instance
         */
        SpringFestivalSignInDBData.prototype.endTime = 0;

        /**
         * SpringFestivalSignInDBData lastSignInTime.
         * @member {number} lastSignInTime
         * @memberof proto.SpringFestivalSignInDBData
         * @instance
         */
        SpringFestivalSignInDBData.prototype.lastSignInTime = 0;

        /**
         * Encodes the specified SpringFestivalSignInDBData message. Does not implicitly {@link proto.SpringFestivalSignInDBData.verify|verify} messages.
         * @function encode
         * @memberof proto.SpringFestivalSignInDBData
         * @static
         * @param {proto.ISpringFestivalSignInDBData} m SpringFestivalSignInDBData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SpringFestivalSignInDBData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rewardData != null && m.rewardData.length) {
                for (var i = 0; i < m.rewardData.length; ++i)
                    $root.proto.SpringFestivalInfoData.encode(m.rewardData[i], w.uint32(10).fork()).ldelim();
            }
            if (m.curLoginDay != null && Object.hasOwnProperty.call(m, "curLoginDay"))
                w.uint32(16).int32(m.curLoginDay);
            if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime"))
                w.uint32(24).int32(m.startTime);
            if (m.endTime != null && Object.hasOwnProperty.call(m, "endTime"))
                w.uint32(32).int32(m.endTime);
            if (m.lastSignInTime != null && Object.hasOwnProperty.call(m, "lastSignInTime"))
                w.uint32(40).int32(m.lastSignInTime);
            return w;
        };

        /**
         * Decodes a SpringFestivalSignInDBData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.SpringFestivalSignInDBData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.SpringFestivalSignInDBData} SpringFestivalSignInDBData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SpringFestivalSignInDBData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.SpringFestivalSignInDBData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.rewardData && m.rewardData.length))
                        m.rewardData = [];
                    m.rewardData.push($root.proto.SpringFestivalInfoData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.curLoginDay = r.int32();
                    break;
                case 3:
                    m.startTime = r.int32();
                    break;
                case 4:
                    m.endTime = r.int32();
                    break;
                case 5:
                    m.lastSignInTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SpringFestivalSignInDBData;
    })();

    proto.Msg_PushSelectCardBySelfRsp = (function() {

        /**
         * Properties of a Msg_PushSelectCardBySelfRsp.
         * @memberof proto
         * @interface IMsg_PushSelectCardBySelfRsp
         * @property {number|null} [leftTimes] Msg_PushSelectCardBySelfRsp leftTimes
         */

        /**
         * Constructs a new Msg_PushSelectCardBySelfRsp.
         * @memberof proto
         * @classdesc Represents a Msg_PushSelectCardBySelfRsp.
         * @implements IMsg_PushSelectCardBySelfRsp
         * @constructor
         * @param {proto.IMsg_PushSelectCardBySelfRsp=} [p] Properties to set
         */
        function Msg_PushSelectCardBySelfRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_PushSelectCardBySelfRsp leftTimes.
         * @member {number} leftTimes
         * @memberof proto.Msg_PushSelectCardBySelfRsp
         * @instance
         */
        Msg_PushSelectCardBySelfRsp.prototype.leftTimes = 0;

        /**
         * Encodes the specified Msg_PushSelectCardBySelfRsp message. Does not implicitly {@link proto.Msg_PushSelectCardBySelfRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_PushSelectCardBySelfRsp
         * @static
         * @param {proto.IMsg_PushSelectCardBySelfRsp} m Msg_PushSelectCardBySelfRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_PushSelectCardBySelfRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.leftTimes != null && Object.hasOwnProperty.call(m, "leftTimes"))
                w.uint32(8).int32(m.leftTimes);
            return w;
        };

        /**
         * Decodes a Msg_PushSelectCardBySelfRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_PushSelectCardBySelfRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_PushSelectCardBySelfRsp} Msg_PushSelectCardBySelfRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_PushSelectCardBySelfRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_PushSelectCardBySelfRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.leftTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_PushSelectCardBySelfRsp;
    })();

    proto.Msg_SelectCardBySelfReq = (function() {

        /**
         * Properties of a Msg_SelectCardBySelfReq.
         * @memberof proto
         * @interface IMsg_SelectCardBySelfReq
         * @property {number|null} [cardStaticId] Msg_SelectCardBySelfReq cardStaticId
         */

        /**
         * Constructs a new Msg_SelectCardBySelfReq.
         * @memberof proto
         * @classdesc Represents a Msg_SelectCardBySelfReq.
         * @implements IMsg_SelectCardBySelfReq
         * @constructor
         * @param {proto.IMsg_SelectCardBySelfReq=} [p] Properties to set
         */
        function Msg_SelectCardBySelfReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SelectCardBySelfReq cardStaticId.
         * @member {number} cardStaticId
         * @memberof proto.Msg_SelectCardBySelfReq
         * @instance
         */
        Msg_SelectCardBySelfReq.prototype.cardStaticId = 0;

        /**
         * Encodes the specified Msg_SelectCardBySelfReq message. Does not implicitly {@link proto.Msg_SelectCardBySelfReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SelectCardBySelfReq
         * @static
         * @param {proto.IMsg_SelectCardBySelfReq} m Msg_SelectCardBySelfReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SelectCardBySelfReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cardStaticId != null && Object.hasOwnProperty.call(m, "cardStaticId"))
                w.uint32(8).int32(m.cardStaticId);
            return w;
        };

        /**
         * Decodes a Msg_SelectCardBySelfReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SelectCardBySelfReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SelectCardBySelfReq} Msg_SelectCardBySelfReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SelectCardBySelfReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SelectCardBySelfReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.cardStaticId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SelectCardBySelfReq;
    })();

    proto.Msg_SelectCardBySelfRsp = (function() {

        /**
         * Properties of a Msg_SelectCardBySelfRsp.
         * @memberof proto
         * @interface IMsg_SelectCardBySelfRsp
         * @property {proto.Msg_SelectCardBySelfRsp.ErrorCode|null} [result] Msg_SelectCardBySelfRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_SelectCardBySelfRsp Awards
         * @property {number|null} [leftTimes] Msg_SelectCardBySelfRsp leftTimes
         */

        /**
         * Constructs a new Msg_SelectCardBySelfRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SelectCardBySelfRsp.
         * @implements IMsg_SelectCardBySelfRsp
         * @constructor
         * @param {proto.IMsg_SelectCardBySelfRsp=} [p] Properties to set
         */
        function Msg_SelectCardBySelfRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SelectCardBySelfRsp result.
         * @member {proto.Msg_SelectCardBySelfRsp.ErrorCode} result
         * @memberof proto.Msg_SelectCardBySelfRsp
         * @instance
         */
        Msg_SelectCardBySelfRsp.prototype.result = 0;

        /**
         * Msg_SelectCardBySelfRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_SelectCardBySelfRsp
         * @instance
         */
        Msg_SelectCardBySelfRsp.prototype.Awards = $util.emptyArray;

        /**
         * Msg_SelectCardBySelfRsp leftTimes.
         * @member {number} leftTimes
         * @memberof proto.Msg_SelectCardBySelfRsp
         * @instance
         */
        Msg_SelectCardBySelfRsp.prototype.leftTimes = 0;

        /**
         * Encodes the specified Msg_SelectCardBySelfRsp message. Does not implicitly {@link proto.Msg_SelectCardBySelfRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SelectCardBySelfRsp
         * @static
         * @param {proto.IMsg_SelectCardBySelfRsp} m Msg_SelectCardBySelfRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SelectCardBySelfRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.leftTimes != null && Object.hasOwnProperty.call(m, "leftTimes"))
                w.uint32(24).int32(m.leftTimes);
            return w;
        };

        /**
         * Decodes a Msg_SelectCardBySelfRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SelectCardBySelfRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SelectCardBySelfRsp} Msg_SelectCardBySelfRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SelectCardBySelfRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SelectCardBySelfRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.leftTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_SelectCardBySelfRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Error=1 Error value
         */
        Msg_SelectCardBySelfRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Error"] = 1;
            return values;
        })();

        return Msg_SelectCardBySelfRsp;
    })();

    proto.ChatMsgData = (function() {

        /**
         * Properties of a ChatMsgData.
         * @memberof proto
         * @interface IChatMsgData
         * @property {proto.GlobalMessageType|null} [msgType] ChatMsgData msgType
         * @property {string|null} [content] ChatMsgData content
         * @property {number|null} [utcTime] ChatMsgData utcTime
         * @property {string|null} [msgSenderName] ChatMsgData msgSenderName
         * @property {string|null} [senderUUID] ChatMsgData senderUUID
         * @property {number|null} [playerHeadID] ChatMsgData playerHeadID
         * @property {string|null} [receiverUUID] ChatMsgData receiverUUID
         * @property {number|null} [rankScore] ChatMsgData rankScore
         * @property {string|null} [allianceName] ChatMsgData allianceName
         * @property {number|null} [allianceIconIdx] ChatMsgData allianceIconIdx
         */

        /**
         * Constructs a new ChatMsgData.
         * @memberof proto
         * @classdesc Represents a ChatMsgData.
         * @implements IChatMsgData
         * @constructor
         * @param {proto.IChatMsgData=} [p] Properties to set
         */
        function ChatMsgData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * ChatMsgData msgType.
         * @member {proto.GlobalMessageType} msgType
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.msgType = 0;

        /**
         * ChatMsgData content.
         * @member {string} content
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.content = "";

        /**
         * ChatMsgData utcTime.
         * @member {number} utcTime
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.utcTime = 0;

        /**
         * ChatMsgData msgSenderName.
         * @member {string} msgSenderName
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.msgSenderName = "";

        /**
         * ChatMsgData senderUUID.
         * @member {string} senderUUID
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.senderUUID = "";

        /**
         * ChatMsgData playerHeadID.
         * @member {number} playerHeadID
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.playerHeadID = 0;

        /**
         * ChatMsgData receiverUUID.
         * @member {string} receiverUUID
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.receiverUUID = "";

        /**
         * ChatMsgData rankScore.
         * @member {number} rankScore
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.rankScore = 0;

        /**
         * ChatMsgData allianceName.
         * @member {string} allianceName
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.allianceName = "";

        /**
         * ChatMsgData allianceIconIdx.
         * @member {number} allianceIconIdx
         * @memberof proto.ChatMsgData
         * @instance
         */
        ChatMsgData.prototype.allianceIconIdx = 0;

        /**
         * Encodes the specified ChatMsgData message. Does not implicitly {@link proto.ChatMsgData.verify|verify} messages.
         * @function encode
         * @memberof proto.ChatMsgData
         * @static
         * @param {proto.IChatMsgData} m ChatMsgData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ChatMsgData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.msgType != null && Object.hasOwnProperty.call(m, "msgType"))
                w.uint32(8).int32(m.msgType);
            if (m.content != null && Object.hasOwnProperty.call(m, "content"))
                w.uint32(18).string(m.content);
            if (m.utcTime != null && Object.hasOwnProperty.call(m, "utcTime"))
                w.uint32(24).int32(m.utcTime);
            if (m.msgSenderName != null && Object.hasOwnProperty.call(m, "msgSenderName"))
                w.uint32(34).string(m.msgSenderName);
            if (m.senderUUID != null && Object.hasOwnProperty.call(m, "senderUUID"))
                w.uint32(42).string(m.senderUUID);
            if (m.playerHeadID != null && Object.hasOwnProperty.call(m, "playerHeadID"))
                w.uint32(48).int32(m.playerHeadID);
            if (m.receiverUUID != null && Object.hasOwnProperty.call(m, "receiverUUID"))
                w.uint32(58).string(m.receiverUUID);
            if (m.rankScore != null && Object.hasOwnProperty.call(m, "rankScore"))
                w.uint32(64).int32(m.rankScore);
            if (m.allianceName != null && Object.hasOwnProperty.call(m, "allianceName"))
                w.uint32(74).string(m.allianceName);
            if (m.allianceIconIdx != null && Object.hasOwnProperty.call(m, "allianceIconIdx"))
                w.uint32(80).int32(m.allianceIconIdx);
            return w;
        };

        /**
         * Decodes a ChatMsgData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.ChatMsgData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.ChatMsgData} ChatMsgData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ChatMsgData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.ChatMsgData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.msgType = r.int32();
                    break;
                case 2:
                    m.content = r.string();
                    break;
                case 3:
                    m.utcTime = r.int32();
                    break;
                case 4:
                    m.msgSenderName = r.string();
                    break;
                case 5:
                    m.senderUUID = r.string();
                    break;
                case 6:
                    m.playerHeadID = r.int32();
                    break;
                case 7:
                    m.receiverUUID = r.string();
                    break;
                case 8:
                    m.rankScore = r.int32();
                    break;
                case 9:
                    m.allianceName = r.string();
                    break;
                case 10:
                    m.allianceIconIdx = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ChatMsgData;
    })();

    proto.Msg_ChatMsgPush = (function() {

        /**
         * Properties of a Msg_ChatMsgPush.
         * @memberof proto
         * @interface IMsg_ChatMsgPush
         * @property {Array.<proto.IChatMsgData>|null} [msg] Msg_ChatMsgPush msg
         * @property {proto.ChatChannelType|null} [channel] Msg_ChatMsgPush channel
         */

        /**
         * Constructs a new Msg_ChatMsgPush.
         * @memberof proto
         * @classdesc Represents a Msg_ChatMsgPush.
         * @implements IMsg_ChatMsgPush
         * @constructor
         * @param {proto.IMsg_ChatMsgPush=} [p] Properties to set
         */
        function Msg_ChatMsgPush(p) {
            this.msg = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatMsgPush msg.
         * @member {Array.<proto.IChatMsgData>} msg
         * @memberof proto.Msg_ChatMsgPush
         * @instance
         */
        Msg_ChatMsgPush.prototype.msg = $util.emptyArray;

        /**
         * Msg_ChatMsgPush channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_ChatMsgPush
         * @instance
         */
        Msg_ChatMsgPush.prototype.channel = 0;

        /**
         * Encodes the specified Msg_ChatMsgPush message. Does not implicitly {@link proto.Msg_ChatMsgPush.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatMsgPush
         * @static
         * @param {proto.IMsg_ChatMsgPush} m Msg_ChatMsgPush message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatMsgPush.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.msg != null && m.msg.length) {
                for (var i = 0; i < m.msg.length; ++i)
                    $root.proto.ChatMsgData.encode(m.msg[i], w.uint32(10).fork()).ldelim();
            }
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_ChatMsgPush message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatMsgPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatMsgPush} Msg_ChatMsgPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatMsgPush.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatMsgPush();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.msg && m.msg.length))
                        m.msg = [];
                    m.msg.push($root.proto.ChatMsgData.decode(r, r.uint32()));
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChatMsgPush;
    })();

    proto.Msg_ChatSendMessageReq = (function() {

        /**
         * Properties of a Msg_ChatSendMessageReq.
         * @memberof proto
         * @interface IMsg_ChatSendMessageReq
         * @property {string|null} [message] Msg_ChatSendMessageReq message
         * @property {proto.ChatChannelType|null} [channel] Msg_ChatSendMessageReq channel
         * @property {string|null} [receiverUUID] Msg_ChatSendMessageReq receiverUUID
         */

        /**
         * Constructs a new Msg_ChatSendMessageReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChatSendMessageReq.
         * @implements IMsg_ChatSendMessageReq
         * @constructor
         * @param {proto.IMsg_ChatSendMessageReq=} [p] Properties to set
         */
        function Msg_ChatSendMessageReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatSendMessageReq message.
         * @member {string} message
         * @memberof proto.Msg_ChatSendMessageReq
         * @instance
         */
        Msg_ChatSendMessageReq.prototype.message = "";

        /**
         * Msg_ChatSendMessageReq channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_ChatSendMessageReq
         * @instance
         */
        Msg_ChatSendMessageReq.prototype.channel = 0;

        /**
         * Msg_ChatSendMessageReq receiverUUID.
         * @member {string} receiverUUID
         * @memberof proto.Msg_ChatSendMessageReq
         * @instance
         */
        Msg_ChatSendMessageReq.prototype.receiverUUID = "";

        /**
         * Encodes the specified Msg_ChatSendMessageReq message. Does not implicitly {@link proto.Msg_ChatSendMessageReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatSendMessageReq
         * @static
         * @param {proto.IMsg_ChatSendMessageReq} m Msg_ChatSendMessageReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatSendMessageReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(10).string(m.message);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            if (m.receiverUUID != null && Object.hasOwnProperty.call(m, "receiverUUID"))
                w.uint32(26).string(m.receiverUUID);
            return w;
        };

        /**
         * Decodes a Msg_ChatSendMessageReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatSendMessageReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatSendMessageReq} Msg_ChatSendMessageReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatSendMessageReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatSendMessageReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.message = r.string();
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                case 3:
                    m.receiverUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChatSendMessageReq;
    })();

    proto.Msg_ChatSendMessageRsp = (function() {

        /**
         * Properties of a Msg_ChatSendMessageRsp.
         * @memberof proto
         * @interface IMsg_ChatSendMessageRsp
         * @property {proto.Msg_ChatSendMessageRsp.ErrorCode|null} [result] Msg_ChatSendMessageRsp result
         * @property {number|null} [cd] Msg_ChatSendMessageRsp cd
         */

        /**
         * Constructs a new Msg_ChatSendMessageRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChatSendMessageRsp.
         * @implements IMsg_ChatSendMessageRsp
         * @constructor
         * @param {proto.IMsg_ChatSendMessageRsp=} [p] Properties to set
         */
        function Msg_ChatSendMessageRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatSendMessageRsp result.
         * @member {proto.Msg_ChatSendMessageRsp.ErrorCode} result
         * @memberof proto.Msg_ChatSendMessageRsp
         * @instance
         */
        Msg_ChatSendMessageRsp.prototype.result = 0;

        /**
         * Msg_ChatSendMessageRsp cd.
         * @member {number} cd
         * @memberof proto.Msg_ChatSendMessageRsp
         * @instance
         */
        Msg_ChatSendMessageRsp.prototype.cd = 0;

        /**
         * Encodes the specified Msg_ChatSendMessageRsp message. Does not implicitly {@link proto.Msg_ChatSendMessageRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatSendMessageRsp
         * @static
         * @param {proto.IMsg_ChatSendMessageRsp} m Msg_ChatSendMessageRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatSendMessageRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cd != null && Object.hasOwnProperty.call(m, "cd"))
                w.uint32(16).int32(m.cd);
            return w;
        };

        /**
         * Decodes a Msg_ChatSendMessageRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatSendMessageRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatSendMessageRsp} Msg_ChatSendMessageRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatSendMessageRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatSendMessageRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cd = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChatSendMessageRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} SensitiveWordError=1 SensitiveWordError value
         * @property {number} CD=2 CD value
         * @property {number} NoAlliance=3 NoAlliance value
         * @property {number} NotFriend=4 NotFriend value
         */
        Msg_ChatSendMessageRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "SensitiveWordError"] = 1;
            values[valuesById[2] = "CD"] = 2;
            values[valuesById[3] = "NoAlliance"] = 3;
            values[valuesById[4] = "NotFriend"] = 4;
            return values;
        })();

        return Msg_ChatSendMessageRsp;
    })();

    proto.Msg_ChatSendEmojiReq = (function() {

        /**
         * Properties of a Msg_ChatSendEmojiReq.
         * @memberof proto
         * @interface IMsg_ChatSendEmojiReq
         * @property {number|null} [emojiID] Msg_ChatSendEmojiReq emojiID
         * @property {proto.ChatChannelType|null} [channel] Msg_ChatSendEmojiReq channel
         * @property {string|null} [receiverUUID] Msg_ChatSendEmojiReq receiverUUID
         */

        /**
         * Constructs a new Msg_ChatSendEmojiReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChatSendEmojiReq.
         * @implements IMsg_ChatSendEmojiReq
         * @constructor
         * @param {proto.IMsg_ChatSendEmojiReq=} [p] Properties to set
         */
        function Msg_ChatSendEmojiReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatSendEmojiReq emojiID.
         * @member {number} emojiID
         * @memberof proto.Msg_ChatSendEmojiReq
         * @instance
         */
        Msg_ChatSendEmojiReq.prototype.emojiID = 0;

        /**
         * Msg_ChatSendEmojiReq channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_ChatSendEmojiReq
         * @instance
         */
        Msg_ChatSendEmojiReq.prototype.channel = 0;

        /**
         * Msg_ChatSendEmojiReq receiverUUID.
         * @member {string} receiverUUID
         * @memberof proto.Msg_ChatSendEmojiReq
         * @instance
         */
        Msg_ChatSendEmojiReq.prototype.receiverUUID = "";

        /**
         * Encodes the specified Msg_ChatSendEmojiReq message. Does not implicitly {@link proto.Msg_ChatSendEmojiReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatSendEmojiReq
         * @static
         * @param {proto.IMsg_ChatSendEmojiReq} m Msg_ChatSendEmojiReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatSendEmojiReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.emojiID != null && Object.hasOwnProperty.call(m, "emojiID"))
                w.uint32(8).int32(m.emojiID);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            if (m.receiverUUID != null && Object.hasOwnProperty.call(m, "receiverUUID"))
                w.uint32(26).string(m.receiverUUID);
            return w;
        };

        /**
         * Decodes a Msg_ChatSendEmojiReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatSendEmojiReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatSendEmojiReq} Msg_ChatSendEmojiReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatSendEmojiReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatSendEmojiReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.emojiID = r.int32();
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                case 3:
                    m.receiverUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChatSendEmojiReq;
    })();

    proto.Msg_ChatSendEmojiRsp = (function() {

        /**
         * Properties of a Msg_ChatSendEmojiRsp.
         * @memberof proto
         * @interface IMsg_ChatSendEmojiRsp
         * @property {proto.Msg_ChatSendEmojiRsp.ErrorCode|null} [result] Msg_ChatSendEmojiRsp result
         * @property {number|null} [cd] Msg_ChatSendEmojiRsp cd
         */

        /**
         * Constructs a new Msg_ChatSendEmojiRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChatSendEmojiRsp.
         * @implements IMsg_ChatSendEmojiRsp
         * @constructor
         * @param {proto.IMsg_ChatSendEmojiRsp=} [p] Properties to set
         */
        function Msg_ChatSendEmojiRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatSendEmojiRsp result.
         * @member {proto.Msg_ChatSendEmojiRsp.ErrorCode} result
         * @memberof proto.Msg_ChatSendEmojiRsp
         * @instance
         */
        Msg_ChatSendEmojiRsp.prototype.result = 0;

        /**
         * Msg_ChatSendEmojiRsp cd.
         * @member {number} cd
         * @memberof proto.Msg_ChatSendEmojiRsp
         * @instance
         */
        Msg_ChatSendEmojiRsp.prototype.cd = 0;

        /**
         * Encodes the specified Msg_ChatSendEmojiRsp message. Does not implicitly {@link proto.Msg_ChatSendEmojiRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatSendEmojiRsp
         * @static
         * @param {proto.IMsg_ChatSendEmojiRsp} m Msg_ChatSendEmojiRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatSendEmojiRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cd != null && Object.hasOwnProperty.call(m, "cd"))
                w.uint32(16).int32(m.cd);
            return w;
        };

        /**
         * Decodes a Msg_ChatSendEmojiRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatSendEmojiRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatSendEmojiRsp} Msg_ChatSendEmojiRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatSendEmojiRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatSendEmojiRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cd = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChatSendEmojiRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} EmojiNotExist=1 EmojiNotExist value
         * @property {number} CD=2 CD value
         * @property {number} NoAlliance=3 NoAlliance value
         * @property {number} NotFriend=4 NotFriend value
         */
        Msg_ChatSendEmojiRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "EmojiNotExist"] = 1;
            values[valuesById[2] = "CD"] = 2;
            values[valuesById[3] = "NoAlliance"] = 3;
            values[valuesById[4] = "NotFriend"] = 4;
            return values;
        })();

        return Msg_ChatSendEmojiRsp;
    })();

    proto.Msg_GetChatCdReq = (function() {

        /**
         * Properties of a Msg_GetChatCdReq.
         * @memberof proto
         * @interface IMsg_GetChatCdReq
         */

        /**
         * Constructs a new Msg_GetChatCdReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetChatCdReq.
         * @implements IMsg_GetChatCdReq
         * @constructor
         * @param {proto.IMsg_GetChatCdReq=} [p] Properties to set
         */
        function Msg_GetChatCdReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetChatCdReq message. Does not implicitly {@link proto.Msg_GetChatCdReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetChatCdReq
         * @static
         * @param {proto.IMsg_GetChatCdReq} m Msg_GetChatCdReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetChatCdReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetChatCdReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetChatCdReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetChatCdReq} Msg_GetChatCdReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetChatCdReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetChatCdReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetChatCdReq;
    })();

    proto.Msg_GetChatCdRsp = (function() {

        /**
         * Properties of a Msg_GetChatCdRsp.
         * @memberof proto
         * @interface IMsg_GetChatCdRsp
         * @property {number|null} [cd] Msg_GetChatCdRsp cd
         */

        /**
         * Constructs a new Msg_GetChatCdRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetChatCdRsp.
         * @implements IMsg_GetChatCdRsp
         * @constructor
         * @param {proto.IMsg_GetChatCdRsp=} [p] Properties to set
         */
        function Msg_GetChatCdRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetChatCdRsp cd.
         * @member {number} cd
         * @memberof proto.Msg_GetChatCdRsp
         * @instance
         */
        Msg_GetChatCdRsp.prototype.cd = 0;

        /**
         * Encodes the specified Msg_GetChatCdRsp message. Does not implicitly {@link proto.Msg_GetChatCdRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetChatCdRsp
         * @static
         * @param {proto.IMsg_GetChatCdRsp} m Msg_GetChatCdRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetChatCdRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.cd != null && Object.hasOwnProperty.call(m, "cd"))
                w.uint32(16).int32(m.cd);
            return w;
        };

        /**
         * Decodes a Msg_GetChatCdRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetChatCdRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetChatCdRsp} Msg_GetChatCdRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetChatCdRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetChatCdRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.cd = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetChatCdRsp;
    })();

    proto.Msg_CheckPlayerIsMyFriendReq = (function() {

        /**
         * Properties of a Msg_CheckPlayerIsMyFriendReq.
         * @memberof proto
         * @interface IMsg_CheckPlayerIsMyFriendReq
         * @property {string|null} [playerUUID] Msg_CheckPlayerIsMyFriendReq playerUUID
         */

        /**
         * Constructs a new Msg_CheckPlayerIsMyFriendReq.
         * @memberof proto
         * @classdesc Represents a Msg_CheckPlayerIsMyFriendReq.
         * @implements IMsg_CheckPlayerIsMyFriendReq
         * @constructor
         * @param {proto.IMsg_CheckPlayerIsMyFriendReq=} [p] Properties to set
         */
        function Msg_CheckPlayerIsMyFriendReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CheckPlayerIsMyFriendReq playerUUID.
         * @member {string} playerUUID
         * @memberof proto.Msg_CheckPlayerIsMyFriendReq
         * @instance
         */
        Msg_CheckPlayerIsMyFriendReq.prototype.playerUUID = "";

        /**
         * Encodes the specified Msg_CheckPlayerIsMyFriendReq message. Does not implicitly {@link proto.Msg_CheckPlayerIsMyFriendReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CheckPlayerIsMyFriendReq
         * @static
         * @param {proto.IMsg_CheckPlayerIsMyFriendReq} m Msg_CheckPlayerIsMyFriendReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CheckPlayerIsMyFriendReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerUUID != null && Object.hasOwnProperty.call(m, "playerUUID"))
                w.uint32(10).string(m.playerUUID);
            return w;
        };

        /**
         * Decodes a Msg_CheckPlayerIsMyFriendReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CheckPlayerIsMyFriendReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CheckPlayerIsMyFriendReq} Msg_CheckPlayerIsMyFriendReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CheckPlayerIsMyFriendReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CheckPlayerIsMyFriendReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerUUID = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CheckPlayerIsMyFriendReq;
    })();

    proto.Msg_CheckPlayerIsMyFriendRsp = (function() {

        /**
         * Properties of a Msg_CheckPlayerIsMyFriendRsp.
         * @memberof proto
         * @interface IMsg_CheckPlayerIsMyFriendRsp
         * @property {boolean|null} [bMyFriend] Msg_CheckPlayerIsMyFriendRsp bMyFriend
         */

        /**
         * Constructs a new Msg_CheckPlayerIsMyFriendRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CheckPlayerIsMyFriendRsp.
         * @implements IMsg_CheckPlayerIsMyFriendRsp
         * @constructor
         * @param {proto.IMsg_CheckPlayerIsMyFriendRsp=} [p] Properties to set
         */
        function Msg_CheckPlayerIsMyFriendRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CheckPlayerIsMyFriendRsp bMyFriend.
         * @member {boolean} bMyFriend
         * @memberof proto.Msg_CheckPlayerIsMyFriendRsp
         * @instance
         */
        Msg_CheckPlayerIsMyFriendRsp.prototype.bMyFriend = false;

        /**
         * Encodes the specified Msg_CheckPlayerIsMyFriendRsp message. Does not implicitly {@link proto.Msg_CheckPlayerIsMyFriendRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CheckPlayerIsMyFriendRsp
         * @static
         * @param {proto.IMsg_CheckPlayerIsMyFriendRsp} m Msg_CheckPlayerIsMyFriendRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CheckPlayerIsMyFriendRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bMyFriend != null && Object.hasOwnProperty.call(m, "bMyFriend"))
                w.uint32(8).bool(m.bMyFriend);
            return w;
        };

        /**
         * Decodes a Msg_CheckPlayerIsMyFriendRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CheckPlayerIsMyFriendRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CheckPlayerIsMyFriendRsp} Msg_CheckPlayerIsMyFriendRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CheckPlayerIsMyFriendRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CheckPlayerIsMyFriendRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bMyFriend = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CheckPlayerIsMyFriendRsp;
    })();

    proto.Msg_ChatSendShareCardsReq = (function() {

        /**
         * Properties of a Msg_ChatSendShareCardsReq.
         * @memberof proto
         * @interface IMsg_ChatSendShareCardsReq
         * @property {string|null} [message] Msg_ChatSendShareCardsReq message
         * @property {proto.ChatChannelType|null} [channel] Msg_ChatSendShareCardsReq channel
         */

        /**
         * Constructs a new Msg_ChatSendShareCardsReq.
         * @memberof proto
         * @classdesc Represents a Msg_ChatSendShareCardsReq.
         * @implements IMsg_ChatSendShareCardsReq
         * @constructor
         * @param {proto.IMsg_ChatSendShareCardsReq=} [p] Properties to set
         */
        function Msg_ChatSendShareCardsReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatSendShareCardsReq message.
         * @member {string} message
         * @memberof proto.Msg_ChatSendShareCardsReq
         * @instance
         */
        Msg_ChatSendShareCardsReq.prototype.message = "";

        /**
         * Msg_ChatSendShareCardsReq channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_ChatSendShareCardsReq
         * @instance
         */
        Msg_ChatSendShareCardsReq.prototype.channel = 0;

        /**
         * Encodes the specified Msg_ChatSendShareCardsReq message. Does not implicitly {@link proto.Msg_ChatSendShareCardsReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatSendShareCardsReq
         * @static
         * @param {proto.IMsg_ChatSendShareCardsReq} m Msg_ChatSendShareCardsReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatSendShareCardsReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(10).string(m.message);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(16).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_ChatSendShareCardsReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatSendShareCardsReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatSendShareCardsReq} Msg_ChatSendShareCardsReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatSendShareCardsReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatSendShareCardsReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.message = r.string();
                    break;
                case 2:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ChatSendShareCardsReq;
    })();

    proto.Msg_ChatSendShareCardsRsp = (function() {

        /**
         * Properties of a Msg_ChatSendShareCardsRsp.
         * @memberof proto
         * @interface IMsg_ChatSendShareCardsRsp
         * @property {proto.Msg_ChatSendShareCardsRsp.ErrorCode|null} [result] Msg_ChatSendShareCardsRsp result
         * @property {number|null} [cd] Msg_ChatSendShareCardsRsp cd
         * @property {proto.ChatChannelType|null} [channel] Msg_ChatSendShareCardsRsp channel
         */

        /**
         * Constructs a new Msg_ChatSendShareCardsRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ChatSendShareCardsRsp.
         * @implements IMsg_ChatSendShareCardsRsp
         * @constructor
         * @param {proto.IMsg_ChatSendShareCardsRsp=} [p] Properties to set
         */
        function Msg_ChatSendShareCardsRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ChatSendShareCardsRsp result.
         * @member {proto.Msg_ChatSendShareCardsRsp.ErrorCode} result
         * @memberof proto.Msg_ChatSendShareCardsRsp
         * @instance
         */
        Msg_ChatSendShareCardsRsp.prototype.result = 0;

        /**
         * Msg_ChatSendShareCardsRsp cd.
         * @member {number} cd
         * @memberof proto.Msg_ChatSendShareCardsRsp
         * @instance
         */
        Msg_ChatSendShareCardsRsp.prototype.cd = 0;

        /**
         * Msg_ChatSendShareCardsRsp channel.
         * @member {proto.ChatChannelType} channel
         * @memberof proto.Msg_ChatSendShareCardsRsp
         * @instance
         */
        Msg_ChatSendShareCardsRsp.prototype.channel = 0;

        /**
         * Encodes the specified Msg_ChatSendShareCardsRsp message. Does not implicitly {@link proto.Msg_ChatSendShareCardsRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ChatSendShareCardsRsp
         * @static
         * @param {proto.IMsg_ChatSendShareCardsRsp} m Msg_ChatSendShareCardsRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ChatSendShareCardsRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.cd != null && Object.hasOwnProperty.call(m, "cd"))
                w.uint32(16).int32(m.cd);
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(24).int32(m.channel);
            return w;
        };

        /**
         * Decodes a Msg_ChatSendShareCardsRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ChatSendShareCardsRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ChatSendShareCardsRsp} Msg_ChatSendShareCardsRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ChatSendShareCardsRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ChatSendShareCardsRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.cd = r.int32();
                    break;
                case 3:
                    m.channel = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_ChatSendShareCardsRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} CD=2 CD value
         */
        Msg_ChatSendShareCardsRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[2] = "CD"] = 2;
            return values;
        })();

        return Msg_ChatSendShareCardsRsp;
    })();

    proto.PickedGiftBagInfo = (function() {

        /**
         * Properties of a PickedGiftBagInfo.
         * @memberof proto
         * @interface IPickedGiftBagInfo
         * @property {number|null} [GiftID] PickedGiftBagInfo GiftID
         * @property {number|null} [Price] PickedGiftBagInfo Price
         * @property {number|null} [BuyedTimes] PickedGiftBagInfo BuyedTimes
         * @property {number|null} [MaxBuyTimes] PickedGiftBagInfo MaxBuyTimes
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Reward] PickedGiftBagInfo Reward
         */

        /**
         * Constructs a new PickedGiftBagInfo.
         * @memberof proto
         * @classdesc Represents a PickedGiftBagInfo.
         * @implements IPickedGiftBagInfo
         * @constructor
         * @param {proto.IPickedGiftBagInfo=} [p] Properties to set
         */
        function PickedGiftBagInfo(p) {
            this.Reward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PickedGiftBagInfo GiftID.
         * @member {number} GiftID
         * @memberof proto.PickedGiftBagInfo
         * @instance
         */
        PickedGiftBagInfo.prototype.GiftID = 0;

        /**
         * PickedGiftBagInfo Price.
         * @member {number} Price
         * @memberof proto.PickedGiftBagInfo
         * @instance
         */
        PickedGiftBagInfo.prototype.Price = 0;

        /**
         * PickedGiftBagInfo BuyedTimes.
         * @member {number} BuyedTimes
         * @memberof proto.PickedGiftBagInfo
         * @instance
         */
        PickedGiftBagInfo.prototype.BuyedTimes = 0;

        /**
         * PickedGiftBagInfo MaxBuyTimes.
         * @member {number} MaxBuyTimes
         * @memberof proto.PickedGiftBagInfo
         * @instance
         */
        PickedGiftBagInfo.prototype.MaxBuyTimes = 0;

        /**
         * PickedGiftBagInfo Reward.
         * @member {Array.<proto.IRewardSimpleInfo>} Reward
         * @memberof proto.PickedGiftBagInfo
         * @instance
         */
        PickedGiftBagInfo.prototype.Reward = $util.emptyArray;

        /**
         * Encodes the specified PickedGiftBagInfo message. Does not implicitly {@link proto.PickedGiftBagInfo.verify|verify} messages.
         * @function encode
         * @memberof proto.PickedGiftBagInfo
         * @static
         * @param {proto.IPickedGiftBagInfo} m PickedGiftBagInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PickedGiftBagInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GiftID != null && Object.hasOwnProperty.call(m, "GiftID"))
                w.uint32(8).int32(m.GiftID);
            if (m.Price != null && Object.hasOwnProperty.call(m, "Price"))
                w.uint32(16).int32(m.Price);
            if (m.BuyedTimes != null && Object.hasOwnProperty.call(m, "BuyedTimes"))
                w.uint32(24).int32(m.BuyedTimes);
            if (m.MaxBuyTimes != null && Object.hasOwnProperty.call(m, "MaxBuyTimes"))
                w.uint32(32).int32(m.MaxBuyTimes);
            if (m.Reward != null && m.Reward.length) {
                for (var i = 0; i < m.Reward.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Reward[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a PickedGiftBagInfo message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PickedGiftBagInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PickedGiftBagInfo} PickedGiftBagInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PickedGiftBagInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PickedGiftBagInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.GiftID = r.int32();
                    break;
                case 2:
                    m.Price = r.int32();
                    break;
                case 3:
                    m.BuyedTimes = r.int32();
                    break;
                case 4:
                    m.MaxBuyTimes = r.int32();
                    break;
                case 5:
                    if (!(m.Reward && m.Reward.length))
                        m.Reward = [];
                    m.Reward.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PickedGiftBagInfo;
    })();

    proto.Msg_GetPickedGiftBagInfoReq = (function() {

        /**
         * Properties of a Msg_GetPickedGiftBagInfoReq.
         * @memberof proto
         * @interface IMsg_GetPickedGiftBagInfoReq
         */

        /**
         * Constructs a new Msg_GetPickedGiftBagInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetPickedGiftBagInfoReq.
         * @implements IMsg_GetPickedGiftBagInfoReq
         * @constructor
         * @param {proto.IMsg_GetPickedGiftBagInfoReq=} [p] Properties to set
         */
        function Msg_GetPickedGiftBagInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetPickedGiftBagInfoReq message. Does not implicitly {@link proto.Msg_GetPickedGiftBagInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPickedGiftBagInfoReq
         * @static
         * @param {proto.IMsg_GetPickedGiftBagInfoReq} m Msg_GetPickedGiftBagInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPickedGiftBagInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetPickedGiftBagInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPickedGiftBagInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPickedGiftBagInfoReq} Msg_GetPickedGiftBagInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPickedGiftBagInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPickedGiftBagInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPickedGiftBagInfoReq;
    })();

    proto.Msg_GetPickedGiftBagInfoRsp = (function() {

        /**
         * Properties of a Msg_GetPickedGiftBagInfoRsp.
         * @memberof proto
         * @interface IMsg_GetPickedGiftBagInfoRsp
         * @property {Array.<proto.IPickedGiftBagInfo>|null} [GiftBags] Msg_GetPickedGiftBagInfoRsp GiftBags
         * @property {number|null} [ResetUTC] Msg_GetPickedGiftBagInfoRsp ResetUTC
         * @property {number|null} [AdvRefreshTimes] Msg_GetPickedGiftBagInfoRsp AdvRefreshTimes
         */

        /**
         * Constructs a new Msg_GetPickedGiftBagInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetPickedGiftBagInfoRsp.
         * @implements IMsg_GetPickedGiftBagInfoRsp
         * @constructor
         * @param {proto.IMsg_GetPickedGiftBagInfoRsp=} [p] Properties to set
         */
        function Msg_GetPickedGiftBagInfoRsp(p) {
            this.GiftBags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetPickedGiftBagInfoRsp GiftBags.
         * @member {Array.<proto.IPickedGiftBagInfo>} GiftBags
         * @memberof proto.Msg_GetPickedGiftBagInfoRsp
         * @instance
         */
        Msg_GetPickedGiftBagInfoRsp.prototype.GiftBags = $util.emptyArray;

        /**
         * Msg_GetPickedGiftBagInfoRsp ResetUTC.
         * @member {number} ResetUTC
         * @memberof proto.Msg_GetPickedGiftBagInfoRsp
         * @instance
         */
        Msg_GetPickedGiftBagInfoRsp.prototype.ResetUTC = 0;

        /**
         * Msg_GetPickedGiftBagInfoRsp AdvRefreshTimes.
         * @member {number} AdvRefreshTimes
         * @memberof proto.Msg_GetPickedGiftBagInfoRsp
         * @instance
         */
        Msg_GetPickedGiftBagInfoRsp.prototype.AdvRefreshTimes = 0;

        /**
         * Encodes the specified Msg_GetPickedGiftBagInfoRsp message. Does not implicitly {@link proto.Msg_GetPickedGiftBagInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetPickedGiftBagInfoRsp
         * @static
         * @param {proto.IMsg_GetPickedGiftBagInfoRsp} m Msg_GetPickedGiftBagInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetPickedGiftBagInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GiftBags != null && m.GiftBags.length) {
                for (var i = 0; i < m.GiftBags.length; ++i)
                    $root.proto.PickedGiftBagInfo.encode(m.GiftBags[i], w.uint32(10).fork()).ldelim();
            }
            if (m.ResetUTC != null && Object.hasOwnProperty.call(m, "ResetUTC"))
                w.uint32(16).int32(m.ResetUTC);
            if (m.AdvRefreshTimes != null && Object.hasOwnProperty.call(m, "AdvRefreshTimes"))
                w.uint32(24).int32(m.AdvRefreshTimes);
            return w;
        };

        /**
         * Decodes a Msg_GetPickedGiftBagInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetPickedGiftBagInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetPickedGiftBagInfoRsp} Msg_GetPickedGiftBagInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetPickedGiftBagInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetPickedGiftBagInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.GiftBags && m.GiftBags.length))
                        m.GiftBags = [];
                    m.GiftBags.push($root.proto.PickedGiftBagInfo.decode(r, r.uint32()));
                    break;
                case 2:
                    m.ResetUTC = r.int32();
                    break;
                case 3:
                    m.AdvRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetPickedGiftBagInfoRsp;
    })();

    proto.Msg_RefreshPickedGiftBagReq = (function() {

        /**
         * Properties of a Msg_RefreshPickedGiftBagReq.
         * @memberof proto
         * @interface IMsg_RefreshPickedGiftBagReq
         */

        /**
         * Constructs a new Msg_RefreshPickedGiftBagReq.
         * @memberof proto
         * @classdesc Represents a Msg_RefreshPickedGiftBagReq.
         * @implements IMsg_RefreshPickedGiftBagReq
         * @constructor
         * @param {proto.IMsg_RefreshPickedGiftBagReq=} [p] Properties to set
         */
        function Msg_RefreshPickedGiftBagReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_RefreshPickedGiftBagReq message. Does not implicitly {@link proto.Msg_RefreshPickedGiftBagReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RefreshPickedGiftBagReq
         * @static
         * @param {proto.IMsg_RefreshPickedGiftBagReq} m Msg_RefreshPickedGiftBagReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RefreshPickedGiftBagReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_RefreshPickedGiftBagReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RefreshPickedGiftBagReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RefreshPickedGiftBagReq} Msg_RefreshPickedGiftBagReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RefreshPickedGiftBagReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RefreshPickedGiftBagReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RefreshPickedGiftBagReq;
    })();

    proto.Msg_RefreshPickedGiftBagRsp = (function() {

        /**
         * Properties of a Msg_RefreshPickedGiftBagRsp.
         * @memberof proto
         * @interface IMsg_RefreshPickedGiftBagRsp
         * @property {proto.Msg_RefreshPickedGiftBagRsp.ErrorCode|null} [result] Msg_RefreshPickedGiftBagRsp result
         * @property {Array.<proto.IPickedGiftBagInfo>|null} [GiftBags] Msg_RefreshPickedGiftBagRsp GiftBags
         * @property {number|null} [ResetUTC] Msg_RefreshPickedGiftBagRsp ResetUTC
         * @property {number|null} [AdvRefreshTimes] Msg_RefreshPickedGiftBagRsp AdvRefreshTimes
         */

        /**
         * Constructs a new Msg_RefreshPickedGiftBagRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RefreshPickedGiftBagRsp.
         * @implements IMsg_RefreshPickedGiftBagRsp
         * @constructor
         * @param {proto.IMsg_RefreshPickedGiftBagRsp=} [p] Properties to set
         */
        function Msg_RefreshPickedGiftBagRsp(p) {
            this.GiftBags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RefreshPickedGiftBagRsp result.
         * @member {proto.Msg_RefreshPickedGiftBagRsp.ErrorCode} result
         * @memberof proto.Msg_RefreshPickedGiftBagRsp
         * @instance
         */
        Msg_RefreshPickedGiftBagRsp.prototype.result = 0;

        /**
         * Msg_RefreshPickedGiftBagRsp GiftBags.
         * @member {Array.<proto.IPickedGiftBagInfo>} GiftBags
         * @memberof proto.Msg_RefreshPickedGiftBagRsp
         * @instance
         */
        Msg_RefreshPickedGiftBagRsp.prototype.GiftBags = $util.emptyArray;

        /**
         * Msg_RefreshPickedGiftBagRsp ResetUTC.
         * @member {number} ResetUTC
         * @memberof proto.Msg_RefreshPickedGiftBagRsp
         * @instance
         */
        Msg_RefreshPickedGiftBagRsp.prototype.ResetUTC = 0;

        /**
         * Msg_RefreshPickedGiftBagRsp AdvRefreshTimes.
         * @member {number} AdvRefreshTimes
         * @memberof proto.Msg_RefreshPickedGiftBagRsp
         * @instance
         */
        Msg_RefreshPickedGiftBagRsp.prototype.AdvRefreshTimes = 0;

        /**
         * Encodes the specified Msg_RefreshPickedGiftBagRsp message. Does not implicitly {@link proto.Msg_RefreshPickedGiftBagRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RefreshPickedGiftBagRsp
         * @static
         * @param {proto.IMsg_RefreshPickedGiftBagRsp} m Msg_RefreshPickedGiftBagRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RefreshPickedGiftBagRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.GiftBags != null && m.GiftBags.length) {
                for (var i = 0; i < m.GiftBags.length; ++i)
                    $root.proto.PickedGiftBagInfo.encode(m.GiftBags[i], w.uint32(18).fork()).ldelim();
            }
            if (m.ResetUTC != null && Object.hasOwnProperty.call(m, "ResetUTC"))
                w.uint32(24).int32(m.ResetUTC);
            if (m.AdvRefreshTimes != null && Object.hasOwnProperty.call(m, "AdvRefreshTimes"))
                w.uint32(32).int32(m.AdvRefreshTimes);
            return w;
        };

        /**
         * Decodes a Msg_RefreshPickedGiftBagRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RefreshPickedGiftBagRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RefreshPickedGiftBagRsp} Msg_RefreshPickedGiftBagRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RefreshPickedGiftBagRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RefreshPickedGiftBagRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.GiftBags && m.GiftBags.length))
                        m.GiftBags = [];
                    m.GiftBags.push($root.proto.PickedGiftBagInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.ResetUTC = r.int32();
                    break;
                case 4:
                    m.AdvRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_RefreshPickedGiftBagRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AdvNotEnough=1 AdvNotEnough value
         */
        Msg_RefreshPickedGiftBagRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AdvNotEnough"] = 1;
            return values;
        })();

        return Msg_RefreshPickedGiftBagRsp;
    })();

    proto.Msg_BuyPickedGiftBagReq = (function() {

        /**
         * Properties of a Msg_BuyPickedGiftBagReq.
         * @memberof proto
         * @interface IMsg_BuyPickedGiftBagReq
         * @property {number|null} [giftBagID] Msg_BuyPickedGiftBagReq giftBagID
         */

        /**
         * Constructs a new Msg_BuyPickedGiftBagReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyPickedGiftBagReq.
         * @implements IMsg_BuyPickedGiftBagReq
         * @constructor
         * @param {proto.IMsg_BuyPickedGiftBagReq=} [p] Properties to set
         */
        function Msg_BuyPickedGiftBagReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyPickedGiftBagReq giftBagID.
         * @member {number} giftBagID
         * @memberof proto.Msg_BuyPickedGiftBagReq
         * @instance
         */
        Msg_BuyPickedGiftBagReq.prototype.giftBagID = 0;

        /**
         * Encodes the specified Msg_BuyPickedGiftBagReq message. Does not implicitly {@link proto.Msg_BuyPickedGiftBagReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyPickedGiftBagReq
         * @static
         * @param {proto.IMsg_BuyPickedGiftBagReq} m Msg_BuyPickedGiftBagReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyPickedGiftBagReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.giftBagID != null && Object.hasOwnProperty.call(m, "giftBagID"))
                w.uint32(8).int32(m.giftBagID);
            return w;
        };

        /**
         * Decodes a Msg_BuyPickedGiftBagReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyPickedGiftBagReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyPickedGiftBagReq} Msg_BuyPickedGiftBagReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyPickedGiftBagReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyPickedGiftBagReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.giftBagID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyPickedGiftBagReq;
    })();

    proto.Msg_BuyPickedGiftBagRsp = (function() {

        /**
         * Properties of a Msg_BuyPickedGiftBagRsp.
         * @memberof proto
         * @interface IMsg_BuyPickedGiftBagRsp
         * @property {proto.Msg_BuyPickedGiftBagRsp.ErrorCode|null} [result] Msg_BuyPickedGiftBagRsp result
         * @property {number|null} [giftBagID] Msg_BuyPickedGiftBagRsp giftBagID
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Rewards] Msg_BuyPickedGiftBagRsp Rewards
         */

        /**
         * Constructs a new Msg_BuyPickedGiftBagRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyPickedGiftBagRsp.
         * @implements IMsg_BuyPickedGiftBagRsp
         * @constructor
         * @param {proto.IMsg_BuyPickedGiftBagRsp=} [p] Properties to set
         */
        function Msg_BuyPickedGiftBagRsp(p) {
            this.Rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyPickedGiftBagRsp result.
         * @member {proto.Msg_BuyPickedGiftBagRsp.ErrorCode} result
         * @memberof proto.Msg_BuyPickedGiftBagRsp
         * @instance
         */
        Msg_BuyPickedGiftBagRsp.prototype.result = 0;

        /**
         * Msg_BuyPickedGiftBagRsp giftBagID.
         * @member {number} giftBagID
         * @memberof proto.Msg_BuyPickedGiftBagRsp
         * @instance
         */
        Msg_BuyPickedGiftBagRsp.prototype.giftBagID = 0;

        /**
         * Msg_BuyPickedGiftBagRsp Rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} Rewards
         * @memberof proto.Msg_BuyPickedGiftBagRsp
         * @instance
         */
        Msg_BuyPickedGiftBagRsp.prototype.Rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_BuyPickedGiftBagRsp message. Does not implicitly {@link proto.Msg_BuyPickedGiftBagRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyPickedGiftBagRsp
         * @static
         * @param {proto.IMsg_BuyPickedGiftBagRsp} m Msg_BuyPickedGiftBagRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyPickedGiftBagRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.giftBagID != null && Object.hasOwnProperty.call(m, "giftBagID"))
                w.uint32(16).int32(m.giftBagID);
            if (m.Rewards != null && m.Rewards.length) {
                for (var i = 0; i < m.Rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Rewards[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BuyPickedGiftBagRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyPickedGiftBagRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyPickedGiftBagRsp} Msg_BuyPickedGiftBagRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyPickedGiftBagRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyPickedGiftBagRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.giftBagID = r.int32();
                    break;
                case 3:
                    if (!(m.Rewards && m.Rewards.length))
                        m.Rewards = [];
                    m.Rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_BuyPickedGiftBagRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} GiftNotExist=1 GiftNotExist value
         * @property {number} GiftBuyTimesNotEnough=2 GiftBuyTimesNotEnough value
         */
        Msg_BuyPickedGiftBagRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "GiftNotExist"] = 1;
            values[valuesById[2] = "GiftBuyTimesNotEnough"] = 2;
            return values;
        })();

        return Msg_BuyPickedGiftBagRsp;
    })();

    proto.PickedGiftBagData = (function() {

        /**
         * Properties of a PickedGiftBagData.
         * @memberof proto
         * @interface IPickedGiftBagData
         * @property {Array.<proto.IPickedGiftBagInfo>|null} [pickedGiftBag] PickedGiftBagData pickedGiftBag
         * @property {number|null} [lastDailyRefreshTime] PickedGiftBagData lastDailyRefreshTime
         * @property {number|null} [advRefreshTimes] PickedGiftBagData advRefreshTimes
         */

        /**
         * Constructs a new PickedGiftBagData.
         * @memberof proto
         * @classdesc Represents a PickedGiftBagData.
         * @implements IPickedGiftBagData
         * @constructor
         * @param {proto.IPickedGiftBagData=} [p] Properties to set
         */
        function PickedGiftBagData(p) {
            this.pickedGiftBag = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * PickedGiftBagData pickedGiftBag.
         * @member {Array.<proto.IPickedGiftBagInfo>} pickedGiftBag
         * @memberof proto.PickedGiftBagData
         * @instance
         */
        PickedGiftBagData.prototype.pickedGiftBag = $util.emptyArray;

        /**
         * PickedGiftBagData lastDailyRefreshTime.
         * @member {number} lastDailyRefreshTime
         * @memberof proto.PickedGiftBagData
         * @instance
         */
        PickedGiftBagData.prototype.lastDailyRefreshTime = 0;

        /**
         * PickedGiftBagData advRefreshTimes.
         * @member {number} advRefreshTimes
         * @memberof proto.PickedGiftBagData
         * @instance
         */
        PickedGiftBagData.prototype.advRefreshTimes = 0;

        /**
         * Encodes the specified PickedGiftBagData message. Does not implicitly {@link proto.PickedGiftBagData.verify|verify} messages.
         * @function encode
         * @memberof proto.PickedGiftBagData
         * @static
         * @param {proto.IPickedGiftBagData} m PickedGiftBagData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PickedGiftBagData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pickedGiftBag != null && m.pickedGiftBag.length) {
                for (var i = 0; i < m.pickedGiftBag.length; ++i)
                    $root.proto.PickedGiftBagInfo.encode(m.pickedGiftBag[i], w.uint32(10).fork()).ldelim();
            }
            if (m.lastDailyRefreshTime != null && Object.hasOwnProperty.call(m, "lastDailyRefreshTime"))
                w.uint32(16).int32(m.lastDailyRefreshTime);
            if (m.advRefreshTimes != null && Object.hasOwnProperty.call(m, "advRefreshTimes"))
                w.uint32(24).int32(m.advRefreshTimes);
            return w;
        };

        /**
         * Decodes a PickedGiftBagData message from the specified reader or buffer.
         * @function decode
         * @memberof proto.PickedGiftBagData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.PickedGiftBagData} PickedGiftBagData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PickedGiftBagData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.PickedGiftBagData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.pickedGiftBag && m.pickedGiftBag.length))
                        m.pickedGiftBag = [];
                    m.pickedGiftBag.push($root.proto.PickedGiftBagInfo.decode(r, r.uint32()));
                    break;
                case 2:
                    m.lastDailyRefreshTime = r.int32();
                    break;
                case 3:
                    m.advRefreshTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PickedGiftBagData;
    })();

    proto.Msg_LuckySupplyReq = (function() {

        /**
         * Properties of a Msg_LuckySupplyReq.
         * @memberof proto
         * @interface IMsg_LuckySupplyReq
         */

        /**
         * Constructs a new Msg_LuckySupplyReq.
         * @memberof proto
         * @classdesc Represents a Msg_LuckySupplyReq.
         * @implements IMsg_LuckySupplyReq
         * @constructor
         * @param {proto.IMsg_LuckySupplyReq=} [p] Properties to set
         */
        function Msg_LuckySupplyReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_LuckySupplyReq message. Does not implicitly {@link proto.Msg_LuckySupplyReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LuckySupplyReq
         * @static
         * @param {proto.IMsg_LuckySupplyReq} m Msg_LuckySupplyReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LuckySupplyReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_LuckySupplyReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LuckySupplyReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LuckySupplyReq} Msg_LuckySupplyReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LuckySupplyReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LuckySupplyReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LuckySupplyReq;
    })();

    proto.Msg_LuckySupplyRsp = (function() {

        /**
         * Properties of a Msg_LuckySupplyRsp.
         * @memberof proto
         * @interface IMsg_LuckySupplyRsp
         * @property {number|null} [LeftTimes] Msg_LuckySupplyRsp LeftTimes
         */

        /**
         * Constructs a new Msg_LuckySupplyRsp.
         * @memberof proto
         * @classdesc Represents a Msg_LuckySupplyRsp.
         * @implements IMsg_LuckySupplyRsp
         * @constructor
         * @param {proto.IMsg_LuckySupplyRsp=} [p] Properties to set
         */
        function Msg_LuckySupplyRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LuckySupplyRsp LeftTimes.
         * @member {number} LeftTimes
         * @memberof proto.Msg_LuckySupplyRsp
         * @instance
         */
        Msg_LuckySupplyRsp.prototype.LeftTimes = 0;

        /**
         * Encodes the specified Msg_LuckySupplyRsp message. Does not implicitly {@link proto.Msg_LuckySupplyRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LuckySupplyRsp
         * @static
         * @param {proto.IMsg_LuckySupplyRsp} m Msg_LuckySupplyRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LuckySupplyRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.LeftTimes != null && Object.hasOwnProperty.call(m, "LeftTimes"))
                w.uint32(8).int32(m.LeftTimes);
            return w;
        };

        /**
         * Decodes a Msg_LuckySupplyRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LuckySupplyRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LuckySupplyRsp} Msg_LuckySupplyRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LuckySupplyRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LuckySupplyRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.LeftTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LuckySupplyRsp;
    })();

    proto.Msg_LuckySupplyGetAwardReq = (function() {

        /**
         * Properties of a Msg_LuckySupplyGetAwardReq.
         * @memberof proto
         * @interface IMsg_LuckySupplyGetAwardReq
         */

        /**
         * Constructs a new Msg_LuckySupplyGetAwardReq.
         * @memberof proto
         * @classdesc Represents a Msg_LuckySupplyGetAwardReq.
         * @implements IMsg_LuckySupplyGetAwardReq
         * @constructor
         * @param {proto.IMsg_LuckySupplyGetAwardReq=} [p] Properties to set
         */
        function Msg_LuckySupplyGetAwardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_LuckySupplyGetAwardReq message. Does not implicitly {@link proto.Msg_LuckySupplyGetAwardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LuckySupplyGetAwardReq
         * @static
         * @param {proto.IMsg_LuckySupplyGetAwardReq} m Msg_LuckySupplyGetAwardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LuckySupplyGetAwardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_LuckySupplyGetAwardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LuckySupplyGetAwardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LuckySupplyGetAwardReq} Msg_LuckySupplyGetAwardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LuckySupplyGetAwardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LuckySupplyGetAwardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_LuckySupplyGetAwardReq;
    })();

    proto.Msg_LuckySupplyGetAwardRsp = (function() {

        /**
         * Properties of a Msg_LuckySupplyGetAwardRsp.
         * @memberof proto
         * @interface IMsg_LuckySupplyGetAwardRsp
         * @property {proto.Msg_LuckySupplyGetAwardRsp.ErrorCode|null} [result] Msg_LuckySupplyGetAwardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_LuckySupplyGetAwardRsp Awards
         * @property {number|null} [leftTimes] Msg_LuckySupplyGetAwardRsp leftTimes
         */

        /**
         * Constructs a new Msg_LuckySupplyGetAwardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_LuckySupplyGetAwardRsp.
         * @implements IMsg_LuckySupplyGetAwardRsp
         * @constructor
         * @param {proto.IMsg_LuckySupplyGetAwardRsp=} [p] Properties to set
         */
        function Msg_LuckySupplyGetAwardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_LuckySupplyGetAwardRsp result.
         * @member {proto.Msg_LuckySupplyGetAwardRsp.ErrorCode} result
         * @memberof proto.Msg_LuckySupplyGetAwardRsp
         * @instance
         */
        Msg_LuckySupplyGetAwardRsp.prototype.result = 0;

        /**
         * Msg_LuckySupplyGetAwardRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_LuckySupplyGetAwardRsp
         * @instance
         */
        Msg_LuckySupplyGetAwardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Msg_LuckySupplyGetAwardRsp leftTimes.
         * @member {number} leftTimes
         * @memberof proto.Msg_LuckySupplyGetAwardRsp
         * @instance
         */
        Msg_LuckySupplyGetAwardRsp.prototype.leftTimes = 0;

        /**
         * Encodes the specified Msg_LuckySupplyGetAwardRsp message. Does not implicitly {@link proto.Msg_LuckySupplyGetAwardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_LuckySupplyGetAwardRsp
         * @static
         * @param {proto.IMsg_LuckySupplyGetAwardRsp} m Msg_LuckySupplyGetAwardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_LuckySupplyGetAwardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.leftTimes != null && Object.hasOwnProperty.call(m, "leftTimes"))
                w.uint32(24).int32(m.leftTimes);
            return w;
        };

        /**
         * Decodes a Msg_LuckySupplyGetAwardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_LuckySupplyGetAwardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_LuckySupplyGetAwardRsp} Msg_LuckySupplyGetAwardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_LuckySupplyGetAwardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_LuckySupplyGetAwardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.leftTimes = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_LuckySupplyGetAwardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TimesNotEnough=1 TimesNotEnough value
         */
        Msg_LuckySupplyGetAwardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TimesNotEnough"] = 1;
            return values;
        })();

        return Msg_LuckySupplyGetAwardRsp;
    })();

    proto.Msg_VictoryBoxInfoReq = (function() {

        /**
         * Properties of a Msg_VictoryBoxInfoReq.
         * @memberof proto
         * @interface IMsg_VictoryBoxInfoReq
         */

        /**
         * Constructs a new Msg_VictoryBoxInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_VictoryBoxInfoReq.
         * @implements IMsg_VictoryBoxInfoReq
         * @constructor
         * @param {proto.IMsg_VictoryBoxInfoReq=} [p] Properties to set
         */
        function Msg_VictoryBoxInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_VictoryBoxInfoReq message. Does not implicitly {@link proto.Msg_VictoryBoxInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_VictoryBoxInfoReq
         * @static
         * @param {proto.IMsg_VictoryBoxInfoReq} m Msg_VictoryBoxInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_VictoryBoxInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_VictoryBoxInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_VictoryBoxInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_VictoryBoxInfoReq} Msg_VictoryBoxInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_VictoryBoxInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_VictoryBoxInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_VictoryBoxInfoReq;
    })();

    proto.Msg_VictoryBoxInfoRsp = (function() {

        /**
         * Properties of a Msg_VictoryBoxInfoRsp.
         * @memberof proto
         * @interface IMsg_VictoryBoxInfoRsp
         * @property {number|null} [RewardCount] Msg_VictoryBoxInfoRsp RewardCount
         * @property {number|null} [RefuseCount] Msg_VictoryBoxInfoRsp RefuseCount
         */

        /**
         * Constructs a new Msg_VictoryBoxInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_VictoryBoxInfoRsp.
         * @implements IMsg_VictoryBoxInfoRsp
         * @constructor
         * @param {proto.IMsg_VictoryBoxInfoRsp=} [p] Properties to set
         */
        function Msg_VictoryBoxInfoRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_VictoryBoxInfoRsp RewardCount.
         * @member {number} RewardCount
         * @memberof proto.Msg_VictoryBoxInfoRsp
         * @instance
         */
        Msg_VictoryBoxInfoRsp.prototype.RewardCount = 0;

        /**
         * Msg_VictoryBoxInfoRsp RefuseCount.
         * @member {number} RefuseCount
         * @memberof proto.Msg_VictoryBoxInfoRsp
         * @instance
         */
        Msg_VictoryBoxInfoRsp.prototype.RefuseCount = 0;

        /**
         * Encodes the specified Msg_VictoryBoxInfoRsp message. Does not implicitly {@link proto.Msg_VictoryBoxInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_VictoryBoxInfoRsp
         * @static
         * @param {proto.IMsg_VictoryBoxInfoRsp} m Msg_VictoryBoxInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_VictoryBoxInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RewardCount != null && Object.hasOwnProperty.call(m, "RewardCount"))
                w.uint32(8).int32(m.RewardCount);
            if (m.RefuseCount != null && Object.hasOwnProperty.call(m, "RefuseCount"))
                w.uint32(16).int32(m.RefuseCount);
            return w;
        };

        /**
         * Decodes a Msg_VictoryBoxInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_VictoryBoxInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_VictoryBoxInfoRsp} Msg_VictoryBoxInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_VictoryBoxInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_VictoryBoxInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RewardCount = r.int32();
                    break;
                case 2:
                    m.RefuseCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_VictoryBoxInfoRsp;
    })();

    proto.Msg_VictoryBoxRefuseReq = (function() {

        /**
         * Properties of a Msg_VictoryBoxRefuseReq.
         * @memberof proto
         * @interface IMsg_VictoryBoxRefuseReq
         */

        /**
         * Constructs a new Msg_VictoryBoxRefuseReq.
         * @memberof proto
         * @classdesc Represents a Msg_VictoryBoxRefuseReq.
         * @implements IMsg_VictoryBoxRefuseReq
         * @constructor
         * @param {proto.IMsg_VictoryBoxRefuseReq=} [p] Properties to set
         */
        function Msg_VictoryBoxRefuseReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_VictoryBoxRefuseReq message. Does not implicitly {@link proto.Msg_VictoryBoxRefuseReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_VictoryBoxRefuseReq
         * @static
         * @param {proto.IMsg_VictoryBoxRefuseReq} m Msg_VictoryBoxRefuseReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_VictoryBoxRefuseReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_VictoryBoxRefuseReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_VictoryBoxRefuseReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_VictoryBoxRefuseReq} Msg_VictoryBoxRefuseReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_VictoryBoxRefuseReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_VictoryBoxRefuseReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_VictoryBoxRefuseReq;
    })();

    proto.Msg_VictoryBoxRefuseRsp = (function() {

        /**
         * Properties of a Msg_VictoryBoxRefuseRsp.
         * @memberof proto
         * @interface IMsg_VictoryBoxRefuseRsp
         * @property {number|null} [RewardCount] Msg_VictoryBoxRefuseRsp RewardCount
         * @property {number|null} [RefuseCount] Msg_VictoryBoxRefuseRsp RefuseCount
         */

        /**
         * Constructs a new Msg_VictoryBoxRefuseRsp.
         * @memberof proto
         * @classdesc Represents a Msg_VictoryBoxRefuseRsp.
         * @implements IMsg_VictoryBoxRefuseRsp
         * @constructor
         * @param {proto.IMsg_VictoryBoxRefuseRsp=} [p] Properties to set
         */
        function Msg_VictoryBoxRefuseRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_VictoryBoxRefuseRsp RewardCount.
         * @member {number} RewardCount
         * @memberof proto.Msg_VictoryBoxRefuseRsp
         * @instance
         */
        Msg_VictoryBoxRefuseRsp.prototype.RewardCount = 0;

        /**
         * Msg_VictoryBoxRefuseRsp RefuseCount.
         * @member {number} RefuseCount
         * @memberof proto.Msg_VictoryBoxRefuseRsp
         * @instance
         */
        Msg_VictoryBoxRefuseRsp.prototype.RefuseCount = 0;

        /**
         * Encodes the specified Msg_VictoryBoxRefuseRsp message. Does not implicitly {@link proto.Msg_VictoryBoxRefuseRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_VictoryBoxRefuseRsp
         * @static
         * @param {proto.IMsg_VictoryBoxRefuseRsp} m Msg_VictoryBoxRefuseRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_VictoryBoxRefuseRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RewardCount != null && Object.hasOwnProperty.call(m, "RewardCount"))
                w.uint32(8).int32(m.RewardCount);
            if (m.RefuseCount != null && Object.hasOwnProperty.call(m, "RefuseCount"))
                w.uint32(16).int32(m.RefuseCount);
            return w;
        };

        /**
         * Decodes a Msg_VictoryBoxRefuseRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_VictoryBoxRefuseRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_VictoryBoxRefuseRsp} Msg_VictoryBoxRefuseRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_VictoryBoxRefuseRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_VictoryBoxRefuseRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RewardCount = r.int32();
                    break;
                case 2:
                    m.RefuseCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_VictoryBoxRefuseRsp;
    })();

    proto.Msg_VictoryBoxGetAwardReq = (function() {

        /**
         * Properties of a Msg_VictoryBoxGetAwardReq.
         * @memberof proto
         * @interface IMsg_VictoryBoxGetAwardReq
         */

        /**
         * Constructs a new Msg_VictoryBoxGetAwardReq.
         * @memberof proto
         * @classdesc Represents a Msg_VictoryBoxGetAwardReq.
         * @implements IMsg_VictoryBoxGetAwardReq
         * @constructor
         * @param {proto.IMsg_VictoryBoxGetAwardReq=} [p] Properties to set
         */
        function Msg_VictoryBoxGetAwardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_VictoryBoxGetAwardReq message. Does not implicitly {@link proto.Msg_VictoryBoxGetAwardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_VictoryBoxGetAwardReq
         * @static
         * @param {proto.IMsg_VictoryBoxGetAwardReq} m Msg_VictoryBoxGetAwardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_VictoryBoxGetAwardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_VictoryBoxGetAwardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_VictoryBoxGetAwardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_VictoryBoxGetAwardReq} Msg_VictoryBoxGetAwardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_VictoryBoxGetAwardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_VictoryBoxGetAwardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_VictoryBoxGetAwardReq;
    })();

    proto.Msg_VictoryBoxGetAwardRsp = (function() {

        /**
         * Properties of a Msg_VictoryBoxGetAwardRsp.
         * @memberof proto
         * @interface IMsg_VictoryBoxGetAwardRsp
         * @property {proto.Msg_VictoryBoxGetAwardRsp.ErrorCode|null} [result] Msg_VictoryBoxGetAwardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_VictoryBoxGetAwardRsp Awards
         * @property {number|null} [RewardCount] Msg_VictoryBoxGetAwardRsp RewardCount
         * @property {number|null} [RefuseCount] Msg_VictoryBoxGetAwardRsp RefuseCount
         */

        /**
         * Constructs a new Msg_VictoryBoxGetAwardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_VictoryBoxGetAwardRsp.
         * @implements IMsg_VictoryBoxGetAwardRsp
         * @constructor
         * @param {proto.IMsg_VictoryBoxGetAwardRsp=} [p] Properties to set
         */
        function Msg_VictoryBoxGetAwardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_VictoryBoxGetAwardRsp result.
         * @member {proto.Msg_VictoryBoxGetAwardRsp.ErrorCode} result
         * @memberof proto.Msg_VictoryBoxGetAwardRsp
         * @instance
         */
        Msg_VictoryBoxGetAwardRsp.prototype.result = 0;

        /**
         * Msg_VictoryBoxGetAwardRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_VictoryBoxGetAwardRsp
         * @instance
         */
        Msg_VictoryBoxGetAwardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Msg_VictoryBoxGetAwardRsp RewardCount.
         * @member {number} RewardCount
         * @memberof proto.Msg_VictoryBoxGetAwardRsp
         * @instance
         */
        Msg_VictoryBoxGetAwardRsp.prototype.RewardCount = 0;

        /**
         * Msg_VictoryBoxGetAwardRsp RefuseCount.
         * @member {number} RefuseCount
         * @memberof proto.Msg_VictoryBoxGetAwardRsp
         * @instance
         */
        Msg_VictoryBoxGetAwardRsp.prototype.RefuseCount = 0;

        /**
         * Encodes the specified Msg_VictoryBoxGetAwardRsp message. Does not implicitly {@link proto.Msg_VictoryBoxGetAwardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_VictoryBoxGetAwardRsp
         * @static
         * @param {proto.IMsg_VictoryBoxGetAwardRsp} m Msg_VictoryBoxGetAwardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_VictoryBoxGetAwardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.RewardCount != null && Object.hasOwnProperty.call(m, "RewardCount"))
                w.uint32(24).int32(m.RewardCount);
            if (m.RefuseCount != null && Object.hasOwnProperty.call(m, "RefuseCount"))
                w.uint32(32).int32(m.RefuseCount);
            return w;
        };

        /**
         * Decodes a Msg_VictoryBoxGetAwardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_VictoryBoxGetAwardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_VictoryBoxGetAwardRsp} Msg_VictoryBoxGetAwardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_VictoryBoxGetAwardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_VictoryBoxGetAwardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.RewardCount = r.int32();
                    break;
                case 4:
                    m.RefuseCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_VictoryBoxGetAwardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TimesNotEnough=1 TimesNotEnough value
         */
        Msg_VictoryBoxGetAwardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TimesNotEnough"] = 1;
            return values;
        })();

        return Msg_VictoryBoxGetAwardRsp;
    })();

    /**
     * AdType enum.
     * @name proto.AdType
     * @enum {number}
     * @property {number} AdType_LuckyBox=0 AdType_LuckyBox value
     * @property {number} AdType_VictoryBox=1 AdType_VictoryBox value
     * @property {number} AdType_SeasonScore=2 AdType_SeasonScore value
     * @property {number} AdType_PickedGift=3 AdType_PickedGift value
     * @property {number} AdType_SpecialGoods=4 AdType_SpecialGoods value
     * @property {number} AdType_TaskBox=5 AdType_TaskBox value
     * @property {number} AdType_Max=6 AdType_Max value
     */
    proto.AdType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "AdType_LuckyBox"] = 0;
        values[valuesById[1] = "AdType_VictoryBox"] = 1;
        values[valuesById[2] = "AdType_SeasonScore"] = 2;
        values[valuesById[3] = "AdType_PickedGift"] = 3;
        values[valuesById[4] = "AdType_SpecialGoods"] = 4;
        values[valuesById[5] = "AdType_TaskBox"] = 5;
        values[valuesById[6] = "AdType_Max"] = 6;
        return values;
    })();

    proto.Msg_WeeklyAdBoxInfoReq = (function() {

        /**
         * Properties of a Msg_WeeklyAdBoxInfoReq.
         * @memberof proto
         * @interface IMsg_WeeklyAdBoxInfoReq
         */

        /**
         * Constructs a new Msg_WeeklyAdBoxInfoReq.
         * @memberof proto
         * @classdesc Represents a Msg_WeeklyAdBoxInfoReq.
         * @implements IMsg_WeeklyAdBoxInfoReq
         * @constructor
         * @param {proto.IMsg_WeeklyAdBoxInfoReq=} [p] Properties to set
         */
        function Msg_WeeklyAdBoxInfoReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_WeeklyAdBoxInfoReq message. Does not implicitly {@link proto.Msg_WeeklyAdBoxInfoReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WeeklyAdBoxInfoReq
         * @static
         * @param {proto.IMsg_WeeklyAdBoxInfoReq} m Msg_WeeklyAdBoxInfoReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WeeklyAdBoxInfoReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_WeeklyAdBoxInfoReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WeeklyAdBoxInfoReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WeeklyAdBoxInfoReq} Msg_WeeklyAdBoxInfoReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WeeklyAdBoxInfoReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WeeklyAdBoxInfoReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_WeeklyAdBoxInfoReq;
    })();

    proto.Msg_WeeklyAdBoxInfoRsp = (function() {

        /**
         * Properties of a Msg_WeeklyAdBoxInfoRsp.
         * @memberof proto
         * @interface IMsg_WeeklyAdBoxInfoRsp
         * @property {number|null} [BoxID] Msg_WeeklyAdBoxInfoRsp BoxID
         * @property {number|null} [UnlockCount] Msg_WeeklyAdBoxInfoRsp UnlockCount
         * @property {Array.<number>|null} [RewardList] Msg_WeeklyAdBoxInfoRsp RewardList
         * @property {Array.<number>|null} [AcquireList] Msg_WeeklyAdBoxInfoRsp AcquireList
         * @property {Array.<number>|null} [AdWatchedCount] Msg_WeeklyAdBoxInfoRsp AdWatchedCount
         */

        /**
         * Constructs a new Msg_WeeklyAdBoxInfoRsp.
         * @memberof proto
         * @classdesc Represents a Msg_WeeklyAdBoxInfoRsp.
         * @implements IMsg_WeeklyAdBoxInfoRsp
         * @constructor
         * @param {proto.IMsg_WeeklyAdBoxInfoRsp=} [p] Properties to set
         */
        function Msg_WeeklyAdBoxInfoRsp(p) {
            this.RewardList = [];
            this.AcquireList = [];
            this.AdWatchedCount = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_WeeklyAdBoxInfoRsp BoxID.
         * @member {number} BoxID
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @instance
         */
        Msg_WeeklyAdBoxInfoRsp.prototype.BoxID = 0;

        /**
         * Msg_WeeklyAdBoxInfoRsp UnlockCount.
         * @member {number} UnlockCount
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @instance
         */
        Msg_WeeklyAdBoxInfoRsp.prototype.UnlockCount = 0;

        /**
         * Msg_WeeklyAdBoxInfoRsp RewardList.
         * @member {Array.<number>} RewardList
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @instance
         */
        Msg_WeeklyAdBoxInfoRsp.prototype.RewardList = $util.emptyArray;

        /**
         * Msg_WeeklyAdBoxInfoRsp AcquireList.
         * @member {Array.<number>} AcquireList
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @instance
         */
        Msg_WeeklyAdBoxInfoRsp.prototype.AcquireList = $util.emptyArray;

        /**
         * Msg_WeeklyAdBoxInfoRsp AdWatchedCount.
         * @member {Array.<number>} AdWatchedCount
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @instance
         */
        Msg_WeeklyAdBoxInfoRsp.prototype.AdWatchedCount = $util.emptyArray;

        /**
         * Encodes the specified Msg_WeeklyAdBoxInfoRsp message. Does not implicitly {@link proto.Msg_WeeklyAdBoxInfoRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @static
         * @param {proto.IMsg_WeeklyAdBoxInfoRsp} m Msg_WeeklyAdBoxInfoRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WeeklyAdBoxInfoRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BoxID != null && Object.hasOwnProperty.call(m, "BoxID"))
                w.uint32(8).int32(m.BoxID);
            if (m.UnlockCount != null && Object.hasOwnProperty.call(m, "UnlockCount"))
                w.uint32(16).int32(m.UnlockCount);
            if (m.RewardList != null && m.RewardList.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.RewardList.length; ++i)
                    w.int32(m.RewardList[i]);
                w.ldelim();
            }
            if (m.AcquireList != null && m.AcquireList.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.AcquireList.length; ++i)
                    w.int32(m.AcquireList[i]);
                w.ldelim();
            }
            if (m.AdWatchedCount != null && m.AdWatchedCount.length) {
                w.uint32(42).fork();
                for (var i = 0; i < m.AdWatchedCount.length; ++i)
                    w.int32(m.AdWatchedCount[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_WeeklyAdBoxInfoRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WeeklyAdBoxInfoRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WeeklyAdBoxInfoRsp} Msg_WeeklyAdBoxInfoRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WeeklyAdBoxInfoRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WeeklyAdBoxInfoRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BoxID = r.int32();
                    break;
                case 2:
                    m.UnlockCount = r.int32();
                    break;
                case 3:
                    if (!(m.RewardList && m.RewardList.length))
                        m.RewardList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.RewardList.push(r.int32());
                    } else
                        m.RewardList.push(r.int32());
                    break;
                case 4:
                    if (!(m.AcquireList && m.AcquireList.length))
                        m.AcquireList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.AcquireList.push(r.int32());
                    } else
                        m.AcquireList.push(r.int32());
                    break;
                case 5:
                    if (!(m.AdWatchedCount && m.AdWatchedCount.length))
                        m.AdWatchedCount = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.AdWatchedCount.push(r.int32());
                    } else
                        m.AdWatchedCount.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_WeeklyAdBoxInfoRsp;
    })();

    proto.Msg_WeeklyAdBoxGetAwardReq = (function() {

        /**
         * Properties of a Msg_WeeklyAdBoxGetAwardReq.
         * @memberof proto
         * @interface IMsg_WeeklyAdBoxGetAwardReq
         * @property {number|null} [DayIndex] Msg_WeeklyAdBoxGetAwardReq DayIndex
         */

        /**
         * Constructs a new Msg_WeeklyAdBoxGetAwardReq.
         * @memberof proto
         * @classdesc Represents a Msg_WeeklyAdBoxGetAwardReq.
         * @implements IMsg_WeeklyAdBoxGetAwardReq
         * @constructor
         * @param {proto.IMsg_WeeklyAdBoxGetAwardReq=} [p] Properties to set
         */
        function Msg_WeeklyAdBoxGetAwardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_WeeklyAdBoxGetAwardReq DayIndex.
         * @member {number} DayIndex
         * @memberof proto.Msg_WeeklyAdBoxGetAwardReq
         * @instance
         */
        Msg_WeeklyAdBoxGetAwardReq.prototype.DayIndex = 0;

        /**
         * Encodes the specified Msg_WeeklyAdBoxGetAwardReq message. Does not implicitly {@link proto.Msg_WeeklyAdBoxGetAwardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WeeklyAdBoxGetAwardReq
         * @static
         * @param {proto.IMsg_WeeklyAdBoxGetAwardReq} m Msg_WeeklyAdBoxGetAwardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WeeklyAdBoxGetAwardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DayIndex != null && Object.hasOwnProperty.call(m, "DayIndex"))
                w.uint32(8).int32(m.DayIndex);
            return w;
        };

        /**
         * Decodes a Msg_WeeklyAdBoxGetAwardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WeeklyAdBoxGetAwardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WeeklyAdBoxGetAwardReq} Msg_WeeklyAdBoxGetAwardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WeeklyAdBoxGetAwardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WeeklyAdBoxGetAwardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DayIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_WeeklyAdBoxGetAwardReq;
    })();

    proto.Msg_WeeklyAdBoxGetAwardRsp = (function() {

        /**
         * Properties of a Msg_WeeklyAdBoxGetAwardRsp.
         * @memberof proto
         * @interface IMsg_WeeklyAdBoxGetAwardRsp
         * @property {proto.Msg_WeeklyAdBoxGetAwardRsp.ErrorCode|null} [result] Msg_WeeklyAdBoxGetAwardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_WeeklyAdBoxGetAwardRsp Awards
         */

        /**
         * Constructs a new Msg_WeeklyAdBoxGetAwardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_WeeklyAdBoxGetAwardRsp.
         * @implements IMsg_WeeklyAdBoxGetAwardRsp
         * @constructor
         * @param {proto.IMsg_WeeklyAdBoxGetAwardRsp=} [p] Properties to set
         */
        function Msg_WeeklyAdBoxGetAwardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_WeeklyAdBoxGetAwardRsp result.
         * @member {proto.Msg_WeeklyAdBoxGetAwardRsp.ErrorCode} result
         * @memberof proto.Msg_WeeklyAdBoxGetAwardRsp
         * @instance
         */
        Msg_WeeklyAdBoxGetAwardRsp.prototype.result = 0;

        /**
         * Msg_WeeklyAdBoxGetAwardRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_WeeklyAdBoxGetAwardRsp
         * @instance
         */
        Msg_WeeklyAdBoxGetAwardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_WeeklyAdBoxGetAwardRsp message. Does not implicitly {@link proto.Msg_WeeklyAdBoxGetAwardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_WeeklyAdBoxGetAwardRsp
         * @static
         * @param {proto.IMsg_WeeklyAdBoxGetAwardRsp} m Msg_WeeklyAdBoxGetAwardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_WeeklyAdBoxGetAwardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_WeeklyAdBoxGetAwardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_WeeklyAdBoxGetAwardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_WeeklyAdBoxGetAwardRsp} Msg_WeeklyAdBoxGetAwardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_WeeklyAdBoxGetAwardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_WeeklyAdBoxGetAwardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_WeeklyAdBoxGetAwardRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Unknown=1 Unknown value
         * @property {number} Locked=2 Locked value
         * @property {number} Received=3 Received value
         * @property {number} WatchLimit=4 WatchLimit value
         */
        Msg_WeeklyAdBoxGetAwardRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Unknown"] = 1;
            values[valuesById[2] = "Locked"] = 2;
            values[valuesById[3] = "Received"] = 3;
            values[valuesById[4] = "WatchLimit"] = 4;
            return values;
        })();

        return Msg_WeeklyAdBoxGetAwardRsp;
    })();

    proto.Msg_GachaReq = (function() {

        /**
         * Properties of a Msg_GachaReq.
         * @memberof proto
         * @interface IMsg_GachaReq
         * @property {proto.Msg_GachaReq.GachaType|null} [Type] Msg_GachaReq Type
         */

        /**
         * Constructs a new Msg_GachaReq.
         * @memberof proto
         * @classdesc Represents a Msg_GachaReq.
         * @implements IMsg_GachaReq
         * @constructor
         * @param {proto.IMsg_GachaReq=} [p] Properties to set
         */
        function Msg_GachaReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GachaReq Type.
         * @member {proto.Msg_GachaReq.GachaType} Type
         * @memberof proto.Msg_GachaReq
         * @instance
         */
        Msg_GachaReq.prototype.Type = 0;

        /**
         * Encodes the specified Msg_GachaReq message. Does not implicitly {@link proto.Msg_GachaReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GachaReq
         * @static
         * @param {proto.IMsg_GachaReq} m Msg_GachaReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GachaReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(8).int32(m.Type);
            return w;
        };

        /**
         * Decodes a Msg_GachaReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GachaReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GachaReq} Msg_GachaReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GachaReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GachaReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * GachaType enum.
         * @name proto.Msg_GachaReq.GachaType
         * @enum {number}
         * @property {number} Unknown=0 Unknown value
         * @property {number} One=1 One value
         * @property {number} Ten=2 Ten value
         */
        Msg_GachaReq.GachaType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Unknown"] = 0;
            values[valuesById[1] = "One"] = 1;
            values[valuesById[2] = "Ten"] = 2;
            return values;
        })();

        return Msg_GachaReq;
    })();

    proto.Msg_GachaRsp = (function() {

        /**
         * Properties of a Msg_GachaRsp.
         * @memberof proto
         * @interface IMsg_GachaRsp
         * @property {proto.Msg_GachaRsp.ErrorCode|null} [Result] Msg_GachaRsp Result
         * @property {number|null} [HitCount] Msg_GachaRsp HitCount
         * @property {number|null} [OpenCount] Msg_GachaRsp OpenCount
         * @property {Array.<proto.IRewardSimpleInfo>|null} [awards] Msg_GachaRsp awards
         */

        /**
         * Constructs a new Msg_GachaRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GachaRsp.
         * @implements IMsg_GachaRsp
         * @constructor
         * @param {proto.IMsg_GachaRsp=} [p] Properties to set
         */
        function Msg_GachaRsp(p) {
            this.awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GachaRsp Result.
         * @member {proto.Msg_GachaRsp.ErrorCode} Result
         * @memberof proto.Msg_GachaRsp
         * @instance
         */
        Msg_GachaRsp.prototype.Result = 0;

        /**
         * Msg_GachaRsp HitCount.
         * @member {number} HitCount
         * @memberof proto.Msg_GachaRsp
         * @instance
         */
        Msg_GachaRsp.prototype.HitCount = 0;

        /**
         * Msg_GachaRsp OpenCount.
         * @member {number} OpenCount
         * @memberof proto.Msg_GachaRsp
         * @instance
         */
        Msg_GachaRsp.prototype.OpenCount = 0;

        /**
         * Msg_GachaRsp awards.
         * @member {Array.<proto.IRewardSimpleInfo>} awards
         * @memberof proto.Msg_GachaRsp
         * @instance
         */
        Msg_GachaRsp.prototype.awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GachaRsp message. Does not implicitly {@link proto.Msg_GachaRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GachaRsp
         * @static
         * @param {proto.IMsg_GachaRsp} m Msg_GachaRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GachaRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Result != null && Object.hasOwnProperty.call(m, "Result"))
                w.uint32(8).int32(m.Result);
            if (m.HitCount != null && Object.hasOwnProperty.call(m, "HitCount"))
                w.uint32(16).int32(m.HitCount);
            if (m.OpenCount != null && Object.hasOwnProperty.call(m, "OpenCount"))
                w.uint32(24).int32(m.OpenCount);
            if (m.awards != null && m.awards.length) {
                for (var i = 0; i < m.awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.awards[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GachaRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GachaRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GachaRsp} Msg_GachaRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GachaRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GachaRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Result = r.int32();
                    break;
                case 2:
                    m.HitCount = r.int32();
                    break;
                case 3:
                    m.OpenCount = r.int32();
                    break;
                case 4:
                    if (!(m.awards && m.awards.length))
                        m.awards = [];
                    m.awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GachaRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} TypeError=1 TypeError value
         * @property {number} DeamondNotEnough=2 DeamondNotEnough value
         */
        Msg_GachaRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "TypeError"] = 1;
            values[valuesById[2] = "DeamondNotEnough"] = 2;
            return values;
        })();

        return Msg_GachaRsp;
    })();

    proto.Msg_GachaBoxReq = (function() {

        /**
         * Properties of a Msg_GachaBoxReq.
         * @memberof proto
         * @interface IMsg_GachaBoxReq
         * @property {proto.GachaOpenType|null} [Type] Msg_GachaBoxReq Type
         * @property {number|null} [CardID] Msg_GachaBoxReq CardID
         */

        /**
         * Constructs a new Msg_GachaBoxReq.
         * @memberof proto
         * @classdesc Represents a Msg_GachaBoxReq.
         * @implements IMsg_GachaBoxReq
         * @constructor
         * @param {proto.IMsg_GachaBoxReq=} [p] Properties to set
         */
        function Msg_GachaBoxReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GachaBoxReq Type.
         * @member {proto.GachaOpenType} Type
         * @memberof proto.Msg_GachaBoxReq
         * @instance
         */
        Msg_GachaBoxReq.prototype.Type = 0;

        /**
         * Msg_GachaBoxReq CardID.
         * @member {number} CardID
         * @memberof proto.Msg_GachaBoxReq
         * @instance
         */
        Msg_GachaBoxReq.prototype.CardID = 0;

        /**
         * Encodes the specified Msg_GachaBoxReq message. Does not implicitly {@link proto.Msg_GachaBoxReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GachaBoxReq
         * @static
         * @param {proto.IMsg_GachaBoxReq} m Msg_GachaBoxReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GachaBoxReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(8).int32(m.Type);
            if (m.CardID != null && Object.hasOwnProperty.call(m, "CardID"))
                w.uint32(16).int32(m.CardID);
            return w;
        };

        /**
         * Decodes a Msg_GachaBoxReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GachaBoxReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GachaBoxReq} Msg_GachaBoxReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GachaBoxReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GachaBoxReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.CardID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GachaBoxReq;
    })();

    proto.Msg_GachaBoxRsp = (function() {

        /**
         * Properties of a Msg_GachaBoxRsp.
         * @memberof proto
         * @interface IMsg_GachaBoxRsp
         * @property {proto.Msg_GachaBoxRsp.ErrorCode|null} [Result] Msg_GachaBoxRsp Result
         * @property {number|null} [OpenCount] Msg_GachaBoxRsp OpenCount
         * @property {number|null} [Status] Msg_GachaBoxRsp Status
         * @property {Array.<proto.IRewardSimpleInfo>|null} [awards] Msg_GachaBoxRsp awards
         */

        /**
         * Constructs a new Msg_GachaBoxRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GachaBoxRsp.
         * @implements IMsg_GachaBoxRsp
         * @constructor
         * @param {proto.IMsg_GachaBoxRsp=} [p] Properties to set
         */
        function Msg_GachaBoxRsp(p) {
            this.awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GachaBoxRsp Result.
         * @member {proto.Msg_GachaBoxRsp.ErrorCode} Result
         * @memberof proto.Msg_GachaBoxRsp
         * @instance
         */
        Msg_GachaBoxRsp.prototype.Result = 0;

        /**
         * Msg_GachaBoxRsp OpenCount.
         * @member {number} OpenCount
         * @memberof proto.Msg_GachaBoxRsp
         * @instance
         */
        Msg_GachaBoxRsp.prototype.OpenCount = 0;

        /**
         * Msg_GachaBoxRsp Status.
         * @member {number} Status
         * @memberof proto.Msg_GachaBoxRsp
         * @instance
         */
        Msg_GachaBoxRsp.prototype.Status = 0;

        /**
         * Msg_GachaBoxRsp awards.
         * @member {Array.<proto.IRewardSimpleInfo>} awards
         * @memberof proto.Msg_GachaBoxRsp
         * @instance
         */
        Msg_GachaBoxRsp.prototype.awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GachaBoxRsp message. Does not implicitly {@link proto.Msg_GachaBoxRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GachaBoxRsp
         * @static
         * @param {proto.IMsg_GachaBoxRsp} m Msg_GachaBoxRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GachaBoxRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Result != null && Object.hasOwnProperty.call(m, "Result"))
                w.uint32(8).int32(m.Result);
            if (m.OpenCount != null && Object.hasOwnProperty.call(m, "OpenCount"))
                w.uint32(16).int32(m.OpenCount);
            if (m.Status != null && Object.hasOwnProperty.call(m, "Status"))
                w.uint32(24).int32(m.Status);
            if (m.awards != null && m.awards.length) {
                for (var i = 0; i < m.awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.awards[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GachaBoxRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GachaBoxRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GachaBoxRsp} Msg_GachaBoxRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GachaBoxRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GachaBoxRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Result = r.int32();
                    break;
                case 2:
                    m.OpenCount = r.int32();
                    break;
                case 3:
                    m.Status = r.int32();
                    break;
                case 4:
                    if (!(m.awards && m.awards.length))
                        m.awards = [];
                    m.awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_GachaBoxRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} AlreadyOpened=1 AlreadyOpened value
         * @property {number} CountLack=2 CountLack value
         * @property {number} TypeError=3 TypeError value
         * @property {number} NotFound=4 NotFound value
         */
        Msg_GachaBoxRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "AlreadyOpened"] = 1;
            values[valuesById[2] = "CountLack"] = 2;
            values[valuesById[3] = "TypeError"] = 3;
            values[valuesById[4] = "NotFound"] = 4;
            return values;
        })();

        return Msg_GachaBoxRsp;
    })();

    proto.Msg_CretePrivateRoomReq = (function() {

        /**
         * Properties of a Msg_CretePrivateRoomReq.
         * @memberof proto
         * @interface IMsg_CretePrivateRoomReq
         * @property {proto.FightType|null} [type] Msg_CretePrivateRoomReq type
         * @property {string|null} [message] Msg_CretePrivateRoomReq message
         */

        /**
         * Constructs a new Msg_CretePrivateRoomReq.
         * @memberof proto
         * @classdesc Represents a Msg_CretePrivateRoomReq.
         * @implements IMsg_CretePrivateRoomReq
         * @constructor
         * @param {proto.IMsg_CretePrivateRoomReq=} [p] Properties to set
         */
        function Msg_CretePrivateRoomReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CretePrivateRoomReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_CretePrivateRoomReq
         * @instance
         */
        Msg_CretePrivateRoomReq.prototype.type = 0;

        /**
         * Msg_CretePrivateRoomReq message.
         * @member {string} message
         * @memberof proto.Msg_CretePrivateRoomReq
         * @instance
         */
        Msg_CretePrivateRoomReq.prototype.message = "";

        /**
         * Encodes the specified Msg_CretePrivateRoomReq message. Does not implicitly {@link proto.Msg_CretePrivateRoomReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CretePrivateRoomReq
         * @static
         * @param {proto.IMsg_CretePrivateRoomReq} m Msg_CretePrivateRoomReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CretePrivateRoomReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(18).string(m.message);
            return w;
        };

        /**
         * Decodes a Msg_CretePrivateRoomReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CretePrivateRoomReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CretePrivateRoomReq} Msg_CretePrivateRoomReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CretePrivateRoomReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CretePrivateRoomReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.message = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CretePrivateRoomReq;
    })();

    proto.Msg_CretePrivateRoomRsp = (function() {

        /**
         * Properties of a Msg_CretePrivateRoomRsp.
         * @memberof proto
         * @interface IMsg_CretePrivateRoomRsp
         * @property {string|null} [roleId] Msg_CretePrivateRoomRsp roleId
         * @property {number|null} [roomID] Msg_CretePrivateRoomRsp roomID
         */

        /**
         * Constructs a new Msg_CretePrivateRoomRsp.
         * @memberof proto
         * @classdesc Represents a Msg_CretePrivateRoomRsp.
         * @implements IMsg_CretePrivateRoomRsp
         * @constructor
         * @param {proto.IMsg_CretePrivateRoomRsp=} [p] Properties to set
         */
        function Msg_CretePrivateRoomRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_CretePrivateRoomRsp roleId.
         * @member {string} roleId
         * @memberof proto.Msg_CretePrivateRoomRsp
         * @instance
         */
        Msg_CretePrivateRoomRsp.prototype.roleId = "";

        /**
         * Msg_CretePrivateRoomRsp roomID.
         * @member {number} roomID
         * @memberof proto.Msg_CretePrivateRoomRsp
         * @instance
         */
        Msg_CretePrivateRoomRsp.prototype.roomID = 0;

        /**
         * Encodes the specified Msg_CretePrivateRoomRsp message. Does not implicitly {@link proto.Msg_CretePrivateRoomRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_CretePrivateRoomRsp
         * @static
         * @param {proto.IMsg_CretePrivateRoomRsp} m Msg_CretePrivateRoomRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_CretePrivateRoomRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.roleId != null && Object.hasOwnProperty.call(m, "roleId"))
                w.uint32(10).string(m.roleId);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            return w;
        };

        /**
         * Decodes a Msg_CretePrivateRoomRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_CretePrivateRoomRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_CretePrivateRoomRsp} Msg_CretePrivateRoomRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_CretePrivateRoomRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_CretePrivateRoomRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.roleId = r.string();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_CretePrivateRoomRsp;
    })();

    proto.Msg_JoinPrivateRoomReq = (function() {

        /**
         * Properties of a Msg_JoinPrivateRoomReq.
         * @memberof proto
         * @interface IMsg_JoinPrivateRoomReq
         * @property {proto.FightType|null} [type] Msg_JoinPrivateRoomReq type
         * @property {number|null} [roomID] Msg_JoinPrivateRoomReq roomID
         */

        /**
         * Constructs a new Msg_JoinPrivateRoomReq.
         * @memberof proto
         * @classdesc Represents a Msg_JoinPrivateRoomReq.
         * @implements IMsg_JoinPrivateRoomReq
         * @constructor
         * @param {proto.IMsg_JoinPrivateRoomReq=} [p] Properties to set
         */
        function Msg_JoinPrivateRoomReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_JoinPrivateRoomReq type.
         * @member {proto.FightType} type
         * @memberof proto.Msg_JoinPrivateRoomReq
         * @instance
         */
        Msg_JoinPrivateRoomReq.prototype.type = 0;

        /**
         * Msg_JoinPrivateRoomReq roomID.
         * @member {number} roomID
         * @memberof proto.Msg_JoinPrivateRoomReq
         * @instance
         */
        Msg_JoinPrivateRoomReq.prototype.roomID = 0;

        /**
         * Encodes the specified Msg_JoinPrivateRoomReq message. Does not implicitly {@link proto.Msg_JoinPrivateRoomReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_JoinPrivateRoomReq
         * @static
         * @param {proto.IMsg_JoinPrivateRoomReq} m Msg_JoinPrivateRoomReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_JoinPrivateRoomReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            return w;
        };

        /**
         * Decodes a Msg_JoinPrivateRoomReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_JoinPrivateRoomReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_JoinPrivateRoomReq} Msg_JoinPrivateRoomReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_JoinPrivateRoomReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_JoinPrivateRoomReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_JoinPrivateRoomReq;
    })();

    proto.Msg_JoinPrivateRoomRsp = (function() {

        /**
         * Properties of a Msg_JoinPrivateRoomRsp.
         * @memberof proto
         * @interface IMsg_JoinPrivateRoomRsp
         * @property {proto.Msg_JoinPrivateRoomRsp.ErrorCode|null} [Result] Msg_JoinPrivateRoomRsp Result
         * @property {number|null} [roomID] Msg_JoinPrivateRoomRsp roomID
         */

        /**
         * Constructs a new Msg_JoinPrivateRoomRsp.
         * @memberof proto
         * @classdesc Represents a Msg_JoinPrivateRoomRsp.
         * @implements IMsg_JoinPrivateRoomRsp
         * @constructor
         * @param {proto.IMsg_JoinPrivateRoomRsp=} [p] Properties to set
         */
        function Msg_JoinPrivateRoomRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_JoinPrivateRoomRsp Result.
         * @member {proto.Msg_JoinPrivateRoomRsp.ErrorCode} Result
         * @memberof proto.Msg_JoinPrivateRoomRsp
         * @instance
         */
        Msg_JoinPrivateRoomRsp.prototype.Result = 0;

        /**
         * Msg_JoinPrivateRoomRsp roomID.
         * @member {number} roomID
         * @memberof proto.Msg_JoinPrivateRoomRsp
         * @instance
         */
        Msg_JoinPrivateRoomRsp.prototype.roomID = 0;

        /**
         * Encodes the specified Msg_JoinPrivateRoomRsp message. Does not implicitly {@link proto.Msg_JoinPrivateRoomRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_JoinPrivateRoomRsp
         * @static
         * @param {proto.IMsg_JoinPrivateRoomRsp} m Msg_JoinPrivateRoomRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_JoinPrivateRoomRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Result != null && Object.hasOwnProperty.call(m, "Result"))
                w.uint32(8).int32(m.Result);
            if (m.roomID != null && Object.hasOwnProperty.call(m, "roomID"))
                w.uint32(16).int32(m.roomID);
            return w;
        };

        /**
         * Decodes a Msg_JoinPrivateRoomRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_JoinPrivateRoomRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_JoinPrivateRoomRsp} Msg_JoinPrivateRoomRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_JoinPrivateRoomRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_JoinPrivateRoomRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Result = r.int32();
                    break;
                case 2:
                    m.roomID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * ErrorCode enum.
         * @name proto.Msg_JoinPrivateRoomRsp.ErrorCode
         * @enum {number}
         * @property {number} Succeed=0 Succeed value
         * @property {number} Failed=1 Failed value
         */
        Msg_JoinPrivateRoomRsp.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Succeed"] = 0;
            values[valuesById[1] = "Failed"] = 1;
            return values;
        })();

        return Msg_JoinPrivateRoomRsp;
    })();

    /**
     * ChannelRelayType enum.
     * @name proto.ChannelRelayType
     * @enum {number}
     * @property {number} None=0 None value
     * @property {number} ByteDance=1 ByteDance value
     * @property {number} TencentADQ=2 TencentADQ value
     * @property {number} WechatMP=3 WechatMP value
     */
    proto.ChannelRelayType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "None"] = 0;
        values[valuesById[1] = "ByteDance"] = 1;
        values[valuesById[2] = "TencentADQ"] = 2;
        values[valuesById[3] = "WechatMP"] = 3;
        return values;
    })();

    proto.Msg_SeasonOverRsp = (function() {

        /**
         * Properties of a Msg_SeasonOverRsp.
         * @memberof proto
         * @interface IMsg_SeasonOverRsp
         */

        /**
         * Constructs a new Msg_SeasonOverRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SeasonOverRsp.
         * @implements IMsg_SeasonOverRsp
         * @constructor
         * @param {proto.IMsg_SeasonOverRsp=} [p] Properties to set
         */
        function Msg_SeasonOverRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_SeasonOverRsp message. Does not implicitly {@link proto.Msg_SeasonOverRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SeasonOverRsp
         * @static
         * @param {proto.IMsg_SeasonOverRsp} m Msg_SeasonOverRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SeasonOverRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_SeasonOverRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SeasonOverRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SeasonOverRsp} Msg_SeasonOverRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SeasonOverRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SeasonOverRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SeasonOverRsp;
    })();

    proto.Msg_SeasonResetRsp = (function() {

        /**
         * Properties of a Msg_SeasonResetRsp.
         * @memberof proto
         * @interface IMsg_SeasonResetRsp
         * @property {number|null} [OldScore] Msg_SeasonResetRsp OldScore
         * @property {number|null} [Score] Msg_SeasonResetRsp Score
         */

        /**
         * Constructs a new Msg_SeasonResetRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SeasonResetRsp.
         * @implements IMsg_SeasonResetRsp
         * @constructor
         * @param {proto.IMsg_SeasonResetRsp=} [p] Properties to set
         */
        function Msg_SeasonResetRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SeasonResetRsp OldScore.
         * @member {number} OldScore
         * @memberof proto.Msg_SeasonResetRsp
         * @instance
         */
        Msg_SeasonResetRsp.prototype.OldScore = 0;

        /**
         * Msg_SeasonResetRsp Score.
         * @member {number} Score
         * @memberof proto.Msg_SeasonResetRsp
         * @instance
         */
        Msg_SeasonResetRsp.prototype.Score = 0;

        /**
         * Encodes the specified Msg_SeasonResetRsp message. Does not implicitly {@link proto.Msg_SeasonResetRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SeasonResetRsp
         * @static
         * @param {proto.IMsg_SeasonResetRsp} m Msg_SeasonResetRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SeasonResetRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OldScore != null && Object.hasOwnProperty.call(m, "OldScore"))
                w.uint32(8).int32(m.OldScore);
            if (m.Score != null && Object.hasOwnProperty.call(m, "Score"))
                w.uint32(16).int32(m.Score);
            return w;
        };

        /**
         * Decodes a Msg_SeasonResetRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SeasonResetRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SeasonResetRsp} Msg_SeasonResetRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SeasonResetRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SeasonResetRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.OldScore = r.int32();
                    break;
                case 2:
                    m.Score = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SeasonResetRsp;
    })();

    proto.Msg_SeasonRewardMsgRsp = (function() {

        /**
         * Properties of a Msg_SeasonRewardMsgRsp.
         * @memberof proto
         * @interface IMsg_SeasonRewardMsgRsp
         * @property {number|null} [SeasonID] Msg_SeasonRewardMsgRsp SeasonID
         * @property {number|null} [Ranking] Msg_SeasonRewardMsgRsp Ranking
         */

        /**
         * Constructs a new Msg_SeasonRewardMsgRsp.
         * @memberof proto
         * @classdesc Represents a Msg_SeasonRewardMsgRsp.
         * @implements IMsg_SeasonRewardMsgRsp
         * @constructor
         * @param {proto.IMsg_SeasonRewardMsgRsp=} [p] Properties to set
         */
        function Msg_SeasonRewardMsgRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_SeasonRewardMsgRsp SeasonID.
         * @member {number} SeasonID
         * @memberof proto.Msg_SeasonRewardMsgRsp
         * @instance
         */
        Msg_SeasonRewardMsgRsp.prototype.SeasonID = 0;

        /**
         * Msg_SeasonRewardMsgRsp Ranking.
         * @member {number} Ranking
         * @memberof proto.Msg_SeasonRewardMsgRsp
         * @instance
         */
        Msg_SeasonRewardMsgRsp.prototype.Ranking = 0;

        /**
         * Encodes the specified Msg_SeasonRewardMsgRsp message. Does not implicitly {@link proto.Msg_SeasonRewardMsgRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_SeasonRewardMsgRsp
         * @static
         * @param {proto.IMsg_SeasonRewardMsgRsp} m Msg_SeasonRewardMsgRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_SeasonRewardMsgRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.SeasonID != null && Object.hasOwnProperty.call(m, "SeasonID"))
                w.uint32(8).int32(m.SeasonID);
            if (m.Ranking != null && Object.hasOwnProperty.call(m, "Ranking"))
                w.uint32(16).int32(m.Ranking);
            return w;
        };

        /**
         * Decodes a Msg_SeasonRewardMsgRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_SeasonRewardMsgRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_SeasonRewardMsgRsp} Msg_SeasonRewardMsgRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_SeasonRewardMsgRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_SeasonRewardMsgRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.SeasonID = r.int32();
                    break;
                case 2:
                    m.Ranking = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_SeasonRewardMsgRsp;
    })();

    proto.Msg_GetSeasonRewardReq = (function() {

        /**
         * Properties of a Msg_GetSeasonRewardReq.
         * @memberof proto
         * @interface IMsg_GetSeasonRewardReq
         */

        /**
         * Constructs a new Msg_GetSeasonRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetSeasonRewardReq.
         * @implements IMsg_GetSeasonRewardReq
         * @constructor
         * @param {proto.IMsg_GetSeasonRewardReq=} [p] Properties to set
         */
        function Msg_GetSeasonRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetSeasonRewardReq message. Does not implicitly {@link proto.Msg_GetSeasonRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetSeasonRewardReq
         * @static
         * @param {proto.IMsg_GetSeasonRewardReq} m Msg_GetSeasonRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetSeasonRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetSeasonRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetSeasonRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetSeasonRewardReq} Msg_GetSeasonRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetSeasonRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetSeasonRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetSeasonRewardReq;
    })();

    proto.Msg_GetSeasonRewardRsp = (function() {

        /**
         * Properties of a Msg_GetSeasonRewardRsp.
         * @memberof proto
         * @interface IMsg_GetSeasonRewardRsp
         * @property {Array.<proto.IRewardSimpleInfo>|null} [Awards] Msg_GetSeasonRewardRsp Awards
         */

        /**
         * Constructs a new Msg_GetSeasonRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetSeasonRewardRsp.
         * @implements IMsg_GetSeasonRewardRsp
         * @constructor
         * @param {proto.IMsg_GetSeasonRewardRsp=} [p] Properties to set
         */
        function Msg_GetSeasonRewardRsp(p) {
            this.Awards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetSeasonRewardRsp Awards.
         * @member {Array.<proto.IRewardSimpleInfo>} Awards
         * @memberof proto.Msg_GetSeasonRewardRsp
         * @instance
         */
        Msg_GetSeasonRewardRsp.prototype.Awards = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetSeasonRewardRsp message. Does not implicitly {@link proto.Msg_GetSeasonRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetSeasonRewardRsp
         * @static
         * @param {proto.IMsg_GetSeasonRewardRsp} m Msg_GetSeasonRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetSeasonRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Awards != null && m.Awards.length) {
                for (var i = 0; i < m.Awards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.Awards[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetSeasonRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetSeasonRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetSeasonRewardRsp} Msg_GetSeasonRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetSeasonRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetSeasonRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.Awards && m.Awards.length))
                        m.Awards = [];
                    m.Awards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetSeasonRewardRsp;
    })();

    proto.Msg_BountyPlayerNumberChangedPush = (function() {

        /**
         * Properties of a Msg_BountyPlayerNumberChangedPush.
         * @memberof proto
         * @interface IMsg_BountyPlayerNumberChangedPush
         * @property {number|null} [PlayerNumber] Msg_BountyPlayerNumberChangedPush PlayerNumber
         */

        /**
         * Constructs a new Msg_BountyPlayerNumberChangedPush.
         * @memberof proto
         * @classdesc Represents a Msg_BountyPlayerNumberChangedPush.
         * @implements IMsg_BountyPlayerNumberChangedPush
         * @constructor
         * @param {proto.IMsg_BountyPlayerNumberChangedPush=} [p] Properties to set
         */
        function Msg_BountyPlayerNumberChangedPush(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BountyPlayerNumberChangedPush PlayerNumber.
         * @member {number} PlayerNumber
         * @memberof proto.Msg_BountyPlayerNumberChangedPush
         * @instance
         */
        Msg_BountyPlayerNumberChangedPush.prototype.PlayerNumber = 0;

        /**
         * Encodes the specified Msg_BountyPlayerNumberChangedPush message. Does not implicitly {@link proto.Msg_BountyPlayerNumberChangedPush.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BountyPlayerNumberChangedPush
         * @static
         * @param {proto.IMsg_BountyPlayerNumberChangedPush} m Msg_BountyPlayerNumberChangedPush message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BountyPlayerNumberChangedPush.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerNumber != null && Object.hasOwnProperty.call(m, "PlayerNumber"))
                w.uint32(8).int32(m.PlayerNumber);
            return w;
        };

        /**
         * Decodes a Msg_BountyPlayerNumberChangedPush message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BountyPlayerNumberChangedPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BountyPlayerNumberChangedPush} Msg_BountyPlayerNumberChangedPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BountyPlayerNumberChangedPush.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BountyPlayerNumberChangedPush();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerNumber = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BountyPlayerNumberChangedPush;
    })();

    proto.Msg_BountyAllFightDataPush = (function() {

        /**
         * Properties of a Msg_BountyAllFightDataPush.
         * @memberof proto
         * @interface IMsg_BountyAllFightDataPush
         * @property {Array.<proto.IBountyFightData>|null} [allData] Msg_BountyAllFightDataPush allData
         */

        /**
         * Constructs a new Msg_BountyAllFightDataPush.
         * @memberof proto
         * @classdesc Represents a Msg_BountyAllFightDataPush.
         * @implements IMsg_BountyAllFightDataPush
         * @constructor
         * @param {proto.IMsg_BountyAllFightDataPush=} [p] Properties to set
         */
        function Msg_BountyAllFightDataPush(p) {
            this.allData = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BountyAllFightDataPush allData.
         * @member {Array.<proto.IBountyFightData>} allData
         * @memberof proto.Msg_BountyAllFightDataPush
         * @instance
         */
        Msg_BountyAllFightDataPush.prototype.allData = $util.emptyArray;

        /**
         * Encodes the specified Msg_BountyAllFightDataPush message. Does not implicitly {@link proto.Msg_BountyAllFightDataPush.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BountyAllFightDataPush
         * @static
         * @param {proto.IMsg_BountyAllFightDataPush} m Msg_BountyAllFightDataPush message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BountyAllFightDataPush.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.allData != null && m.allData.length) {
                for (var i = 0; i < m.allData.length; ++i)
                    $root.proto.BountyFightData.encode(m.allData[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BountyAllFightDataPush message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BountyAllFightDataPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BountyAllFightDataPush} Msg_BountyAllFightDataPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BountyAllFightDataPush.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BountyAllFightDataPush();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.allData && m.allData.length))
                        m.allData = [];
                    m.allData.push($root.proto.BountyFightData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BountyAllFightDataPush;
    })();

    proto.Msg_BountyRewardPush = (function() {

        /**
         * Properties of a Msg_BountyRewardPush.
         * @memberof proto
         * @interface IMsg_BountyRewardPush
         * @property {number|null} [rank] Msg_BountyRewardPush rank
         * @property {Array.<proto.IBountyFightData>|null} [allData] Msg_BountyRewardPush allData
         * @property {number|null} [score] Msg_BountyRewardPush score
         * @property {number|null} [diamond] Msg_BountyRewardPush diamond
         * @property {boolean|null} [canRetrieve] Msg_BountyRewardPush canRetrieve
         * @property {number|null} [remainRetrieveTimes] Msg_BountyRewardPush remainRetrieveTimes
         * @property {number|null} [roleCup] Msg_BountyRewardPush roleCup
         * @property {number|null} [changeCup] Msg_BountyRewardPush changeCup
         * @property {number|null} [watchAdCount] Msg_BountyRewardPush watchAdCount
         * @property {proto.FightType|null} [fightType] Msg_BountyRewardPush fightType
         * @property {boolean|null} [isWin] Msg_BountyRewardPush isWin
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_BountyRewardPush rewards
         */

        /**
         * Constructs a new Msg_BountyRewardPush.
         * @memberof proto
         * @classdesc Represents a Msg_BountyRewardPush.
         * @implements IMsg_BountyRewardPush
         * @constructor
         * @param {proto.IMsg_BountyRewardPush=} [p] Properties to set
         */
        function Msg_BountyRewardPush(p) {
            this.allData = [];
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BountyRewardPush rank.
         * @member {number} rank
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.rank = 0;

        /**
         * Msg_BountyRewardPush allData.
         * @member {Array.<proto.IBountyFightData>} allData
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.allData = $util.emptyArray;

        /**
         * Msg_BountyRewardPush score.
         * @member {number} score
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.score = 0;

        /**
         * Msg_BountyRewardPush diamond.
         * @member {number} diamond
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.diamond = 0;

        /**
         * Msg_BountyRewardPush canRetrieve.
         * @member {boolean} canRetrieve
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.canRetrieve = false;

        /**
         * Msg_BountyRewardPush remainRetrieveTimes.
         * @member {number} remainRetrieveTimes
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.remainRetrieveTimes = 0;

        /**
         * Msg_BountyRewardPush roleCup.
         * @member {number} roleCup
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.roleCup = 0;

        /**
         * Msg_BountyRewardPush changeCup.
         * @member {number} changeCup
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.changeCup = 0;

        /**
         * Msg_BountyRewardPush watchAdCount.
         * @member {number} watchAdCount
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.watchAdCount = 0;

        /**
         * Msg_BountyRewardPush fightType.
         * @member {proto.FightType} fightType
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.fightType = 0;

        /**
         * Msg_BountyRewardPush isWin.
         * @member {boolean} isWin
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.isWin = false;

        /**
         * Msg_BountyRewardPush rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_BountyRewardPush
         * @instance
         */
        Msg_BountyRewardPush.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_BountyRewardPush message. Does not implicitly {@link proto.Msg_BountyRewardPush.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BountyRewardPush
         * @static
         * @param {proto.IMsg_BountyRewardPush} m Msg_BountyRewardPush message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BountyRewardPush.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.rank != null && Object.hasOwnProperty.call(m, "rank"))
                w.uint32(8).int32(m.rank);
            if (m.allData != null && m.allData.length) {
                for (var i = 0; i < m.allData.length; ++i)
                    $root.proto.BountyFightData.encode(m.allData[i], w.uint32(18).fork()).ldelim();
            }
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(24).int32(m.score);
            if (m.diamond != null && Object.hasOwnProperty.call(m, "diamond"))
                w.uint32(32).int32(m.diamond);
            if (m.canRetrieve != null && Object.hasOwnProperty.call(m, "canRetrieve"))
                w.uint32(40).bool(m.canRetrieve);
            if (m.remainRetrieveTimes != null && Object.hasOwnProperty.call(m, "remainRetrieveTimes"))
                w.uint32(48).int32(m.remainRetrieveTimes);
            if (m.roleCup != null && Object.hasOwnProperty.call(m, "roleCup"))
                w.uint32(56).int32(m.roleCup);
            if (m.changeCup != null && Object.hasOwnProperty.call(m, "changeCup"))
                w.uint32(64).int32(m.changeCup);
            if (m.watchAdCount != null && Object.hasOwnProperty.call(m, "watchAdCount"))
                w.uint32(72).int32(m.watchAdCount);
            if (m.fightType != null && Object.hasOwnProperty.call(m, "fightType"))
                w.uint32(80).int32(m.fightType);
            if (m.isWin != null && Object.hasOwnProperty.call(m, "isWin"))
                w.uint32(88).bool(m.isWin);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(98).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BountyRewardPush message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BountyRewardPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BountyRewardPush} Msg_BountyRewardPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BountyRewardPush.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BountyRewardPush();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.rank = r.int32();
                    break;
                case 2:
                    if (!(m.allData && m.allData.length))
                        m.allData = [];
                    m.allData.push($root.proto.BountyFightData.decode(r, r.uint32()));
                    break;
                case 3:
                    m.score = r.int32();
                    break;
                case 4:
                    m.diamond = r.int32();
                    break;
                case 5:
                    m.canRetrieve = r.bool();
                    break;
                case 6:
                    m.remainRetrieveTimes = r.int32();
                    break;
                case 7:
                    m.roleCup = r.int32();
                    break;
                case 8:
                    m.changeCup = r.int32();
                    break;
                case 9:
                    m.watchAdCount = r.int32();
                    break;
                case 10:
                    m.fightType = r.int32();
                    break;
                case 11:
                    m.isWin = r.bool();
                    break;
                case 12:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BountyRewardPush;
    })();

    proto.Msg_RetrieveBountyRewardReq = (function() {

        /**
         * Properties of a Msg_RetrieveBountyRewardReq.
         * @memberof proto
         * @interface IMsg_RetrieveBountyRewardReq
         * @property {boolean|null} [retrieve] Msg_RetrieveBountyRewardReq retrieve
         */

        /**
         * Constructs a new Msg_RetrieveBountyRewardReq.
         * @memberof proto
         * @classdesc Represents a Msg_RetrieveBountyRewardReq.
         * @implements IMsg_RetrieveBountyRewardReq
         * @constructor
         * @param {proto.IMsg_RetrieveBountyRewardReq=} [p] Properties to set
         */
        function Msg_RetrieveBountyRewardReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RetrieveBountyRewardReq retrieve.
         * @member {boolean} retrieve
         * @memberof proto.Msg_RetrieveBountyRewardReq
         * @instance
         */
        Msg_RetrieveBountyRewardReq.prototype.retrieve = false;

        /**
         * Encodes the specified Msg_RetrieveBountyRewardReq message. Does not implicitly {@link proto.Msg_RetrieveBountyRewardReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RetrieveBountyRewardReq
         * @static
         * @param {proto.IMsg_RetrieveBountyRewardReq} m Msg_RetrieveBountyRewardReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RetrieveBountyRewardReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.retrieve != null && Object.hasOwnProperty.call(m, "retrieve"))
                w.uint32(8).bool(m.retrieve);
            return w;
        };

        /**
         * Decodes a Msg_RetrieveBountyRewardReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RetrieveBountyRewardReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RetrieveBountyRewardReq} Msg_RetrieveBountyRewardReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RetrieveBountyRewardReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RetrieveBountyRewardReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.retrieve = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RetrieveBountyRewardReq;
    })();

    proto.Msg_RetrieveBountyRewardRsp = (function() {

        /**
         * Properties of a Msg_RetrieveBountyRewardRsp.
         * @memberof proto
         * @interface IMsg_RetrieveBountyRewardRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_RetrieveBountyRewardRsp result
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_RetrieveBountyRewardRsp rewards
         */

        /**
         * Constructs a new Msg_RetrieveBountyRewardRsp.
         * @memberof proto
         * @classdesc Represents a Msg_RetrieveBountyRewardRsp.
         * @implements IMsg_RetrieveBountyRewardRsp
         * @constructor
         * @param {proto.IMsg_RetrieveBountyRewardRsp=} [p] Properties to set
         */
        function Msg_RetrieveBountyRewardRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_RetrieveBountyRewardRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_RetrieveBountyRewardRsp
         * @instance
         */
        Msg_RetrieveBountyRewardRsp.prototype.result = 0;

        /**
         * Msg_RetrieveBountyRewardRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_RetrieveBountyRewardRsp
         * @instance
         */
        Msg_RetrieveBountyRewardRsp.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_RetrieveBountyRewardRsp message. Does not implicitly {@link proto.Msg_RetrieveBountyRewardRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_RetrieveBountyRewardRsp
         * @static
         * @param {proto.IMsg_RetrieveBountyRewardRsp} m Msg_RetrieveBountyRewardRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_RetrieveBountyRewardRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_RetrieveBountyRewardRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_RetrieveBountyRewardRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_RetrieveBountyRewardRsp} Msg_RetrieveBountyRewardRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_RetrieveBountyRewardRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_RetrieveBountyRewardRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_RetrieveBountyRewardRsp;
    })();

    proto.Msg_GetBountyStatReq = (function() {

        /**
         * Properties of a Msg_GetBountyStatReq.
         * @memberof proto
         * @interface IMsg_GetBountyStatReq
         */

        /**
         * Constructs a new Msg_GetBountyStatReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetBountyStatReq.
         * @implements IMsg_GetBountyStatReq
         * @constructor
         * @param {proto.IMsg_GetBountyStatReq=} [p] Properties to set
         */
        function Msg_GetBountyStatReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetBountyStatReq message. Does not implicitly {@link proto.Msg_GetBountyStatReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetBountyStatReq
         * @static
         * @param {proto.IMsg_GetBountyStatReq} m Msg_GetBountyStatReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetBountyStatReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetBountyStatReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetBountyStatReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetBountyStatReq} Msg_GetBountyStatReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetBountyStatReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetBountyStatReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetBountyStatReq;
    })();

    proto.Msg_GetBountyStatRsp = (function() {

        /**
         * Properties of a Msg_GetBountyStatRsp.
         * @memberof proto
         * @interface IMsg_GetBountyStatRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_GetBountyStatRsp result
         * @property {number|null} [totalCount] Msg_GetBountyStatRsp totalCount
         * @property {number|null} [firstRankCount] Msg_GetBountyStatRsp firstRankCount
         * @property {number|null} [winRate] Msg_GetBountyStatRsp winRate
         */

        /**
         * Constructs a new Msg_GetBountyStatRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetBountyStatRsp.
         * @implements IMsg_GetBountyStatRsp
         * @constructor
         * @param {proto.IMsg_GetBountyStatRsp=} [p] Properties to set
         */
        function Msg_GetBountyStatRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetBountyStatRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_GetBountyStatRsp
         * @instance
         */
        Msg_GetBountyStatRsp.prototype.result = 0;

        /**
         * Msg_GetBountyStatRsp totalCount.
         * @member {number} totalCount
         * @memberof proto.Msg_GetBountyStatRsp
         * @instance
         */
        Msg_GetBountyStatRsp.prototype.totalCount = 0;

        /**
         * Msg_GetBountyStatRsp firstRankCount.
         * @member {number} firstRankCount
         * @memberof proto.Msg_GetBountyStatRsp
         * @instance
         */
        Msg_GetBountyStatRsp.prototype.firstRankCount = 0;

        /**
         * Msg_GetBountyStatRsp winRate.
         * @member {number} winRate
         * @memberof proto.Msg_GetBountyStatRsp
         * @instance
         */
        Msg_GetBountyStatRsp.prototype.winRate = 0;

        /**
         * Encodes the specified Msg_GetBountyStatRsp message. Does not implicitly {@link proto.Msg_GetBountyStatRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetBountyStatRsp
         * @static
         * @param {proto.IMsg_GetBountyStatRsp} m Msg_GetBountyStatRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetBountyStatRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.totalCount != null && Object.hasOwnProperty.call(m, "totalCount"))
                w.uint32(16).int32(m.totalCount);
            if (m.firstRankCount != null && Object.hasOwnProperty.call(m, "firstRankCount"))
                w.uint32(24).int32(m.firstRankCount);
            if (m.winRate != null && Object.hasOwnProperty.call(m, "winRate"))
                w.uint32(37).float(m.winRate);
            return w;
        };

        /**
         * Decodes a Msg_GetBountyStatRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetBountyStatRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetBountyStatRsp} Msg_GetBountyStatRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetBountyStatRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetBountyStatRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.totalCount = r.int32();
                    break;
                case 3:
                    m.firstRankCount = r.int32();
                    break;
                case 4:
                    m.winRate = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetBountyStatRsp;
    })();

    proto.Msg_ClearBountyStatReq = (function() {

        /**
         * Properties of a Msg_ClearBountyStatReq.
         * @memberof proto
         * @interface IMsg_ClearBountyStatReq
         */

        /**
         * Constructs a new Msg_ClearBountyStatReq.
         * @memberof proto
         * @classdesc Represents a Msg_ClearBountyStatReq.
         * @implements IMsg_ClearBountyStatReq
         * @constructor
         * @param {proto.IMsg_ClearBountyStatReq=} [p] Properties to set
         */
        function Msg_ClearBountyStatReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_ClearBountyStatReq message. Does not implicitly {@link proto.Msg_ClearBountyStatReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ClearBountyStatReq
         * @static
         * @param {proto.IMsg_ClearBountyStatReq} m Msg_ClearBountyStatReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ClearBountyStatReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_ClearBountyStatReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ClearBountyStatReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ClearBountyStatReq} Msg_ClearBountyStatReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ClearBountyStatReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ClearBountyStatReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ClearBountyStatReq;
    })();

    proto.Msg_ClearBountyStatRsp = (function() {

        /**
         * Properties of a Msg_ClearBountyStatRsp.
         * @memberof proto
         * @interface IMsg_ClearBountyStatRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_ClearBountyStatRsp result
         */

        /**
         * Constructs a new Msg_ClearBountyStatRsp.
         * @memberof proto
         * @classdesc Represents a Msg_ClearBountyStatRsp.
         * @implements IMsg_ClearBountyStatRsp
         * @constructor
         * @param {proto.IMsg_ClearBountyStatRsp=} [p] Properties to set
         */
        function Msg_ClearBountyStatRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_ClearBountyStatRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_ClearBountyStatRsp
         * @instance
         */
        Msg_ClearBountyStatRsp.prototype.result = 0;

        /**
         * Encodes the specified Msg_ClearBountyStatRsp message. Does not implicitly {@link proto.Msg_ClearBountyStatRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_ClearBountyStatRsp
         * @static
         * @param {proto.IMsg_ClearBountyStatRsp} m Msg_ClearBountyStatRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_ClearBountyStatRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        /**
         * Decodes a Msg_ClearBountyStatRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_ClearBountyStatRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_ClearBountyStatRsp} Msg_ClearBountyStatRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_ClearBountyStatRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_ClearBountyStatRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_ClearBountyStatRsp;
    })();

    proto.Msg_GetContinuousGiftReq = (function() {

        /**
         * Properties of a Msg_GetContinuousGiftReq.
         * @memberof proto
         * @interface IMsg_GetContinuousGiftReq
         */

        /**
         * Constructs a new Msg_GetContinuousGiftReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetContinuousGiftReq.
         * @implements IMsg_GetContinuousGiftReq
         * @constructor
         * @param {proto.IMsg_GetContinuousGiftReq=} [p] Properties to set
         */
        function Msg_GetContinuousGiftReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetContinuousGiftReq message. Does not implicitly {@link proto.Msg_GetContinuousGiftReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetContinuousGiftReq
         * @static
         * @param {proto.IMsg_GetContinuousGiftReq} m Msg_GetContinuousGiftReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetContinuousGiftReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetContinuousGiftReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetContinuousGiftReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetContinuousGiftReq} Msg_GetContinuousGiftReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetContinuousGiftReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetContinuousGiftReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetContinuousGiftReq;
    })();

    proto.Msg_GetContinuousGiftRsp = (function() {

        /**
         * Properties of a Msg_GetContinuousGiftRsp.
         * @memberof proto
         * @interface IMsg_GetContinuousGiftRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_GetContinuousGiftRsp result
         * @property {number|null} [boughtId] Msg_GetContinuousGiftRsp boughtId
         */

        /**
         * Constructs a new Msg_GetContinuousGiftRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetContinuousGiftRsp.
         * @implements IMsg_GetContinuousGiftRsp
         * @constructor
         * @param {proto.IMsg_GetContinuousGiftRsp=} [p] Properties to set
         */
        function Msg_GetContinuousGiftRsp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetContinuousGiftRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_GetContinuousGiftRsp
         * @instance
         */
        Msg_GetContinuousGiftRsp.prototype.result = 0;

        /**
         * Msg_GetContinuousGiftRsp boughtId.
         * @member {number} boughtId
         * @memberof proto.Msg_GetContinuousGiftRsp
         * @instance
         */
        Msg_GetContinuousGiftRsp.prototype.boughtId = 0;

        /**
         * Encodes the specified Msg_GetContinuousGiftRsp message. Does not implicitly {@link proto.Msg_GetContinuousGiftRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetContinuousGiftRsp
         * @static
         * @param {proto.IMsg_GetContinuousGiftRsp} m Msg_GetContinuousGiftRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetContinuousGiftRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.boughtId != null && Object.hasOwnProperty.call(m, "boughtId"))
                w.uint32(16).int32(m.boughtId);
            return w;
        };

        /**
         * Decodes a Msg_GetContinuousGiftRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetContinuousGiftRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetContinuousGiftRsp} Msg_GetContinuousGiftRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetContinuousGiftRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetContinuousGiftRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.boughtId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetContinuousGiftRsp;
    })();

    proto.Msg_BuyContinuousGiftReq = (function() {

        /**
         * Properties of a Msg_BuyContinuousGiftReq.
         * @memberof proto
         * @interface IMsg_BuyContinuousGiftReq
         */

        /**
         * Constructs a new Msg_BuyContinuousGiftReq.
         * @memberof proto
         * @classdesc Represents a Msg_BuyContinuousGiftReq.
         * @implements IMsg_BuyContinuousGiftReq
         * @constructor
         * @param {proto.IMsg_BuyContinuousGiftReq=} [p] Properties to set
         */
        function Msg_BuyContinuousGiftReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_BuyContinuousGiftReq message. Does not implicitly {@link proto.Msg_BuyContinuousGiftReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyContinuousGiftReq
         * @static
         * @param {proto.IMsg_BuyContinuousGiftReq} m Msg_BuyContinuousGiftReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyContinuousGiftReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_BuyContinuousGiftReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyContinuousGiftReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyContinuousGiftReq} Msg_BuyContinuousGiftReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyContinuousGiftReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyContinuousGiftReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyContinuousGiftReq;
    })();

    proto.Msg_BuyContinuousGiftRsp = (function() {

        /**
         * Properties of a Msg_BuyContinuousGiftRsp.
         * @memberof proto
         * @interface IMsg_BuyContinuousGiftRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_BuyContinuousGiftRsp result
         * @property {number|null} [boughtId] Msg_BuyContinuousGiftRsp boughtId
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_BuyContinuousGiftRsp rewards
         */

        /**
         * Constructs a new Msg_BuyContinuousGiftRsp.
         * @memberof proto
         * @classdesc Represents a Msg_BuyContinuousGiftRsp.
         * @implements IMsg_BuyContinuousGiftRsp
         * @constructor
         * @param {proto.IMsg_BuyContinuousGiftRsp=} [p] Properties to set
         */
        function Msg_BuyContinuousGiftRsp(p) {
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyContinuousGiftRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_BuyContinuousGiftRsp
         * @instance
         */
        Msg_BuyContinuousGiftRsp.prototype.result = 0;

        /**
         * Msg_BuyContinuousGiftRsp boughtId.
         * @member {number} boughtId
         * @memberof proto.Msg_BuyContinuousGiftRsp
         * @instance
         */
        Msg_BuyContinuousGiftRsp.prototype.boughtId = 0;

        /**
         * Msg_BuyContinuousGiftRsp rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_BuyContinuousGiftRsp
         * @instance
         */
        Msg_BuyContinuousGiftRsp.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_BuyContinuousGiftRsp message. Does not implicitly {@link proto.Msg_BuyContinuousGiftRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyContinuousGiftRsp
         * @static
         * @param {proto.IMsg_BuyContinuousGiftRsp} m Msg_BuyContinuousGiftRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyContinuousGiftRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.boughtId != null && Object.hasOwnProperty.call(m, "boughtId"))
                w.uint32(16).int32(m.boughtId);
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BuyContinuousGiftRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyContinuousGiftRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyContinuousGiftRsp} Msg_BuyContinuousGiftRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyContinuousGiftRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyContinuousGiftRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    m.boughtId = r.int32();
                    break;
                case 3:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyContinuousGiftRsp;
    })();

    proto.Msg_GetFirstRechargeGiftReq = (function() {

        /**
         * Properties of a Msg_GetFirstRechargeGiftReq.
         * @memberof proto
         * @interface IMsg_GetFirstRechargeGiftReq
         */

        /**
         * Constructs a new Msg_GetFirstRechargeGiftReq.
         * @memberof proto
         * @classdesc Represents a Msg_GetFirstRechargeGiftReq.
         * @implements IMsg_GetFirstRechargeGiftReq
         * @constructor
         * @param {proto.IMsg_GetFirstRechargeGiftReq=} [p] Properties to set
         */
        function Msg_GetFirstRechargeGiftReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Encodes the specified Msg_GetFirstRechargeGiftReq message. Does not implicitly {@link proto.Msg_GetFirstRechargeGiftReq.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFirstRechargeGiftReq
         * @static
         * @param {proto.IMsg_GetFirstRechargeGiftReq} m Msg_GetFirstRechargeGiftReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFirstRechargeGiftReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Msg_GetFirstRechargeGiftReq message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFirstRechargeGiftReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFirstRechargeGiftReq} Msg_GetFirstRechargeGiftReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFirstRechargeGiftReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFirstRechargeGiftReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFirstRechargeGiftReq;
    })();

    proto.BoughtTimes = (function() {

        /**
         * Properties of a BoughtTimes.
         * @memberof proto
         * @interface IBoughtTimes
         * @property {number|null} [id] BoughtTimes id
         * @property {number|null} [times] BoughtTimes times
         */

        /**
         * Constructs a new BoughtTimes.
         * @memberof proto
         * @classdesc Represents a BoughtTimes.
         * @implements IBoughtTimes
         * @constructor
         * @param {proto.IBoughtTimes=} [p] Properties to set
         */
        function BoughtTimes(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * BoughtTimes id.
         * @member {number} id
         * @memberof proto.BoughtTimes
         * @instance
         */
        BoughtTimes.prototype.id = 0;

        /**
         * BoughtTimes times.
         * @member {number} times
         * @memberof proto.BoughtTimes
         * @instance
         */
        BoughtTimes.prototype.times = 0;

        /**
         * Encodes the specified BoughtTimes message. Does not implicitly {@link proto.BoughtTimes.verify|verify} messages.
         * @function encode
         * @memberof proto.BoughtTimes
         * @static
         * @param {proto.IBoughtTimes} m BoughtTimes message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BoughtTimes.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(8).int32(m.id);
            if (m.times != null && Object.hasOwnProperty.call(m, "times"))
                w.uint32(16).int32(m.times);
            return w;
        };

        /**
         * Decodes a BoughtTimes message from the specified reader or buffer.
         * @function decode
         * @memberof proto.BoughtTimes
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.BoughtTimes} BoughtTimes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BoughtTimes.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.BoughtTimes();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.id = r.int32();
                    break;
                case 2:
                    m.times = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return BoughtTimes;
    })();

    proto.Msg_GetFirstRechargeGiftRsp = (function() {

        /**
         * Properties of a Msg_GetFirstRechargeGiftRsp.
         * @memberof proto
         * @interface IMsg_GetFirstRechargeGiftRsp
         * @property {proto.CommonErrorCode|null} [result] Msg_GetFirstRechargeGiftRsp result
         * @property {Array.<proto.IBoughtTimes>|null} [boughtTimes] Msg_GetFirstRechargeGiftRsp boughtTimes
         */

        /**
         * Constructs a new Msg_GetFirstRechargeGiftRsp.
         * @memberof proto
         * @classdesc Represents a Msg_GetFirstRechargeGiftRsp.
         * @implements IMsg_GetFirstRechargeGiftRsp
         * @constructor
         * @param {proto.IMsg_GetFirstRechargeGiftRsp=} [p] Properties to set
         */
        function Msg_GetFirstRechargeGiftRsp(p) {
            this.boughtTimes = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_GetFirstRechargeGiftRsp result.
         * @member {proto.CommonErrorCode} result
         * @memberof proto.Msg_GetFirstRechargeGiftRsp
         * @instance
         */
        Msg_GetFirstRechargeGiftRsp.prototype.result = 0;

        /**
         * Msg_GetFirstRechargeGiftRsp boughtTimes.
         * @member {Array.<proto.IBoughtTimes>} boughtTimes
         * @memberof proto.Msg_GetFirstRechargeGiftRsp
         * @instance
         */
        Msg_GetFirstRechargeGiftRsp.prototype.boughtTimes = $util.emptyArray;

        /**
         * Encodes the specified Msg_GetFirstRechargeGiftRsp message. Does not implicitly {@link proto.Msg_GetFirstRechargeGiftRsp.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_GetFirstRechargeGiftRsp
         * @static
         * @param {proto.IMsg_GetFirstRechargeGiftRsp} m Msg_GetFirstRechargeGiftRsp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_GetFirstRechargeGiftRsp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            if (m.boughtTimes != null && m.boughtTimes.length) {
                for (var i = 0; i < m.boughtTimes.length; ++i)
                    $root.proto.BoughtTimes.encode(m.boughtTimes[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_GetFirstRechargeGiftRsp message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_GetFirstRechargeGiftRsp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_GetFirstRechargeGiftRsp} Msg_GetFirstRechargeGiftRsp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_GetFirstRechargeGiftRsp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_GetFirstRechargeGiftRsp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                case 2:
                    if (!(m.boughtTimes && m.boughtTimes.length))
                        m.boughtTimes = [];
                    m.boughtTimes.push($root.proto.BoughtTimes.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_GetFirstRechargeGiftRsp;
    })();

    proto.Msg_BuyFirstRechargeGiftPush = (function() {

        /**
         * Properties of a Msg_BuyFirstRechargeGiftPush.
         * @memberof proto
         * @interface IMsg_BuyFirstRechargeGiftPush
         * @property {Array.<proto.IBoughtTimes>|null} [boughtTimes] Msg_BuyFirstRechargeGiftPush boughtTimes
         * @property {Array.<proto.IRewardSimpleInfo>|null} [rewards] Msg_BuyFirstRechargeGiftPush rewards
         */

        /**
         * Constructs a new Msg_BuyFirstRechargeGiftPush.
         * @memberof proto
         * @classdesc Represents a Msg_BuyFirstRechargeGiftPush.
         * @implements IMsg_BuyFirstRechargeGiftPush
         * @constructor
         * @param {proto.IMsg_BuyFirstRechargeGiftPush=} [p] Properties to set
         */
        function Msg_BuyFirstRechargeGiftPush(p) {
            this.boughtTimes = [];
            this.rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Msg_BuyFirstRechargeGiftPush boughtTimes.
         * @member {Array.<proto.IBoughtTimes>} boughtTimes
         * @memberof proto.Msg_BuyFirstRechargeGiftPush
         * @instance
         */
        Msg_BuyFirstRechargeGiftPush.prototype.boughtTimes = $util.emptyArray;

        /**
         * Msg_BuyFirstRechargeGiftPush rewards.
         * @member {Array.<proto.IRewardSimpleInfo>} rewards
         * @memberof proto.Msg_BuyFirstRechargeGiftPush
         * @instance
         */
        Msg_BuyFirstRechargeGiftPush.prototype.rewards = $util.emptyArray;

        /**
         * Encodes the specified Msg_BuyFirstRechargeGiftPush message. Does not implicitly {@link proto.Msg_BuyFirstRechargeGiftPush.verify|verify} messages.
         * @function encode
         * @memberof proto.Msg_BuyFirstRechargeGiftPush
         * @static
         * @param {proto.IMsg_BuyFirstRechargeGiftPush} m Msg_BuyFirstRechargeGiftPush message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Msg_BuyFirstRechargeGiftPush.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.boughtTimes != null && m.boughtTimes.length) {
                for (var i = 0; i < m.boughtTimes.length; ++i)
                    $root.proto.BoughtTimes.encode(m.boughtTimes[i], w.uint32(10).fork()).ldelim();
            }
            if (m.rewards != null && m.rewards.length) {
                for (var i = 0; i < m.rewards.length; ++i)
                    $root.proto.RewardSimpleInfo.encode(m.rewards[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Msg_BuyFirstRechargeGiftPush message from the specified reader or buffer.
         * @function decode
         * @memberof proto.Msg_BuyFirstRechargeGiftPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {proto.Msg_BuyFirstRechargeGiftPush} Msg_BuyFirstRechargeGiftPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Msg_BuyFirstRechargeGiftPush.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.proto.Msg_BuyFirstRechargeGiftPush();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.boughtTimes && m.boughtTimes.length))
                        m.boughtTimes = [];
                    m.boughtTimes.push($root.proto.BoughtTimes.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.rewards && m.rewards.length))
                        m.rewards = [];
                    m.rewards.push($root.proto.RewardSimpleInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Msg_BuyFirstRechargeGiftPush;
    })();

    return proto;
})();

module.exports = $root;
