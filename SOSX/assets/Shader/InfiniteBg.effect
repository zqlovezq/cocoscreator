// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: no-light
    passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          time: { value: 0 }
          speed: { value: 0.002 }
  - name: light
    passes:
      - vert: vs_light
        frag: fs_light
        blendState:
          targets:
          - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          # alphaThreshold: { value: 0.5 }
          time: { value: 0 }
          speed: { value: 0.002 }
          lightColor: { value: [1, 1, 1, 1], inspector: { type: color } }
          lightPos: { value: [0, 0, 1, 1] }
          ambientLight: { value: [0.1, 0.1, 0.1, 1], inspector: { type: color } }
          shininess: { value: 32.0 }
}%


CCProgram vs %{

  precision highp float;

  #include <cc-global>

  in vec3 a_position;

  in mediump vec2 a_uv0;
  out mediump vec2 v_uv0;

  in vec4 a_color;
  out vec4 v_color;

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    gl_Position = pos;
  }

}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  uniform Time {
    float time;
  };

  uniform Speed {
    float speed;
  };

  uniform Light{
    vec4 lightColor;
    vec4 lightPos;
    vec4 ambientLight;
    float shininess;
  };

  uniform sampler2D texture;
  in mediump vec2 v_uv0;
  in vec4 v_color;

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 uv = v_uv0.xy;
    uv.x += time * speed;
    uv.x = fract(uv.x);
    uv.y += time * speed;
    uv.y = fract(uv.y);

    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);
    gl_FragColor = o;
  }
}%

CCProgram vs_light %{

  precision highp float;

  #include <cc-global>

  in vec3 a_position;

  in mediump vec2 a_uv0;
  out mediump vec2 v_uv0;

  in vec4 a_color;
  out vec4 v_color;

  //光照相关
  out vec3 v_pos;
  out vec3 v_normal;

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    v_pos = (cc_matWorld * pos).xyz;
    #else
    pos = cc_matViewProj * pos;
    v_pos = pos.xyz;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_normal = vec3(0, 0, 1);
    gl_Position = pos;
  }

}%

CCProgram fs_light %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;
  in vec3 v_pos;
  in vec3 v_normal; 

  uniform Time {
    float time;
  };

  uniform Speed {
    float speed;
  };

  uniform Light{
    vec4 lightColor;
    vec4 lightPos;
    vec4 ambientLight;
    float shininess;
  };

  uniform sampler2D texture;
  in mediump vec2 v_uv0;

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 uv = v_uv0.xy;
    uv.x += time * speed;
    uv.x = fract(uv.x);
    uv.y += time * speed;
    uv.y = fract(uv.y);

    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif

    vec3 viewPos = cc_cameraPos.xyz;

    // 环境光
    vec3 ambient = ambientLight.rgb;

    // 
    vec3 norm = normalize(v_normal);
    vec3 lightDir = normalize(lightPos.xyz - v_pos);

    // 漫反射
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor.rgb;

    // phong-specular
    // vec3 viewDir = normalize(viewPos - v_pos);
    // vec3 reflectDir = reflect(-lightDir, norm);
    // float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    // vec3 specular = spec * lightColor.rgb;

    // blint-phong
    vec3 viewDir    = normalize(viewPos - v_pos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), shininess);
    vec3 specular = lightColor.rgb * spec;

    o.rgb = (ambient + diffuse + specular) * o.rgb;

    o *= v_color;

    ALPHA_TEST(o);
    gl_FragColor = o;
  }
}%