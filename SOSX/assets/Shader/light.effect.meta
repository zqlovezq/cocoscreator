{
  "ver": "1.0.27",
  "uuid": "18940b21-5cc5-41f5-a59d-ad6397845e17",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_pos = (cc_matWorld * pos).xyz;\n  #else\n  pos = cc_matViewProj * pos;\n  v_pos = pos.xyz;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_normal = vec3(0, 0, 1);\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n#if CC_NUM_LIGHTS > 0\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nuniform vec4 cc_cameraPos;\nvarying vec4 v_color;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 lightColor;\nuniform vec4 lightPos;\nuniform vec4 ambientLight;\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n  #endif\n  s.normal = v_normal;\n  s.position = v_pos;\n  vec3 viewPos = cc_cameraPos.xyz;\n  s.viewDirection = normalize(viewPos - v_pos);\n  s.glossiness = glossiness;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  Lighting result;\n  result.diffuse += ambient(s, ambientLight);\n  LightInfo info = computePointLighting(s.position, lightPos, lightColor);\n  Lighting resultPoint = brdf(s, info);\n  result.diffuse += resultPoint.diffuse;\n  result.specular += resultPoint.specular;\n  vec4 color = composePhongShading(result, s);\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  o *= color;\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec3 v_pos;\nout vec3 v_normal;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_pos = (cc_matWorld * pos).xyz;\n  #else\n  pos = cc_matViewProj * pos;\n  v_pos = pos.xyz;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_normal = vec3(0, 0, 1);\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec3 v_pos;\nin vec3 v_normal;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform PhongFrag {\n  vec4 lightColor;\n  vec4 lightPos;\n  vec4 ambientLight;\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n  #endif\n  s.normal = v_normal;\n  s.position = v_pos;\n  vec3 viewPos = cc_cameraPos.xyz;\n  s.viewDirection = normalize(viewPos - v_pos);\n  s.glossiness = glossiness;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  Lighting result;\n  result.diffuse += ambient(s, ambientLight);\n  LightInfo info = computePointLighting(s.position, lightPos, lightColor);\n  Lighting resultPoint = brdf(s, info);\n  result.diffuse += resultPoint.diffuse;\n  result.specular += resultPoint.specular;\n  vec4 color = composePhongShading(result, s);\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  o *= color;\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}