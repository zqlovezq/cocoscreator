{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/rareBook/RareBookData.ts"],"names":["_decorator","error","log","RareBookInfo","RoleData","tab","ItemData","RareBookSlotInfo","RareBookSerieInfo","RedMgr","RedDotType","RareBookControl","EventMgr","LocalEvent","Func","ccclass","property","RareBookData","bookMap","bookSerieMap","bookLevelMap","bookStarMap","bookAdvanceMap","bookContainerMap","bookBaseMap","bookFragmentMap","bookSerieInfoMap","bookSerieGroupMap","bookDicTabMap","_powerScore","bookCollectRedPointId","ins","_instance","purge","initBookData","Map","data","book","powerScore","list","equipList","maxStarMap","starTabs","getData","BookStarTable","key","booId","BookId","has","set","Level","get","info","merge","itemId","maxStar","tables","BookTable","Id","initItemId","tabs","BookSeriesTable","value","GroupId","seriesData","id","initContainerMap","refreshEvent","Weapon_Job_Archer","Weapon_Job_Assassin","Weapon_Job_Priest","Weapon_Job_Caster","Weapon_Job_Warrior","BooK_Equip","Book_Job","updateBookCollectRedPoint","Book_collect","Weapon_recovery","initBookLevelMap","BookLevelTable","str","Aptitude","Class","initBookStarMap","initBookAdvanceMap","BookDictionary","t","k2","PhaseThreeBook","PhaseTwoBook","PhaseOneBook","getBookInfoByItemId","bookTable","bookSlots","BookSlotTable","table","bookSlotTable","push","container","containerList","c","heroClass","slotData","i","length","bookId","Number","bookInfo","getBookInfoById","isWear","initBookFragmentMap","BookFragmentTable","num","addBooks","books","HeroAptitude","HeroAptitude_SR","refreshfTujianRedPoint","updateBook","update","getBookLevelTable","aptitude","level","getBoolStarTable","star","values","Array","from","find","a","isWearByItemId","getBookInfos","isSort","sort","b","isRedPoint","isLock","getBookSerieMap","getSerieTableByBookId","getSerieTableByGroupId","groupId","getSerieInfoById","getBookAdvanceId","getBookDicTabByHeroClass","getExchangBookFragments","items","forEach","isMaxStar","fragmentId","getBookFragmentByBookItemId","itemInfo","getByItemId","getContainerMap","getBookSlotsByHeroClass","getCanBookInfosByHeroClass","getBaseBookInfoByHeroClass","bookItemId","updateBookSeriesData","datas","updateSlotInfo","slotIndex","cons","getBookInfosByHeroClass","getIsPhaseThreeBook","updateBookCanUpLevelAndStar","updateCanStudy","updateCanUpStar","emitLocal","updateBookRedPoint","seriesTable","BookSeriesTableById","getValue","count","isRecord","getItem"],"mappings":"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","sourcesContent":["import { _decorator, Component, error, log, Node, ValueType } from 'cc';\r\nimport { IClear } from '../../../framework/base/IAbs';\r\nimport { RareBookInfo } from './RareBookInfo';\r\nimport { RoleData } from '../role/RoleData';\r\nimport { tab } from '../../../Table/table_gen';\r\nimport { ItemData } from '../item/ItemData';\r\nimport { RareBookSlotInfo } from './RareBookSlotInfo';\r\nimport { proto } from 'client_protocol';\r\nimport { RareBookSerieInfo } from './RareBookSerieInfo';\r\nimport { Long } from 'protobufjs';\r\nimport { RedMgr } from '../../mgr/RedMgr';\r\nimport { RedDotType } from '../../red/RedDotType';\r\nimport { RareBookControl } from './RareBookControl';\r\nimport { EventMgr } from '../../mgr/EventMgr';\r\nimport { LocalEvent } from '../../define/LocalEvent';\r\nimport { Func } from '../../utils/Func';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * \r\n * RareBookData\r\n * zhudingchao\r\n * Wed May 22 2024 15:26:54 GMT+0800 (中国标准时间)\r\n * db://assets/scripts/logic/model/rareBook/RareBookData.ts\r\n *\r\n */\r\n\r\n@ccclass('RareBookData')\r\nexport class RareBookData implements IClear {\r\n    private static _instance: RareBookData;\r\n    public static get ins() {\r\n        if (null == this._instance) {\r\n            this._instance = new RareBookData();\r\n        }\r\n        return this._instance;\r\n    }\r\n    private bookMap: Map<number, RareBookInfo>;\r\n    private bookSerieMap: Map<number, tab.BookSeriesTable>;\r\n    private bookLevelMap: Map<string, tab.BookLevelTable>;\r\n    private bookStarMap: Map<string, tab.BookStarTable>;\r\n    private bookAdvanceMap: Map<number, number>;\r\n    private bookContainerMap: Map<number, Array<RareBookSlotInfo>>;\r\n    private bookBaseMap: Map<tab.HeroClass, RareBookInfo>;\r\n    private bookFragmentMap: Map<number, tab.BookFragmentTable>;\r\n    private bookSerieInfoMap: Map<number, RareBookSerieInfo>;\r\n    private bookSerieGroupMap: Map<number, tab.BookSeriesTable>;\r\n    private bookDicTabMap: Map<tab.HeroClass, tab.BookDictionary>;\r\n    private _powerScore: number = 0;\r\n\r\n    public bookCollectRedPointId: string = \"\";\r\n    purge(): void {\r\n\r\n    }\r\n    initBookData() {\r\n        this.bookMap = new Map();\r\n        let data = RoleData.ins.book;\r\n        log(\"武器==\",data);\r\n        this.powerScore = data.powerScore;\r\n        let list = data.equipList;\r\n        let maxStarMap: Map<number, number> = new Map();\r\n        let starTabs = tab.getData().BookStarTable;\r\n        for (let key in starTabs) {\r\n            let booId = starTabs[key].BookId;\r\n            if (!maxStarMap.has(booId)) {\r\n                maxStarMap.set(booId, starTabs[key].Level)\r\n            } else {\r\n                if (maxStarMap.get(booId) < starTabs[key].Level) {\r\n                    maxStarMap.set(booId, starTabs[key].Level)\r\n                }\r\n            }\r\n        }\r\n        for (let key in list) {\r\n            let info = new RareBookInfo();\r\n            info.merge(list[key]);\r\n            this.bookMap.set(info.itemId, info);\r\n            info.maxStar = maxStarMap.get(info.itemId);\r\n        }\r\n        let tables = tab.getData().BookTable;\r\n        for (let key in tables) {\r\n            if (!this.bookMap.has(tables[key].Id)) {\r\n                let info = new RareBookInfo();\r\n                info.initItemId(tables[key].Id);\r\n                this.bookMap.set(info.itemId, info);\r\n                info.maxStar = maxStarMap.get(info.itemId);\r\n            }\r\n        }\r\n        this.bookSerieMap = new Map();\r\n        this.bookSerieGroupMap = new Map();\r\n        let tabs = tab.getData().BookSeriesTable;\r\n        for (let value of tabs) {\r\n            if (value.Id == value.GroupId)\r\n                for (let itemId of value.BookId) {\r\n                    this.bookSerieMap.set(itemId, value);\r\n                }\r\n            this.bookSerieGroupMap.set(value.GroupId, value);\r\n        }\r\n\r\n        this.bookSerieInfoMap = new Map();\r\n        let seriesData = data.seriesData;\r\n        for (let key in seriesData) {\r\n            let info = new RareBookSerieInfo();\r\n            info.merge(seriesData[key]);\r\n            this.bookSerieInfoMap.set(info.id, info);\r\n        }\r\n        this.initContainerMap();\r\n        RedMgr.refreshEvent(RedDotType.Weapon_Job_Archer);\r\n        RedMgr.refreshEvent(RedDotType.Weapon_Job_Assassin);\r\n        RedMgr.refreshEvent(RedDotType.Weapon_Job_Priest);\r\n        RedMgr.refreshEvent(RedDotType.Weapon_Job_Caster);\r\n        RedMgr.refreshEvent(RedDotType.Weapon_Job_Warrior);\r\n        RedMgr.refreshEvent(RedDotType.BooK_Equip);\r\n\r\n        RedMgr.refreshEvent(RedDotType.Book_Job);\r\n        this.updateBookCollectRedPoint();\r\n        RedMgr.refreshEvent(RedDotType.Book_collect);\r\n        RedMgr.refreshEvent(RedDotType.Weapon_recovery);\r\n\r\n\r\n    }\r\n    private initBookLevelMap() {\r\n        this.bookLevelMap = new Map();\r\n        let tabs = tab.getData().BookLevelTable;\r\n        for (let key in tabs) {\r\n            let str = tabs[key].Aptitude + \"_\" + tabs[key].Class + \"_\" + tabs[key].Level;\r\n            this.bookLevelMap.set(str, tabs[key]);\r\n        }\r\n\r\n\r\n    }\r\n    private initBookStarMap() {\r\n        this.bookStarMap = new Map();\r\n        let tabs = tab.getData().BookStarTable;\r\n        for (let key in tabs) {\r\n            let str = tabs[key].BookId + \"_\" + tabs[key].Level;\r\n            this.bookStarMap.set(str, tabs[key]);\r\n        }\r\n\r\n    }\r\n    private initBookAdvanceMap() {\r\n        this.bookAdvanceMap = new Map();\r\n        this.bookBaseMap = new Map();\r\n        this.bookDicTabMap = new Map();\r\n        let tabs = tab.getData().BookDictionary;\r\n        for (let key in tabs) {\r\n            let t = tabs[key];\r\n            for (let k2 in t.PhaseThreeBook) {\r\n                this.bookAdvanceMap.set(t.PhaseThreeBook[k2], t.PhaseTwoBook[k2]);\r\n                this.bookAdvanceMap.set(t.PhaseTwoBook[k2], t.PhaseOneBook);\r\n            }\r\n            let info = this.getBookInfoByItemId(t.PhaseOneBook);\r\n            this.bookBaseMap.set(info.bookTable.Class, info);\r\n            this.bookDicTabMap.set(info.bookTable.Class, t);\r\n        }\r\n    }\r\n    private initContainerMap() {\r\n        this.bookContainerMap = new Map();\r\n        let bookSlots = tab.getData().BookSlotTable;\r\n        for (let key in bookSlots) {\r\n            let table = bookSlots[key];\r\n            let list = this.bookContainerMap.get(table.Class);\r\n            if (!list) {\r\n                list = [];\r\n                this.bookContainerMap.set(table.Class, list);\r\n            }\r\n            let info = new RareBookSlotInfo();\r\n            info.bookSlotTable = table;\r\n            list.push(info);\r\n        }\r\n        // this.bookContainerMap.forEach((value) => {\r\n        //     value.sort((a, b) => {\r\n        //         return a.bookSlotTable.Slot - b.bookSlotTable.Slot;\r\n        //     })\r\n        // })\r\n        let container = RoleData.ins.book.containerList;\r\n        for (let key in container) {\r\n            let c = container[key].heroClass;\r\n            let list = this.bookContainerMap.get(c);\r\n            let slotData = container[key].slotData;\r\n            for (let i: number = 1; i < slotData.length; i++) {\r\n                list[i - 1].bookId = slotData[i].bookId;\r\n                if (Number(slotData[i].bookId) != 0) {\r\n                    let bookInfo = this.getBookInfoById(slotData[i].bookId);\r\n                    if (bookInfo) {\r\n                        bookInfo.isWear = true;\r\n                        list[i - 1].bookInfo = bookInfo;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private initBookFragmentMap() {\r\n        this.bookFragmentMap = new Map();\r\n        let tables = tab.getData().BookFragmentTable;\r\n        for (let key in tables) {\r\n            this.bookFragmentMap.set(tables[key].BookId, tables[key]);\r\n        }\r\n    }\r\n    public set powerScore(num: number) {\r\n        this._powerScore = num;\r\n    }\r\n    public get powerScore() {\r\n        return this._powerScore;\r\n    }\r\n\r\n    public addBooks(books: proto.BookData[]) {\r\n     \r\n        for (let key in books) {\r\n            // let info=new RareBookInfo();\r\n            let info = this.bookMap.get(books[key].itemId);\r\n            info.merge(books[key]);\r\n            if (info.bookTable.Aptitude == tab.HeroAptitude.HeroAptitude_SR) {\r\n                RareBookControl.ins.refreshfTujianRedPoint(info.bookTable.Class);\r\n            }\r\n            RedMgr.refreshEvent(RedDotType.Book_Job);\r\n            if(info.maxStar){\r\n                RedMgr.refreshEvent(RedDotType.Weapon_recovery);\r\n            }\r\n        }\r\n        RedMgr.refreshEvent(RedDotType.BooK_Equip);\r\n\r\n    }\r\n    public updateBook(book: proto.BookData) {\r\n        let info = this.bookMap.get(book.itemId);\r\n        if (info) {\r\n            info.update(book);\r\n            if(info.maxStar){\r\n                RedMgr.refreshEvent(RedDotType.Weapon_recovery);\r\n            }\r\n        } else {\r\n            error(\"更新秘籍错误==\", book)\r\n        }\r\n\r\n    }\r\n    getBookLevelTable(aptitude: number, heroClass: number, level: number) {\r\n        if (!this.bookLevelMap) {\r\n            this.initBookLevelMap();\r\n        }\r\n        let key = aptitude + \"_\" + heroClass + \"_\" + level;\r\n        return this.bookLevelMap.get(key);\r\n    }\r\n    getBoolStarTable(bookId: number, star: number) {\r\n        if (!this.bookStarMap) {\r\n            this.initBookStarMap();\r\n        }\r\n        let key = bookId + \"_\" + star;\r\n        return this.bookStarMap.get(key);\r\n\r\n    }\r\n    getBookInfoById(id: number | Long) {\r\n        id = Number(id);\r\n        let values = Array.from(this.bookMap.values());\r\n        let info = values.find(a => Number(a.id) == id);\r\n        return info;\r\n    }\r\n    getBookInfoByItemId(itemId: number) {\r\n        // let values=Array.from(this.bookMap.values());\r\n        // let info=values.find(a=>a.itemId==itemId);\r\n        // if(!info){\r\n        //     info=new RareBookInfo();\r\n        //     info.initItemId(itemId);\r\n        // }\r\n        if(!itemId){\r\n            return;\r\n        }\r\n        if (this.bookMap == null) {\r\n            this.bookMap = new Map();\r\n        }\r\n\r\n        if (this.bookMap) {\r\n            if (this.bookMap.has(itemId)) {\r\n                return this.bookMap.get(itemId)\r\n            }\r\n            let info = new RareBookInfo();\r\n            info.initItemId(itemId);\r\n            this.bookMap.set(itemId, info);\r\n            return info\r\n        }\r\n        return this.bookMap && this.bookMap.get(itemId);\r\n    }\r\n    /** 根据道具id查找是否已穿戴 */\r\n    isWearByItemId(itemId: number) {\r\n        let info = this.getBookInfoByItemId(itemId)\r\n        if (info) {\r\n            return info.isWear;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getBookInfos(isSort: boolean = false) {\r\n        let values = Array.from(this.bookMap.values());\r\n        if (isSort) {\r\n            values.sort((a, b) => {\r\n                if (a.isRedPoint && b.isRedPoint) {\r\n                    return b.bookTable.Aptitude - a.bookTable.Aptitude;\r\n                }\r\n                if (a.isRedPoint) {\r\n                    return -1;\r\n                }\r\n                if (b.isRedPoint) {\r\n                    return 1;\r\n                }\r\n                if (a.isLock && b.isLock) {\r\n                    return b.bookTable.Aptitude - a.bookTable.Aptitude;\r\n                }\r\n                if (a.isLock) {\r\n                    return -1;\r\n                }\r\n                if (b.isLock) {\r\n                    return 1;\r\n                }\r\n                return b.bookTable.Aptitude - a.bookTable.Aptitude;\r\n            })\r\n        }\r\n\r\n        return values;\r\n    }\r\n    getBookSerieMap() {\r\n        return this.bookSerieMap;\r\n    }\r\n    getSerieTableByBookId(bookId: number) {\r\n        return this.bookSerieMap.get(bookId);\r\n    }\r\n    getSerieTableByGroupId(groupId: number) {\r\n        return this.bookSerieGroupMap.get(groupId);\r\n    }\r\n    getSerieInfoById(id: number) {\r\n        return this.bookSerieInfoMap.get(id);\r\n    }\r\n    getBookAdvanceId(bookId: number) {\r\n        if (!this.bookAdvanceMap) {\r\n            this.initBookAdvanceMap();\r\n        }\r\n        return this.bookAdvanceMap.get(bookId);\r\n    }\r\n    getBookDicTabByHeroClass(heroClass: tab.HeroClass) {\r\n        if (!this.bookDicTabMap) {\r\n            this.initBookAdvanceMap();\r\n        }\r\n        return this.bookDicTabMap.get(heroClass);\r\n    }\r\n    /**\r\n     * 获得可以转换的秘籍碎片\r\n     */\r\n    getExchangBookFragments() {\r\n        let items = [];\r\n        this.bookMap.forEach((value) => {\r\n            if (value.isMaxStar()) {\r\n                let fragmentId = this.getBookFragmentByBookItemId(value.itemId).Id;\r\n                let itemInfo = ItemData.ins.getByItemId(fragmentId);\r\n                if (itemInfo && Number(itemInfo.num) > 0) {\r\n                    items.push(itemInfo);\r\n                }\r\n\r\n            }\r\n        })\r\n        return items;\r\n    }\r\n    getContainerMap() {\r\n        return this.bookContainerMap;\r\n    }\r\n    getBookSlotsByHeroClass(heroClass: number) {\r\n        return this.bookContainerMap.get(heroClass);\r\n    }\r\n    getCanBookInfosByHeroClass(heroClass: number) {\r\n        let list: Array<RareBookInfo> = [];\r\n        this.bookMap.forEach((value) => {\r\n            if (value.isLock && value.bookTable.Aptitude >= tab.HeroAptitude.HeroAptitude_SR && !value.isWear && value.bookTable.Class == heroClass) {\r\n                list.push(value);\r\n            }\r\n        })\r\n        return list;\r\n    }\r\n    getBaseBookInfoByHeroClass(heroClass: number) {\r\n        if (!this.bookBaseMap) {\r\n            this.initBookAdvanceMap();\r\n        }\r\n        return this.bookBaseMap.get(heroClass);\r\n    }\r\n    getBookFragmentByBookItemId(bookItemId: number) {\r\n        if (!this.bookFragmentMap) {\r\n            this.initBookFragmentMap();\r\n        }\r\n        return this.bookFragmentMap.get(bookItemId);\r\n    }\r\n    updateBookSeriesData(datas: Array<proto.BookSeriesData>) {\r\n        for (let key in datas) {\r\n            let info = this.getSerieInfoById(datas[key].id);\r\n            if (info) {\r\n                info.merge(datas[key]);\r\n            } else {\r\n                info = new RareBookSerieInfo();\r\n                info.merge(datas[key]);\r\n                this.bookSerieInfoMap.set(info.id, info);\r\n            }\r\n        }\r\n        this.updateBookCollectRedPoint();\r\n        RedMgr.refreshEvent(RedDotType.Book_collect);\r\n    }\r\n    updateSlotInfo(bookId: number, slotIndex: number, isWear: boolean = true) {\r\n        let info = this.getBookInfoById(bookId);\r\n        if (info) {\r\n            let c = info.bookTable.Class;\r\n            let cons = this.getBookSlotsByHeroClass(c);\r\n            if (isWear) {\r\n                cons[slotIndex - 1].bookId = bookId;\r\n                cons[slotIndex - 1].bookInfo = info;\r\n                info.isWear = true;\r\n            } else {\r\n                cons[slotIndex - 1].bookId = 0;\r\n                cons[slotIndex - 1].bookInfo = null;\r\n                info.isWear = false;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    // 通过英雄类型获得已拥有的武器列表\r\n    getBookInfosByHeroClass(heroClass: number): RareBookInfo[] {\r\n        let list: RareBookInfo[] = [];\r\n        this.bookMap.forEach((book) => {\r\n            if (book.bookTable.Class == heroClass && book.isLock) {\r\n                list.push(book);\r\n            }\r\n        })\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * 是否是三阶秘籍\r\n     */\r\n    getIsPhaseThreeBook() {\r\n\r\n    }\r\n    /**刷新秘籍是否可以升级和升星 */\r\n    updateBookCanUpLevelAndStar() {\r\n        if (!this.bookMap) {\r\n            return;\r\n        }\r\n\r\n        this.bookMap.forEach((book) => {\r\n            book.updateCanStudy();\r\n            book.updateCanUpStar();\r\n\r\n        })\r\n\r\n        RedMgr.refreshEvent(RedDotType.Book_Job);\r\n        EventMgr.emitLocal(LocalEvent.updateBookRedPoint);\r\n\r\n    }\r\n    /**\r\n     * 刷新并记录当前装备收藏红点\r\n     */\r\n    updateBookCollectRedPoint() {\r\n        this.bookCollectRedPointId = \"\"\r\n        this.bookSerieInfoMap.forEach((value) => {\r\n            let seriesTable = tab.getData().BookSeriesTableById.getValue(value.id);\r\n            if (seriesTable) {\r\n                let level = seriesTable.Level;\r\n                seriesTable == tab.getData().BookSeriesTableById.getValue(seriesTable.GroupId);\r\n                if (seriesTable.BookId.length == value.count) {\r\n                    let key = seriesTable.GroupId + \"_\" + level;\r\n                    let isRecord = Number(Func.getItem(\"RareBook_CollectRed_\" + key))\r\n                    if (!isRecord) {\r\n                        this.bookCollectRedPointId = key;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n}"]}