{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/protobufjs/src/object.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","ReflectionObject","className","util","Root","name","options","isString","TypeError","isObject","parsedOptions","parent","resolved","comment","filename","Object","defineProperties","prototype","root","get","ptr","fullName","path","unshift","join","toJSON","Error","onAdd","remove","_handleAdd","onRemove","_handleRemove","resolve","getOption","undefined","setOption","value","ifNotSet","setParsedOption","propName","opt","find","hasOwnProperty","call","newValue","setProperty","push","newOpt","setOptions","keys","i","length","toString","constructor","_configure","Root_","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './util';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n module.exports = ReflectionObject;\n\n ReflectionObject.className = \"ReflectionObject\";\n\n var util = require(\"./util\");\n\n var Root; // cyclic\n\n /**\n  * Constructs a new reflection object instance.\n  * @classdesc Base class of all reflection objects.\n  * @constructor\n  * @param {string} name Object name\n  * @param {Object.<string,*>} [options] Declared options\n  * @abstract\n  */\n function ReflectionObject(name, options) {\n\n     if (!util.isString(name))\n         throw TypeError(\"name must be a string\");\n\n     if (options && !util.isObject(options))\n         throw TypeError(\"options must be an object\");\n\n     /**\n      * Options.\n      * @type {Object.<string,*>|undefined}\n      */\n     this.options = options; // toJSON\n\n     /**\n      * Parsed Options.\n      * @type {Array.<Object.<string,*>>|undefined}\n      */\n     this.parsedOptions = null;\n\n     /**\n      * Unique name within its namespace.\n      * @type {string}\n      */\n     this.name = name;\n\n     /**\n      * Parent namespace.\n      * @type {Namespace|null}\n      */\n     this.parent = null;\n\n     /**\n      * Whether already resolved or not.\n      * @type {boolean}\n      */\n     this.resolved = false;\n\n     /**\n      * Comment text, if any.\n      * @type {string|null}\n      */\n     this.comment = null;\n\n     /**\n      * Defining file name.\n      * @type {string|null}\n      */\n     this.filename = null;\n }\n\n Object.defineProperties(ReflectionObject.prototype, {\n\n     /**\n      * Reference to the root namespace.\n      * @name ReflectionObject#root\n      * @type {Root}\n      * @readonly\n      */\n     root: {\n         get: function() {\n             var ptr = this;\n             while (ptr.parent !== null)\n                 ptr = ptr.parent;\n             return ptr;\n         }\n     },\n\n     /**\n      * Full name including leading dot.\n      * @name ReflectionObject#fullName\n      * @type {string}\n      * @readonly\n      */\n     fullName: {\n         get: function() {\n             var path = [ this.name ],\n                 ptr = this.parent;\n             while (ptr) {\n                 path.unshift(ptr.name);\n                 ptr = ptr.parent;\n             }\n             return path.join(\".\");\n         }\n     }\n });\n\n /**\n  * Converts this reflection object to its descriptor representation.\n  * @returns {Object.<string,*>} Descriptor\n  * @abstract\n  */\n ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n     throw Error(); // not implemented, shouldn't happen\n };\n\n /**\n  * Called when this object is added to a parent.\n  * @param {ReflectionObject} parent Parent added to\n  * @returns {undefined}\n  */\n ReflectionObject.prototype.onAdd = function onAdd(parent) {\n     if (this.parent && this.parent !== parent)\n         this.parent.remove(this);\n     this.parent = parent;\n     this.resolved = false;\n     var root = parent.root;\n     if (root instanceof Root)\n         root._handleAdd(this);\n };\n\n /**\n  * Called when this object is removed from a parent.\n  * @param {ReflectionObject} parent Parent removed from\n  * @returns {undefined}\n  */\n ReflectionObject.prototype.onRemove = function onRemove(parent) {\n     var root = parent.root;\n     if (root instanceof Root)\n         root._handleRemove(this);\n     this.parent = null;\n     this.resolved = false;\n };\n\n /**\n  * Resolves this objects type references.\n  * @returns {ReflectionObject} `this`\n  */\n ReflectionObject.prototype.resolve = function resolve() {\n     if (this.resolved)\n         return this;\n     if (this.root instanceof Root)\n         this.resolved = true; // only if part of a root\n     return this;\n };\n\n /**\n  * Gets an option value.\n  * @param {string} name Option name\n  * @returns {*} Option value or `undefined` if not set\n  */\n ReflectionObject.prototype.getOption = function getOption(name) {\n     if (this.options)\n         return this.options[name];\n     return undefined;\n };\n\n /**\n  * Sets an option.\n  * @param {string} name Option name\n  * @param {*} value Option value\n  * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n  * @returns {ReflectionObject} `this`\n  */\n ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n     if (!ifNotSet || !this.options || this.options[name] === undefined)\n         (this.options || (this.options = {}))[name] = value;\n     return this;\n };\n\n /**\n  * Sets a parsed option.\n  * @param {string} name parsed Option name\n  * @param {*} value Option value\n  * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n  * @returns {ReflectionObject} `this`\n  */\n ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n     if (!this.parsedOptions) {\n         this.parsedOptions = [];\n     }\n     var parsedOptions = this.parsedOptions;\n     if (propName) {\n         // If setting a sub property of an option then try to merge it\n         // with an existing option\n         var opt = parsedOptions.find(function (opt) {\n             return Object.prototype.hasOwnProperty.call(opt, name);\n         });\n         if (opt) {\n             // If we found an existing option - just merge the property value\n             var newValue = opt[name];\n             util.setProperty(newValue, propName, value);\n         } else {\n             // otherwise, create a new option, set it's property and add it to the list\n             opt = {};\n             opt[name] = util.setProperty({}, propName, value);\n             parsedOptions.push(opt);\n         }\n     } else {\n         // Always create a new option when setting the value of the option itself\n         var newOpt = {};\n         newOpt[name] = value;\n         parsedOptions.push(newOpt);\n     }\n     return this;\n };\n\n /**\n  * Sets multiple options.\n  * @param {Object.<string,*>} options Options to set\n  * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n  * @returns {ReflectionObject} `this`\n  */\n ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n     if (options)\n         for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n             this.setOption(keys[i], options[keys[i]], ifNotSet);\n     return this;\n };\n\n /**\n  * Converts this instance to its string representation.\n  * @returns {string} Class name[, space, full name]\n  */\n ReflectionObject.prototype.toString = function toString() {\n     var className = this.constructor.className,\n         fullName  = this.fullName;\n     if (fullName.length)\n         return className + \" \" + fullName;\n     return className;\n };\n\n // Sets up cyclic dependencies (called in index-light)\n ReflectionObject._configure = function(Root_) {\n     Root = Root_;\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './util': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}