{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/framework/collision/Maths.ts"],"names":["Line","Vector2","RVOMath","MathAngle","Vec2","Vec3","direction","point","constructor","x","y","multiply","vector1","vector2","multiply2","scalar","vector","division","subtract","addition","squaredDistance","pointA","pointB","dx","dy","abs","sqrt","absSq","normalize","det","distSqPointLineSegment","vector3","r","fabs","Math","leftOf","a","b","c","sqr","transfromFloat","value","floor","RVO_EPSILON","RVO_POSITIVEINFINITY","tempPos","angleToRadian","angle","PI","radianToAngle","radian","angleToDirection","out","radianToDirection","dire","cos","sin","posToAngle","tmp","directionToAngle","atan2","rotatePoint","radians","isAngleBetween","target","getAverageEmitAnglesAngle","totalAngle","count","range","list","isNaN","push","index","getAverageEmitAnglesAngle1","getForwardDirection","getAverageEmitAnglesAngle2"],"mappings":"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","sourcesContent":["import { Vec2, Vec3, misc, v2 } from \"cc\";\r\n\r\nexport class Line {\r\n    public direction: Vector2;\r\n    public point: Vector2;\r\n}\r\n\r\nexport class Vector2 {\r\n    public x: number;\r\n    public y: number;\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public static multiply(vector1: Vector2, vector2: Vector2) {\r\n        return vector1.x * vector2.x + vector1.y * vector2.y;\r\n    }\r\n\r\n\r\n    public static multiply2(scalar: number, vector: Vector2) {\r\n        return new Vector2(vector.x * scalar, vector.y * scalar);\r\n    }\r\n\r\n\r\n    public static division(vector: Vector2, scalar: number) {\r\n        if (scalar == 0) scalar = 1;\r\n        return new Vector2(vector.x / scalar, vector.y / scalar);\r\n    }\r\n\r\n\r\n    public static subtract(vector1: Vector2, vector2: Vector2) {\r\n        return new Vector2(vector1.x - vector2.x, vector1.y - vector2.y)\r\n    }\r\n\r\n\r\n    public static addition(vector1: Vector2, vector2: Vector2) {\r\n        return new Vector2(vector1.x + vector2.x, vector1.y + vector2.y);\r\n    }\r\n    public static squaredDistance(pointA: Vec3, pointB: Vec3) {\r\n        let dx = pointB.x - pointA.x;\r\n        let dy = pointB.y - pointA.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n}\r\n\r\n\r\nexport class RVOMath {\r\n    public static readonly RVO_EPSILON = 0.00001;\r\n    public static readonly RVO_POSITIVEINFINITY = 10000000000000;\r\n\r\n    public static abs(vector: Vector2) {\r\n        return this.sqrt(this.absSq(vector));\r\n    }\r\n\r\n    public static absSq(vector: Vector2) {\r\n        return Vector2.multiply(vector, vector);\r\n    }\r\n\r\n    public static normalize(vector: Vector2) {\r\n        return Vector2.division(vector, this.abs(vector));\r\n    }\r\n\r\n    public static det(vector1: Vector2, vector2: Vector2) {\r\n        return vector1.x * vector2.y - vector1.y * vector2.x;\r\n    }\r\n\r\n    public static distSqPointLineSegment(vector1: Vector2, vector2: Vector2, vector3: Vector2) {\r\n        let r = Vector2.multiply(Vector2.subtract(vector3, vector1), Vector2.subtract(vector2, vector1)) / this.absSq(Vector2.subtract(vector2, vector1));\r\n        if (r < 0) {\r\n            return this.absSq(Vector2.subtract(vector3, vector1));\r\n        }\r\n        if (r > 1) {\r\n            return this.absSq(Vector2.subtract(vector3, vector2));\r\n        }\r\n        return this.absSq(Vector2.subtract(vector3, Vector2.addition(vector1, Vector2.multiply2(r, Vector2.subtract(vector2, vector1)))));\r\n    }\r\n\r\n    public static fabs(scalar: number) {\r\n        return Math.abs(scalar);\r\n    }\r\n\r\n    public static leftOf(a: Vector2, b: Vector2, c: Vector2) {\r\n        return this.det(Vector2.subtract(a, c), Vector2.subtract(b, a));\r\n    }\r\n\r\n    public static sqr(scalar: number) {\r\n        return scalar * scalar;\r\n    }\r\n\r\n    public static sqrt(scalar: number) {\r\n        return Math.sqrt(scalar);\r\n    }\r\n\r\n    public static transfromFloat(value: number) {\r\n        return Math.floor(value * 10) / 10;\r\n    }\r\n}\r\n\r\nconst tempPos = new Vec2();\r\nexport class MathAngle {\r\n    //角度转弧度\r\n    static angleToRadian(angle: number) {\r\n        return angle * Math.PI / 180\r\n    }\r\n\r\n    //弧度转角度（0-360）\r\n    static radianToAngle(radian: number) {\r\n        let angle = Math.floor(radian / Math.PI * 180)\r\n        angle = (angle >= 0 ? angle : angle + 360)\r\n        return angle\r\n    }\r\n\r\n    //角度转方向\r\n    static angleToDirection(angle: number, out?: Vec3) {\r\n        return this.radianToDirection(this.angleToRadian(angle), out)\r\n    }\r\n\r\n    //弧度转方向\r\n    static radianToDirection(radian: number, out?: Vec3) {\r\n        let dire = out || new Vec3()\r\n        dire.x = Math.cos(radian);\r\n        dire.y = Math.sin(radian);\r\n        return dire\r\n    }\r\n\r\n\r\n    //b-a的角度\r\n    static posToAngle(a: Vec2 | Vec3, b: Vec2 | Vec3) {\r\n\r\n        let tmp = Vec2.subtract(tempPos, b, a)\r\n        return this.directionToAngle(tmp)\r\n    }\r\n\r\n    static directionToAngle(direction: Vec3 | Vec2) {\r\n        return this.radianToAngle(Math.atan2(direction.y, direction.x))\r\n        // return Math.floor(misc.radiansToDegrees(Math.atan2(direction.y, direction.x)))\r\n    }\r\n\r\n    /** 位置旋转 */\r\n    static rotatePoint(point: Vec3, angle: number, out: Vec3): { x: number, y: number } {\r\n        const radians = angle * Math.PI / 180;\r\n        out.x = point.x * Math.cos(radians) - point.y * Math.sin(radians);\r\n        out.y = point.x * Math.sin(radians) + point.y * Math.cos(radians);\r\n        return out\r\n    }\r\n\r\n\r\n    static isAngleBetween(target: number, a: number, b: number): boolean {\r\n        if (target == a || target == b) {\r\n            return true\r\n        }\r\n        // 确保所有角度都在0°到360°之间  \r\n        target = (target + 360) % 360;\r\n        a = (a + 360) % 360;\r\n        b = (b + 360) % 360;\r\n        // 如果b小于a，加上360直到b大于或等于a  \r\n        if (b < a) {\r\n            if (target < b) {\r\n                target += 360;\r\n            }\r\n            b += 360;\r\n        }\r\n        // 现在b大于或等于a，检查目标角度是否在a和b之间  \r\n        return target >= a && target <= b;\r\n    }\r\n\r\n    /**\r\n     * 根据1个角度获取平均发散角度组    如：起始0，在30度分2个，（-15,15）\r\n     * @param angle 角度\r\n     * @param totalAngle 总角度\r\n     * @param count 数量\r\n     * @returns \r\n     */\r\n    static getAverageEmitAnglesAngle(angle: number, totalAngle: number, count: number) {\r\n        angle = (angle + 360) % 360\r\n        let range = totalAngle / (count - 1)\r\n        let list = []\r\n        if (isNaN(range)) {\r\n            list.push(angle)\r\n            return list\r\n        }\r\n        for (let index = 0; index < count; index++) {\r\n            list.push((angle + (index) * range - totalAngle * 0.5) % 360)\r\n        }\r\n        return list\r\n    }\r\n\r\n\r\n    /**\r\n     * 基础角度累加\r\n     * @param angle 角度\r\n     * @param totalAngle 幅度\r\n     * @param count 数量\r\n     * @returns \r\n     */\r\n    static getAverageEmitAnglesAngle1(angle: number, totalAngle: number, count: number): number[] {\r\n        angle = (angle + 360) % 360\r\n        let range = totalAngle / (count - 1)\r\n\r\n        let list = []\r\n        if (isNaN(range)) {\r\n            list.push(angle)\r\n            return list\r\n        }\r\n        for (let index = 0; index < count; index++) {\r\n            list.push(((index) * range + angle) % 360)\r\n        }\r\n\r\n        return list\r\n    }\r\n\r\n    /**\r\n     * 根据1个角度获取平均发散角度组  正向剑\r\n     * @param angle 角度\r\n     * @param totalAngle 总角度\r\n     * @param count 数量\r\n     * @returns \r\n     */\r\n    static getForwardDirection(angle: number, totalAngle: number, count: number) {\r\n        angle = angle\r\n        let range = totalAngle / (count - 1)\r\n        let list = []\r\n        if (isNaN(range)) {\r\n            list.push(angle)\r\n            return list\r\n        }\r\n        for (let index = 0; index < count; index++) {\r\n            list.push((angle + (index) * range - totalAngle * 0.5))\r\n        }\r\n        return list\r\n    }\r\n\r\n\r\n    /**\r\n    * 根据1个角度获取平均发散角度组    如：起始0，在30度分2个，（0,30）\r\n    * @param angle 角度\r\n    * @param totalAngle 总角度\r\n    * @param count 数量\r\n    * @returns \r\n    */\r\n    static getAverageEmitAnglesAngle2(angle: number, totalAngle: number, count: number) {\r\n        angle = (angle + 360) % 360\r\n        let range = totalAngle / (count - 1)\r\n        let list = []\r\n        if (isNaN(range)) {\r\n            list.push(angle)\r\n            return list\r\n        }\r\n        for (let index = 0; index < count; index++) {\r\n            list.push((range * 0.5 + angle + (index) * range - totalAngle * 0.5) % 360)\r\n        }\r\n        return list\r\n    }\r\n\r\n    rotatePoint(point: Vec3, angle: number, out: Vec3): { x: number, y: number } {\r\n        const radians = angle * Math.PI / 180;\r\n        out.x = point.x * Math.cos(radians) - point.y * Math.sin(radians);\r\n        out.y = point.x * Math.sin(radians) + point.y * Math.cos(radians);\r\n        return out\r\n    }\r\n}"]}