{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/mgr/SceneMgr.ts"],"names":["SceneMgr","Director","DynamicAtlasManager","director","sys","AbsMgr","LocalEvent","EventMgr","ResMgr","UIMgr","Loading","Avatar","ItemPoolMgr","FightMsgControl","ScenesName","isLoadingScene","nowName","ins","_instance","getNowSceneName","getScene","name","isLoginScene","isSceneByName","login","isFightScene","fight","init","on","EVENT_BEFORE_SCENE_LAUNCH","console","log","clearViewAndPop","instance","reset","EVENT_AFTER_SCENE_LAUNCH","loadScene","sceneName","onLaunched","err","scene","emitLocal","SceneLoaded","enterFight","create","loading","setTimeout","clear","destory","releaseScene","main","garbageCollect","loadRes","FightResLoadComplete","hide","leaveFight","isTest","toSceneName","preloadScene"],"mappings":"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","sourcesContent":["import { Asset, Director, DynamicAtlasManager, JsonAsset, Material, Node, Prefab, Scene, SpriteAtlas, SpriteFrame, director, resources, settings, sp, sys, url } from \"cc\";\nimport { AbsMgr } from \"../../framework/base/IAbs\";\nimport { LocalEvent } from \"../define/LocalEvent\";\nimport { EventMgr } from \"./EventMgr\";\nimport { ResMgr, loadByResMap } from \"./ResMgr\";\nimport { UIMgr } from \"./UIMgr\";\nimport { tab } from \"../../Table/table_gen\";\nimport { Loading } from \"../model/Loading\";\nimport { ShaderUtil } from \"../utils/ShaderUtil\";\nimport { Avatar } from \"../fight/animation/Avatar\";\nimport { FightData } from \"../fight/data/FightData\";\nimport { ItemControl } from \"../model/item/ItemControl\";\nimport { ItemPoolMgr } from \"../model/item/ItemPoolMgr\";\nimport { FightMsgControl } from \"../fight/FightMsgControl\";\n\nexport enum ScenesName {\n    login = \"LoginScene\",\n    main = \"MainScene\",\n    loading = \"LoadingScene\",\n    fight = \"FightScene\",\n}\n\n/**\n * 场景管理\n */\nexport class SceneMgr extends AbsMgr {\n    private static _instance: SceneMgr;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new SceneMgr();\n        }\n        return this._instance;\n    }\n\n    static getNowSceneName() {\n        return director.getScene() && director.getScene().name || SceneMgr.ins.nowName\n    }\n\n    static isLoginScene() {\n        return SceneMgr.isSceneByName(ScenesName.login)\n    }\n\n    static isFightScene() {\n        return SceneMgr.isSceneByName(ScenesName.fight)\n    }\n\n    static isSceneByName(name: string) {\n        return SceneMgr.getNowSceneName() == name\n    }\n\n\n    isLoadingScene: boolean = false\n\n    nowName: string = \"LoginScene\"\n\n    init(): void {\n        director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, () => {\n            console.log(\"运行新场景之前\", SceneMgr.getNowSceneName())\n            UIMgr.ins.clearViewAndPop()\n            DynamicAtlasManager.instance.reset()\n        }, this)\n        director.on(Director.EVENT_AFTER_SCENE_LAUNCH, () => {\n            console.log(\"运行新场景之后\", SceneMgr.getNowSceneName())\n        }, this)\n    }\n\n    loadScene(sceneName: string, onLaunched?: (error: Error, scene: Scene) => void) {\n        if (this.isLoadingScene) {\n            return;\n        }\n        this.isLoadingScene = true;\n\n        director.loadScene(sceneName, err => {\n            this.isLoadingScene = false;\n            this.nowName = sceneName\n            let scene: Scene = null;\n            if (!err) {\n                scene = director.getScene()\n                scene.name = sceneName;\n                EventMgr.emitLocal(LocalEvent.SceneLoaded, sceneName);\n            }\n            console.log(\"加载场景完成\", sceneName)\n            if (onLaunched) {\n                onLaunched(err, scene);\n            }\n            ResMgr.log()\n        })\n    }\n\n    async enterFight() {\n        Loading.create()\n        console.log(\"开始加载\")\n        this.loadScene(ScenesName.loading, () => {\n            console.log(\"enterFight\")\n            setTimeout(() => {\n                ItemPoolMgr.ins.clear()\n                Avatar.destory()\n                ResMgr.releaseScene(ScenesName.login)\n                ResMgr.releaseScene(ScenesName.main)\n                setTimeout(() => {\n                    sys.garbageCollect()\n                    this.loadScene(ScenesName.fight, () => {\n                        FightMsgControl.ins.loadRes(()=>{\n                             //加载完成\n                             console.log(\"战斗场景加载完成------\")\n                             EventMgr.emitLocal(LocalEvent.FightResLoadComplete);\n                             Loading.hide()\n                        })\n                    })\n                }, 20);\n            }, 20);\n        })\n    }\n\n    async leaveFight(isTest: boolean) {\n        Loading.create()\n        let toSceneName = isTest ? ScenesName.login : ScenesName.main\n        if (SceneMgr.isSceneByName(ScenesName.loading)) {\n            SceneMgr.ins.loadScene(toSceneName, () => {\n                Loading.hide()\n            })\n            return\n        }\n\n        SceneMgr.ins.loadScene(ScenesName.loading, () => {\n            setTimeout(() => {\n                ItemPoolMgr.ins.clear()\n                ResMgr.releaseScene(ScenesName.fight)\n                setTimeout(() => {\n                    sys.garbageCollect()\n                    director.preloadScene(toSceneName, () => {\n                        SceneMgr.ins.loadScene(toSceneName, () => {\n                            Loading.hide()\n                        })\n                    })\n                }, 30)\n            }, 30)\n        })\n    }\n}"]}