{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/scene/FightScene.ts"],"names":["_decorator","Prefab","SceneBase","FightRootControl","FightRootView","UIMgr","PlaySound","FightUIView","LocalEvent","NetStateEvent","EventMgr","SoundUrl","FightData","Global","RoleData","PvpUIView","ccclass","property","FightScene","checkGuide","idx","onLoad","console","log","ins","init","isPvp","defaultPfb","pvpUI","showDefaultPfb","setRoot","rootView","setPvpUIView","defaultView","getComponent","setUIView","BattleBGM","resize","canvasNames","push","start","isDebug","show","viewName","parent","zIndex","stageId","IsGuideFinished","emitLocal","CheckGuide","schedule","dt","update","register","onNetState","CLOSE","onNetClose","onLocal","LoginProcessComplete","on_local_LoginProcessComplete","quitFight","onQuitFight","lateUpdate","pause","isDestory","enterMain"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, instantiate, Node, Prefab, ResolutionPolicy, SpriteFrame, Texture2D, view } from 'cc';\nimport { SceneBase } from './SceneBase';\nimport { FightRootControl } from '../logic/fight/FightRootControl';\nimport { FightRootView } from '../logic/fight/FightRootView';\nimport { UIMgr } from '../logic/mgr/UIMgr';\nimport { PlaySound } from '../logic/utils/Sound';\nimport { FightUIView } from '../logic/fight/FightUIView';\nimport { LocalEvent, NetStateEvent } from '../logic/define/LocalEvent';\nimport { EventMgr } from '../logic/mgr/EventMgr';\nimport Fixed from '../framework/collision/Fixed';\nimport { SoundUrl } from '../Common/script/EnumTypeMgr';\nimport { FightData } from '../logic/fight/data/FightData';\nimport { Global } from '../Global';\nimport { RoleData } from '../logic/model/role/RoleData';\nimport { ResMgr } from '../logic/mgr/ResMgr';\nimport { PvpUIView } from '../logic/fight/pvp/PvpUIView';\nimport { PvpControl } from '../logic/fight/pvp/PvpControl';\nconst { ccclass, property } = _decorator;\n\n@ccclass('FightScene')\nexport class FightScene extends SceneBase {\n    @property(FightRootView)\n    rootView: FightRootView = null\n\n    @property(Prefab)\n    pvpUI: Prefab = null\n    private checkGuide = true;\n    protected onLoad(): void {\n        console.log(\"初始化FightScene\")\n        FightRootControl.ins.init()\n        if (FightData.ins.isPvp){\n            this.defaultPfb = this.pvpUI\n        }\n        super.onLoad()\n        this.showDefaultPfb();\n\n        FightRootControl.ins.setRoot(this.rootView)\n        if(FightData.ins.isPvp){\n            FightRootControl.ins.setPvpUIView(this.defaultView.getComponent(PvpUIView))\n        }else{\n            FightRootControl.ins.setUIView(this.defaultView.getComponent(FightUIView))\n        }\n        PlaySound(SoundUrl.BattleBGM);\n    }\n    resize(canvasNames: string[]){\n        canvasNames.push(\"FightRootView\")\n        super.resize(canvasNames)\n    }\n    idx: number = 0\n    protected start(): void {\n        if (Global.isDebug){\n            UIMgr.ins.show({ viewName: \"FightTestView\", parent: this.defaultView, zIndex: -1 })\n        }\n        \n        /* 新手引导wzq */\n        if (this.checkGuide&&(FightData.ins.stageId===101||FightData.ins.stageId===1)&&!RoleData.ins.IsGuideFinished()) {\n            EventMgr.emitLocal(LocalEvent.CheckGuide)\n            this.checkGuide = false;\n        }\n\n        this.schedule((dt: number) => {\n            FightRootControl.ins.update(dt)\n            this.idx += 1\n            // console.log(this.idx, Fixed.toFixed(dt * 1000))\n        })\n        this.schedule(() => {\n            // console.log(\"====================\")\n            this.idx = 0\n        }, 1)\n    }\n\n    register(): void {\n        EventMgr.onNetState(NetStateEvent.CLOSE, this.onNetClose, this)\n        EventMgr.onLocal(LocalEvent.LoginProcessComplete, this.on_local_LoginProcessComplete, this)\n        EventMgr.onLocal(LocalEvent.quitFight, this.onQuitFight, this)\n    }\n\n    protected lateUpdate(dt: number): void {\n        FightRootControl.ins.lateUpdate(dt)\n    }\n    onNetClose() {\n        FightData.ins.pause = true\n    }\n\n    on_local_LoginProcessComplete() {\n        FightData.ins.pause = false\n        if (FightData.ins.isDestory){\n            FightRootControl.ins.enterMain()\n        }\n    }\n\n    onQuitFight() {\n        FightRootControl.ins.onQuitFight()\n    }\n}\n\n"]}