{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/jianghu/climbingTower/ClimbingTowerRewardPop.ts"],"names":["_decorator","instantiate","Node","Prefab","ViewPop","tab","GameplayViewDataMgr","ClimbingTowerRewardItem","EventMgr","proto","UIMgr","ViewName","ccclass","property","ClimbingTowerRewardPop","items","register","onMsg","Ptl","ReceiveClimbTowerClearStageRewardsRsp","on_s2c_ReceiveClimbTowerClearStageRewardsRsp","onShow","msg","ins","climbTowerInfoMsg","receives","receivedFirstRewardStageIds","passId","getClimbTowerPassLevelId","tables","getData","PveClearStageTable","index","key","StageType","PveStageType","PveStageType_ClimbTower","t","state","StageId","indexOf","Number","length","i","item","itemPrefab","parent","contentNode","com","getComponent","initView","push","updateView","table","error","code","CommonErrorCode","Succeed","show","viewName","CongratulationPop","data","rewards"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab } from 'cc';\r\nimport { ViewPop } from '../../../../framework/base/ViewPop';\r\nimport { tab } from '../../../../Table/table_gen';\r\nimport { GameplayViewDataMgr } from '../GameplayViewDataMgr';\r\nimport { ClimbingTowerRewardItem } from './ClimbingTowerRewardItem';\r\nimport { EventMgr } from '../../../mgr/EventMgr';\r\nimport { proto } from 'client_protocol';\r\nimport { UIMgr } from '../../../mgr/UIMgr';\r\nimport { ViewName } from '../../../define/ViewDefine';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * \r\n * ClimbingTowerRewardPop\r\n * zhudingchao\r\n * Fri Jul 12 2024 17:16:16 GMT+0800 (中国标准时间)\r\n * db://assets/scripts/logic/model/jianghu/climbingTower/ClimbingTowerRewardPop.ts\r\n *\r\n */\r\n\r\n@ccclass('ClimbingTowerRewardPop')\r\nexport class ClimbingTowerRewardPop extends ViewPop {\r\n    @property(Node)\r\n    contentNode: Node = null;\r\n    @property(Prefab)\r\n    itemPrefab: Prefab = null;\r\n    private items: Array<ClimbingTowerRewardItem>;\r\n    register(): void {\r\n        EventMgr.onMsg(proto.Ptl.ReceiveClimbTowerClearStageRewardsRsp, this.on_s2c_ReceiveClimbTowerClearStageRewardsRsp, this);\r\n    }\r\n    onShow(): void {\r\n        let msg = GameplayViewDataMgr.ins.climbTowerInfoMsg;\r\n        let receives = msg.receivedFirstRewardStageIds;\r\n        let passId = GameplayViewDataMgr.ins.getClimbTowerPassLevelId();\r\n        let tables = tab.getData().PveClearStageTable;\r\n        this.items = [];\r\n        let index=0;\r\n        for (let key in tables) {\r\n            if (tables[key].StageType == tab.PveStageType.PveStageType_ClimbTower) {\r\n                let t = tables[key];\r\n                let state = 0;\r\n                if (passId >=t.StageId) {\r\n                    state = receives.indexOf(t.StageId) >= 0 ? 2 : 1\r\n                }\r\n                if(state!=2){\r\n                    index=Number(key);\r\n                    break;\r\n                }\r\n                // let item = instantiate(this.itemPrefab);\r\n                // item.parent = this.contentNode;\r\n                // let com = item.getComponent(ClimbingTowerRewardItem);\r\n                // com.initView(t, state);\r\n                // this.items.push(com);\r\n            }\r\n        }\r\n        if(index+5>tables.length-1){\r\n            index=tables.length-5;\r\n        }\r\n        for(let i=0;i<5;i++){\r\n            let key=index+i;\r\n            if (tables[key].StageType == tab.PveStageType.PveStageType_ClimbTower) {\r\n                let t = tables[key];\r\n                let state = 0;\r\n                if (passId >=t.StageId) {\r\n                    state = receives.indexOf(t.StageId) >= 0 ? 2 : 1\r\n                }\r\n                let item = instantiate(this.itemPrefab);\r\n                item.parent = this.contentNode;\r\n                let com = item.getComponent(ClimbingTowerRewardItem);\r\n                com.initView(t, state);\r\n                this.items.push(com);\r\n            }\r\n        }\r\n    }\r\n    updateView() {\r\n        let msg = GameplayViewDataMgr.ins.climbTowerInfoMsg;\r\n        let receives = msg.receivedFirstRewardStageIds;\r\n        for (let key in this.items) {\r\n            if (this.items[key].state == 1) {\r\n                let state = receives.indexOf(this.items[key].table.StageId) >= 0 ? 2 : 1\r\n                this.items[key].updateView(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    on_s2c_ReceiveClimbTowerClearStageRewardsRsp(msg: proto.Msg_ReceiveClimbTowerClearStageRewardsRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            this.updateView();\r\n            UIMgr.ins.show({ viewName: ViewName.CongratulationPop, data: msg.rewards })\r\n        }\r\n    }\r\n}"]}