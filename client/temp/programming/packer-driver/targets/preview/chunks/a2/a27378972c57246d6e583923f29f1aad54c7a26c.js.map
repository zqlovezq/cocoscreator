{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/protobufjs/src/types.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","types","util","s","bake","values","offset","i","o","length","basic","defaults","emptyArray","long","mapKey","packed","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './util';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n /**\n  * Common type constants.\n  * @namespace\n  */\n var types = exports;\n\n var util = require(\"./util\");\n\n var s = [\n     \"double\",   // 0\n     \"float\",    // 1\n     \"int32\",    // 2\n     \"uint32\",   // 3\n     \"sint32\",   // 4\n     \"fixed32\",  // 5\n     \"sfixed32\", // 6\n     \"int64\",    // 7\n     \"uint64\",   // 8\n     \"sint64\",   // 9\n     \"fixed64\",  // 10\n     \"sfixed64\", // 11\n     \"bool\",     // 12\n     \"string\",   // 13\n     \"bytes\"     // 14\n ];\n\n function bake(values, offset) {\n     var i = 0, o = {};\n     offset |= 0;\n     while (i < values.length) o[s[i + offset]] = values[i++];\n     return o;\n }\n\n /**\n  * Basic type wire types.\n  * @type {Object.<string,number>}\n  * @const\n  * @property {number} double=1 Fixed64 wire type\n  * @property {number} float=5 Fixed32 wire type\n  * @property {number} int32=0 Varint wire type\n  * @property {number} uint32=0 Varint wire type\n  * @property {number} sint32=0 Varint wire type\n  * @property {number} fixed32=5 Fixed32 wire type\n  * @property {number} sfixed32=5 Fixed32 wire type\n  * @property {number} int64=0 Varint wire type\n  * @property {number} uint64=0 Varint wire type\n  * @property {number} sint64=0 Varint wire type\n  * @property {number} fixed64=1 Fixed64 wire type\n  * @property {number} sfixed64=1 Fixed64 wire type\n  * @property {number} bool=0 Varint wire type\n  * @property {number} string=2 Ldelim wire type\n  * @property {number} bytes=2 Ldelim wire type\n  */\n types.basic = bake([\n     /* double   */ 1,\n     /* float    */ 5,\n     /* int32    */ 0,\n     /* uint32   */ 0,\n     /* sint32   */ 0,\n     /* fixed32  */ 5,\n     /* sfixed32 */ 5,\n     /* int64    */ 0,\n     /* uint64   */ 0,\n     /* sint64   */ 0,\n     /* fixed64  */ 1,\n     /* sfixed64 */ 1,\n     /* bool     */ 0,\n     /* string   */ 2,\n     /* bytes    */ 2\n ]);\n\n /**\n  * Basic type defaults.\n  * @type {Object.<string,*>}\n  * @const\n  * @property {number} double=0 Double default\n  * @property {number} float=0 Float default\n  * @property {number} int32=0 Int32 default\n  * @property {number} uint32=0 Uint32 default\n  * @property {number} sint32=0 Sint32 default\n  * @property {number} fixed32=0 Fixed32 default\n  * @property {number} sfixed32=0 Sfixed32 default\n  * @property {number} int64=0 Int64 default\n  * @property {number} uint64=0 Uint64 default\n  * @property {number} sint64=0 Sint32 default\n  * @property {number} fixed64=0 Fixed64 default\n  * @property {number} sfixed64=0 Sfixed64 default\n  * @property {boolean} bool=false Bool default\n  * @property {string} string=\"\" String default\n  * @property {Array.<number>} bytes=Array(0) Bytes default\n  * @property {null} message=null Message default\n  */\n types.defaults = bake([\n     /* double   */ 0,\n     /* float    */ 0,\n     /* int32    */ 0,\n     /* uint32   */ 0,\n     /* sint32   */ 0,\n     /* fixed32  */ 0,\n     /* sfixed32 */ 0,\n     /* int64    */ 0,\n     /* uint64   */ 0,\n     /* sint64   */ 0,\n     /* fixed64  */ 0,\n     /* sfixed64 */ 0,\n     /* bool     */ false,\n     /* string   */ \"\",\n     /* bytes    */ util.emptyArray,\n     /* message  */ null\n ]);\n\n /**\n  * Basic long type wire types.\n  * @type {Object.<string,number>}\n  * @const\n  * @property {number} int64=0 Varint wire type\n  * @property {number} uint64=0 Varint wire type\n  * @property {number} sint64=0 Varint wire type\n  * @property {number} fixed64=1 Fixed64 wire type\n  * @property {number} sfixed64=1 Fixed64 wire type\n  */\n types.long = bake([\n     /* int64    */ 0,\n     /* uint64   */ 0,\n     /* sint64   */ 0,\n     /* fixed64  */ 1,\n     /* sfixed64 */ 1\n ], 7);\n\n /**\n  * Allowed types for map keys with their associated wire type.\n  * @type {Object.<string,number>}\n  * @const\n  * @property {number} int32=0 Varint wire type\n  * @property {number} uint32=0 Varint wire type\n  * @property {number} sint32=0 Varint wire type\n  * @property {number} fixed32=5 Fixed32 wire type\n  * @property {number} sfixed32=5 Fixed32 wire type\n  * @property {number} int64=0 Varint wire type\n  * @property {number} uint64=0 Varint wire type\n  * @property {number} sint64=0 Varint wire type\n  * @property {number} fixed64=1 Fixed64 wire type\n  * @property {number} sfixed64=1 Fixed64 wire type\n  * @property {number} bool=0 Varint wire type\n  * @property {number} string=2 Ldelim wire type\n  */\n types.mapKey = bake([\n     /* int32    */ 0,\n     /* uint32   */ 0,\n     /* sint32   */ 0,\n     /* fixed32  */ 5,\n     /* sfixed32 */ 5,\n     /* int64    */ 0,\n     /* uint64   */ 0,\n     /* sint64   */ 0,\n     /* fixed64  */ 1,\n     /* sfixed64 */ 1,\n     /* bool     */ 0,\n     /* string   */ 2\n ], 2);\n\n /**\n  * Allowed types for packed repeated fields with their associated wire type.\n  * @type {Object.<string,number>}\n  * @const\n  * @property {number} double=1 Fixed64 wire type\n  * @property {number} float=5 Fixed32 wire type\n  * @property {number} int32=0 Varint wire type\n  * @property {number} uint32=0 Varint wire type\n  * @property {number} sint32=0 Varint wire type\n  * @property {number} fixed32=5 Fixed32 wire type\n  * @property {number} sfixed32=5 Fixed32 wire type\n  * @property {number} int64=0 Varint wire type\n  * @property {number} uint64=0 Varint wire type\n  * @property {number} sint64=0 Varint wire type\n  * @property {number} fixed64=1 Fixed64 wire type\n  * @property {number} sfixed64=1 Fixed64 wire type\n  * @property {number} bool=0 Varint wire type\n  */\n types.packed = bake([\n     /* double   */ 1,\n     /* float    */ 5,\n     /* int32    */ 0,\n     /* uint32   */ 0,\n     /* sint32   */ 0,\n     /* fixed32  */ 5,\n     /* sfixed32 */ 5,\n     /* int64    */ 0,\n     /* uint64   */ 0,\n     /* sint64   */ 0,\n     /* fixed64  */ 1,\n     /* sfixed64 */ 1,\n     /* bool     */ 0\n ]);\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './util': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}