{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/protobufjs/src/writer.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","Writer","util","BufferWriter","LongBits","base64","utf8","Op","fn","len","val","next","undefined","noop","State","writer","head","tail","states","create","Buffer","create_buffer_setup","create_buffer","create_array","alloc","size","Array","pool","prototype","subarray","_push","push","writeByte","buf","pos","writeVarint32","VarintOp","Object","uint32","write_uint32","value","int32","write_int32","writeVarint64","fromNumber","sint32","write_sint32","hi","lo","uint64","write_uint64","bits","from","length","int64","sint64","write_sint64","zzEncode","bool","write_bool","writeFixed32","fixed32","write_fixed32","sfixed32","fixed64","write_fixed64","sfixed64","float","write_float","writeFloatLE","double","write_double","writeDoubleLE","writeBytes","set","writeBytes_set","writeBytes_for","i","bytes","write_bytes","isString","decode","string","write_string","write","fork","reset","ldelim","finish","constructor","_configure","BufferWriter_","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './util/minimal';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n module.exports = Writer;\n\n var util      = require(\"./util/minimal\");\n\n var BufferWriter; // cyclic\n\n var LongBits  = util.LongBits,\n     base64    = util.base64,\n     utf8      = util.utf8;\n\n /**\n  * Constructs a new writer operation instance.\n  * @classdesc Scheduled writer operation.\n  * @constructor\n  * @param {function(*, Uint8Array, number)} fn Function to call\n  * @param {number} len Value byte length\n  * @param {*} val Value to write\n  * @ignore\n  */\n function Op(fn, len, val) {\n\n     /**\n      * Function to call.\n      * @type {function(Uint8Array, number, *)}\n      */\n     this.fn = fn;\n\n     /**\n      * Value byte length.\n      * @type {number}\n      */\n     this.len = len;\n\n     /**\n      * Next operation.\n      * @type {Writer.Op|undefined}\n      */\n     this.next = undefined;\n\n     /**\n      * Value to write.\n      * @type {*}\n      */\n     this.val = val; // type varies\n }\n\n /* istanbul ignore next */\n function noop() {} // eslint-disable-line no-empty-function\n\n /**\n  * Constructs a new writer state instance.\n  * @classdesc Copied writer state.\n  * @memberof Writer\n  * @constructor\n  * @param {Writer} writer Writer to copy state from\n  * @ignore\n  */\n function State(writer) {\n\n     /**\n      * Current head.\n      * @type {Writer.Op}\n      */\n     this.head = writer.head;\n\n     /**\n      * Current tail.\n      * @type {Writer.Op}\n      */\n     this.tail = writer.tail;\n\n     /**\n      * Current buffer length.\n      * @type {number}\n      */\n     this.len = writer.len;\n\n     /**\n      * Next state.\n      * @type {State|null}\n      */\n     this.next = writer.states;\n }\n\n /**\n  * Constructs a new writer instance.\n  * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n  * @constructor\n  */\n function Writer() {\n\n     /**\n      * Current length.\n      * @type {number}\n      */\n     this.len = 0;\n\n     /**\n      * Operations head.\n      * @type {Object}\n      */\n     this.head = new Op(noop, 0, 0);\n\n     /**\n      * Operations tail\n      * @type {Object}\n      */\n     this.tail = this.head;\n\n     /**\n      * Linked forked states.\n      * @type {Object|null}\n      */\n     this.states = null;\n\n     // When a value is written, the writer calculates its byte length and puts it into a linked\n     // list of operations to perform when finish() is called. This both allows us to allocate\n     // buffers of the exact required size and reduces the amount of work we have to do compared\n     // to first calculating over objects and then encoding over objects. In our case, the encoding\n     // part is just a linked list walk calling operations with already prepared values.\n }\n\n var create = function create() {\n     return util.Buffer\n         ? function create_buffer_setup() {\n             return (Writer.create = function create_buffer() {\n                 return new BufferWriter();\n             })();\n         }\n         /* istanbul ignore next */\n         : function create_array() {\n             return new Writer();\n         };\n };\n\n /**\n  * Creates a new writer.\n  * @function\n  * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n  */\n Writer.create = create();\n\n /**\n  * Allocates a buffer of the specified size.\n  * @param {number} size Buffer size\n  * @returns {Uint8Array} Buffer\n  */\n Writer.alloc = function alloc(size) {\n     return new util.Array(size);\n };\n\n // Use Uint8Array buffer pool in the browser, just like node does with buffers\n /* istanbul ignore else */\n if (util.Array !== Array)\n     Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n /**\n  * Pushes a new operation to the queue.\n  * @param {function(Uint8Array, number, *)} fn Function to call\n  * @param {number} len Value byte length\n  * @param {number} val Value to write\n  * @returns {Writer} `this`\n  * @private\n  */\n Writer.prototype._push = function push(fn, len, val) {\n     this.tail = this.tail.next = new Op(fn, len, val);\n     this.len += len;\n     return this;\n };\n\n function writeByte(val, buf, pos) {\n     buf[pos] = val & 255;\n }\n\n function writeVarint32(val, buf, pos) {\n     while (val > 127) {\n         buf[pos++] = val & 127 | 128;\n         val >>>= 7;\n     }\n     buf[pos] = val;\n }\n\n /**\n  * Constructs a new varint writer operation instance.\n  * @classdesc Scheduled varint writer operation.\n  * @extends Op\n  * @constructor\n  * @param {number} len Value byte length\n  * @param {number} val Value to write\n  * @ignore\n  */\n function VarintOp(len, val) {\n     this.len = len;\n     this.next = undefined;\n     this.val = val;\n }\n\n VarintOp.prototype = Object.create(Op.prototype);\n VarintOp.prototype.fn = writeVarint32;\n\n /**\n  * Writes an unsigned 32 bit value as a varint.\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.uint32 = function write_uint32(value) {\n     // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n     // uint32 is by far the most frequently used operation and benefits significantly from this.\n     this.len += (this.tail = this.tail.next = new VarintOp(\n         (value = value >>> 0)\n                 < 128       ? 1\n         : value < 16384     ? 2\n         : value < 2097152   ? 3\n         : value < 268435456 ? 4\n         :                     5,\n     value)).len;\n     return this;\n };\n\n /**\n  * Writes a signed 32 bit value as a varint.\n  * @function\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.int32 = function write_int32(value) {\n     return value < 0\n         ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n         : this.uint32(value);\n };\n\n /**\n  * Writes a 32 bit value as a varint, zig-zag encoded.\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.sint32 = function write_sint32(value) {\n     return this.uint32((value << 1 ^ value >> 31) >>> 0);\n };\n\n function writeVarint64(val, buf, pos) {\n     while (val.hi) {\n         buf[pos++] = val.lo & 127 | 128;\n         val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n         val.hi >>>= 7;\n     }\n     while (val.lo > 127) {\n         buf[pos++] = val.lo & 127 | 128;\n         val.lo = val.lo >>> 7;\n     }\n     buf[pos++] = val.lo;\n }\n\n /**\n  * Writes an unsigned 64 bit value as a varint.\n  * @param {Long|number|string} value Value to write\n  * @returns {Writer} `this`\n  * @throws {TypeError} If `value` is a string and no long library is present.\n  */\n Writer.prototype.uint64 = function write_uint64(value) {\n     var bits = LongBits.from(value);\n     return this._push(writeVarint64, bits.length(), bits);\n };\n\n /**\n  * Writes a signed 64 bit value as a varint.\n  * @function\n  * @param {Long|number|string} value Value to write\n  * @returns {Writer} `this`\n  * @throws {TypeError} If `value` is a string and no long library is present.\n  */\n Writer.prototype.int64 = Writer.prototype.uint64;\n\n /**\n  * Writes a signed 64 bit value as a varint, zig-zag encoded.\n  * @param {Long|number|string} value Value to write\n  * @returns {Writer} `this`\n  * @throws {TypeError} If `value` is a string and no long library is present.\n  */\n Writer.prototype.sint64 = function write_sint64(value) {\n     var bits = LongBits.from(value).zzEncode();\n     return this._push(writeVarint64, bits.length(), bits);\n };\n\n /**\n  * Writes a boolish value as a varint.\n  * @param {boolean} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.bool = function write_bool(value) {\n     return this._push(writeByte, 1, value ? 1 : 0);\n };\n\n function writeFixed32(val, buf, pos) {\n     buf[pos    ] =  val         & 255;\n     buf[pos + 1] =  val >>> 8   & 255;\n     buf[pos + 2] =  val >>> 16  & 255;\n     buf[pos + 3] =  val >>> 24;\n }\n\n /**\n  * Writes an unsigned 32 bit value as fixed 32 bits.\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.fixed32 = function write_fixed32(value) {\n     return this._push(writeFixed32, 4, value >>> 0);\n };\n\n /**\n  * Writes a signed 32 bit value as fixed 32 bits.\n  * @function\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.sfixed32 = Writer.prototype.fixed32;\n\n /**\n  * Writes an unsigned 64 bit value as fixed 64 bits.\n  * @param {Long|number|string} value Value to write\n  * @returns {Writer} `this`\n  * @throws {TypeError} If `value` is a string and no long library is present.\n  */\n Writer.prototype.fixed64 = function write_fixed64(value) {\n     var bits = LongBits.from(value);\n     return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n };\n\n /**\n  * Writes a signed 64 bit value as fixed 64 bits.\n  * @function\n  * @param {Long|number|string} value Value to write\n  * @returns {Writer} `this`\n  * @throws {TypeError} If `value` is a string and no long library is present.\n  */\n Writer.prototype.sfixed64 = Writer.prototype.fixed64;\n\n /**\n  * Writes a float (32 bit).\n  * @function\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.float = function write_float(value) {\n     return this._push(util.float.writeFloatLE, 4, value);\n };\n\n /**\n  * Writes a double (64 bit float).\n  * @function\n  * @param {number} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.double = function write_double(value) {\n     return this._push(util.float.writeDoubleLE, 8, value);\n };\n\n var writeBytes = util.Array.prototype.set\n     ? function writeBytes_set(val, buf, pos) {\n         buf.set(val, pos); // also works for plain array values\n     }\n     /* istanbul ignore next */\n     : function writeBytes_for(val, buf, pos) {\n         for (var i = 0; i < val.length; ++i)\n             buf[pos + i] = val[i];\n     };\n\n /**\n  * Writes a sequence of bytes.\n  * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.bytes = function write_bytes(value) {\n     var len = value.length >>> 0;\n     if (!len)\n         return this._push(writeByte, 1, 0);\n     if (util.isString(value)) {\n         var buf = Writer.alloc(len = base64.length(value));\n         base64.decode(value, buf, 0);\n         value = buf;\n     }\n     return this.uint32(len)._push(writeBytes, len, value);\n };\n\n /**\n  * Writes a string.\n  * @param {string} value Value to write\n  * @returns {Writer} `this`\n  */\n Writer.prototype.string = function write_string(value) {\n     var len = utf8.length(value);\n     return len\n         ? this.uint32(len)._push(utf8.write, len, value)\n         : this._push(writeByte, 1, 0);\n };\n\n /**\n  * Forks this writer's state by pushing it to a stack.\n  * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n  * @returns {Writer} `this`\n  */\n Writer.prototype.fork = function fork() {\n     this.states = new State(this);\n     this.head = this.tail = new Op(noop, 0, 0);\n     this.len = 0;\n     return this;\n };\n\n /**\n  * Resets this instance to the last state.\n  * @returns {Writer} `this`\n  */\n Writer.prototype.reset = function reset() {\n     if (this.states) {\n         this.head   = this.states.head;\n         this.tail   = this.states.tail;\n         this.len    = this.states.len;\n         this.states = this.states.next;\n     } else {\n         this.head = this.tail = new Op(noop, 0, 0);\n         this.len  = 0;\n     }\n     return this;\n };\n\n /**\n  * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n  * @returns {Writer} `this`\n  */\n Writer.prototype.ldelim = function ldelim() {\n     var head = this.head,\n         tail = this.tail,\n         len  = this.len;\n     this.reset().uint32(len);\n     if (len) {\n         this.tail.next = head.next; // skip noop\n         this.tail = tail;\n         this.len += len;\n     }\n     return this;\n };\n\n /**\n  * Finishes the write operation.\n  * @returns {Uint8Array} Finished buffer\n  */\n Writer.prototype.finish = function finish() {\n     var head = this.head.next, // skip noop\n         buf  = this.constructor.alloc(this.len),\n         pos  = 0;\n     while (head) {\n         head.fn(head.val, buf, pos);\n         pos += head.len;\n         head = head.next;\n     }\n     // this.head = this.tail = null;\n     return buf;\n };\n\n Writer._configure = function(BufferWriter_) {\n     BufferWriter = BufferWriter_;\n     Writer.create = create();\n     BufferWriter._configure();\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './util/minimal': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}