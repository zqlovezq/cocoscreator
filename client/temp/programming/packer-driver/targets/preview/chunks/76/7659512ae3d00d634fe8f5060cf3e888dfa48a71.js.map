{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/net/Http.ts"],"names":["Http","request","dd","http","errCount","send","constructor","console","warn","host","reqParam","parmsFormat","XMLHttpRequest","open","onload","log","readyState","status","responseText","responseJson","JSON","parse","cb","onerror","err","statusText","onErr","ontimeout","timeout","error","newParams","list","split","index","length","v","firstEqualIndex","indexOf","substring","encodeURIComponent"],"mappings":"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","sourcesContent":["import { assetManager, js, loader } from \"cc\"\nimport { ShowTips } from \"../mgr/UIMgr\"\n\nexport interface HttpData { host: string, method: \"GET\" | \"POST\", reqParam: string, cb: Function }\n\nexport default class Http {\n\n    static request(dd:HttpData) {\n        let http = new Http()\n        http.errCount = 0\n        http.send(dd)\n    }\n\n    private constructor() {\n\n    }\n\n    errCount: number\n\n    send(dd:HttpData) {\n        console.warn(`http----------------${dd.host}?${dd.reqParam}`,this.parmsFormat(dd.reqParam))\n        if (dd.host == \"\"){\n            return\n        }\n        let request = new XMLHttpRequest()\n        request.open(\"GET\", `${dd.host}?${this.parmsFormat(dd.reqParam)}`,true)\n        request.onload = () => {\n            console.log(`http request onload readyState=${request.readyState}, status=${request.status}ï¼Œ txt=${request.responseText}`)\n            let responseJson = JSON.parse(request.responseText);\n            dd.cb && dd.cb(responseJson)\n        }\n        request.onerror = (err) => {\n            console.log(`http request onerror`,request.status,request.statusText)\n            this.onErr(dd)\n        }\n        request.ontimeout = (err) => {\n            console.log(`http request ontimeout`)\n            this.onErr(dd)\n        }\n        request.timeout = 10000;\n        try {\n            request.send();\n        } catch (error) {\n            this.onErr(dd)\n        }\n       \n    }\n\n    parmsFormat(reqParam: string) {\n        let newParams = \"\"\n        let list = reqParam.split(\"&\")\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            let firstEqualIndex: number = v.indexOf('=');\n            if (firstEqualIndex>=0){\n                if (newParams.length != 0){\n                    newParams += \"&\"\n                }\n                newParams += `${v.substring(0,firstEqualIndex)}=${encodeURIComponent(v.substring(firstEqualIndex+1,v.length))}`\n            }\n        }\n        return newParams\n    }\n\n    onErr(dd:HttpData) {\n        this.errCount = this.errCount + 1\n        if (this.errCount >= 3) {\n            dd.cb && dd.cb()\n            return\n        }\n        this.send(dd)\n    }\n}"]}