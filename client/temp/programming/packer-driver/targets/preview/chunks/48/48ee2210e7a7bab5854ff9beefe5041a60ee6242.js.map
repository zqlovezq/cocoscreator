{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/effect/HoldTimeEffectUI.ts"],"names":["_decorator","Component","Layers","Node","v3","EffectUI","FightData","AbsObjInfoAttr","tab","ccclass","property","HoldTimeEffectUI","abs","effectUi","checkTime","holdMinTime","animationId","cdTime","pvpRole","create","nn","layer","Enum","DEFAULT","addComponent","setAbs","_abs","node","position","getHitPos","checkMinTime","holdEffect","info","holdTimeTrigger","sort","a","b","Parameters","getHoldTime","attrData","getAttr","AttrType","AttrType_HoldTimePercent","remove","updateFrame","dt","changeAnimId","time","getObjAttr","holdTime","passTime","run","getData","GetKeyValue_ConfigTable","HoldFull","Holding","animId","recycleEffect","parent","destroy","setAbsPvp","resetTimePvp","updateFramePvp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,E,OAAAA,E;;AAIrCC,MAAAA,Q,iBAAAA,Q;;AAEAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,G,iBAAAA,G;;;;;;;;;OAGH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;AAE9B;;kCAEaW,gB,WADZF,OAAO,CAAC,kBAAD,C,gBAAR,MACaE,gBADb,SACsCV,SADtC,CACgD;AAAA;AAAA;AAAA,eAO5CW,GAP4C;AAAA,eAQ5CC,QAR4C;AAAA,eAS5CC,SAT4C,GASxB,GATwB;AAAA,eAU5CC,WAV4C,GAUtB,CAVsB;AAAA,eAiB5CC,WAjB4C,GAiBtB,CAjBsB;AAAA,eA+B5CC,MA/B4C,GA+B3B,CA/B2B;AAAA,eAkF5CC,OAlF4C;AAAA;;AAC/B,eAANC,MAAM,GAAG;AACZ,cAAIC,EAAE,GAAG,IAAIjB,IAAJ,CAAS,kBAAT,CAAT;AACAiB,UAAAA,EAAE,CAACC,KAAH,GAAWnB,MAAM,CAACoB,IAAP,CAAYC,OAAvB;AACA,iBAAOH,EAAE,CAACI,YAAH,CAAgBb,gBAAhB,CAAP;AACH;;AAMDc,QAAAA,MAAM,CAACC,IAAD,EAAa;AACf,eAAKd,GAAL,GAAWc,IAAX;AACA,eAAKC,IAAL,CAAUC,QAAV,GAAqBF,IAAI,CAACG,SAAL,EAArB;AACA,eAAKC,YAAL;AACA,eAAKlB,GAAL,CAASmB,UAAT,GAAsB,IAAtB;AACH;;AAEDD,QAAAA,YAAY,GAAG;AACX,eAAKf,WAAL,GAAmB,CAAnB;;AACA,cAAI,KAAKH,GAAL,IAAY,KAAKA,GAAL,CAASoB,IAAzB,EAA+B;AAC3B,iBAAKpB,GAAL,CAASoB,IAAT,CAAcC,eAAd,CAA8BC,IAA9B,CAAmC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzC,qBAAOD,CAAC,CAACE,UAAF,CAAa,CAAb,IAAkBD,CAAC,CAACC,UAAF,CAAa,CAAb,CAAzB;AACH,aAFD;AAGA,iBAAKtB,WAAL,GAAmB,KAAKH,GAAL,CAASoB,IAAT,CAAcC,eAAd,CAA8B,CAA9B,EAAiCK,WAAjC,CAA6C,KAAK1B,GAAL,CAASoB,IAAT,CAAcO,QAAd,CAAuBC,OAAvB,CAA+B;AAAA;AAAA,4BAAIC,QAAJ,CAAaC,wBAA5C,CAA7C,CAAnB;AACH;;AACD,cAAI,KAAK3B,WAAL,IAAoB,CAAxB,EAA2B;AACvB,iBAAK4B,MAAL;AACH;AACJ;;AAGDC,QAAAA,WAAW,CAACC,EAAD,EAAmB;AAC1B,eAAK5B,MAAL,IAAe4B,EAAf;;AACA,cAAI,KAAK5B,MAAL,GAAc,KAAKH,SAAvB,EAAkC;AAC9B,iBAAKG,MAAL,GAAc,CAAd;AACA,iBAAKa,YAAL;AACH;;AACD,cAAI,KAAKf,WAAL,IAAoB,CAAxB,EAA2B;AACvB;AACH;;AACD,cAAI,KAAKH,GAAL,IAAY,KAAKA,GAAL,CAASoB,IAAzB,EAA+B;AAC3B,iBAAKc,YAAL,CAAkB;AAAA;AAAA,wCAAUC,IAAV,GAAiB,KAAKnC,GAAL,CAASoB,IAAT,CAAcgB,UAAd,CAAyB;AAAA;AAAA,kDAAeC,QAAxC,CAAnC;AACH;AACJ;;AAEDH,QAAAA,YAAY,CAACI,QAAD,EAAmB;AAC3B,cAAIA,QAAQ,IAAI,KAAKnC,WAArB,EAAkC;AAC9B,iBAAKoC,GAAL,CAAS;AAAA;AAAA,4BAAIC,OAAJ,GAAcC,uBAAd,GAAwCC,QAAjD;AACH,WAFD,MAEO;AACH,iBAAKH,GAAL,CAAS;AAAA;AAAA,4BAAIC,OAAJ,GAAcC,uBAAd,GAAwCE,OAAjD;AACH;AACJ;;AAGDJ,QAAAA,GAAG,CAACK,MAAD,EAAiB;AAChB,cAAI,KAAKxC,WAAL,IAAoBwC,MAAxB,EAAgC;AAC5B;AACH;;AACD,eAAKC,aAAL;AACA,eAAKzC,WAAL,GAAmBwC,MAAnB;AACA,eAAK3C,QAAL,GAAgB;AAAA;AAAA,oCAASM,MAAT,EAAhB;AACA,eAAKN,QAAL,CAAcc,IAAd,CAAmB+B,MAAnB,GAA4B,KAAK/B,IAAjC;AACA,eAAKd,QAAL,CAAcc,IAAd,CAAmBC,QAAnB,GAA8BxB,EAAE,EAAhC;AACA,eAAKS,QAAL,CAAcsC,GAAd,CAAkBK,MAAlB,EAA0B,MAAM;AAC5B,iBAAK3C,QAAL,GAAgB,IAAhB;AACA,iBAAKG,WAAL,GAAmB,CAAnB;AACH,WAHD;AAIH;;AAEDyC,QAAAA,aAAa,GAAG;AACZ,cAAI,KAAK5C,QAAT,EAAmB;AACf,iBAAKA,QAAL,CAAc8B,MAAd;AACH;;AACD,eAAK9B,QAAL,GAAgB,IAAhB;AACH;;AAED8B,QAAAA,MAAM,GAAG;AACL,eAAKc,aAAL;AACA,eAAK9B,IAAL,CAAUgC,OAAV;AACH;;AAGDC,QAAAA,SAAS,CAAClC,IAAD,EAAgB;AACrB,eAAKR,OAAL,GAAeQ,IAAf;AACA,eAAKC,IAAL,CAAUC,QAAV,GAAqBF,IAAI,CAACG,SAAL,EAArB;AACA,eAAKX,OAAL,CAAaa,UAAb,GAA0B,IAA1B;AACH;;AAED8B,QAAAA,YAAY,GAAE;AACV,eAAK5C,MAAL,GAAc,CAAd;AACA,eAAK6B,YAAL,CAAkB,KAAK7B,MAAvB;AACH;;AACD6C,QAAAA,cAAc,CAACjB,EAAD,EAAmB;AAC7B,eAAK5B,MAAL,IAAe4B,EAAf;AACA,eAAKC,YAAL,CAAkB,KAAK7B,MAAvB;AACH;;AAhG2C,O","sourcesContent":["import { _decorator, Component, Layers, Node, v3 } from \"cc\";\nimport { AbsRole } from \"../obj/role/AbsRole\";\nimport { Avatar } from \"../../animation/Avatar\";\nimport { AbsObj } from \"../obj/AbsObj\";\nimport { EffectUI } from \"./EffectUI\";\nimport { Role } from \"../obj/role/role/Role\";\nimport { FightData } from \"../../data/FightData\";\nimport { AbsObjInfoAttr } from \"../obj/AbsObjInfo\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { PvpRole } from \"../../pvp/obj/PvpRole\";\n\nconst { ccclass, property } = _decorator;\n\n/** 蓄力特效 */\n@ccclass('HoldTimeEffectUI')\nexport class HoldTimeEffectUI extends Component {\n    static create() {\n        let nn = new Node(\"HoldTimeEffectUI\");\n        nn.layer = Layers.Enum.DEFAULT\n        return nn.addComponent(HoldTimeEffectUI)\n    }\n\n    abs: Role\n    effectUi: EffectUI\n    checkTime: number = 500;\n    holdMinTime: number = 0\n    setAbs(_abs: Role) {\n        this.abs = _abs\n        this.node.position = _abs.getHitPos()\n        this.checkMinTime()\n        this.abs.holdEffect = this\n    }\n    animationId: number = 0\n    checkMinTime() {\n        this.holdMinTime = 0\n        if (this.abs && this.abs.info) {\n            this.abs.info.holdTimeTrigger.sort((a, b) => {\n                return a.Parameters[0] - b.Parameters[0]\n            })\n            this.holdMinTime = this.abs.info.holdTimeTrigger[0].getHoldTime(this.abs.info.attrData.getAttr(tab.AttrType.AttrType_HoldTimePercent))\n        }\n        if (this.holdMinTime == 0) {\n            this.remove()\n        }\n    }\n\n    cdTime: number = 0\n    updateFrame(dt: number): void {\n        this.cdTime += dt\n        if (this.cdTime > this.checkTime) {\n            this.cdTime = 0\n            this.checkMinTime()\n        }\n        if (this.holdMinTime == 0) {\n            return\n        }\n        if (this.abs && this.abs.info) {\n            this.changeAnimId(FightData.time - this.abs.info.getObjAttr(AbsObjInfoAttr.holdTime))\n        }\n    }\n\n    changeAnimId(passTime: number) {\n        if (passTime >= this.holdMinTime) {\n            this.run(tab.getData().GetKeyValue_ConfigTable().HoldFull)\n        } else {\n            this.run(tab.getData().GetKeyValue_ConfigTable().Holding)\n        }\n    }\n\n\n    run(animId: number) {\n        if (this.animationId == animId) {\n            return\n        }\n        this.recycleEffect()\n        this.animationId = animId\n        this.effectUi = EffectUI.create()\n        this.effectUi.node.parent = this.node\n        this.effectUi.node.position = v3()\n        this.effectUi.run(animId, () => {\n            this.effectUi = null\n            this.animationId = 0\n        })\n    }\n\n    recycleEffect() {\n        if (this.effectUi) {\n            this.effectUi.remove()\n        }\n        this.effectUi = null\n    }\n\n    remove() {\n        this.recycleEffect()\n        this.node.destroy()\n    }\n\n    pvpRole: PvpRole\n    setAbsPvp(_abs: PvpRole) {\n        this.pvpRole = _abs\n        this.node.position = _abs.getHitPos()\n        this.pvpRole.holdEffect = this\n    }\n\n    resetTimePvp(){\n        this.cdTime = 0\n        this.changeAnimId(this.cdTime)\n    }\n    updateFramePvp(dt: number): void {\n        this.cdTime += dt\n        this.changeAnimId(this.cdTime)\n    }\n\n}"]}