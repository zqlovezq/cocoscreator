{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/pvp/obj/PvpRole.ts"],"names":["_decorator","Vec3","PvpObj","PvpObjType","PvpAttrData","tab","ShadowEffect","EventMgr","FightEvent","Func","CDTime","ccclass","property","tempPos","tempPos2","PvpRole","objType","role","group","attrData","hero","_animationId","configTab","avatarShadow","barItem","isActive","skillCdTime","holdEffect","buffs","buffUis","reset","remove","recycle","node","destroy","setGroup","x","y","z","scale","setHero","init","getData","HeroTableById","getValue","itemId","initShadow","Shadow","setBounds","Bounds","kill","playAnim","Born","playIlde","bind","animId","create","emitFight","Effect_Add_To_Layer","run","setPosition","position","set","updateFrame","dt","isValid","changeSkillCd","getProgress","updateFramePvp","onDamage","damage","hp","Math","max","shield","shieldDamage","updateHP","onHeal","heal","min","maxHp","healHp","changeHp","getShotPos","getAvatarSpineBonePos","getHitPos","boneName","bone","avatar","getSpineBonePos","spine","getScale","getPosition","onDead","isDead","active","add_DeadEffect","playDead","onRevive","remove_DeadEffect","Hit_Effect_Add","GetKeyValue_ConfigTable","Resurrectioneffect","playRevive","onSkillCD","cdTime","setLiftTime","skillCdEnd","playSkillCD","Idle","playSkill","resetHoldTime","Idle2","Dead","Revive","showHoldTime","holdTime","Create_HoldTime_Effect","holdMinTime","resetTimePvp","getBuffByIndex","index","forBy","addBuffUI","buffUi","push","getBuffUI","buffId"],"mappings":"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","sourcesContent":["import { _decorator, Component, Vec3 } from \"cc\";\nimport { PvpObj, PvpObjType } from \"./PvpObj\";\nimport { PvpAttrData } from \"../PvpAttrData\";\nimport { proto } from \"client_protocol\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { ShadowEffect } from \"../../base/effect/ShadowEffect\";\nimport { EventMgr } from \"../../../mgr/EventMgr\";\nimport { FightEvent } from \"../../define/FightEvent\";\nimport { FightBarItem } from \"../../view/common/FightBarItem\";\nimport { Func } from \"../../../utils/Func\";\nimport { BuffUI } from \"../../base/buff/BuffUI\";\nimport { CDTime } from \"../../base/cd/CDTime\";\nimport { HoldTimeEffectUI } from \"../../base/effect/HoldTimeEffectUI\";\n\nconst { ccclass, property } = _decorator;\nconst tempPos = new Vec3()\nconst tempPos2 = new Vec3()\n@ccclass('PvpRole')\nexport class PvpRole extends PvpObj {\n    objType: PvpObjType = PvpObjType.role\n    //阵营\n    group: number = 0\n    attrData: PvpAttrData = new PvpAttrData();\n    hero: proto.HeroFightData\n    _animationId: number = 0\n    configTab: tab.HeroTable\n    avatarShadow: ShadowEffect\n    barItem: FightBarItem\n\n    isActive: boolean = true\n    skillCdTime: CDTime = new CDTime()//调息时间\n    holdEffect: HoldTimeEffectUI\n    reset(): void {\n        if (this.holdEffect) {\n            this.holdEffect.remove()\n            this.holdEffect = null\n        }\n        this.avatarShadow.recycle()\n        this.avatarShadow = null\n        this.barItem.node.destroy()\n        this.barItem = null\n        super.reset()\n    }\n\n    setGroup(group: number) {\n        this.group = group\n        tempPos.x = group == 0 ? 1 : -1\n        tempPos.y = tempPos.z = 1\n        this.node.scale = tempPos\n    }\n\n    setHero(hero: proto.HeroFightData) {\n        this.hero = hero\n        this.attrData = new PvpAttrData()\n        this.attrData.init()\n\n        this.configTab = tab.getData().HeroTableById.getValue(hero.itemId)\n        this.initShadow(this.configTab.Shadow)\n        this.setBounds(this.configTab.Bounds)\n    }\n\n    init(): void {\n        super.init();\n        this.skillCdTime.kill()\n        this.playAnim(this.configTab.Born, this.playIlde.bind(this))\n    }\n\n    initShadow(animId: number) {\n        this.avatarShadow = ShadowEffect.create()\n        EventMgr.emitFight(FightEvent.Effect_Add_To_Layer, \"shadow\", this.avatarShadow.node)\n        this.avatarShadow.run(animId)\n    }\n\n    setPosition(position: Vec3): void {\n        super.setPosition(position)\n        if (this.avatarShadow) {\n            this.avatarShadow.node.setPosition(position)\n        }\n        tempPos.set(this.node.position)\n        tempPos.y += 125\n        this.barItem.node.position = tempPos\n    }\n\n    updateFrame(dt: number) {\n        super.updateFrame(dt)\n        this.skillCdTime.updateFrame(dt)\n        if (this.skillCdTime.isValid()) {\n            this.barItem.changeSkillCd(this.skillCdTime.getProgress())\n        }\n        if (this.holdEffect) {\n            this.holdEffect.updateFramePvp(dt)\n        }\n    }\n\n    //--------------属性相关--------\n    onDamage(damage: proto.FightFlowDamage) {\n        this.attrData.hp = Math.max(0, this.attrData.hp - damage.damage)\n        this.attrData.shield = Math.max(0, this.attrData.shield - damage.shieldDamage)\n        this.updateHP()\n    }\n    onHeal(heal: proto.FightFlowBufferHeal) {\n        this.attrData.hp = Math.min(this.attrData.maxHp, this.attrData.hp + heal.healHp)\n        this.updateHP()\n    }\n    updateHP() {\n        this.barItem.changeHp()\n    }\n\n    //状态相关\n    /** 射击位置 */\n    getShotPos() {\n        return this.getAvatarSpineBonePos(\"root/point_attack\")\n    }\n\n    /** 命中位置 */\n    getHitPos() {\n        return this.getAvatarSpineBonePos(\"root/point_beattack\")\n    }\n\n    getAvatarSpineBonePos(boneName: string) {\n        let bone = this.avatar.getSpineBonePos(boneName)\n        if (bone) {\n            tempPos.x = bone.x * this.avatar.spine.node.scale.x * this.getScale().x + this.avatar.spine.node.position.x\n            tempPos.y = bone.y * this.avatar.spine.node.scale.y * this.getScale().y + this.avatar.spine.node.position.y\n\n            tempPos.x += this.getPosition().x\n            tempPos.y += this.getPosition().y\n            tempPos.z += this.getPosition().z\n            return tempPos\n        }\n        return this.getPosition()\n    }\n\n    onDead() {\n        this.isDead = true\n        this.barItem.isActive = false\n        this.avatarShadow.node.active = false\n        EventMgr.emitFight(FightEvent.add_DeadEffect, this)\n        this.playDead()\n    }\n\n    /** 复活 */\n    onRevive() {\n        this.skillCdTime.kill()\n        this.isDead = false\n\n        this.avatarShadow.node.active = true\n        this.barItem.isActive = true\n        EventMgr.emitFight(FightEvent.remove_DeadEffect, this)\n        EventMgr.emitFight(FightEvent.Hit_Effect_Add, tab.getData().GetKeyValue_ConfigTable().Resurrectioneffect, this)\n        this.playRevive()\n    }\n\n\n    onSkillCD(cdTime: number) {\n        this.skillCdTime.reset()\n        this.skillCdTime.setLiftTime(cdTime, () => {\n            this.skillCdEnd()\n        })\n        this.playSkillCD()\n    }\n\n    skillCdEnd() {\n        this.skillCdTime.kill()\n        this.barItem.changeSkillCd(1)\n        this.playIlde()\n    }\n\n\n    //--------------动画相关--------\n    playIlde() {\n        if (this.isDead) { return }\n        this.playAnim(this.configTab.Idle)\n    }\n    playSkill(animId: number) {\n        if (this.isDead) { return }\n        this.resetHoldTime()\n        this.playAnim(animId, () => {\n            this.playIlde()\n        })\n\n    }\n    playSkillCD() {\n        if (this.isDead) { return }\n        this.playAnim(this.configTab.Idle2 || this.configTab.Idle)\n    }\n    playDead() {\n        this.playAnim(this.configTab.Dead || this.configTab.Idle)\n    }\n    playRevive() {\n        this.playAnim(this.configTab.Revive || this.configTab.Idle, () => {\n            this.playIlde()\n        })\n    }\n\n    showHoldTime(holdTime: number) {\n        if (this.holdEffect == null) {\n            EventMgr.emitFight(FightEvent.Create_HoldTime_Effect, this)\n        }\n        this.holdEffect.holdMinTime = holdTime\n        this.holdEffect.resetTimePvp()\n    }\n    resetHoldTime() {\n        if (this.holdEffect) {\n            this.holdEffect.resetTimePvp()\n        }\n    }\n\n\n\n    //--------------buff相关--------\n    buffs: Array<proto.FightFlowAddBuffer> = []\n    buffUis: Array<BuffUI> = []\n    getBuffByIndex(index: number) {\n        return Func.forBy(this.buffs, \"index\", index) as proto.FightFlowAddBuffer\n    }\n\n    addBuffUI(buffUi: BuffUI) {\n        this.buffUis.push(buffUi)\n    }\n    getBuffUI(buffId: number) {\n        return Func.forBy(this.buffUis, \"buffId\", buffId) as BuffUI\n    }\n\n\n}"]}