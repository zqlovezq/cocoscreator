{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/AzheGmPop.ts"],"names":["_decorator","Node","SpriteFrame","Texture2D","ViewPop","LoadResAsync","ResMgr","Bridge","ccclass","property","AzheGmPop","hitColorFrame","onLoad","register","update","dt","onClick1","onClick2FightScene","testCallWithBack","onClick3DynamicAtlas","loadSpriteFrame1","test","test1","onClick4","onClick5","spr","spriteFrame","path","getBundle","release","scheduleOnce","console","log","get","sf","addRef"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AnimationClip, Color, director, game, Graphics, instantiate, js, Label, Layers, Material, Node, Prefab, Rect, resources, sp, Sprite, SpriteAtlas, SpriteFrame, sys, Texture2D, v3 } from 'cc';\nimport { ViewPop } from '../../framework/base/ViewPop';\nimport { SceneMgr, ScenesName } from '../mgr/SceneMgr';\nimport { UIMgr } from '../mgr/UIMgr';\nimport { proto } from 'client_protocol';\nimport { MathAngle } from '../../framework/collision/Maths';\nimport { ViewName } from '../define/ViewDefine';\nimport { LoadResAsync, ResMgr } from '../mgr/ResMgr';\nimport { tab } from '../../Table/table_gen';\nimport { Field } from 'protobufjs';\nimport Fixed from '../../framework/collision/Fixed';\nimport { CommonTipsPop, CommonTipsPopCloseType } from './common/CommonTipsPop';\nimport { FPSAvatar } from '../fight/animation/FPSAvatar';\nimport { Loading } from './Loading';\nimport { Random } from '../fight/util/Random';\nimport { Bridge } from '../../framework/Bridge';\nconst { ccclass, property } = _decorator;\n\n@ccclass('AzheGmPop')\nexport class AzheGmPop extends ViewPop {\n\n\n    @property(Node)\n    node1: Node = null\n    @property(Node)\n    node2: Node = null\n\n    protected onLoad(): void {\n\n        // this.spine.setCompleteListener((trackEntry) => {\n        //     if (trackEntry.loop) {\n        //         return\n        //     }\n\n        //     let name = trackEntry.animation ? trackEntry.animation.name : '';\n        //     console.log(\"播放时间\", name, new Date().getTime() - this.time)\n        //     this.time = new Date().getTime()\n        // })\n    }\n\n    register(): void {\n    }\n    protected update(dt: number): void {\n        // let m1 = this.node1.getComponent(Sprite).getMaterialInstance(0)\n        // m1.setProperty('u_time', game.totalTime * 0.001)\n    }\n\n    onClick1() {\n        // Bridge.testCall()\n\n        // UIMgr.ins.show({ viewName: ViewName.DynamicAtlas })\n       \n\n        \n\n\n        // let m2 = this.node2.getComponent(Sprite).getMaterialInstance(0)\n        // m2.setProperty('u_color', [0, 0, 0, 1])\n        // m2.setProperty('u_rate', 0.6)\n        // ResMgr.printCache()\n        // Random.seed = 1720664297127\n        // UIMgr.ins.show({ viewName: ViewName.ConfirmPop })\n        // CommonTipsPop.create(\"ok\", (closeType: CommonTipsPopCloseType) => {\n        //     if (closeType == CommonTipsPopCloseType.confirm) {\n        //         console.log(\"ok\")\n        //     } else {\n        //         console.log(\"cancel\")\n        //     }\n        // })\n        // console.log(this.spine.skeletonData._skeletonCache.animations)\n        // for (let index = 0; index < this.spine.skeletonData._skeletonCache.animations.length; index++) {\n        //     const v = this.spine.skeletonData._skeletonCache.animations[index];\n        //     console.log(\"动画\", v.name, v.duration)\n        // }\n        // this.time = new Date().getTime()\n        // this.spine.setAnimation(0, \"action_dead\", false);\n        // this.spine.addAnimation(0, \"action_born\", false);\n        // this.spine.addAnimation(0, \"action_dead\", false);\n        // this.spine.addAnimation(0, \"action_idle\", false);\n        // this.spine.addAnimation(0, \"action_move\", false);    \n        // this.ava = FPSAvatar.get()\n        // this.ava.node.layer = Layers.Enum.UI_2D\n        // this.node.addChild(this.ava.node)\n    }\n\n    onClick2FightScene() {\n        Bridge.testCallWithBack()\n        // let list = []\n        // for (let index = 0; index < 100; index++) {\n        //     list.push(Random.getInt())\n        // }\n        // console.log(list)\n\n        // Loading.create()\n        // this.scheduleOnce(() => {\n        //     Loading.hide()\n        // }, 2)\n    }\n\n    hitColorFrame: number = 0\n    onClick3DynamicAtlas() {\n        // UIMgr.ins.show({ viewName: ViewName.DynamicAtlas })\n        // console.log(this.spine.skeletonData._skeletonCache.animations)\n        // console.log(this.spine.skeletonData.skeletonJson)\n        // console.log(this.spine)\n        // console.log(this.spine._cachedSockets.get(\"root/point_attack\"))\n        // console.log(this.spine._skeleton[\"_bones\"][this.spine._cachedSockets.get(\"root/point_attack\")])\n        // console.log(this.spine.querySockets())\n\n        this.loadSpriteFrame1()\n    }\n\n    async test() {\n        this.test1()\n    }\n\n    test1() {\n\n    }\n\n    onClick4() {\n\n    }\n\n    onClick5() {\n        this.spr.spriteFrame = null\n        let path = \"textrue/test/testbg\"\n        ResMgr.getBundle().release(path + \"/spriteFrame\", SpriteFrame)\n        // let spf = this.spr.spriteFrame\n        // if (spf) {\n        //     this.spr.spriteFrame = null\n\n        //     spf.decRef()\n        //     console.log(spf)\n\n        //     let path = \"textrue/test/testbg\"\n        this.scheduleOnce(() => {\n            console.log(ResMgr.get(path, SpriteFrame))\n            console.log(ResMgr.get(path, Texture2D))\n            // console.log(ResMgr.get(path, SpriteFrame))\n        }, 2)\n        // }\n    }\n\n    async loadSpriteFrame1() {\n        if (this.spr.spriteFrame == null) {\n            let path = \"textrue/test/testbg\"\n            console.log(ResMgr.get(path, SpriteFrame))\n            let sf: SpriteFrame = await LoadResAsync(path, SpriteFrame)\n            sf.addRef()\n            this.spr.spriteFrame = sf\n\n            console.log(path, ResMgr.get(path, SpriteFrame), ResMgr.get(path, Texture2D))\n        }\n    }\n\n\n}\n\n\n"]}