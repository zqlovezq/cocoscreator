{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/Common/component/ModuleInJumpComp.ts"],"names":["Button","CCInteger","Component","Enum","Node","Toggle","_decorator","tab","ModuleUtil","UIMgr","OpenFunctionMgr","EventMgr","LocalEvent","RoleData","GuideController","ccclass","property","ModuleInJumpComp","type","Module","tooltip","OpenFunctionName","displayName","onLoad","onLocal","checkOpenFuncPop","checkVisible","isJump","btn","node","getComponent","clickEvents","length","on","EventType","TOUCH_END","onClick","toggle","showTips","isVisible","ins","checkFunctionIsOpen","openFuncName","extraOpenFunc","lockNode","active","isOpen","showFunctionTips","checkIsOpen","opName","isGuideBlock","isGuideBlockClick","console","log","jumpTab","jumpLayer","jumpDeepTab","onDestroy","unTarget","isGuiding","IsGuideFinished","isBlock","blockButton","Module_Unknown","OpenFunctionName_None"],"mappings":"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","sourcesContent":["import { Button, CCInteger, Component, Enum, Node, Toggle, _decorator } from \"cc\";\nimport { tab } from \"../../Table/table_gen\";\nimport RedEventComp from \"./RedEventComp\";\nimport { ModuleUtil } from \"../ModuleUtil\";\nimport { UIMgr } from \"../../logic/mgr/UIMgr\";\nimport { OpenFunctionMgr } from \"./OpenFunctionMgr\";\nimport { EventMgr } from \"../../logic/mgr/EventMgr\";\nimport { LocalEvent } from \"../../logic/define/LocalEvent\";\nimport { RoleData } from \"../../logic/model/role/RoleData\";\nimport { GuideController } from \"../../logic/guide/GuideController\";\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 功能入口 解锁、跳转\n */\n@ccclass\nexport default class ModuleInJumpComp extends Component {\n    @property({\n        type: Enum(tab.Module),\n        tooltip: \"功能枚举\"\n    })\n    opName: tab.Module = tab.Module.Module_Unknown;\n\n    @property({\n        type: Enum(tab.OpenFunctionName),\n        tooltip: \"功能枚举\"\n    })\n    openFuncName:tab.OpenFunctionName = tab.OpenFunctionName.OpenFunctionName_None\n\n    @property(Node)\n    lockNode: Node = null\n\n    @property({ type: 0, displayName: '点击是否跳转界面' })\n    isJump: boolean = false;\n    @property({type:0,displayName:\"点击跳转界面的页签\"})\n    jumpTab:number = 0;\n    @property([CCInteger])\n    jumpDeepTab:Number[] = [];\n\n    @property({\n        type: Enum(tab.OpenFunctionName),\n        displayName: \"额外的显示条件\"\n    })\n    extraOpenFunc:tab.OpenFunctionName = tab.OpenFunctionName.OpenFunctionName_None\n\n    onLoad() {\n        EventMgr.onLocal(LocalEvent.checkOpenFuncPop, this.checkVisible, this);\n         this.checkVisible()\n        if (this.isJump){\n            let btn = this.node.getComponent(Button)\n            if (btn.clickEvents.length == 0){\n                this.node.on(Node.EventType.TOUCH_END, this.onClick, this)\n            }\n        }\n        else{\n            if(this.node.getComponent(Toggle)){\n                const toggle = this.node.getComponent(Toggle);\n                if(toggle.clickEvents.length===0){\n                    this.node.on(Node.EventType.TOUCH_END, this.showTips, this)\n                }\n            }\n        }\n    }\n\n    checkVisible() {\n        let isVisible = OpenFunctionMgr.ins.checkFunctionIsOpen(this.openFuncName,this.extraOpenFunc)\n        if (this.lockNode) {\n            this.node.active = true\n            this.lockNode.active = !isVisible\n        } else {\n            this.node.active = isVisible\n        }\n    }\n    showTips():boolean{\n        const isOpen = OpenFunctionMgr.ins.checkFunctionIsOpen(this.openFuncName,this.extraOpenFunc);\n        if (!isOpen) {\n            OpenFunctionMgr.ins.showFunctionTips(this.openFuncName);\n        }\n        return isOpen\n    }\n    onClick() {\n        const isOpen = this.showTips();\n        if (isOpen&&this.isJump && ModuleUtil.checkIsOpen(this.opName)) {\n            const isGuideBlock = this.isGuideBlockClick();\n            if(isGuideBlock){\n                console.log(\"cocos 新手引导阶段点击屏蔽\");\n                return;\n            }\n            if(this.jumpTab>0){\n                UIMgr.ins.jumpLayer(this.opName,this.jumpTab,null,this.openFuncName);\n            }else{\n                if(this.jumpDeepTab.length>0){\n                    UIMgr.ins.jumpLayer(this.opName,0,null,this.openFuncName,this.jumpDeepTab);\n                }else{\n                    UIMgr.ins.jumpLayer(this.opName,0,null,this.openFuncName);\n                }\n            }\n        }\n    }\n    protected onDestroy(): void {\n        EventMgr.unTarget(this)\n    }\n    // 是否引导屏蔽按钮\n    isGuideBlockClick(){\n        const isGuiding = !RoleData.ins.IsGuideFinished();\n        const isBlock = GuideController.ins.blockButton;\n        return isGuiding&&isBlock\n    }\n}\n\n"]}