{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/task/TaskData.ts"],"names":["TaskData","_decorator","TaskInfo","tab","ItemInfo","AssociationData","ccclass","property","dailyTasksMap","dailyReceivedIndexes","weekTasksMap","weekReceivedIndexes","achieveTasksMap","battlePassTasksMap","TrialTasksMap","GuildTasksMap","GachaTasksMap","todayChapterId","ins","_instance","purge","initDailyTasks","msg","clear","Map","tasks","key","info","merge","set","id","ReceivedIndexes","TodayChapterId","initWeekTasks","initAchieveTasks","initBattlePassTasks","forEach","val","battlePassData","initTrialTasks","trialData","initGuildTasks","getAssocitionInfo","initGachaTasks","map","activityGachaUpMap","i","length","updateTask","addedTasks","taskTable","TaskType","TaskType_DailyTask","TaskType_WeeklyTask","TaskType_AchievementTask","finishedTasks","taskTab","getData","TaskTableById","getValue","taskTabId","get","TaskType_BattlePass","TaskType_ActivityNewPlayerTask","TaskType_GuildDailyTask","removedTasks","delete","getDailyInfos","Array","from","values","getWeekInfos","getAchievementInfos","getGuildInfos","getIsGetDailyActiveReward","index","indexOf","receiveDailyTaskRewardSucc","ids","isReceived","receiveDailyActiveRewardSucc","concat","getIsGetWeekActiveReward","getIsGetGuildActiveReward","receivedActivityIndexes","receiveWeekTaskRewardSucc","receiveWeekActiveRewardSucc","receiveAchieveTaskRewardSucc","getGuildActiveReward","mainChapter","GuildLevelTableById","getAssocitionSimpleInfo","level","nums","infos","item","initItemData","push","getDailyActiveReward","MainChapterTableById","getWeekActiveReward","tableData","WeeklyTaskBoxTable","BoxRewardItemIds","BoxRewardItemNum","getBattlePassTaskInfo","taskid","refreshBattlePassTaskInfo","getTrialTaskInfo","costomTask","progress","isUnLock","getGuildTaskInfo","receiveGuildTaskRewardSucc","receiveGuildActiveRewardSucc","getGachaUpTaskInfo","receiveGachaUpTaskRewardSucc"],"mappings":"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","sourcesContent":["import { Node, Prefab, _decorator } from \"cc\";\nimport { IClear } from \"../../../framework/base/IAbs\";\nimport { TaskInfo } from \"./TaskInfo\";\nimport { proto } from \"client_protocol\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { ItemInfo } from \"../item/ItemInfo\";\nimport { RedMgr } from \"../../mgr/RedMgr\";\nimport { RedDotType } from \"../../red/RedDotType\";\nimport { AssociationData } from \"../association/AssociationData\";\n\nconst { ccclass, property } = _decorator;\n\n/** 任务数据 */\nexport class TaskData implements IClear {\n    private static _instance: TaskData;\n    private dailyTasksMap: Map<number, TaskInfo>;\n    private dailyReceivedIndexes: Array<number>;\n    private weekTasksMap: Map<number, TaskInfo>;\n    private weekReceivedIndexes: Array<number>;\n    private achieveTasksMap: Map<number, TaskInfo>;\n    private battlePassTasksMap: Map<number, TaskInfo>;//战令任务\n    private TrialTasksMap: Map<number, TaskInfo>;//试炼任务\n    private GuildTasksMap: Map<number, TaskInfo>;//公会任务\n    private GachaTasksMap: Map<number, TaskInfo>;//抽卡奖池up任务\n    private todayChapterId: number;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new TaskData();\n        }\n        return this._instance;\n    }\n\n    purge(): void {\n    }\n    initDailyTasks(msg: proto.Msg_GetDailyTasksRsp) {\n        if (this.dailyTasksMap) {\n            this.dailyTasksMap.clear();\n        } else {\n            this.dailyTasksMap = new Map();\n        }\n        let tasks = msg.tasks;\n        for (let key in tasks) {\n            let info = new TaskInfo();\n            info.merge(tasks[key]);\n            this.dailyTasksMap.set(info.id, info);\n        }\n        this.dailyReceivedIndexes = msg.ReceivedIndexes;\n        this.todayChapterId = msg.TodayChapterId;\n    }\n    initWeekTasks(msg: proto.Msg_GetWeeklyTasksRsp) {\n        if (this.weekTasksMap) {\n            this.weekTasksMap.clear();\n        } else {\n            this.weekTasksMap = new Map();\n        }\n        let tasks = msg.tasks;\n        for (let key in tasks) {\n            let info = new TaskInfo();\n            info.merge(tasks[key]);\n            this.weekTasksMap.set(info.id, info);\n        }\n        this.weekReceivedIndexes = msg.ReceivedIndexes;\n    }\n    initAchieveTasks(msg: proto.Msg_GetAchievementTasksRsp) {\n        if (this.achieveTasksMap) {\n            this.achieveTasksMap.clear();\n        } else {\n            this.achieveTasksMap = new Map();\n        }\n        let tasks = msg.tasks;\n        for (let key in tasks) {\n            let info = new TaskInfo();\n            info.merge(tasks[key]);\n            this.achieveTasksMap.set(info.id, info);\n        }\n\n    }\n    // 初始化战令任务接口\n    initBattlePassTasks(msg: Map<number, proto.BattlePass>) {\n        if (this.battlePassTasksMap) {\n            this.battlePassTasksMap.clear();\n        } else {\n            this.battlePassTasksMap = new Map();\n        }\n        msg.forEach((val, key) => {\n            const battlePassData = val;\n            let tasks = battlePassData.tasks;\n            for (let key in tasks) {\n                let info = new TaskInfo();\n                info.merge(tasks[key]);\n                this.battlePassTasksMap.set(info.id, info);\n            }\n        })\n    }\n    // 初始化试炼任务接口\n    initTrialTasks(msg: Map<number, proto.NewPlayerTrial>) {\n        if (this.TrialTasksMap) {\n            this.TrialTasksMap.clear();\n        } else {\n            this.TrialTasksMap = new Map()\n        }\n        msg.forEach((val, key) => {\n            const trialData = val;\n            let tasks = trialData.tasks;\n            for (let key in tasks) {\n                let info = new TaskInfo();\n                info.merge(tasks[key]);\n                this.TrialTasksMap.set(info.id, info);\n            }\n        })\n    }\n    // 初始化帮会任务接口\n    initGuildTasks() {\n        if (this.GuildTasksMap) {\n            this.GuildTasksMap.clear();\n        } else {\n            this.GuildTasksMap = new Map()\n        }\n        const tasks = AssociationData.ins.getAssocitionInfo().tasks;\n        if(tasks){\n            for (let key in tasks) {\n                let info = new TaskInfo();\n                info.merge(tasks[key]);\n                this.GuildTasksMap.set(info.id, info);\n            }\n        }\n    }\n    // 初始化奖池up任务接口\n    initGachaTasks(msg:proto.Msg_GetActivityGachaUpMapRsp){\n        if (this.GachaTasksMap) {\n            this.GachaTasksMap.clear();\n        } else {\n            this.GachaTasksMap = new Map()\n        }\n        const map = msg.activityGachaUpMap;\n        if(map){\n            for (let key in map) {\n                const tasks = map[key].tasks;\n                for(let i=0;i<tasks.length;i++){\n                    let info = new TaskInfo();\n                    info.merge(tasks[i]);\n                    this.GachaTasksMap.set(info.id, info);\n                }\n            }\n        }\n    }\n    updateTask(msg: proto.Msg_TaskChangePush) {\n        if (msg.addedTasks && msg.addedTasks.length > 0) {\n            let tasks = msg.addedTasks;\n            for (let key in tasks) {\n                let info = new TaskInfo();\n                info.merge(tasks[key]);\n                if (info.taskTable.TaskType == tab.TaskType.TaskType_DailyTask) {\n                    if (this.dailyTasksMap) {\n                        this.dailyTasksMap.set(info.id, info);\n\n                    }\n\n\n                } else if (info.taskTable.TaskType == tab.TaskType.TaskType_WeeklyTask) {\n\n                    if (this.weekTasksMap) {\n                        this.weekTasksMap.set(info.id, info);\n\n\n                    }\n\n                } else if (info.taskTable.TaskType == tab.TaskType.TaskType_AchievementTask) {\n                    if (this.achieveTasksMap) {\n                        this.achieveTasksMap.set(info.id, info);\n\n                    }\n\n                }\n            }\n        }\n        if (msg.finishedTasks && msg.finishedTasks.length > 0) {\n            let tasks = msg.finishedTasks;\n            for (let key in tasks) {\n                let taskTab = tab.getData().TaskTableById.getValue(tasks[key].taskTabId);\n                let info: TaskInfo = null;\n                if (taskTab.TaskType == tab.TaskType.TaskType_DailyTask) {\n                    if (this.dailyTasksMap) {\n                        info = this.dailyTasksMap.get(tasks[key].id)\n                    }\n\n                } else if (taskTab.TaskType == tab.TaskType.TaskType_WeeklyTask) {\n                    if (this.weekTasksMap) {\n                        info = this.weekTasksMap.get(tasks[key].id)\n                    }\n\n                } else if (taskTab.TaskType == tab.TaskType.TaskType_AchievementTask) {\n                    if (this.achieveTasksMap) {\n                        info = this.achieveTasksMap.get(tasks[key].id)\n                    }\n\n                } else if (taskTab.TaskType == tab.TaskType.TaskType_BattlePass) {\n                    if (this.battlePassTasksMap) {\n                        info = this.battlePassTasksMap.get(tasks[key].id);\n                    }\n                } else if (taskTab.TaskType == tab.TaskType.TaskType_ActivityNewPlayerTask) {\n                    if (this.TrialTasksMap) {\n                        info = this.TrialTasksMap.get(tasks[key].id)\n                    }\n                }else if(taskTab.TaskType == tab.TaskType.TaskType_GuildDailyTask){\n                    if (this.GuildTasksMap) {\n                        info = this.GuildTasksMap.get(tasks[key].id)\n                    }\n                }\n                if (info) {\n                    info.merge(tasks[key]);\n                }\n            }\n        }\n        if (msg.removedTasks && msg.removedTasks.length > 0) {\n            let tasks = msg.removedTasks;\n            for (let key in tasks) {\n                let taskTab = tab.getData().TaskTableById.getValue(tasks[key].taskTabId);\n                if (taskTab.TaskType == tab.TaskType.TaskType_DailyTask) {\n                    if (this.dailyTasksMap) {\n                        this.dailyTasksMap.delete(tasks[key].id);\n                    }\n\n                } else if (taskTab.TaskType == tab.TaskType.TaskType_WeeklyTask) {\n                    if (this.weekTasksMap) {\n                        this.weekTasksMap.delete(tasks[key].id);\n                    }\n\n                } else if (taskTab.TaskType == tab.TaskType.TaskType_AchievementTask) {\n                    if (this.achieveTasksMap) {\n                        this.achieveTasksMap.delete(tasks[key].id);\n                    }\n\n                }\n            }\n        }\n    }\n    getDailyInfos() {\n        if (!this.dailyTasksMap) {\n            return null;\n        }\n        return Array.from(this.dailyTasksMap.values())\n    }\n    getWeekInfos() {\n        if (!this.weekTasksMap) {\n            return null;\n        }\n        return Array.from(this.weekTasksMap.values())\n    }\n    getAchievementInfos() {\n        if (!this.achieveTasksMap) {\n            return null;\n        }\n        return Array.from(this.achieveTasksMap.values())\n    }\n    getGuildInfos(){\n        if (!this.GuildTasksMap) {\n            return null;\n        }\n        return Array.from(this.GuildTasksMap.values())\n    }\n    /**\n     * 获得是否领取每日活跃奖励\n     * @param index \n     * @returns \n     */\n    getIsGetDailyActiveReward(index: number) {\n        return this.dailyReceivedIndexes.indexOf(index) >= 0;\n    }\n    receiveDailyTaskRewardSucc(ids: number[]) {\n        for (let key in ids) {\n            let info = this.dailyTasksMap.get(ids[key]);\n            if (info) {\n                info.isReceived = true;\n            }\n        }\n    }\n    receiveDailyActiveRewardSucc(ids: number[]) {\n        this.dailyReceivedIndexes = this.dailyReceivedIndexes.concat(ids);\n    }\n\n    /**\n     * 获得是否领取每日活跃奖励\n     * @param index \n     * @returns \n     */\n    getIsGetWeekActiveReward(index: number) {\n        return this.weekReceivedIndexes.indexOf(index) >= 0;\n    }\n    getIsGetGuildActiveReward(index:number){\n        return AssociationData.ins.getAssocitionInfo().receivedActivityIndexes.indexOf(index)>=0;\n    }\n    receiveWeekTaskRewardSucc(ids: number[]) {\n        for (let key in ids) {\n            let info = this.weekTasksMap.get(ids[key]);\n            if (info) {\n                info.isReceived = true;\n            }\n        }\n    }\n    receiveWeekActiveRewardSucc(ids: number[]) {\n        this.weekReceivedIndexes = this.weekReceivedIndexes.concat(ids);\n    }\n\n    receiveAchieveTaskRewardSucc(ids: number[]) {\n        for (let key in ids) {\n            let info = this.achieveTasksMap.get(ids[key]);\n            if (info) {\n                info.isReceived = true;\n            }\n        }\n    }\n    getGuildActiveReward(index: number){\n        let mainChapter = tab.getData().GuildLevelTableById.getValue(AssociationData.ins.getAssocitionSimpleInfo().level);\n\n        let nums = mainChapter[\"TaskRewardNum\" + (index + 1)];\n        let ids = mainChapter[\"TaskBoxReward\" + (index + 1)];\n        let infos = [];\n        for (let key in ids) {\n            let item = new ItemInfo();\n            item.initItemData(ids[key], nums[key]);\n            infos.push(item);\n        }\n        return infos;\n    }\n    getDailyActiveReward(index: number) {\n        let mainChapter = tab.getData().MainChapterTableById.getValue(this.todayChapterId);\n\n        let nums = mainChapter[\"DailyTaskNum\" + (index + 1)];\n        let ids = mainChapter[\"DailyTaskReward\" + (index + 1)];\n        let infos = [];\n        for (let key in ids) {\n            let item = new ItemInfo();\n            item.initItemData(ids[key], nums[key]);\n            infos.push(item);\n        }\n        return infos;\n\n    }\n    getWeekActiveReward(index: number) {\n        let tableData = tab.getData().WeeklyTaskBoxTable[index];\n\n        let ids = tableData.BoxRewardItemIds;\n        let nums = tableData.BoxRewardItemNum;\n        let infos = [];\n        for (let key in ids) {\n            let item = new ItemInfo();\n            item.initItemData(ids[key], nums[key]);\n            infos.push(item);\n        }\n        return infos;\n\n    }\n    getBattlePassTaskInfo(taskid: number) {\n        return this.battlePassTasksMap.get(taskid);\n    }\n    refreshBattlePassTaskInfo(tasks: proto.ITask[]) {\n        for (let i = 0; i < tasks.length; i++) {\n            const info = this.battlePassTasksMap.get(tasks[i].id);\n            if (info) {\n                info.merge(tasks[i]);\n            }\n        }\n    }\n    getTrialTaskInfo(taskid: number) {\n        if (this.TrialTasksMap.get(taskid)) {\n            return this.TrialTasksMap.get(taskid)\n        }\n        const costomTask = new TaskInfo();\n        costomTask.id = taskid;\n        costomTask.isReceived = false;\n        costomTask.progress = 0;\n        costomTask.taskTabId = taskid;\n        costomTask.isUnLock = false;\n        return costomTask;\n    }\n    getGuildTaskInfo(taskid:number){\n        if(this.GuildTasksMap.get(taskid)){\n            return this.GuildTasksMap.get(taskid)\n        }\n        const costomTask = new TaskInfo();\n        costomTask.id = taskid;\n        costomTask.isReceived = false;\n        costomTask.progress = 0;\n        costomTask.taskTabId = taskid;\n        costomTask.isUnLock = false;\n        return costomTask;\n    }\n\n    receiveGuildTaskRewardSucc(ids: number[]) {\n        for (let key in ids) {\n            let info = this.GuildTasksMap.get(ids[key]);\n            if (info) {\n                info.isReceived = true;\n            }\n        }\n    }\n    receiveGuildActiveRewardSucc(ids: number[]) {\n        if(AssociationData.ins.getAssocitionInfo()){\n            for(let i=0;i<ids.length;i++){\n                AssociationData.ins.getAssocitionInfo().receivedActivityIndexes.push(ids[i]);\n            }\n        }\n    }\n    getGachaUpTaskInfo(taskid:number){\n        if(this.GachaTasksMap.get(taskid)){\n            return this.GachaTasksMap.get(taskid)\n        }\n    }\n    receiveGachaUpTaskRewardSucc(ids: number[]) {\n        for (let key in ids) {\n            let info = this.GachaTasksMap.get(ids[key]);\n            if (info) {\n                info.isReceived = true;\n            }\n        }\n    }\n}"]}