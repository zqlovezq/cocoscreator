{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/framework/collision/Agent.ts"],"names":["ObserverObj","KeyValuePair","RVOConfig","Agent","Vec3","Line","RVOMath","Vector2","constructor","val","value","key","Key","Value","agentCount","neighborDist","radius","maxSpeed","velocity","maxNeighbors","timeHorizon","timeHorizonObst","timeStep","inst","_inst","check","a","b","invTimeHorizon","relativePosition","subtract","getCenter","relativeVelocity","newVelocity","combinedRadius","combinedRadiusSq","sqr","distSq","absSq","u","direction","w","multiply2","wLengthSq","dotProduct1","multiply","wLength","sqrt","unitW","division","y","x","leg","det","dotProduct2","invTimeStep","abs","lineA","point","addition","orcaLines","push","process","bodys","i","j","length","body","isAgent","isRemove","object","numObstLines","tempVelocity_","lineFail","linearProgram2","maxVelocity","prefVelocity","linearProgram3","v","z","linearProgram1","lines","lineNo","optVelocity","directionOpt","result","dotProduct","discriminant","sqrtDiscriminant","tLeft","tRight","denominator","numerator","fabs","RVO_EPSILON","t","Math","min","max","normalize","tempResult","beginLine","distance","projLines","ii","line","determinant","d"],"mappings":"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","sourcesContent":["import { Vec3 } from \"cc\";\r\nimport { CollisionBody } from \"./CollisionBody\";\r\nimport { Line, RVOMath, Vector2 } from \"./Maths\";\r\n\r\nexport class ObserverObj<T>{\r\n    public value: T;\r\n\r\n    constructor(val?: T)\r\n    {\r\n        if (val)\r\n            this.value = val;\r\n    }\r\n}\r\n\r\nexport class KeyValuePair<K, V>{\r\n    public Key: K;\r\n    public Value: V;\r\n\r\n    constructor(key: K, value: V)\r\n    {\r\n        this.Key = key;\r\n        this.Value = value;\r\n    }\r\n}\r\n\r\nexport class RVOConfig\r\n{\r\n    /**代理对象总数 */\r\n    public static agentCount = 10;\r\n    /**代理对象之间的距离 */\r\n    public static neighborDist = 0.75;//25;\r\n    /**代理对象的半径 */\r\n    public static radius = 0.5;//10;\r\n    /**代理对象的最大移动速度 */\r\n    public static maxSpeed = 1;\r\n    /**代理对象的初始速度 */\r\n    public static velocity:Vec3 = new Vec3();\r\n    /**最大邻居数 */\r\n    public static maxNeighbors = 10;\r\n    \r\n    /**安全单位时间，值越大，就会越早做出避让行为 */\r\n    public static timeHorizon = 5; //25;\r\n\r\n    /**与timeHorizon类似，只针对障碍物 */\r\n    public static timeHorizonObst = 0;\r\n\r\n    /**步骤帧 */\r\n    public static timeStep = 0.05;//0.25\r\n}\r\n\r\n\r\n\r\nexport class Agent {\r\n\r\n    private static _inst: Agent = null;\r\n    static get inst() {\r\n        if (this._inst == null) {\r\n            this._inst = new Agent();\r\n        }\r\n        return this._inst;\r\n    }\r\n\r\n    check(a: CollisionBody, b: CollisionBody) {\r\n        let invTimeHorizon = 1.0/RVOConfig.timeHorizon;\r\n        let relativePosition = Vector2.subtract(b.getCenter(), a.getCenter());\r\n        let relativeVelocity = Vector2.subtract(a.newVelocity, b.newVelocity);\r\n        let combinedRadius = a.neighborDist + b.neighborDist;\r\n        let combinedRadiusSq = RVOMath.sqr(combinedRadius);\r\n        let distSq = RVOMath.absSq(relativePosition);\r\n\r\n        let u = new Vector2();\r\n        let direction = new Vector2();\r\n\r\n        if (distSq > combinedRadiusSq)\r\n        {\r\n            let w = Vector2.subtract(relativeVelocity, Vector2.multiply2(invTimeHorizon, relativePosition));\r\n            let wLengthSq = RVOMath.absSq(w);\r\n            let dotProduct1 = Vector2.multiply(w, relativePosition);\r\n\r\n            if (dotProduct1 < 0 && RVOMath.sqr(dotProduct1) > combinedRadiusSq * wLengthSq)\r\n            {\r\n                let wLength = RVOMath.sqrt(wLengthSq);\r\n                let unitW = Vector2.division(w, wLength);\r\n                direction = new Vector2(unitW.y, -unitW.x);\r\n                u = Vector2.multiply2(combinedRadius * invTimeHorizon - wLength, unitW);\r\n            } else\r\n            {\r\n                let leg = RVOMath.sqrt(distSq - combinedRadiusSq);\r\n                if (RVOMath.det(relativePosition, w) > 0)\r\n                {\r\n                    direction = Vector2.division(new Vector2(relativePosition.x * leg - relativePosition.y * combinedRadius, relativePosition.x * combinedRadius + relativePosition.y * leg), distSq);\r\n                } else\r\n                {\r\n                    direction = Vector2.division(new Vector2(relativePosition.x * leg + relativePosition.y * combinedRadius, -relativePosition.x * combinedRadius + relativePosition.y * leg), -distSq);\r\n                }\r\n\r\n                let dotProduct2 = Vector2.multiply(relativeVelocity, direction);\r\n                u = Vector2.subtract(Vector2.multiply2(dotProduct2, direction), relativeVelocity);\r\n            }\r\n        } else\r\n        {\r\n            let invTimeStep = 1.0/RVOConfig.timeStep;\r\n            let w = Vector2.subtract(relativeVelocity, Vector2.multiply2(invTimeStep, relativePosition));\r\n            let wLength = RVOMath.abs(w);\r\n            let unitW = Vector2.division(w, wLength);\r\n\r\n            direction = new Vector2(unitW.y, -unitW.x);\r\n            u = Vector2.multiply2(combinedRadius * invTimeStep - wLength, unitW);\r\n        }\r\n\r\n        let lineA = new Line();\r\n        lineA.direction = new Vector2(direction.x,direction.y);\r\n        lineA.point = Vector2.addition(a.newVelocity, Vector2.multiply2(0.5, u));\r\n        a.orcaLines.push(lineA);        \r\n    }\r\n\r\n\r\n    process(bodys:Array<CollisionBody>) {\r\n\r\n        for (let i = 0, j = bodys.length; i < j; i++) {\r\n            let body = bodys[i];\r\n            if(body.isAgent && body.orcaLines.length > 0){\r\n                if(!body.isRemove && body.object){\r\n                    let numObstLines = 0; //默认0wh\r\n                    let tempVelocity_ = new ObserverObj<Vector2>(new Vector2(body.newVelocity.x, body.newVelocity.y));\r\n                    let lineFail = this.linearProgram2(body.orcaLines, body.maxVelocity, body.prefVelocity, false, tempVelocity_);\r\n                    if (lineFail < body.orcaLines.length)\r\n                    {\r\n                        this.linearProgram3(body.orcaLines, numObstLines, lineFail, body.maxVelocity, tempVelocity_);\r\n                    }\r\n                \r\n                    let value = tempVelocity_.value;\r\n                    body.prefVelocity.x = body.newVelocity.x;\r\n                    body.prefVelocity.y = body.newVelocity.y;\r\n                    // body.newVelocity.x = value.x;\r\n                    // body.newVelocity.y = value.y;\r\n                  \r\n                    if(body.object){\r\n                        let v = body.object.velocity;\r\n                        v.x = value.x;\r\n                        v.y = value.y;\r\n                        v.z = 0;\r\n                    }\r\n                }\r\n                body.orcaLines.length = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private linearProgram1(lines: Array<Line>, lineNo: number, radius: number, optVelocity: Vector2, directionOpt: boolean, result: ObserverObj<Vector2>): boolean\r\n    {\r\n        let dotProduct = Vector2.multiply(lines[lineNo].point, lines[lineNo].direction);\r\n        let discriminant = RVOMath.sqr(dotProduct) + RVOMath.sqr(radius) - RVOMath.absSq(lines[lineNo].point);\r\n\r\n        if (discriminant < 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        let sqrtDiscriminant = RVOMath.sqrt(discriminant);\r\n        let tLeft = -dotProduct - sqrtDiscriminant;\r\n        let tRight = -dotProduct + sqrtDiscriminant;\r\n\r\n        for (let i = 0; i < lineNo; ++i)\r\n        {\r\n            let denominator = RVOMath.det(lines[lineNo].direction, lines[i].direction);\r\n            let numerator = RVOMath.det(lines[i].direction, Vector2.subtract(lines[lineNo].point, lines[i].point));\r\n\r\n            if (RVOMath.fabs(denominator) <= RVOMath.RVO_EPSILON)\r\n            {\r\n                if (numerator < 0)\r\n                {\r\n                    return false;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            let t = numerator / denominator;\r\n\r\n            if (denominator > 0)\r\n            {\r\n                tRight = Math.min(tRight, t);\r\n            } else\r\n            {\r\n                tLeft = Math.max(tLeft, t);\r\n            }\r\n\r\n            if (tLeft > tRight)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (directionOpt)\r\n        {\r\n            if (Vector2.multiply(optVelocity, lines[lineNo].direction) > 0)\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tRight, lines[lineNo].direction));\r\n            } else\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tLeft, lines[lineNo].direction));\r\n            }\r\n        } else\r\n        {\r\n            let t = Vector2.multiply(lines[lineNo].direction, Vector2.subtract(optVelocity, lines[lineNo].point));\r\n            if (t < tLeft)\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tLeft, lines[lineNo].direction));\r\n            } else if (t > tRight)\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(tRight, lines[lineNo].direction));\r\n            } else\r\n            {\r\n                result.value = Vector2.addition(lines[lineNo].point, Vector2.multiply2(t, lines[lineNo].direction));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private linearProgram2(lines: Array<Line>, radius: number, optVelocity: Vector2, directionOpt: boolean, result: ObserverObj<Vector2>): number\r\n    {\r\n        if (directionOpt)\r\n        {\r\n            result.value = Vector2.multiply2(radius, optVelocity);\r\n        } else if (RVOMath.absSq(optVelocity) > RVOMath.sqr(radius))\r\n        {\r\n            result.value = Vector2.multiply2(radius, RVOMath.normalize(optVelocity));\r\n        } else\r\n        {\r\n            result.value = optVelocity;\r\n        }\r\n\r\n        for (let i = 0; i < lines.length; ++i)\r\n        {\r\n            if (RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value)) > 0)\r\n            {\r\n                let tempResult = new Vector2(result.value.x, result.value.y);\r\n                if (!this.linearProgram1(lines, i, radius, optVelocity, directionOpt, result))\r\n                {\r\n                    result.value = tempResult;\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return lines.length;\r\n    }\r\n\r\n    private linearProgram3(lines: Array<Line>, numObstLines: number, beginLine: number, radius: number, result: ObserverObj<Vector2>)\r\n    {\r\n        let distance = 0;\r\n        for (let i = beginLine; i < lines.length; ++i)\r\n        {\r\n            if (RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value)) > distance)\r\n            {\r\n                let projLines: Array<Line> = [];\r\n                for (let ii = 0; ii < numObstLines; ++ii)\r\n                {\r\n                    projLines[projLines.length] = lines[ii];\r\n                }\r\n\r\n                for (let j = numObstLines; j < i; ++j)\r\n                {\r\n                    let line = new Line();\r\n                    let determinant = RVOMath.det(lines[i].direction, lines[j].direction);\r\n                    if (RVOMath.fabs(determinant) <= RVOMath.RVO_EPSILON)\r\n                    {\r\n                        if (Vector2.multiply(lines[i].direction, lines[j].direction) > 0.0)\r\n                        {\r\n                            continue;\r\n                        } else\r\n                        {\r\n                            line.point = Vector2.multiply2(0.5, Vector2.addition(lines[i].point, lines[j].point));\r\n                        }\r\n                    } else\r\n                    {\r\n                        line.point = Vector2.addition(lines[i].point, Vector2.multiply2(RVOMath.det(lines[j].direction, Vector2.subtract(lines[i].point, lines[j].point)) / determinant, lines[i].direction));\r\n                    }\r\n\r\n                    // line.direction = RVOMath.normalize(Vector2.subtract(lines[j].direction, lines[i].direction));\r\n                    // projLines[projLines.length] = line;\r\n                    \r\n                    let d = Vector2.subtract(lines[j].direction, lines[i].direction);\r\n                    if(RVOMath.absSq(d) > 0){\r\n                        line.direction = RVOMath.normalize(d);\r\n                        projLines[projLines.length] = line;\r\n                    }\r\n                }\r\n\r\n                let tempResult = new Vector2(result.value.x, result.value.y);\r\n                if (this.linearProgram2(projLines, radius, new Vector2(-lines[i].direction.y, lines[i].direction.x), true, result) < projLines.length)\r\n                {\r\n                    result.value = tempResult;\r\n                }\r\n                distance = RVOMath.det(lines[i].direction, Vector2.subtract(lines[i].point, result.value));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]}