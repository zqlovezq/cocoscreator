{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/jianghu/GameplayControl.ts"],"names":["_decorator","log","AbsControl","EventMgr","proto","GameplayViewDataMgr","Net","RedMgr","RedDotType","tab","BattleMainDataControl","OpenFunctionMgr","ccclass","property","GameplayControl","ins","_instance","register","onMsg","Ptl","WorldBossDataPush","on_s2c_WorldBossDataPush","WorldBossSweepRsp","on_s2c_WorldBossSweepRsp","DailyChallengeDataPush","on_s2c_DailyChallengeDataPush","DailyChallengeLevelRsp","on_s2c_DailyChallengeLevelRsp","DailyChallengeRewardRsp","on_s2c_DailyChallengeRewardRsp","DailyChallengeSweepRsp","on_s2c_DailyChallengeSweepRsp","DailyChallengeWatchAdvRsp","on_s2c_DailyChallengeWatchAdvRsp","GetClimbTowerInfoRsp","on_s2c_GetClimbTowerInfoRsp","ReceiveClimbTowerDailyRewardsRsp","on_s2c_ReceiveClimbTowerDailyRewardsRsp","ReceiveClimbTowerClearStageRewardsRsp","on_s2c_ReceiveClimbTowerClearStageRewardsRsp","QuickFinishClimbTowerStageRsp","on_s2c_QuickFinishClimbTowerStageRsp","registerCalculateFb","ClimbingTowerChallenge","on_red_ClimbingTowerChallenge","ClimbingTowerDailyReward","on_red_ClimbingTowerDailyReward","ClimbingTowerStageReward","on_red_ClimbingTowerStageReward","EveryDayChallengeFreeNum","on_red_EveryDayChallengeFreeNum","EveryDayChallengeUpReward","on_red_EveryDayChallengeUpReward","EveryDayChallengeBoxReward","on_red_EveryDayChallengeBoxReward","TopWarChallengeFreeNum","on_red_TopWarChallengeFreeNum","request","requestGetClimbTowerInfo","requestWorldBossSweep","msg","Msg_WorldBossSweepReq","Send","WorldBossSweepReq","requestDailyChallengeLevel","level","Msg_DailyChallengeLevelReq","newLevel","DailyChallengeLevelReq","requestDailyChallengeReward","Msg_DailyChallengeRewardReq","DailyChallengeRewardReq","requestDailyChallengeSweep","Msg_DailyChallengeSweepReq","DailyChallengeSweepReq","requestDailyChallengeWatchAdv","Msg_DailyChallengeWatchAdvReq","DailyChallengeWatchAdvReq","Msg_GetClimbTowerInfoReq","GetClimbTowerInfoReq","requestReceiveClimbTowerDailyRewards","Msg_ReceiveClimbTowerDailyRewardsReq","ReceiveClimbTowerDailyRewardsReq","requestReceiveClimbTowerClearStageRewardsReq","stageId","Msg_ReceiveClimbTowerClearStageRewardsReq","ReceiveClimbTowerClearStageRewardsReq","requestQuickFinishClimbTowerStage","Msg_QuickFinishClimbTowerStageReq","QuickFinishClimbTowerStageReq","worldBossMsg","refreshEvent","error","code","CommonErrorCode","Succeed","data","dailyChallengeDataMsg","dailyChallengeBuffs","bufferList","climbTowerInfoMsg","isReceivedDailyRewards","receivedFirstRewardStageIds","push","clearedStageIds","checkFunctionIsOpen","OpenFunctionName","OpenFunctionName_Challenge","OpenFunctionName_ClimbTower","total","getData","GetKeyValue_ConfigTable","ClimbTowerDefeatCount","last","defeatTimes","length","tables","PveClearStageTable","receives","passId","getClimbTowerPassLevelId","key","StageType","PveStageType","PveStageType_ClimbTower","t","StageId","indexOf","OpenFunctionName_DailyChallenge","lastTimer","challengeTotalCount","challengeCount","receivedScore","table","DailyChallengeLevelTableByLevel","getValue","currScore","score","requires","Require","i","nextTable","getIsPasstStageByStageId","MainStageLimit","OpenFunctionName_WorldBoss","freeCount","WorldBossDailyCount","num"],"mappings":"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","sourcesContent":["import { _decorator, Component, log, Node } from 'cc';\r\nimport { AbsControl } from '../../../framework/base/IAbs';\r\nimport { EventMgr } from '../../mgr/EventMgr';\r\nimport { proto } from 'client_protocol';\r\nimport { GameplayView } from './GameplayView';\r\nimport { GameplayViewDataMgr } from './GameplayViewDataMgr';\r\nimport { Net } from '../../net/Net';\r\nimport { RedMgr } from '../../mgr/RedMgr';\r\nimport { RedDotType } from '../../red/RedDotType';\r\nimport { tab } from '../../../Table/table_gen';\r\nimport { BattleMainDataControl } from '../home/battle/BattleMainDataControl';\r\nimport { OpenFunctionMgr } from '../../../Common/component/OpenFunctionMgr';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameplayControl')\r\nexport class GameplayControl extends AbsControl {\r\n    private static _instance: GameplayControl;\r\n    public static get ins() {\r\n        if (null == this._instance) {\r\n            this._instance = new GameplayControl();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    register() {\r\n        EventMgr.onMsg(proto.Ptl.WorldBossDataPush, this.on_s2c_WorldBossDataPush, this);\r\n        EventMgr.onMsg(proto.Ptl.WorldBossSweepRsp, this.on_s2c_WorldBossSweepRsp, this);\r\n\r\n        EventMgr.onMsg(proto.Ptl.DailyChallengeDataPush, this.on_s2c_DailyChallengeDataPush, this);\r\n        EventMgr.onMsg(proto.Ptl.DailyChallengeLevelRsp, this.on_s2c_DailyChallengeLevelRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.DailyChallengeRewardRsp, this.on_s2c_DailyChallengeRewardRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.DailyChallengeSweepRsp, this.on_s2c_DailyChallengeSweepRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.DailyChallengeWatchAdvRsp, this.on_s2c_DailyChallengeWatchAdvRsp, this);\r\n\r\n        EventMgr.onMsg(proto.Ptl.GetClimbTowerInfoRsp, this.on_s2c_GetClimbTowerInfoRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.ReceiveClimbTowerDailyRewardsRsp, this.on_s2c_ReceiveClimbTowerDailyRewardsRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.ReceiveClimbTowerClearStageRewardsRsp, this.on_s2c_ReceiveClimbTowerClearStageRewardsRsp, this);\r\n\r\n        EventMgr.onMsg(proto.Ptl.QuickFinishClimbTowerStageRsp, this.on_s2c_QuickFinishClimbTowerStageRsp, this);\r\n        // Msg_WorldBossSweepRsp\r\n\r\n\r\n        RedMgr.ins.registerCalculateFb(RedDotType.ClimbingTowerChallenge, this.on_red_ClimbingTowerChallenge, this);\r\n        RedMgr.ins.registerCalculateFb(RedDotType.ClimbingTowerDailyReward, this.on_red_ClimbingTowerDailyReward, this);\r\n        RedMgr.ins.registerCalculateFb(RedDotType.ClimbingTowerStageReward, this.on_red_ClimbingTowerStageReward, this);\r\n        RedMgr.ins.registerCalculateFb(RedDotType.EveryDayChallengeFreeNum, this.on_red_EveryDayChallengeFreeNum, this);\r\n        RedMgr.ins.registerCalculateFb(RedDotType.EveryDayChallengeUpReward, this.on_red_EveryDayChallengeUpReward, this);\r\n        RedMgr.ins.registerCalculateFb(RedDotType.EveryDayChallengeBoxReward, this.on_red_EveryDayChallengeBoxReward, this);\r\n\r\n        RedMgr.ins.registerCalculateFb(RedDotType.TopWarChallengeFreeNum, this.on_red_TopWarChallengeFreeNum, this);\r\n        \r\n\r\n    }\r\n    request(){\r\n        this.requestGetClimbTowerInfo();\r\n    }\r\n    requestWorldBossSweep() {\r\n        let msg = new proto.Msg_WorldBossSweepReq();\r\n        Net.Send(proto.Ptl.WorldBossSweepReq, msg)\r\n    }\r\n    /**请求调整每日挑战难度 */\r\n    requestDailyChallengeLevel(level: number) {\r\n        let msg = new proto.Msg_DailyChallengeLevelReq();\r\n        msg.newLevel = level;\r\n        Net.Send(proto.Ptl.DailyChallengeLevelReq, msg)\r\n    }\r\n    /**请求领取每日挑战奖励 */\r\n    requestDailyChallengeReward() {\r\n        let msg = new proto.Msg_DailyChallengeRewardReq;\r\n        Net.Send(proto.Ptl.DailyChallengeRewardReq, msg)\r\n    }\r\n    /**\r\n     * 请求每日挑战扫荡\r\n     */\r\n    requestDailyChallengeSweep() {\r\n        let msg = new proto.Msg_DailyChallengeSweepReq;\r\n        Net.Send(proto.Ptl.DailyChallengeSweepReq, msg)\r\n    }\r\n    /**\r\n    * 请求每日挑战扫荡\r\n    */\r\n    requestDailyChallengeWatchAdv() {\r\n        let msg = new proto.Msg_DailyChallengeWatchAdvReq;\r\n        Net.Send(proto.Ptl.DailyChallengeWatchAdvReq, msg)\r\n    }\r\n\r\n    /**\r\n    * 请求活动爬塔信息\r\n    */\r\n    requestGetClimbTowerInfo() {\r\n        let msg = new proto.Msg_GetClimbTowerInfoReq;\r\n        Net.Send(proto.Ptl.GetClimbTowerInfoReq, msg)\r\n    }\r\n    /**\r\n     * 请求领取爬塔每日奖励信息\r\n    */\r\n    requestReceiveClimbTowerDailyRewards() {\r\n        let msg = new proto.Msg_ReceiveClimbTowerDailyRewardsReq;\r\n        Net.Send(proto.Ptl.ReceiveClimbTowerDailyRewardsReq, msg)\r\n    }\r\n    /**\r\n     * 领取爬塔首通奖励\r\n    */\r\n    requestReceiveClimbTowerClearStageRewardsReq(stageId: number) {\r\n        let msg = new proto.Msg_ReceiveClimbTowerClearStageRewardsReq;\r\n        msg.stageId = stageId;\r\n        Net.Send(proto.Ptl.ReceiveClimbTowerClearStageRewardsReq, msg)\r\n    }\r\n    /**\r\n   * 快速爬塔\r\n  */\r\n    requestQuickFinishClimbTowerStage(stageId: number) {\r\n        let msg = new proto.Msg_QuickFinishClimbTowerStageReq;\r\n        msg.stageId = stageId;\r\n        Net.Send(proto.Ptl.QuickFinishClimbTowerStageReq, msg)\r\n    }\r\n    on_s2c_WorldBossDataPush(msg: proto.Msg_WorldBossDataPush) {\r\n        GameplayViewDataMgr.ins.worldBossMsg = msg;\r\n        log(\"收到世界boss数据==\", msg);\r\n        RedMgr.refreshEvent(RedDotType.TopWarChallengeFreeNum);\r\n\r\n    }\r\n    on_s2c_WorldBossSweepRsp(msg: proto.Msg_WorldBossSweepRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.worldBossMsg = msg.data as proto.Msg_WorldBossDataPush;\r\n        }\r\n    }\r\n\r\n    on_s2c_DailyChallengeDataPush(msg: proto.Msg_DailyChallengeDataPush) {\r\n        GameplayViewDataMgr.ins.dailyChallengeDataMsg = msg.data;\r\n        GameplayViewDataMgr.ins.dailyChallengeBuffs = msg.bufferList;\r\n        log(\"收到每日挑战数据==\", msg);\r\n        RedMgr.refreshEvent(RedDotType.EveryDayChallengeUpReward); \r\n        RedMgr.refreshEvent(RedDotType.EveryDayChallengeBoxReward);\r\n        RedMgr.refreshEvent(RedDotType.EveryDayChallengeFreeNum);\r\n\r\n    }\r\n    on_s2c_DailyChallengeLevelRsp(msg: proto.Msg_DailyChallengeLevelRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.dailyChallengeDataMsg = msg.data;\r\n            RedMgr.refreshEvent(RedDotType.EveryDayChallengeUpReward); \r\n  \r\n        }\r\n    }\r\n\r\n    on_s2c_DailyChallengeRewardRsp(msg: proto.Msg_DailyChallengeRewardRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.dailyChallengeDataMsg = msg.data;\r\n            RedMgr.refreshEvent(RedDotType.EveryDayChallengeBoxReward);\r\n        }\r\n    }\r\n    on_s2c_DailyChallengeSweepRsp(msg: proto.Msg_DailyChallengeSweepRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.dailyChallengeDataMsg = msg.data;\r\n            RedMgr.refreshEvent(RedDotType.EveryDayChallengeFreeNum);\r\n        }\r\n    }\r\n    on_s2c_DailyChallengeWatchAdvRsp(msg: proto.Msg_DailyChallengeWatchAdvRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.dailyChallengeDataMsg = msg.data;\r\n            RedMgr.refreshEvent(RedDotType.EveryDayChallengeFreeNum);\r\n        }\r\n    }\r\n\r\n    on_s2c_GetClimbTowerInfoRsp(msg: proto.Msg_GetClimbTowerInfoRsp) {\r\n        // if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n        //     GameplayViewDataMgr.ins.dailyChallengeDataMsg = msg.data;\r\n        // }\r\n        GameplayViewDataMgr.ins.climbTowerInfoMsg = msg;\r\n        RedMgr.refreshEvent(RedDotType.ClimbingTowerStageReward);\r\n        RedMgr.refreshEvent(RedDotType.ClimbingTowerDailyReward);\r\n        RedMgr.refreshEvent(RedDotType.ClimbingTowerChallenge);\r\n    }\r\n    on_s2c_ReceiveClimbTowerDailyRewardsRsp(msg: proto.Msg_ReceiveClimbTowerDailyRewardsRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.climbTowerInfoMsg.isReceivedDailyRewards = true;\r\n            RedMgr.refreshEvent(RedDotType.ClimbingTowerDailyReward);\r\n        }\r\n    }\r\n    on_s2c_ReceiveClimbTowerClearStageRewardsRsp(msg: proto.Msg_ReceiveClimbTowerClearStageRewardsRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.climbTowerInfoMsg.receivedFirstRewardStageIds.push(msg.stageId)\r\n            RedMgr.refreshEvent(RedDotType.ClimbingTowerStageReward);\r\n        }\r\n    }\r\n    on_s2c_QuickFinishClimbTowerStageRsp(msg: proto.Msg_QuickFinishClimbTowerStageRsp) {\r\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\r\n            GameplayViewDataMgr.ins.climbTowerInfoMsg.clearedStageIds.push(msg.stageId);\r\n            RedMgr.refreshEvent(RedDotType.ClimbingTowerStageReward);\r\n            RedMgr.refreshEvent(RedDotType.ClimbingTowerChallenge);\r\n        }\r\n    }\r\n    on_red_ClimbingTowerChallenge() {\r\n        return false;\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_ClimbTower)){\r\n            return false;\r\n        }\r\n        if (GameplayViewDataMgr.ins.climbTowerInfoMsg) {\r\n            let total = tab.getData().GetKeyValue_ConfigTable().ClimbTowerDefeatCount;\r\n            let last = total - GameplayViewDataMgr.ins.climbTowerInfoMsg.defeatTimes;\r\n            return last > 0;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n    on_red_ClimbingTowerDailyReward() {\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_ClimbTower)){\r\n            return false;\r\n        }\r\n        if (GameplayViewDataMgr.ins.climbTowerInfoMsg&&GameplayViewDataMgr.ins.climbTowerInfoMsg.clearedStageIds.length>0) {\r\n            return !GameplayViewDataMgr.ins.climbTowerInfoMsg.isReceivedDailyRewards;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    on_red_ClimbingTowerStageReward() {\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_ClimbTower)){\r\n            return false;\r\n        }\r\n        let msg=GameplayViewDataMgr.ins.climbTowerInfoMsg;\r\n        if (msg) {\r\n            let tables = tab.getData().PveClearStageTable;\r\n            let receives = msg.receivedFirstRewardStageIds;\r\n            let passId = GameplayViewDataMgr.ins.getClimbTowerPassLevelId()\r\n            for (let key in tables) {\r\n                if (tables[key].StageType == tab.PveStageType.PveStageType_ClimbTower) {\r\n                    let t = tables[key];\r\n                    if (passId >= t.StageId) {\r\n                        if (receives.indexOf(t.StageId) < 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    on_red_EveryDayChallengeFreeNum() {\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_DailyChallenge)){\r\n            return false;\r\n        }\r\n        if(!GameplayViewDataMgr.ins.dailyChallengeDataMsg){\r\n            return false;\r\n        }\r\n        let lastTimer = GameplayViewDataMgr.ins.dailyChallengeDataMsg.challengeTotalCount - GameplayViewDataMgr.ins.dailyChallengeDataMsg.challengeCount;\r\n        return lastTimer > 0;\r\n    }\r\n    on_red_EveryDayChallengeBoxReward() {\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_DailyChallenge)){\r\n            return false;\r\n        }\r\n        if(!GameplayViewDataMgr.ins.dailyChallengeDataMsg){\r\n            return false;\r\n        }\r\n        let level=GameplayViewDataMgr.ins.dailyChallengeDataMsg.level;\r\n        let receivedScore = GameplayViewDataMgr.ins.dailyChallengeDataMsg.receivedScore;\r\n       let table = tab.getData().DailyChallengeLevelTableByLevel.getValue(level);\r\n       let currScore = GameplayViewDataMgr.ins.dailyChallengeDataMsg.score;\r\n        let requires = table.Require;\r\n        for (let i: number = 0; i < requires.length; i++) {\r\n            if(currScore>=requires[i]&& requires[i] > receivedScore)\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    on_red_EveryDayChallengeUpReward() {\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_DailyChallenge)){\r\n            return false;\r\n        }\r\n        if(!GameplayViewDataMgr.ins.dailyChallengeDataMsg){\r\n            return false;\r\n        }\r\n        let level=GameplayViewDataMgr.ins.dailyChallengeDataMsg.level;\r\n        let nextTable = tab.getData().DailyChallengeLevelTableByLevel.getValue(level + 1);\r\n        if (nextTable) {\r\n            if (BattleMainDataControl.ins.getIsPasstStageByStageId(nextTable.MainStageLimit)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n            //ShowTips(\"已达到当前最高难度\")\r\n\r\n        }\r\n    }\r\n\r\n    on_red_TopWarChallengeFreeNum(){\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_Challenge)){\r\n            return false;\r\n        }\r\n        if(!OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_WorldBoss)){\r\n            return false;\r\n        }\r\n        if(!GameplayViewDataMgr.ins.worldBossMsg){\r\n            return false;\r\n        }\r\n        let freeCount=tab.getData().GetKeyValue_ConfigTable().WorldBossDailyCount;\r\n        let num=GameplayViewDataMgr.ins.worldBossMsg.challengeCount;\r\n        return num<freeCount;\r\n    }\r\n}\r\n\r\n\r\n"]}