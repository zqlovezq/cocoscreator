{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/view/common/FightBossBar.ts"],"names":["_decorator","Node","EventMgr","FightEvent","FightBossBarItem","ComponentBase","FrameControl","AbsObjType","FightData","ccclass","property","FightBossBar","validBoss","onLoad","ins","isWorldAndGuildBoss","singleBar","node","active","topBar","updateValidBoss","register","onFight","Boss_Enter","onBoss_Enter","Boss_Dead_State","onBoss_Dead_State","Fight_Monster_Dead","onFight_Monster_Dead","absRole","dead","index","doubleBars","length","v","info","isBoss","list","getObjList","enemy","isDead","push","setBoss","doubleNode"],"mappings":"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","sourcesContent":["import { _decorator, Button, Color, Component, Label, Node, Prefab, ProgressBar, Sprite } from \"cc\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { HeroFightInfo } from \"../../data/HeroFightInfo\";\nimport { EventMgr } from \"../../../mgr/EventMgr\";\nimport { FightEvent } from \"../../define/FightEvent\";\nimport { UIMgr } from \"../../../mgr/UIMgr\";\nimport { ViewName } from \"../../../define/ViewDefine\";\nimport { HeroInfo } from \"../../../model/hero/HeroInfo\";\nimport { FightAttrData } from \"../../data/FightAttrData\";\nimport { FightMacro } from \"../../define/FightDefine\";\nimport { roots } from \"protobufjs\";\nimport { FightBossBarItem } from \"./FightBossBarItem\";\nimport { ComponentBase } from \"../../../../framework/base/ComponentBase\";\nimport { AbsRole } from \"../../base/obj/role/AbsRole\";\nimport { Monster } from \"../../base/obj/role/monster/Monster\";\nimport { FrameControl } from \"../../base/frame/FrameControl\";\nimport { AbsObjType } from \"../../base/obj/AbsObj\";\nimport { FightDamageRankItem } from \"../damage/FightDamageRankItem\";\nimport { FightData } from \"../../data/FightData\";\n\nconst { ccclass, property } = _decorator;\n/** 战斗Boss血条，  单boss、双boss*/\n@ccclass('FightBossBar')\nexport class FightBossBar extends ComponentBase {\n\n    @property(FightBossBarItem)\n    singleBar: FightBossBarItem = null\n\n    @property(Node)\n    doubleNode: Node = null\n\n    @property([FightBossBarItem])\n    doubleBars: FightBossBarItem[] = []\n\n    @property(FightBossBarItem)\n    topBar: FightBossBarItem = null\n\n\n    validBoss: Monster[] = []\n    protected onLoad(): void {\n        super.onLoad()\n        if (FightData.ins.isWorldAndGuildBoss()) {\n            this.singleBar.node.active = false\n            this.singleBar = this.topBar\n        }\n        this.updateValidBoss()\n    }\n    register(): void {\n        EventMgr.onFight(FightEvent.Boss_Enter, this.onBoss_Enter, this)\n        EventMgr.onFight(FightEvent.Boss_Dead_State, this.onBoss_Dead_State, this)\n        EventMgr.onFight(FightEvent.Fight_Monster_Dead, this.onFight_Monster_Dead, this)\n    }\n\n    onBoss_Enter(absRole: AbsRole) {\n        this.updateValidBoss()\n    }\n\n    onBoss_Dead_State() {\n        this.singleBar.dead()\n        for (let index = 0; index < this.doubleBars.length; index++) {\n            const v = this.doubleBars[index];\n            v.dead()\n        }\n    }\n\n    onFight_Monster_Dead(absRole: Monster) {\n        if (absRole.info && absRole.info.isBoss) {\n            this.updateValidBoss()\n        }\n    }\n\n    updateValidBoss() {\n        this.validBoss.length = 0\n        let list: Monster[] = FrameControl.ins.getObjList(AbsObjType.enemy) as Monster[]\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            if (v.info && v.info.isBoss && !v.isDead) {\n                this.validBoss.push(v)\n            }\n        }\n\n        this.node.active = false\n        this.singleBar.setBoss(null)\n        for (let index = 0; index < this.doubleBars.length; index++) {\n            const v = this.doubleBars[index];\n            v.setBoss(null)\n        }\n\n        if (this.validBoss.length == 1) {\n            this.node.active = true\n            this.singleBar.node.active = true\n            this.doubleNode.active = false\n            this.singleBar.setBoss(this.validBoss[0])\n        } else if (this.validBoss.length == 2) {\n            this.node.active = true\n            this.singleBar.node.active = false\n            this.doubleNode.active = true\n            for (let index = 0; index < this.doubleBars.length; index++) {\n                const v = this.doubleBars[index];\n                v.setBoss(this.validBoss[index])\n            }\n        }\n    }\n}"]}