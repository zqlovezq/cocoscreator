{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/AdMgr.ts"],"names":["AdMgr","log","tab","RoleData","proto","Net","ShowTips","ChannelMgr","Func","P8PostEventName","OpenFunctionMgr","LangMgr","_map","Map","isCanAd","isHasSdk","adCompleteCb","ins","instance","init","advData","adv","data","i","length","set","type","count","initSdk","initRewardedAd","retData","code","checkInt","showAD","callBack","showRewardedAd","refreshData","playVideoAd","isSendMsg","failCallback","maxCount","getAdCountMaxByType","getAdCountByType","getLab","success","msg","Msg_WatchAdReq","Send","Ptl","WatchAdReq","checkFunctionIsOpen","OpenFunctionName","OpenFunctionName_SkipAd","postEvent","ad_click","console","ad_Impression","get","AdTab","getData","AdvertPosTableByAdType","getValue","AdvertCount"],"mappings":"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","sourcesContent":["import { _decorator, log } from 'cc';\r\nimport { tab } from '../../Table/table_gen';\r\nimport { RoleData } from './role/RoleData';\r\nimport { proto } from 'client_protocol';\r\nimport { Net } from '../net/Net';\r\nimport { ShowTips } from '../mgr/UIMgr';\r\nimport { ChannelMgr } from '../../channel/ChannelMgr';\r\nimport { Func } from '../utils/Func';\r\nimport { P8PostEventName } from '../../channel/ChannelDefine';\r\nimport { OpenFunctionMgr } from '../../Common/component/OpenFunctionMgr';\r\nimport { LangMgr } from '../mgr/LangMgr';\r\nexport class AdMgr {\r\n    private static instance: AdMgr = null;\r\n    private _map: Map<tab.AdType, number> = new Map();\r\n    public static get ins() {\r\n        if (this.instance == null) {\r\n            this.instance = new AdMgr();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    /** 是否可展示广告 */\r\n    isCanAd: boolean = false\r\n    /** 是否已初始化sdk */\r\n    isHasSdk: boolean = false\r\n    /** 广告播放完成 */\r\n    adCompleteCb: Function\r\n    init() {\r\n        const advData = RoleData.ins.adv.data;\r\n        for (let i = 0; i < advData.length; i++) {\r\n            this._map.set(advData[i].type, advData[i].count);\r\n        }\r\n    }\r\n\r\n    /** 初始化广告sdk */\r\n    initSdk() {\r\n        if (this.isHasSdk) return\r\n        this.isHasSdk = true\r\n        ChannelMgr.initRewardedAd({}, (retData: any) => {\r\n            if (retData) {\r\n                retData.code = Func.checkInt(retData.code)\r\n                if (retData.code == 0) { //用户应该被奖励\r\n                    this.adCompleteCb && this.adCompleteCb({ code: 0 })\r\n                } else if (retData.code == 1) { //广告初始化成功\r\n                } else if (retData.code == 2) { //广告加载完毕\r\n                    this.isCanAd = true\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    private showAD(callBack: Function) {\r\n        this.isCanAd = false\r\n        this.adCompleteCb = callBack\r\n        ChannelMgr.showRewardedAd()\r\n    }\r\n\r\n    refreshData(data: proto.IAdvWatchData) {\r\n        this._map.set(data.type, data.count);\r\n    }\r\n    /**\r\n     * 播放视频广告\r\n     * @param type 广告类型\r\n     * @param callBack 成功回调函数\r\n     *  @param isSendMsg 是否发送观看广告成功消息\r\n     */\r\n    playVideoAd(type: tab.AdType, callBack: Function, isSendMsg: boolean = false,failCallback:Function = null) {\r\n        //处理sdk播放逻辑 \r\n        let maxCount = this.getAdCountMaxByType(type);\r\n        if (maxCount > -1 && this.getAdCountByType(type) >= this.getAdCountMaxByType(type)) {\r\n            //ShowTips(\"廣告次數不足\");\r\n            ShowTips(LangMgr.getLab(\"Tips_ad_1\"));\r\n            failCallback && failCallback()\r\n            return;\r\n        }\r\n    \r\n        //观看成功逻辑\r\n        let success = () => {\r\n            if (isSendMsg) {\r\n                let msg = new proto.Msg_WatchAdReq();\r\n                msg.type = type;\r\n                Net.Send(proto.Ptl.WatchAdReq, msg);\r\n            }\r\n            if (callBack) {\r\n                callBack();\r\n            }\r\n        }\r\n        if(OpenFunctionMgr.ins.checkFunctionIsOpen(tab.OpenFunctionName.OpenFunctionName_SkipAd)){\r\n            success();\r\n            log(\"----------月卡跳过广告---------\");\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.isCanAd) {\r\n           ChannelMgr.postEvent(P8PostEventName.ad_click)\r\n            this.showAD((retData: any) => {\r\n                console.log(\"广告播放完成、失败\", retData.code)\r\n                if (retData.code == 0) {\r\n                    success(); //观看成功\r\n                    ChannelMgr.postEvent(P8PostEventName.ad_Impression);\r\n                } else {\r\n                    ShowTips(\"ad error\" + retData.code)\r\n                    failCallback && failCallback()\r\n                }\r\n            })\r\n        } else {\r\n            console.log(\"sdk广告加载未成功\")\r\n            failCallback && failCallback()\r\n        }\r\n\r\n    }\r\n    /* 根据广告类型返回 最大的广告次数和剩余的广告次数 */\r\n    getAdCountByType(type: tab.AdType) {\r\n        return this._map.get(type) ? this._map.get(type) : 0;\r\n    }\r\n    getAdCountMaxByType(type: tab.AdType) {\r\n        const AdTab = tab.getData().AdvertPosTableByAdType.getValue(type);\r\n        return AdTab.AdvertCount;\r\n    }\r\n}\r\n\r\n\r\n"]}