{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/login/LoginData.ts"],"names":["LoginData","_decorator","AbsData","tab","ccclass","property","gatewayAddrs","uid","token","nickName","openId","default_area","default_area_name","password","serverAddress","loginGroup","serverName","recommendRoleID","loginServerTab","isCreatRole","isLogin","serverId","ins","_instance","purge","setServerId","id","getServerlistTable","Address","Name","console","log","data","getData","ServerlistTableByID","getValue"],"mappings":";;;yGAQaA,S;;;;;;;;;;;;;;;;;;;AARUC,MAAAA,U,OAAAA,U;;AACFC,MAAAA,O,iBAAAA,O;;AACZC,MAAAA,G,iBAAAA,G;;;;;;;;;OAIH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;2BAEjBD,S,GAAN,MAAMA,SAAN;AAAA;AAAA,8BAAgC;AAAA;AAAA;AAAA,eAS5BM,YAT4B;AAAA,eAU5BC,GAV4B,GAUd,EAVc;AAAA,eAW5BC,KAX4B,GAWZ,EAXY;AAAA,eAY5BC,QAZ4B,GAYT,EAZS;AAAA,eAa5BC,MAb4B,GAaX,EAbW;AAAA,eAc5BC,YAd4B,GAcL,CAdK;AAAA,eAe5BC,iBAf4B,GAeD,EAfC;AAAA,eAiB5BC,QAjB4B,GAiBT,EAjBS;AAAA,eAmB5BC,aAnB4B,GAmBJ,EAnBI;AAAA,eAoB5BC,UApB4B,GAoBP,EApBO;AAAA,eAqB5BC,UArB4B,GAqBP,EArBO;AAAA,eAsB5BC,eAtB4B,GAsBF,EAtBE;AAAA,eAwB5BC,cAxB4B;AAAA,eA0B5BC,WA1B4B,GA0Bd,KA1Bc;AAAA,eA4B5BC,OA5B4B,GA4BlB,KA5BkB;AAAA,eA8B5BC,QA9B4B;AAAA;;AAEd,mBAAHC,GAAG,GAAG;AACpB,cAAI,QAAQ,KAAKC,SAAjB,EAA4B;AACxB,iBAAKA,SAAL,GAAiB,IAAIvB,SAAJ,EAAjB;AACH;;AACD,iBAAO,KAAKuB,SAAZ;AACH;;AAwBDC,QAAAA,KAAK,GAAS,CAEb;;AAEDC,QAAAA,WAAW,CAACC,EAAD,EAAa;AACpB,eAAKL,QAAL,GAAgBK,EAAE,IAAI,CAAtB;AACA,eAAKR,cAAL,GAAsB,KAAKS,kBAAL,EAAtB;AACA,eAAKb,aAAL,GAAqB,KAAKI,cAAL,CAAoBU,OAAzC;AACA,eAAKZ,UAAL,GAAkB,KAAKE,cAAL,CAAoBW,IAAtC;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,cAAjB;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKV,QAA5B;AACH;;AAEDM,QAAAA,kBAAkB,GAAwB;AACtC,cAAIK,IAAJ,CADsC,CAEtC;AACA;AACA;AACA;AACA;AACA;;AAEAA,UAAAA,IAAI,GAAG;AAAA;AAAA,0BAAIC,OAAJ,GAAcC,mBAAd,CAAkCC,QAAlC,CAA2C,KAAKd,QAAhD,CAAP;;AACA,cAAI,CAACW,IAAL,EAAW;AACP,gDAAkC,KAAKX,QAAvC;AACH;;AACD,iBAAOW,IAAP;AACH;;AA1DkC,O;;AAA1BhC,MAAAA,S,CACMuB,S","sourcesContent":["import { Node, Prefab, _decorator } from \"cc\";\nimport { AbsControl, AbsData, AbsMgr } from \"../../../framework/base/IAbs\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { PREVIEW } from \"cc/env\";\n\n\nconst { ccclass, property } = _decorator;\n\nexport class LoginData extends AbsData {\n    private static _instance: LoginData;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new LoginData();\n        }\n        return this._instance;\n    }\n\n    public gatewayAddrs: string[]\n    public uid: string = \"\"\n    public token: string = \"\"\n    public nickName: string = \"\";\n    public openId: string = \"\"\n    public default_area: number = 0\n    public default_area_name:string = \"\"\n\n    public password: string = \"\"\n\n    public serverAddress: string = \"\";\n    public loginGroup: string = \"\";\n    public serverName: string = \"\";\n    public recommendRoleID: string = \"\";\n\n    public loginServerTab: tab.ServerlistTable\n\n    public isCreatRole = false;\n\n    public isLogin = false\n\n    public serverId: number\n    purge(): void {\n\n    }\n\n    setServerId(id: number) {\n        this.serverId = id || 1\n        this.loginServerTab = this.getServerlistTable()\n        this.serverAddress = this.loginServerTab.Address;\n        this.serverName = this.loginServerTab.Name;\n        console.log(this.loginServerTab)\n        console.log(\"当前服务器id\", this.serverId)\n    }\n\n    getServerlistTable(): tab.ServerlistTable {\n        let data: tab.ServerlistTable;\n        // if (window.login_addr_id) {\n        //     id = window.login_addr_id\n        //     if (id == AppType.release) {\n        //         return WechatServerTab\n        //     }\n        // }\n\n        data = tab.getData().ServerlistTableByID.getValue(this.serverId)\n        if (!data) {\n            throw `cannot find serverlist i=${this.serverId}`\n        }\n        return data\n    }\n}"]}