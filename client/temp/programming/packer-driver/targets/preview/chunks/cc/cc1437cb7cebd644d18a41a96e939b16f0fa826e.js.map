{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/util/Random.ts"],"names":["Random","tab","FightMacro","range","min","max","seed","Date","getTime","rnd","getRandomInt","Math","floor","getInt","getInt10000","isSuccess","chance","MAX_CHANCE","PFromC","C","dCurP","dPreSuccessP","dPE","nMaxFail","ceil","i","CFromP","P","conf","getData","PRBTableById","getValue","CValue"],"mappings":";;;+CAMaA,M;;;;;;;;;;;;;;;;;;AANJC,MAAAA,G,iBAAAA,G;;AACAC,MAAAA,U,iBAAAA,U;;;;;;;AAET;AACA;AACA;wBACaF,M,GAAN,MAAMA,MAAN,CAAa;AAIG,eAALG,KAAK,CAACC,GAAD,EAAcC,GAAd,EAAmC;AAClD,cAAI,CAAC,KAAKC,IAAN,IAAc,KAAKA,IAAL,IAAa,CAA/B,EAAkC;AAC9B,iBAAKA,IAAL,GAAY,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACH;;AACDH,UAAAA,GAAG,GAAGA,GAAG,IAAI,CAAb;AACAD,UAAAA,GAAG,GAAGA,GAAG,IAAI,CAAb;AAEA,eAAKE,IAAL,GAAY,CAAC,KAAKA,IAAL,GAAY,IAAZ,GAAmB,KAApB,IAA6B,MAAzC;AACA,cAAIG,GAAG,GAAG,KAAKH,IAAL,GAAY,QAAtB;AACA,iBAAOF,GAAG,GAAGK,GAAG,IAAIJ,GAAG,GAAGD,GAAV,CAAhB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACuB,eAAZM,YAAY,CAACN,GAAD,EAAcC,GAAd,EAA2B;AAC1C;AACA,iBAAOM,IAAI,CAACC,KAAL,CAAW,KAAKT,KAAL,CAAWC,GAAX,EAAgBC,GAAhB,CAAX,CAAP;AACH;AAED;;;AACa,eAANQ,MAAM,GAAG;AACZ,iBAAOb,MAAM,CAACU,YAAP,CAAoB,CAApB,EAAuB,GAAvB,CAAP;AACH;AACD;;;AACkB,eAAXI,WAAW,GAAG;AACjB,iBAAOd,MAAM,CAACU,YAAP,CAAoB,CAApB,EAAuB,KAAvB,CAAP;AACH;AAED;;;AACgB,eAATK,SAAS,CAACC,MAAD,EAAiB;AAC7B,iBAAOA,MAAM,KAAKA,MAAM,IAAI;AAAA;AAAA,wCAAWC,UAArB,IAAmCD,MAAM,IAAIhB,MAAM,CAACc,WAAP,EAAlD,CAAb;AACH;;AAIY,eAANI,MAAM,CAACC,CAAD,EAAoB;AAC7B,cAAIC,KAAa,GAAG,GAApB;AACA,cAAIC,YAAoB,GAAG,GAA3B;AACA,cAAIC,GAAW,GAAG,CAAlB;AACA,cAAIC,QAAgB,GAAGZ,IAAI,CAACa,IAAL,CAAU,MAAML,CAAhB,CAAvB;;AACA,eAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,QAArB,EAA+B,EAAEE,CAAjC,EAAoC;AAChCL,YAAAA,KAAK,GAAGT,IAAI,CAACP,GAAL,CAAS,GAAT,EAAcqB,CAAC,GAAGN,CAAlB,KAAwB,IAAIE,YAA5B,CAAR;AACAA,YAAAA,YAAY,IAAID,KAAhB;AACAE,YAAAA,GAAG,IAAIG,CAAC,GAAGL,KAAX;AACH;;AACD,iBAAO,MAAME,GAAb;AACH;;AAEY,eAANI,MAAM,CAACC,CAAD,EAAoB;AAC7B,cAAIC,IAAI,GAAI;AAAA;AAAA,0BAAIC,OAAJ,GAAcC,YAAd,CAA2BC,QAA3B,CAAoCpB,IAAI,CAACC,KAAL,CAAWe,CAAX,CAApC,CAAZ;;AACA,cAAIC,IAAJ,EAAS;AACL,mBAAOA,IAAI,CAACI,MAAZ;AACH;;AACD,iBAAOL,CAAP,CAL6B,CAO7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAjFe,O;;AAAP3B,MAAAA,M,CAEFM,I,GAAe,C","sourcesContent":["import { tab } from \"../../../Table/table_gen\";\nimport { FightMacro } from \"../define/FightDefine\";\n\n/**\n * 随机数\n */\nexport class Random {\n\n    static seed: number = 0\n\n    public static range(min: number, max: number): number {\n        if (!this.seed && this.seed != 0) {\n            this.seed = new Date().getTime();\n        }\n        max = max || 1;\n        min = min || 0;\n\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        var rnd = this.seed / 233280.0;\n        return min + rnd * (max - min);\n    }\n\n    /**\n    获取随机整数\n    @param min 随机的最小值\n    @param max 随机的最大值(不包括该值)\n    @returns 返回一个整数，范围是 [min, max)\n    */\n    static getRandomInt(min: number, max: number) {\n        // return Math.floor(Math.random() * (max - min)) + min;\n        return Math.floor(this.range(min, max))\n    }\n\n    /** 获取一个0-100的随机数 */\n    static getInt() {\n        return Random.getRandomInt(0, 101)\n    }\n    /** 获取一个0-10000的随机数*/\n    static getInt10000() {\n        return Random.getRandomInt(0, 10001)\n    }\n\n    /** 检测概率是否成功 获取一个0-10000的随机数 */\n    static isSuccess(chance: number) {\n        return chance && (chance >= FightMacro.MAX_CHANCE || chance >= Random.getInt10000())\n    }\n\n\n\n    static PFromC(C: number): number {\n        let dCurP: number = 0.0;\n        let dPreSuccessP: number = 0.0;\n        let dPE: number = 0;\n        let nMaxFail: number = Math.ceil(1.0 / C);\n        for (let i = 1; i <= nMaxFail; ++i) {\n            dCurP = Math.min(1.0, i * C) * (1 - dPreSuccessP);\n            dPreSuccessP += dCurP;\n            dPE += i * dCurP;\n        }\n        return 1.0 / dPE;\n    }\n\n    static CFromP(P: number): number {\n        let conf  = tab.getData().PRBTableById.getValue(Math.floor(P))\n        if (conf){\n            return conf.CValue\n        }\n        return P\n\n        // let dUp: number = P;\n        // let dLow: number = 0.0;\n        // let dMid: number = P;\n        // let dPLast: number = 1.0;\n        // while (true) {\n        //     dMid = (dUp + dLow) / 2.0;\n        //     let dPtested: number = Random.PFromC(dMid);\n        //     if (Math.abs(dPtested - dPLast) <= 0.0) {\n        //         break;\n        //     }\n        //     if (dPtested > P) {\n        //         dUp = dMid;\n        //     } else {\n        //         dLow = dMid;\n        //     }\n        //     dPLast = dPtested;\n        // }\n        // return dMid;\n    }\n}\n"]}