{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/FightMsgControl.ts"],"names":["FightMsgControl","Asset","JsonAsset","Material","SpriteAtlas","SpriteFrame","_decorator","resources","sp","proto","AbsControl","LocalEvent","EventMgr","Net","SceneMgr","FightRootControl","tab","FightData","TestAttr","ViewName","UIMgr","RoleData","CommonTipsPop","LangMgr","loadByResMap","Loading","ShaderUtil","Func","GuideController","PvpControl","DataViewReader","PREVIEW","ccclass","property","isTest","reviveCallBack","ins","_instance","register","onMsg","Ptl","FightInfoPush","on_s2c_Msg_FightInfoPush","FinishStageRsp","on_s2c_Msg_FinishStageRsp","ReviveOnStageRsp","on_s2c_ReviveOnStageRsp","FincaBattleFightRsp","on_s2c_FincaBattleFightRsp","onLocal","FightResLoadComplete","onFightResLoadComplete","startState","stageId","msg","Msg_StartStageReq","Send","StartStageReq","console","log","isPvp","start","loadLevelJson","initSkill","warn","JSON","stringify","info","setFightInfo","init","enterFight","fightResult","error","code","CommonErrorCode","Succeed","create","getLab","enterMain","Msg_FinishStageReq","Result","Quit","curClearStageId","show","viewName","FightAssociationBossResultPop","data","cb","FightWinPop","rewards","Win","isGuiding","emitLocal","FightWin","setRewards","clientData","failTimes","setClientData","Lose","FightLosePop","pveTab","getData","PveStageTableByStageId","getValue","StageType","PveStageType","PveStageType_EliteChapter","elite_msg","Msg_GetEliteStageInfoReq","GetEliteStageInfoReq","PveStageType_MainChapter","req","Msg_GetMainStageInfoReq","GetMainStageInfoReq","sendFightResult","FinishStageReq","requestReviveOnStage","Msg_ReviveOnStageReq","ReviveOnStageReq","isSweep","pb","decode","recording","toNumber52","fincaBattleFightRsp","setPvpInfo","getTestHeros","tests","id","level","itemId","star","skillList","attrList","list","index","length","v","concat","attack","hero","HeroFightData","push","testFight","state","Msg_FightInfoPush","FightInfo","heroData","testFightPvp","FightPvP","fightInfo","fightFlow","pvpInfo","Msg_PvPFightInfo","roleId","toString","books","i","element","bufferList","bookList","testFightPvpMsg","load","reader","unit8","Uint8Array","getBuffer","getOffset","getPos","getLen","loadRes","fb","loadlPvpRes","loadJson","stageJsonPath","get","getInfoWithPath","levelJson","url","flashWhiteSprite","type","flashWhiteSpine","stageTab","Background","animIds","skillIds","phaseList","times","forEach","isMonster","monster","MonsterTableById","monsterId","MonsterType","MonsterType_BossMonster","time","IdleAnimationId","WalkAnimationId","DeadAnimationId","BornAnimationId","SkillIds","heroTab","HeroTableById","Idle","animTab","AnimationTableById","forBy","Path","assetType","Type","AnimationType","AnimationType_SpriteFrame","AnimationType_SkeletonData","SkeletonData","AnimationType_Plist","progress","setProgress","Promise","resolve","resource","fightPvp","j"],"mappings":"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","sourcesContent":["import { Asset, JsonAsset, Material, Node, Prefab, SpriteAtlas, SpriteFrame, _decorator, error, js, log, resources, setRandGenerator, sp, sys, url } from \"cc\";\nimport { proto } from \"client_protocol\";\nimport { AbsControl } from \"../../framework/base/IAbs\";\nimport { LocalEvent } from \"../define/LocalEvent\";\nimport { EventMgr } from \"../mgr/EventMgr\";\nimport { Net } from \"../net/Net\";\nimport { SceneMgr } from \"../mgr/SceneMgr\";\nimport { FightRootControl } from \"./FightRootControl\";\nimport { tab } from \"../../Table/table_gen\";\nimport { FightData } from \"./data/FightData\";\nimport { Random } from \"./util/Random\";\nimport { TestAttr } from \"../../TestAttr\";\nimport { FrameControl } from \"./base/frame/FrameControl\";\nimport { AbsObjType } from \"./base/obj/AbsObj\";\nimport { ViewName } from \"../define/ViewDefine\";\nimport { UIMgr } from \"../mgr/UIMgr\";\nimport { WorldBossControll } from \"./stage/WorldBossControll\";\nimport { RoleData } from \"../model/role/RoleData\";\nimport { CommonTipsPop } from \"../model/common/CommonTipsPop\";\nimport { LangMgr } from \"../mgr/LangMgr\";\nimport { loadByResMap } from \"../mgr/ResMgr\";\nimport { Loading } from \"../model/Loading\";\nimport { ShaderUtil } from \"../utils/ShaderUtil\";\nimport { TalentBigTipsPop } from \"../model/mutation/TalentBigTipsPop\";\nimport { Func } from \"../utils/Func\";\nimport { GuideController } from \"../guide/GuideController\";\nimport { PvpControl } from \"./pvp/PvpControl\";\nimport { DataViewReader } from \"../net/DataViewRW\";\nimport { PREVIEW } from \"cc/env\";\n\n\nconst { ccclass, property } = _decorator;\n\n\nexport class FightMsgControl extends AbsControl {\n\n    private static _instance: FightMsgControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new FightMsgControl();\n        }\n        return this._instance;\n    }\n    isTest: boolean = false\n    private reviveCallBack: Function;\n\n    register(): void {\n        EventMgr.onMsg(proto.Ptl.FightInfoPush, this.on_s2c_Msg_FightInfoPush, this)\n        EventMgr.onMsg(proto.Ptl.FinishStageRsp, this.on_s2c_Msg_FinishStageRsp, this)\n        EventMgr.onMsg(proto.Ptl.ReviveOnStageRsp, this.on_s2c_ReviveOnStageRsp, this);\n        EventMgr.onMsg(proto.Ptl.FincaBattleFightRsp, this.on_s2c_FincaBattleFightRsp, this);\n\n\n        EventMgr.onLocal(LocalEvent.FightResLoadComplete, this.onFightResLoadComplete, this)\n    }\n\n    startState(stageId: number) {\n        let msg = new proto.Msg_StartStageReq();\n        msg.stageId = stageId;\n        Net.Send(proto.Ptl.StartStageReq, msg)\n        this.isTest = false\n    }\n\n    //----------------处理回调---------------------\n    onFightResLoadComplete() {\n        console.log(\"onFightResLoadComplete-----------\")\n        if (FightData.ins.isPvp) {\n            PvpControl.ins.start()\n            return\n        }\n        FightData.ins.loadLevelJson()\n        FightData.ins.initSkill()\n        FightRootControl.ins.start()\n    }\n\n    on_s2c_Msg_FightInfoPush(msg: proto.Msg_FightInfoPush) {\n        if (PREVIEW) {\n            console.warn(\"PVE人物数据\\n\", JSON.stringify(msg.info))\n        }\n\n        this.setFightInfo(msg)\n        this.isTest = false\n    }\n\n    setFightInfo(msg: proto.Msg_FightInfoPush) {\n        FightData.ins.init()\n        FightData.ins.setFightInfo(msg.info as proto.FightInfo)\n\n        SceneMgr.ins.enterFight()\n    }\n    on_s2c_Msg_FinishStageRsp(msg: proto.Msg_FinishStageRsp) {\n        console.log(`获取最新关卡信息${FightRootControl.ins.fightResult}`)\n        if (msg.error && msg.error.code != proto.CommonErrorCode.Succeed) return;\n\n        if (msg.stageId == 0) {\n            CommonTipsPop.create(LangMgr.getLab(\"Tips_exception_1\"), () => {\n                FightRootControl.ins.enterMain();\n            })\n            return\n        }\n        if (FightRootControl.ins.fightResult !== proto.Msg_FinishStageReq.Result.Quit) {\n            RoleData.ins.curClearStageId = msg.stageId;\n        }\n\n        if (msg.stageId === 50101) {\n            UIMgr.ins.show({\n                viewName: ViewName.FightAssociationBossResultPop, data: {\n                    cb: () => {\n                        UIMgr.ins.show({ viewName: ViewName.FightWinPop, data: msg.rewards })\n                    }\n                }\n            })\n        } else {\n            if (FightRootControl.ins.fightResult == proto.Msg_FinishStageReq.Result.Win) {\n                if (GuideController.ins.isGuiding() && (msg.stageId === 1 || msg.stageId === 103)) {\n                    EventMgr.emitLocal(LocalEvent.FightWin);\n                    GuideController.ins.setRewards(msg.rewards)\n                } else {\n                    UIMgr.ins.show({ viewName: ViewName.FightWinPop, data: msg.rewards })\n                }\n                if (msg.stageId === 102 && !RoleData.ins.clientData.failTimes) {\n                    RoleData.ins.setClientData(\"failTimes\", \"true\")\n                }\n            } else if (FightRootControl.ins.fightResult == proto.Msg_FinishStageReq.Result.Lose) {\n                // 显示失败\n                UIMgr.ins.show({ viewName: ViewName.FightLosePop, data: msg.rewards })\n            }\n        }\n        const pveTab = tab.getData().PveStageTableByStageId.getValue(msg.stageId);\n        if (pveTab.StageType === tab.PveStageType.PveStageType_EliteChapter) {\n            // 精英关卡信息\n            let elite_msg = new proto.Msg_GetEliteStageInfoReq();\n            Net.Send(proto.Ptl.GetEliteStageInfoReq, elite_msg);\n        } else if (pveTab.StageType === tab.PveStageType.PveStageType_MainChapter) {\n            // 普通关卡信息\n            let req = new proto.Msg_GetMainStageInfoReq();\n            Net.Send(proto.Ptl.GetMainStageInfoReq, req)\n        }\n    }\n\n    sendFightResult(req: proto.Msg_FinishStageReq) {\n        console.log(\"发送战斗结果   是否胜利？\", req)\n\n        Net.Send(proto.Ptl.FinishStageReq, req)\n        // Msg_GetMainStageInfoReq\n    }\n\n    /**\n    * 请求复活\n    */\n    requestReviveOnStage(reviveCallBack: Function) {\n        this.reviveCallBack = reviveCallBack;\n        let msg = new proto.Msg_ReviveOnStageReq();\n        // msg.id = id;\n        Net.Send(proto.Ptl.ReviveOnStageReq, msg)\n    }\n    // 复活返回\n    on_s2c_ReviveOnStageRsp(msg: proto.Msg_ReviveOnStageRsp) {\n        if (!msg.error || msg.error.code == proto.CommonErrorCode.Succeed) {\n            if (this.reviveCallBack) {\n                this.reviveCallBack();\n            }\n        }\n        this.reviveCallBack = null;\n    }\n\n    /** pvp战斗 */\n    on_s2c_FincaBattleFightRsp(msg: proto.Msg_FincaBattleFightRsp) {\n        if (msg.error.code != proto.CommonErrorCode.Succeed) {\n            return\n        }\n        if (msg.isSweep) {\n            return\n        }\n\n        // let reader = new DataViewReader(msg.recording)\n        // let unit8 = new Uint8Array(reader.getBuffer(), reader.getOffset() + reader.getPos(), reader.getLen())\n        let pb = proto[\"FightPvP\"].decode(msg.recording)\n        Net.toNumber52(pb)\n        FightData.ins.init()\n        FightData.ins.fincaBattleFightRsp = msg\n        FightData.ins.setPvpInfo(pb)\n        SceneMgr.ins.enterFight()\n    }\n\n    getTestHeros(): proto.HeroFightData[] {\n        // let tests = [\n        //     { id: 1, level: 1, itemId: 1501, star: 3, skillList: [], attrList: [{ type: tab.AttrType.AttrType_Attack, value: 100 }, { type: tab.AttrType.AttrType_Hp, value: 100 }, { type: tab.AttrType.AttrType_Defence, value: 100 }] },\n        //     { id: 2, level: 1, itemId: 4403, star: 5, skillList: [], attrList: [{ type: tab.AttrType.AttrType_Attack, value: 100 }, { type: tab.AttrType.AttrType_Hp, value: 100 }, { type: tab.AttrType.AttrType_Defence, value: 100 }] },\n        //     { id: 3, level: 1, itemId: 1301, star: 3, skillList: [], attrList: [{ type: tab.AttrType.AttrType_Attack, value: 100 }, { type: tab.AttrType.AttrType_Hp, value: 100 }, { type: tab.AttrType.AttrType_Defence, value: 100 }] },\n        //     { id: 4, level: 1, itemId: 1201, star: 3, skillList: [], attrList: [{ type: tab.AttrType.AttrType_Attack, value: 100 }, { type: tab.AttrType.AttrType_Hp, value: 100 }, { type: tab.AttrType.AttrType_Defence, value: 100 }] },\n        //     { id: 5, level: 1, itemId: 1101, star: 3, skillList: [], attrList: [{ type: tab.AttrType.AttrType_Attack, value: 100 }, { type: tab.AttrType.AttrType_Hp, value: 100 }, { type: tab.AttrType.AttrType_Defence, value: 100 }] },\n        // ]\n        let tests = [\n            { id: 5, level: 1, itemId: 4301, star: 21, skillList: [], attrList: [] },\n            { id: 4, level: 1, itemId: 4103, star: 21, skillList: [], attrList: [] },\n            { id: 3, level: 1, itemId: 4204, star: 21, skillList: [], attrList: [] },\n            { id: 2, level: 1, itemId: 4401, star: 21, skillList: [], attrList: [] },\n            { id: 1, level: 1, itemId: 4503, star: 21, skillList: [], attrList: [] },\n        ]\n\n        let list = []\n        for (let index = 0; index < tests.length; index++) {\n            const v = tests[index];\n            v.attrList = [].concat(TestAttr.attack)\n            let hero = new proto.HeroFightData()\n            hero.id = v.id\n            hero.level = v.level\n            hero.itemId = v.itemId\n            hero.star = v.star\n            hero.skillList = v.skillList\n            hero.attrList = v.attrList\n            list.push(hero)\n        }\n\n        return list\n    }\n\n    testFight(state?: number) {\n        let msg = new proto.Msg_FightInfoPush()\n\n        let info = new proto.FightInfo()\n        info.stageId = state || 102 || 99999\n        info.heroData = this.getTestHeros()\n        info.skillList = []\n        msg.info = info\n\n        this.isTest = true\n        this.setFightInfo(msg)\n    }\n\n    testFightPvp() {\n        let msg = new proto.FightPvP()\n        msg.fightInfo = []\n        msg.fightFlow = []\n\n        for (let index = 0; index < 2; index++) {\n            let pvpInfo = new proto.Msg_PvPFightInfo()\n            pvpInfo.roleId = index.toString()\n            pvpInfo.books = [22501, 22404]\n            msg.fightInfo.push(pvpInfo)\n\n            let info = new proto.FightInfo()\n            info.heroData = this.getTestHeros()\n            for (let i = 0; i < info.heroData.length; i++) {\n                const element = info.heroData[i];\n                element.id = element.id + index * 5\n            }\n            info.stageId = 60001\n            info.skillList = []\n            info.bufferList = []\n            info.bookList = []\n\n            pvpInfo.fightInfo = info\n        }\n        this.isTest = true\n        FightData.ins.init()\n        FightData.ins.setPvpInfo(msg)\n        SceneMgr.ins.enterFight()\n    }\n\n    testFightPvpMsg() {\n        resources.load(\"pvp/1v1\", Asset, (error, data) => {\n            if (error) {\n                console.log(\"文件读取错误\")\n                return\n            }\n            // Net.onMessage({data:data._buffer} as any)\n            let reader = new DataViewReader(data[\"_buffer\"])\n            let unit8 = new Uint8Array(reader.getBuffer(), reader.getOffset() + reader.getPos(), reader.getLen())\n            let pb = proto[\"FightPvP\"].decode(unit8)\n            Net.toNumber52(pb)\n            this.isTest = true\n            FightData.ins.init()\n            pb.fightInfo[0].books = [22501, 22404]\n            pb.fightInfo[1].books = [22501, 22404]\n            FightData.ins.setPvpInfo(pb)\n            SceneMgr.ins.enterFight()\n        })\n    }\n\n    async loadRes(fb: Function) {\n        if (FightData.ins.isPvp) {\n            this.loadlPvpRes(fb)\n            return\n        }\n        await this.loadJson(FightData.ins.stageJsonPath, JsonAsset)\n        if (resources.get(FightData.ins.stageJsonPath, JsonAsset) == null) {\n            if (resources.getInfoWithPath(FightData.ins.stageJsonPath) == null) {\n                console.error(\"关卡配置不存在\", FightData.ins.stageJsonPath)\n                return\n            }\n            console.log(\"关卡配置读取失败\", FightData.ins.stageJsonPath)\n            return\n        }\n        FightData.ins.loadLevelJson()\n\n        console.log(FightData.ins.levelJson)\n\n\n        let list = []\n\n        list.push({ url: ShaderUtil.flashWhiteSprite(), type: Material })\n        list.push({ url: ShaderUtil.flashWhiteSpine(), type: Material })\n        list.push({ url: FightData.ins.stageTab.Background, type: SpriteFrame })\n\n        let animIds = []\n        let skillIds = []\n        for (let index = 0; index < FightData.ins.levelJson.phaseList.length; index++) {\n            const v = FightData.ins.levelJson.phaseList[index];\n            v.times.forEach(v => {\n                if (v.isMonster()) {\n                    let monster = tab.getData().MonsterTableById.getValue(v.monsterId)\n                    if (monster) {\n                        if (monster.MonsterType == tab.MonsterType.MonsterType_BossMonster || (index == 0 && v.time < 120)) {\n                            animIds.push(monster.IdleAnimationId)\n                            animIds.push(monster.WalkAnimationId)\n                            animIds.push(monster.DeadAnimationId)\n                            animIds.push(monster.BornAnimationId)\n                            animIds.push(monster.IdleAnimationId)\n                            skillIds.push(monster.SkillIds)\n                        }\n                    }\n                }\n            })\n        }\n\n        for (let index = 0; index < FightData.ins.fightInfo.heroData.length; index++) {\n            const element = FightData.ins.fightInfo.heroData[index];\n            let heroTab = tab.getData().HeroTableById.getValue(element.itemId)\n            if (heroTab) {\n                animIds.push(heroTab.Idle)\n            }\n        }\n\n        for (let index = 0; index < animIds.length; index++) {\n            const v = animIds[index];\n            let animTab = tab.getData().AnimationTableById.getValue(v)\n            if (animTab) {\n                if (Func.forBy(list, \"url\", animTab.Path)) {\n                    continue\n                }\n                let assetType\n                switch (animTab.Type) {\n                    case tab.AnimationType.AnimationType_SpriteFrame:\n                        assetType = SpriteFrame\n                        break\n                    case tab.AnimationType.AnimationType_SkeletonData:\n                        assetType = sp.SkeletonData\n                        break\n                    case tab.AnimationType.AnimationType_Plist:\n                        assetType = SpriteAtlas\n                        break\n                }\n                if (assetType == null) {\n                    continue\n                }\n                list.push({ url: animTab.Path, type: assetType })\n            }\n        }\n        console.log(list)\n\n        await loadByResMap(list, list.length, (progress) => {\n            Loading.setProgress(progress)\n        })\n        fb && fb()\n\n    }\n\n    async loadJson(url: string, type: typeof Asset,\n    ): Promise<any> {\n        return new Promise(resolve => {\n            resources.load(FightData.ins.stageJsonPath, JsonAsset, null, (error: Error, resource: JsonAsset) => {\n                if (error) {\n                    console.log(\"加载失败\", error)\n                    resolve(null);\n                    return\n                }\n                resolve(resource);\n\n            })\n        })\n    }\n\n    async loadlPvpRes(fb: Function) {\n        let list = []\n\n        list.push({ url: ShaderUtil.flashWhiteSprite(), type: Material })\n        list.push({ url: ShaderUtil.flashWhiteSpine(), type: Material })\n\n\n        let animIds = []\n\n        for (let index = 0; index < FightData.ins.fightPvp.fightInfo.length; index++) {\n            const info = FightData.ins.fightPvp.fightInfo[index];\n            for (let j = 0; j < info.fightInfo.heroData.length; j++) {\n                const element = info.fightInfo.heroData[j];\n                let heroTab = tab.getData().HeroTableById.getValue(element.itemId)\n                if (heroTab) {\n                    animIds.push(heroTab.Idle)\n                }\n            }\n        }\n\n        for (let index = 0; index < animIds.length; index++) {\n            const v = animIds[index];\n            let animTab = tab.getData().AnimationTableById.getValue(v)\n            if (animTab) {\n                if (Func.forBy(list, \"url\", animTab.Path)) {\n                    continue\n                }\n                let assetType\n                switch (animTab.Type) {\n                    case tab.AnimationType.AnimationType_SpriteFrame:\n                        assetType = SpriteFrame\n                        break\n                    case tab.AnimationType.AnimationType_SkeletonData:\n                        assetType = sp.SkeletonData\n                        break\n                    case tab.AnimationType.AnimationType_Plist:\n                        assetType = SpriteAtlas\n                        break\n                }\n                if (assetType == null) {\n                    continue\n                }\n                list.push({ url: animTab.Path, type: assetType })\n            }\n        }\n\n        await loadByResMap(list, list.length, (progress) => {\n            Loading.setProgress(progress)\n        })\n        fb && fb()\n    }\n}"]}