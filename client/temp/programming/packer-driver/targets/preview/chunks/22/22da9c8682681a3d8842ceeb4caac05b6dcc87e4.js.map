{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/activity/battlePass/BattlePassItemCell.ts"],"names":["_decorator","Label","log","Node","ProgressBar","Sprite","Vec3","InfiniteCell","ItemInfo","tab","CommonItem","proto","TaskData","BattlePassDataMgr","LangMgr","Net","ccclass","property","BattlePassItemCell","UpdateContent","data","taskId","passBattleId","battleId","taskInfo","ins","getBattlePassTaskInfo","taskTab","getData","TaskTableById","getValue","battlePass","getBattlePassData","rewards","RewardItemIds","concat","BattlePassRewardIds","nums","RewardItemNum","BattlePassRewardNum","node_bg_1","active","node_bg_2","bar_progress","node","node_lock","isBoughtAdvance","finishParam","FinishParam1","notSetY","setPosition","pos","getPosition","x","node_mask","progress","sp_gray","grayscale","lbl_name","string","getLab","Describe","node_got_1","node_got_2","node_got_3","i","items","length","item","node_lock_extra","award","itemId","num","initData","node_can_get","parent","getChildByName","isCanReceived","isAdvanceReceived","isReceived","setSelectState","setTouchCallBack","result","getAllReceiveTaskId","pass_msg","Msg_ReceiveBattlePassTaskRewardsReq","taskIds","id","Send","Ptl","ReceiveBattlePassTaskRewardsReq"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, log, Node, ProgressBar, Sprite, Vec3 } from 'cc';\r\nimport InfiniteCell from '../../../../Common/InfiniteList/InfiniteCell';\r\nimport { ItemInfo } from '../../item/ItemInfo';\r\nimport { tab } from '../../../../Table/table_gen';\r\nimport { CommonItem } from '../../item/CommonItem';\r\nimport { proto } from 'client_protocol';\r\nimport { TaskData } from '../../task/TaskData';\r\nimport { BattlePassDataMgr } from './BattlePassDataMgr';\r\nimport { LangMgr } from '../../../mgr/LangMgr';\r\nimport { Net } from '../../../net/Net';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattlePassItemCell')\r\nexport class BattlePassItemCell extends InfiniteCell {\r\n    @property([CommonItem])\r\n    items: CommonItem[] = [];\r\n    @property(Node)\r\n    node_mask: Node = null;\r\n    @property(Label)\r\n    lbl_name: Label = null;\r\n    @property(Node)\r\n    node_lock: Node = null;\r\n    @property(ProgressBar)\r\n    bar_progress: ProgressBar = null;\r\n    @property(Node)\r\n    node_lock_extra: Node = null;\r\n    @property(Node)\r\n    node_bg_1: Node = null;\r\n    @property(Node)\r\n    node_bg_2: Node = null;\r\n    @property(Sprite)\r\n    sp_gray: Sprite = null;\r\n\r\n    @property(Node)\r\n    node_got_1: Node = null;\r\n    @property(Node)\r\n    node_got_2: Node = null;\r\n    @property(Node)\r\n    node_got_3: Node = null;\r\n    UpdateContent(data: any): void {\r\n        const taskId = data.taskId;\r\n        const passBattleId = data.battleId;\r\n\r\n        const taskInfo = TaskData.ins.getBattlePassTaskInfo(taskId);\r\n        const taskTab = tab.getData().TaskTableById.getValue(taskId);\r\n        const battlePass = BattlePassDataMgr.ins.getBattlePassData(passBattleId);\r\n        const rewards = taskTab.RewardItemIds.concat(taskTab.BattlePassRewardIds);\r\n        const nums = taskTab.RewardItemNum.concat(taskTab.BattlePassRewardNum);\r\n        this.node_bg_1.active = taskId % 2 == 1;\r\n        this.node_bg_2.active = taskId % 2 == 0;\r\n        this.bar_progress.node.active = true;\r\n        this.node_lock.active = !battlePass.isBoughtAdvance;\r\n        let finishParam = taskTab.FinishParam1;\r\n        if (data.notSetY) {\r\n            this.node.setPosition(new Vec3(0, 10, 0));\r\n            this.node_bg_1.active = false;\r\n            this.node_bg_2.active = false;\r\n            this.bar_progress.node.active = false;\r\n        } else {\r\n            const pos = this.node.getPosition();\r\n            this.node.setPosition(new Vec3(pos.x, 0, 0));\r\n            this.node_mask.active = taskInfo.progress < finishParam;\r\n            this.sp_gray.grayscale = taskInfo.progress < finishParam;\r\n        }\r\n        this.lbl_name.string = LangMgr.getLab(taskTab.Describe);\r\n        this.bar_progress.progress = taskInfo.progress >= finishParam ? 1 : 0;\r\n        this.node_got_1.active = false;\r\n        this.node_got_2.active = false;\r\n        this.node_got_3.active = false;\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            const item = this.items[i];\r\n            item.node.active = true;\r\n            this.node_lock_extra.active = true;\r\n            const award = new ItemInfo();\r\n            award.itemId = rewards[i];\r\n            award.num = nums[i];\r\n            if (!award.itemId) {\r\n                item.node.active = false;\r\n                this.node_lock_extra.active = false;\r\n                return;\r\n            }\r\n            item.initData(award);\r\n            const node_can_get = item.node.parent.getChildByName(\"canget_node\");\r\n            node_can_get.active = false;\r\n            if (i === 0) {\r\n                this.node_got_1.active = taskInfo.isCanReceived;\r\n            } else {\r\n                node_can_get.active = battlePass.isBoughtAdvance && !taskInfo.isAdvanceReceived && taskInfo.progress >= finishParam;\r\n                this[\"node_got_\" + (i+1)].active = award.itemId && node_can_get.active;\r\n            }\r\n            if (taskInfo.isReceived && i == 0) {\r\n                item.setSelectState(true);\r\n            }\r\n            if (taskInfo.isAdvanceReceived && i !== 0) {\r\n                item.setSelectState(true);\r\n            }\r\n            item.setTouchCallBack(null);\r\n            if (node_can_get.active) {\r\n                item.setTouchCallBack(() => {\r\n                    const result = BattlePassDataMgr.ins.getAllReceiveTaskId(passBattleId);\r\n                    let pass_msg = new proto.Msg_ReceiveBattlePassTaskRewardsReq();\r\n                    pass_msg.taskIds = result;\r\n                    pass_msg.id = passBattleId;\r\n                    log(\"cocos pass_msg =\", pass_msg)\r\n                    Net.Send(proto.Ptl.ReceiveBattlePassTaskRewardsReq, pass_msg);\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}