{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/Common/script/Waiting.ts"],"names":["Component","Prefab","_decorator","Animation","director","instantiate","isValid","log","Layers","LoadResAsync","ResMgr","tab","NODE_NAME","PREFAB_URL","ccclass","property","WaitingTag","Waiting","Show","tag","disconectDuration","delay","tagDict","setValue","getWaitingNode","toBeShown","res","get","waitingNode","layer","Enum","UI_2D","waiting","getComponent","name","getScene","addChild","playAnim","scheduleOnce","parent","Disconnect","console","WaitPtl","ptl","Hide","force","clear","remove","isEmpty","watingNode","removeFromParent","destroy","getChildByName","anim","node","play","defaultClip","Dictionary"],"mappings":"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","sourcesContent":["/**\r\n * \r\n */\r\n\r\nimport { Component, Prefab, _decorator, Animation, director, instantiate, isValid, log, resources, Layers } from \"cc\";\r\nimport { LoadResAsync, ResMgr } from \"../../logic/mgr/ResMgr\";\r\nimport { tab } from \"../../Table/table_gen\";\r\n\r\nconst NODE_NAME = 'Waiting'\r\nconst PREFAB_URL = 'prefab/Waiting'\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum WaitingTag {\r\n    Login = \"Login\",\r\n    PAY = \"PAY\"\r\n}\r\n\r\n\r\n@ccclass\r\nexport default class Waiting extends Component {\r\n    protected static tagDict: tab.Dictionary<string, object> = new tab.Dictionary<string, object>()\r\n    protected static toBeShown: boolean = false\r\n\r\n    /* 显示等待界面\r\n     * @param disconectDuration 超过这个时间会断线，传0表示不断线\r\n     */\r\n    public static async Show(tag: string, disconectDuration: number = 15, delay: number = 1) {\r\n        Waiting.tagDict.setValue(tag, null)\r\n        if (Waiting.getWaitingNode()) {\r\n            return\r\n        }\r\n\r\n        Waiting.toBeShown = true;\r\n        let res: Prefab = ResMgr.get(PREFAB_URL, Prefab)\r\n        if (!res) {\r\n            res = await LoadResAsync(PREFAB_URL, Prefab)\r\n            if (!Waiting.toBeShown || Waiting.getWaitingNode()) {\r\n                return\r\n            }\r\n        }\r\n        if (res) {\r\n            let waitingNode = instantiate(res);\r\n            waitingNode.layer = Layers.Enum.UI_2D;\r\n            let waiting = waitingNode.getComponent(Waiting)\r\n            waitingNode.name = NODE_NAME;\r\n            director.getScene().addChild(waitingNode);\r\n            waiting.playAnim(delay)\r\n\r\n            if (disconectDuration > 0) {\r\n                waiting.scheduleOnce(() => {\r\n                    if (isValid(waitingNode) && waitingNode.parent != null) {\r\n                        //断线\r\n                        log(`!!! Waiting Timeout !!!`)\r\n                        Waiting.Disconnect()\r\n                    }\r\n                }, disconectDuration)\r\n            }\r\n            console.log(waitingNode);\r\n        }\r\n    }\r\n\r\n    public static Disconnect() {\r\n        // Net.Disconnect()\r\n        // Waiting.Hide(\"\", true)\r\n    }\r\n\r\n    /**\r\n     * 显示等待界面，当收到指定协议时关闭\r\n     * @param ptl 协议号\r\n     */\r\n    public static WaitPtl(ptl: number, disconectDuration: number = 15, delay: number = 1) {\r\n        Waiting.Show(`waitptl_${ptl}`, disconectDuration, delay);\r\n    }\r\n\r\n    /**\r\n     * 关闭等待界面\r\n     * @param tag 与Show函数传入的tag一致才能关闭界面\r\n     * @param force 无论tag值是什么，强制关闭等待界面\r\n     */\r\n    public static Hide(tag: string, force: boolean = false) {\r\n        if (!Waiting.toBeShown) {\r\n            return\r\n        }\r\n\r\n        if (force) {\r\n            Waiting.tagDict.clear()\r\n        } else {\r\n            Waiting.tagDict.remove(tag)\r\n            if (!Waiting.tagDict.isEmpty()) {\r\n                return\r\n            }\r\n        }\r\n\r\n        Waiting.toBeShown = false\r\n        let watingNode = Waiting.getWaitingNode()\r\n        if (watingNode) {\r\n            watingNode.removeFromParent()\r\n            watingNode.destroy()\r\n        }\r\n    }\r\n\r\n    /*  */\r\n    protected static getWaitingNode() {\r\n        return director.getScene().getChildByName(NODE_NAME);\r\n    }\r\n\r\n    /*  */\r\n    protected playAnim(delay: number) {\r\n        let anim = this.node.getComponent(Animation);\r\n        if (delay <= 0) {\r\n            anim.play(anim.defaultClip.name)\r\n        } else {\r\n            anim.play();\r\n        }\r\n    }\r\n}\r\n\r\n/*  */\r\n// Net.RecvCallback = function (ptl: number) {\r\n//     Waiting.Hide(`waitptl_${ptl}`)\r\n// }"]}