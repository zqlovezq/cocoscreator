{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/power/powerTab/SkillGroupTab.ts"],"names":["_decorator","tab","PowerBase","ccclass","property","SkillGroupTab","powerType","PowerType","PowerType_SkillGroupTable","configTab","Id","Icon","AttackType","NormalAttack","AttackCount","BreathTime","skills","normalSkills","nowSkill","nowSkillIndex","_attackCount","realAttackCount","triggerAttackCount","first","heroAddCount","setConfigId","id","configId","length","index","element","addSkill","setMonsterSkillIds","skillIds","AttackType_Attack","setDefaultNormalSkill","clearAttrData","skill","skillPowers","createTypeAnyId","PowerType_SkillTable","push","isNormalAttack","isActionSkill","sort","a","b","Priority","nextNormalSkill","isNormalSkill","AttackType_ActionAttack","fillUp","subAttack","count","addAttackCount","clearTriggerAttackCount","checkSkillCD","getCanAttackCount","getAttackSum","setHeroAttackCount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,G,iBAAAA,G;;AAIAC,MAAAA,S,iBAAAA,S;;;;;;;;;OAGH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;+BAGjBK,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb;AAAA;AAAA,kCAC6C;AAAA;AAAA;AAAA,eACzCC,SADyC,GACd;AAAA;AAAA,0BAAIC,SAAJ,CAAcC,yBADA;AAAA,eAEzCC,SAFyC;AAGzC;AAHyC,eAIzCC,EAJyC;AAI9B;AAJ8B,eAKzCC,IALyC;AAK5B;AAL4B,eAMzCC,UANyC;AAMd;AANc,eAOzCC,YAPyC;AAOlB;AAPkB,eAQzCC,WARyC;AAQrB;AARqB,eASzCC,UATyC;AAStB;AAGnB;AAZyC,eAczCC,MAdyC,GAcpB,EAdoB;AAAA,eAezCC,YAfyC,GAed,EAfc;AAAA,eAiBzCC,QAjByC;AAAA,eAkBzCC,aAlByC,GAkBjB,CAlBiB;AAkBf;AAE1B;AApByC,eAqBzCC,YArByC,GAqBlB,CArBkB;AAqBhB;AArBgB,eAsBzCC,eAtByC,GAsBf,CAtBe;AAsBb;AAtBa,eAuBzCC,kBAvByC,GAuBZ,CAvBY;AAuBV;AAvBU,eAwBzCC,KAxByC,GAwBxB,KAxBwB;AAAA,eA0BzCC,YA1ByC,GA0BlB,CA1BkB;AAAA;;AA0BhB;AAEzBC,QAAAA,WAAW,CAACC,EAAD,EAAa;AACpB,gBAAMD,WAAN,CAAkBC,EAAlB;;AACA,cAAI,KAAKC,QAAL,IAAiB,CAArB,EAAwB;AACpB;AACH;;AAED,eAAKX,MAAL,CAAYY,MAAZ,GAAqB,CAArB;AACA,eAAKX,YAAL,CAAkBW,MAAlB,GAA2B,CAA3B;;AACA,eAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKhB,YAAL,CAAkBe,MAA9C,EAAsDC,KAAK,EAA3D,EAA+D;AAC3D,gBAAMC,OAAO,GAAG,KAAKjB,YAAL,CAAkBgB,KAAlB,CAAhB;AACA,iBAAKE,QAAL,CAAcD,OAAd;AACH;AACJ;AAED;;;AACAE,QAAAA,kBAAkB,CAACC,QAAD,EAAqB;AACnC,eAAKlB,UAAL,GAAkB,CAAlB;AACA,eAAKH,UAAL,GAAkB;AAAA;AAAA,0BAAIA,UAAJ,CAAesB,iBAAjC;AACA,eAAKpB,WAAL,GAAmB,OAAnB;AACA,eAAKD,YAAL,GAAoBoB,QAApB;AAEA,eAAKjB,MAAL,CAAYY,MAAZ,GAAqB,CAArB;AACA,eAAKX,YAAL,CAAkBW,MAAlB,GAA2B,CAA3B;;AACA,eAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKhB,YAAL,CAAkBe,MAA9C,EAAsDC,KAAK,EAA3D,EAA+D;AAC3D,gBAAMC,OAAO,GAAG,KAAKjB,YAAL,CAAkBgB,KAAlB,CAAhB;AACA,iBAAKE,QAAL,CAAcD,OAAd;AACH;;AACD,eAAKK,qBAAL;AACH;;AAEDC,QAAAA,aAAa,GAAG;AACZ,eAAKhB,YAAL,GAAoB,CAApB;AACA,eAAKC,eAAL,GAAuB,CAAvB;AACA,eAAKC,kBAAL,GAA0B,CAA1B;AACA,eAAKE,YAAL,GAAoB,CAApB;AACA,eAAKW,qBAAL;AACH;;AAEDJ,QAAAA,QAAQ,CAACL,EAAD,EAAa;AACjB,cAAIW,KAAK,GAAG,KAAKC,WAAL,CAAiBC,eAAjB,CAAiC;AAAA;AAAA,0BAAIhC,SAAJ,CAAciC,oBAA/C,EAAqEd,EAArE,CAAZ;AACA,eAAKV,MAAL,CAAYyB,IAAZ,CAAiBJ,KAAjB;;AACA,cAAIA,KAAK,CAACK,cAAN,EAAJ,EAA4B;AACxB,iBAAKzB,YAAL,CAAkBwB,IAAlB,CAAuBJ,KAAvB;AACH;;AACDA,UAAAA,KAAK,CAACM,aAAN,GAAsB,KAAKA,aAAL,EAAtB;AACH;;AAEDR,QAAAA,qBAAqB,GAAG;AACpB,eAAKlB,YAAL,CAAkB2B,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC7B,mBAAOD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAtB;AACH,WAFD;AAGA,eAAKxB,KAAL,GAAa,IAAb;AACA,eAAKJ,aAAL,GAAqB,CAArB;AACA,eAAKD,QAAL,GAAgB,KAAKD,YAAL,CAAkB,KAAKE,aAAvB,CAAhB;AACH;;AAED6B,QAAAA,eAAe,GAAG;AACd,cAAI,KAAKzB,KAAT,EAAgB;AACZ,iBAAKJ,aAAL,GAAqB,CAArB;AACA,iBAAKI,KAAL,GAAa,KAAb;AACH,WAHD,MAGO;AACH,iBAAKJ,aAAL,IAAsB,CAAtB;AACH;;AAED,cAAI,KAAKA,aAAL,IAAsB,KAAKF,YAAL,CAAkBW,MAA5C,EAAoD;AAChD,iBAAKT,aAAL,GAAqB,CAArB;AACH;;AACD,eAAKD,QAAL,GAAgB,KAAKD,YAAL,CAAkB,KAAKE,aAAvB,CAAhB;AACH;AAED;;;AACA8B,QAAAA,aAAa,GAAG;AACZ,iBAAO,KAAKrC,UAAL,IAAmB;AAAA;AAAA,0BAAIA,UAAJ,CAAesB,iBAAzC;AACH;AACD;;;AACAS,QAAAA,aAAa,GAAG;AACZ,iBAAO,KAAK/B,UAAL,IAAmB;AAAA;AAAA,0BAAIA,UAAJ,CAAesC,uBAAzC;AACH;;AAEDC,QAAAA,MAAM,GAAG;AACL,eAAK/B,YAAL,GAAoB,CAApB;AACA,eAAKC,eAAL,GAAuB,CAAvB;AACH;;AAED+B,QAAAA,SAAS,CAACC,KAAD,EAAgB;AACrBA,UAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AACA,eAAKjC,YAAL,IAAqBiC,KAArB;AACA,eAAKhC,eAAL,IAAwBgC,KAAxB;AACA,eAAK/B,kBAAL,IAA2B+B,KAA3B;AACH;;AAGDC,QAAAA,cAAc,CAACD,KAAD,EAAgB;AAC1B,eAAKjC,YAAL,IAAqBiC,KAArB;AACH;;AAEDE,QAAAA,uBAAuB,GAAG;AACtB,eAAKjC,kBAAL,GAA0B,CAA1B;AACH;;AAEDkC,QAAAA,YAAY,GAAG;AACX,iBAAO,KAAKC,iBAAL,MAA4B,CAAnC;AACH;AAED;;;AACAA,QAAAA,iBAAiB,GAAG;AAChB,iBAAO,KAAKC,YAAL,KAAsB,KAAKtC,YAAlC;AACH;;AAEDsC,QAAAA,YAAY,GAAG;AACX,iBAAO,KAAK5C,WAAL,GAAmB,KAAKU,YAA/B;AACH;;AAEDmC,QAAAA,kBAAkB,CAACN,KAAD,EAAgB;AAC9B,eAAK7B,YAAL,GAAoB6B,KAApB;AACH;;AA/IwC,O","sourcesContent":["import { _decorator, Component } from \"cc\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { SkillTab } from \"./SkillTab\";\nimport { EventMgr } from \"../../../mgr/EventMgr\";\nimport { FightEvent } from \"../../define/FightEvent\";\nimport { PowerBase } from \"./PowerBase\";\nimport { CDTime } from \"../../base/cd/CDTime\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SkillGroupTab')\nexport class SkillGroupTab extends PowerBase {\n    powerType: tab.PowerType = tab.PowerType.PowerType_SkillGroupTable\n    configTab: tab.SkillGroupTable\n    //---------------------配置字段-------------------\n    Id: number // ID \n    Icon: string // 技能图标 \n    AttackType: tab.AttackType // 攻击类型 \n    NormalAttack: number[] // 普攻技能 \n    AttackCount: number // 出手次数 \n    BreathTime: number // 调息时间 \n\n\n    //---------------------自有字段-------------------\n\n    skills: SkillTab[] = []\n    normalSkills: SkillTab[] = []\n\n    nowSkill: SkillTab\n    nowSkillIndex: number = 0 //普通攻击依次替换\n\n    //----------切换技能组需要清除的属性\n    _attackCount: number = 0 //攻击次数（减免时不增加次数）\n    realAttackCount: number = 0 //实际的攻击次数\n    triggerAttackCount: number = 0 //触发器攻击次数（触发器成功时， 会清零）\n    first: boolean = false\n\n    heroAddCount: number = 0 //英雄增加出手次数\n\n    setConfigId(id: number) {\n        super.setConfigId(id)\n        if (this.configId == 0) {\n            return\n        }\n\n        this.skills.length = 0\n        this.normalSkills.length = 0\n        for (let index = 0; index < this.NormalAttack.length; index++) {\n            const element = this.NormalAttack[index];\n            this.addSkill(element)\n        }\n    }\n\n    /** 设置怪物技能 */\n    setMonsterSkillIds(skillIds: number[]) {\n        this.BreathTime = 0\n        this.AttackType = tab.AttackType.AttackType_Attack\n        this.AttackCount = 1000000\n        this.NormalAttack = skillIds\n\n        this.skills.length = 0\n        this.normalSkills.length = 0\n        for (let index = 0; index < this.NormalAttack.length; index++) {\n            const element = this.NormalAttack[index];\n            this.addSkill(element)\n        }\n        this.setDefaultNormalSkill()\n    }\n\n    clearAttrData() {\n        this._attackCount = 0\n        this.realAttackCount = 0\n        this.triggerAttackCount = 0\n        this.heroAddCount = 0\n        this.setDefaultNormalSkill()\n    }\n\n    addSkill(id: number) {\n        let skill = this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillTable, id) as SkillTab\n        this.skills.push(skill)\n        if (skill.isNormalAttack()) {\n            this.normalSkills.push(skill)\n        }\n        skill.isActionSkill = this.isActionSkill()\n    }\n\n    setDefaultNormalSkill() {\n        this.normalSkills.sort((a, b) => {\n            return a.Priority - b.Priority\n        })\n        this.first = true\n        this.nowSkillIndex = 0\n        this.nowSkill = this.normalSkills[this.nowSkillIndex]\n    }\n\n    nextNormalSkill() {\n        if (this.first) {\n            this.nowSkillIndex = 0\n            this.first = false\n        } else {\n            this.nowSkillIndex += 1\n        }\n\n        if (this.nowSkillIndex >= this.normalSkills.length) {\n            this.nowSkillIndex = 0\n        }\n        this.nowSkill = this.normalSkills[this.nowSkillIndex]\n    }\n\n    /** 是否为普通技能 */\n    isNormalSkill() {\n        return this.AttackType == tab.AttackType.AttackType_Attack\n    }\n    /** 是否为武器招式 */\n    isActionSkill() {\n        return this.AttackType == tab.AttackType.AttackType_ActionAttack\n    }\n\n    fillUp() {\n        this._attackCount = 0\n        this.realAttackCount = 0\n    }\n\n    subAttack(count: number) {\n        count = count || 0\n        this._attackCount += count\n        this.realAttackCount += count\n        this.triggerAttackCount += count\n    }\n\n\n    addAttackCount(count: number) {\n        this._attackCount -= count\n    }\n\n    clearTriggerAttackCount() {\n        this.triggerAttackCount = 0\n    }\n\n    checkSkillCD() {\n        return this.getCanAttackCount() <= 0\n    }\n\n    /** 获取可出手次数 */\n    getCanAttackCount() {\n        return this.getAttackSum() - this._attackCount\n    }\n\n    getAttackSum() {\n        return this.AttackCount + this.heroAddCount\n    }\n\n    setHeroAttackCount(count: number) {\n        this.heroAddCount = count\n    }\n\n}"]}