{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/common/ServerChoosePop.ts"],"names":["_decorator","instantiate","Label","Prefab","ScrollView","ViewPop","Http","LoginData","ServerChooseItem","ccclass","property","ServerChoosePop","recommendServers","userServers","currTag","register","onShow","addr","ins","loginServerTab","SelectServerUrl","reqParam","uid","token","loginGroup","request","host","method","cb","responseJson","console","log","ret","recommend_areas","user_areas","initView","initServerItem","myServerData","myAreaId","default_area","key","lastServerLab","string","name","scrollView","content","removeAllChildren","list","node","itemPrefab","parent","getComponent","initData","onToggle","event","type","Number"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Label, Node, Prefab, ScrollView } from 'cc';\nimport { ViewPop } from '../../../framework/base/ViewPop';\nimport Waiting, { WaitingTag } from '../../../Common/script/Waiting';\nimport Http from '../../net/Http';\nimport { LoginData } from '../login/LoginData';\nimport { ServerChooseItem } from './ServerChooseItem';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ServerChoosePop')\nexport class ServerChoosePop extends ViewPop {\n    @property(Label)\n    lastServerLab: Label = null;\n    @property(ScrollView)\n    scrollView: ScrollView = null;\n    @property(Prefab)\n    itemPrefab: Prefab = null;\n\n    private recommendServers: Array<any>;\n    private userServers: Array<any>;\n    private currTag:number=1;\n    register() {\n\n    }\n    onShow(): void {\n        let addr = LoginData.ins.loginServerTab.SelectServerUrl;\n        let reqParam = `uid=${LoginData.ins.uid}&token=${LoginData.ins.token}&group=${LoginData.ins.loginGroup}`;\n\n        // Waiting.Show(WaitingTag.Login, 0)\n\n        Http.request({\n            host: addr,\n            method: \"GET\",\n            reqParam: reqParam,\n            cb: (responseJson) => {\n                console.log(responseJson)\n                if (responseJson) {\n                    if (responseJson.ret == 0) {\n                        console.log(\"responseJson==\", responseJson)\n                        this.recommendServers = responseJson.recommend_areas;\n                        this.userServers = responseJson.user_areas;\n                        this.initView();\n                       \n                    }\n                }\n                // Waiting.Hide(WaitingTag.Login)\n            }\n        })\n    }\n\n    initView(){\n        this.initServerItem();\n        let myServerData=null;\n        let myAreaId=LoginData.ins.default_area;\n        for(let key in this.userServers){\n            if(myAreaId==this.userServers[key][\"id\"]){\n                myServerData=this.userServers[key];\n                break;\n            }\n        }\n        if(myServerData){\n            this.lastServerLab.string=myServerData.name;\n        }\n       \n\n    }\n    initServerItem(){\n        this.scrollView.content.removeAllChildren();\n        let list=this.currTag==1?this.userServers:this.recommendServers;\n        for(let key in list){\n            let node=instantiate(this.itemPrefab);\n            node.parent=this.scrollView.content;\n            node.getComponent(ServerChooseItem).initData(list[key]);\n        }\n    }\n    onToggle(event, type) {\n        if(Number(type)!=this.currTag){\n            this.currTag=Number(type);\n            this.initServerItem();\n        }\n    }\n\n}\n\n"]}