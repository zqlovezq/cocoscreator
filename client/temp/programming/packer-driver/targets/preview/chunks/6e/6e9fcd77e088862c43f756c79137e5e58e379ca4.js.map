{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/Loading.ts"],"names":["_decorator","Label","ViewPop","UIMgr","ViewName","tab","getRandomInt","LangMgr","ccclass","property","Loading","create","ins","show","viewName","hide","hideView","setProgress","p","view","getViewScr","progress","register","onShow","node","active","time","getData","GetKeyValue_ConfigTable","LoadingTipsTime","setTips","schedule","onClickCancel","onClose","unscheduleAllCallbacks","progressLab","string","toFixed","tips","TipsTable","index","length","tipLab","getLab","TipsKey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA8CC,MAAAA,K,OAAAA,K;;AAC9CC,MAAAA,O,iBAAAA,O;;AAEAC,MAAAA,K,iBAAAA,K;;AAIAC,MAAAA,Q,iBAAAA,Q;;AAEAC,MAAAA,G,iBAAAA,G;;AACUC,MAAAA,Y,iBAAAA,Y;;AACVC,MAAAA,O,iBAAAA,O;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;;yBAGjBU,O,WADZF,OAAO,CAAC,SAAD,C,UAiBHC,QAAQ,CAACR,KAAD,C,UAERQ,QAAQ,CAACR,KAAD,C,2BAnBb,MACaS,OADb;AAAA;AAAA,8BACqC;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAEd,eAANC,MAAM,GAAG;AAAA;AAClB,kBAAM;AAAA;AAAA,gCAAMC,GAAN,CAAUC,IAAV,CAAe;AAAEC,cAAAA,QAAQ,EAAE;AAAA;AAAA,wCAASJ;AAArB,aAAf,CAAN;AADkB;AAErB;;AAEU,eAAJK,IAAI,GAAG;AACV;AAAA;AAAA,8BAAMH,GAAN,CAAUI,QAAV,CAAmB;AAAA;AAAA,oCAASN,OAA5B;AAEH;;AAEiB,eAAXO,WAAW,CAACC,CAAD,EAAY;AAC1B,cAAIC,IAAI,GAAG;AAAA;AAAA,8BAAMP,GAAN,CAAUQ,UAAV,CAAqB;AAAA;AAAA,oCAASV,OAA9B,CAAX;AACAS,UAAAA,IAAI,CAACE,QAAL,GAAgBH,CAAhB;AACH;;AAODI,QAAAA,QAAQ,GAAS,CAEhB;;AAEDC,QAAAA,MAAM,GAAS;AACX,eAAKF,QAAL,GAAgB,CAAhB;AACA,eAAKG,IAAL,CAAUC,MAAV,GAAmB,IAAnB;AACA,cAAIC,IAAI,GAAC;AAAA;AAAA,0BAAIC,OAAJ,GAAcC,uBAAd,GAAwCC,eAAjD;AACA,eAAKC,OAAL;AACA,eAAKC,QAAL,CAAc,MAAI;AACd,iBAAKD,OAAL;AACH,WAFD,EAEEJ,IAFF;AAGH;;AAEDM,QAAAA,aAAa,GAAG;AACZtB,UAAAA,OAAO,CAACK,IAAR;AACH;;AAEDkB,QAAAA,OAAO,GAAS;AACZ,eAAKT,IAAL,CAAUC,MAAV,GAAmB,KAAnB;AACA,eAAKS,sBAAL;AACH;;AAEW,YAARb,QAAQ,CAACH,CAAD,EAAY;AACpB,eAAKiB,WAAL,CAAiBC,MAAjB,GAA6B,CAAClB,CAAC,GAAC,GAAH,EAAQmB,OAAR,CAAgB,CAAhB,CAA7B;AACH;;AAEW,YAARhB,QAAQ,GAAG;AACX,iBAAO,CAAP;AACH;;AACDS,QAAAA,OAAO,GAAE;AACL,cAAIQ,IAAI,GAAC;AAAA;AAAA,0BAAIX,OAAJ,GAAcY,SAAvB;AACA,cAAIC,KAAK,GAAC;AAAA;AAAA,4CAAa,CAAb,EAAgBF,IAAI,CAACG,MAArB,CAAV;AACA,eAAKC,MAAL,CAAYN,MAAZ,GAAmB;AAAA;AAAA,kCAAQO,MAAR,CAAeL,IAAI,CAACE,KAAD,CAAJ,CAAYI,OAA3B,CAAnB;AAEH;;AAxDgC,O;;;;;iBAiBZ,I;;;;;;;iBAER,I","sourcesContent":["import { _decorator, Component, director, instantiate, Label, log, Node, Prefab, ResolutionPolicy, Scene, view } from 'cc';\nimport { ViewPop } from '../../framework/base/ViewPop';\nimport { LoginControl } from './login/LoginControl';\nimport { UIMgr } from '../mgr/UIMgr';\nimport { EventMgr } from '../mgr/EventMgr';\nimport { SceneMgr, ScenesName } from '../mgr/SceneMgr';\nimport { proto } from 'client_protocol';\nimport { ViewName } from '../define/ViewDefine';\nimport { LocalEvent } from '../define/LocalEvent';\nimport { tab } from '../../Table/table_gen';\nimport { GameUtil, getRandomInt } from '../utils/GameUtil';\nimport { LangMgr } from '../mgr/LangMgr';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Loading')\nexport class Loading extends ViewPop {\n\n    static async create() {\n        await UIMgr.ins.show({ viewName: ViewName.Loading })\n    }\n\n    static hide() {\n        UIMgr.ins.hideView(ViewName.Loading)\n        \n    }\n\n    static setProgress(p: number) {\n        let view = UIMgr.ins.getViewScr(ViewName.Loading) as Loading\n        view.progress = p\n    }\n\n    @property(Label)\n    progressLab: Label = null\n    @property(Label)\n    tipLab:Label=null;\n\n    register(): void {\n\n    }\n\n    onShow(): void {\n        this.progress = 0\n        this.node.active = true;\n        let time=tab.getData().GetKeyValue_ConfigTable().LoadingTipsTime;\n        this.setTips();\n        this.schedule(()=>{\n            this.setTips();\n        },time)\n    }\n\n    onClickCancel() {\n        Loading.hide()\n    }\n\n    onClose(): void {\n        this.node.active = false\n        this.unscheduleAllCallbacks();\n    }\n\n    set progress(p: number) {\n        this.progressLab.string = `${(p*100).toFixed(0)}%`\n    }\n\n    get progress() {\n        return 0\n    }\n    setTips(){\n        let tips=tab.getData().TipsTable;\n        let index=getRandomInt(0, tips.length);\n        this.tipLab.string=LangMgr.getLab(tips[index].TipsKey)\n\n    }\n\n\n}\n\n"]}