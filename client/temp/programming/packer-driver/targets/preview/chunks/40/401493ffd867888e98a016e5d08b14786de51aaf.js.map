{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/framework/collision/CircleaArc.ts"],"names":["CircleaArc","MathAngle","check","a","b","dir","angleToDirection","getArcAngle","x","multiplyScalar","getRaidus","y","bool","IsCircleIntersectFan","getCenter","angleToRadian","r","x1","y1","x2","y2","theta","vx","vy","R","Math","sqrt","h","c","cos","s","sin","x3","y3","x4","y4","d1","EvaluatePointToLine","d2","IsCircleIntersectLineSeg","vx1","vy1","vx2","vy2","len","u","x0","y0"],"mappings":"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","sourcesContent":["import { v2 } from \"cc\";\nimport { MathAngle } from \"./Maths\";\nimport { CollisionBody } from \"./CollisionBody\";\n\nexport class CircleaArc {\n\n    // static check() {\n    //     let circle = { x: 101, y: 101, r: 100 }\n    //     let arc = { x: 0, y: 0, r: 100, heading: 50, angle: 45 }\n\n    //     let dir = MathAngle.angleToDirection(arc.heading)\n    //     dir.multiplyScalar(arc.r);\n    //     console.log(dir)\n\n    //     let y = new CircleaArc()\n    //     let a = y.IsCircleIntersectFan(circle.x, circle.y, circle.r,\n    //         arc.x, arc.y, dir.x, dir.y, MathAngle.angleToRadian(arc.angle))\n\n    //     console.log(\"是否相交\", a)\n    // }\n\n    static check(a: CollisionBody, b: CollisionBody) {\n        let dir = MathAngle.angleToDirection(b.getArcAngle().x)\n        dir.multiplyScalar(b.getRaidus());\n\n\n        let y = new CircleaArc()\n        let bool = y.IsCircleIntersectFan(a.getCenter().x, a.getCenter().y, a.getRaidus(),\n            b.getCenter().x, b.getCenter().y, dir.x, dir.y, MathAngle.angleToRadian(b.getArcAngle().y))\n\n\n        // console.log(\"是否相交\", bool)\n        return bool\n    }\n\n\n    IsCircleIntersectFan(x: number, y: number, r: number, x1: number, y1: number, x2: number, y2: number, theta: number) {\n        // 计算扇形正前方向量 v = p1p2\n        let vx = x2 - x1;\n        let vy = y2 - y1;\n\n        // 计算扇形半径 R = v.length()\n        let R = Math.sqrt(vx * vx + vy * vy);\n\n        // 圆不与扇形圆相交，则圆与扇形必不相交\n        if ((x - x1) * (x - x1) + (y - y1) * (y - y1) > (R + r) * (R + r))\n            return false;\n        // 根据夹角 theta/2 计算出旋转矩阵，并将向量v乘该旋转矩阵得出扇形两边的端点p3,p4\n        let h = theta * 0.5;\n        let c = Math.cos(h);\n        let s = Math.sin(h);\n        let x3 = x1 + (vx * c - vy * s);\n        let y3 = y1 + (vx * s + vy * c);\n        let x4 = x1 + (vx * c + vy * s);\n        let y4 = y1 + (-vx * s + vy * c);\n\n        // console.log(\"扩散\", MathAngle.radianToAngle(theta), \"中心\", MathAngle.posToAngle(v2(x1, y1), v2(x2, y2)), \"左\", MathAngle.posToAngle(v2(x1, y1), v2(x3, y3)), \"右\", MathAngle.posToAngle(v2(x1, y1), v2(x4, y4)))\n        // console.log(x, y, x1, y1, x2, y2, x3, y3, x4, y4)\n        // 如果圆心在扇形两边夹角内，则必相交\n        let d1 = this.EvaluatePointToLine(x, y, x1, y1, x3, y3);\n        let d2 = this.EvaluatePointToLine(x, y, x4, y4, x1, y1);\n        if (d1 >= 0 && d2 >= 0)\n            return true;\n\n        // 如果圆与任一边相交，则必相交\n        if (this.IsCircleIntersectLineSeg(x, y, r, x1, y1, x3, y3))\n            return true;\n        if (this.IsCircleIntersectLineSeg(x, y, r, x1, y1, x4, y4))\n            return true;\n\n        return false;\n    }\n    // 判断点P(x, y)与有向直线P1P2的关系. 小于0表示点在直线左侧，等于0表示点在直线上，大于0表示点在直线右侧\n    EvaluatePointToLine(x: number, y: number, x1: number, y1: number, x2: number, y2: number) {\n        let a = y2 - y1;\n        let b = x1 - x2;\n        let c = x2 * y1 - x1 * y2;\n\n        return a * x + b * y + c;\n    }\n\n    // 圆与线段碰撞检测\n    // 圆心p(x, y), 半径r, 线段两端点p1(x1, y1)和p2(x2, y2)\n    IsCircleIntersectLineSeg(x: number, y: number, r: number, x1: number, y1: number, x2: number, y2: number) {\n        let vx1 = x - x1;\n        let vy1 = y - y1;\n        let vx2 = x2 - x1;\n        let vy2 = y2 - y1;\n\n\n        // len = v2.length()\n        let len = Math.sqrt(vx2 * vx2 + vy2 * vy2);\n\n        // v2.normalize()\n        vx2 /= len;\n        vy2 /= len;\n\n        // u = v1.dot(v2)\n        // u is the vector projection length of vector v1 onto vector v2.\n        let u = vx1 * vx2 + vy1 * vy2;\n\n        // determine the nearest point on the lineseg\n        let x0 = 0;\n        let y0 = 0;\n        if (u <= 0) {\n            // p is on the left of p1, so p1 is the nearest point on lineseg\n            x0 = x1;\n            y0 = y1;\n        }\n        else if (u >= len) {\n            // p is on the right of p2, so p2 is the nearest point on lineseg\n            x0 = x2;\n            y0 = y2;\n        }\n        else {\n            // p0 = p1 + v2 * u\n            // note that v2 is already normalized.\n            x0 = x1 + vx2 * u;\n            y0 = y1 + vy2 * u;\n        }\n\n        return (x - x0) * (x - x0) + (y - y0) * (y - y0) <= r * r;\n    }\n\n}"]}