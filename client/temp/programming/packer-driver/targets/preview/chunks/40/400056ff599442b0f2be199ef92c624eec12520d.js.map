{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/define/FightEventControl.ts"],"names":["FightEventControl","_decorator","AbsControl","EventMgr","FightEvent","AbsObjType","FightRootControl","tab","FrameControl","DamageStatisticsData","ccclass","property","ins","_instance","register","onFight","AbsRole_Deal","onAbsRole_Deal","Kill","onKill","Fight_Initiative_Revive","onFight_Initiative_Revive","Enter_New_PhaseCount","onEnter_New_PhaseCount","Clear_All_Monster","onClear_All_Monster","absRole","info","onSkillTrigger","Triggertype","Triggertype_Dead","isDead","isDeadComplete","objType","role","emitFight","Fight_Role_Dead","checkRoleAllDead","Fight_Monster_Dead","recycle","damageData","owner","defanse","attack","abs","getObjById","objId","Triggertype_Kill","addKill","Role","list","getObjList","enemy","i","length","isActive","setReviceBeatBack","bulletList","bullet","trigger","body","isRemove","configTab","IsReviveClean"],"mappings":"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","sourcesContent":["import { JsonAsset, Node, _decorator, js, resources, setRandGenerator, sys } from \"cc\";\nimport { AbsControl } from \"../../../framework/base/IAbs\";\nimport { EventMgr } from \"../../mgr/EventMgr\";\nimport { FightEvent } from \"./FightEvent\";\nimport { AbsRole } from \"../base/obj/role/AbsRole\";\nimport { AbsObj, AbsObjType } from \"../base/obj/AbsObj\";\nimport { FightRootControl } from \"../FightRootControl\";\nimport { DamageData } from \"../base/damage/DamageData\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { AbsOwner } from \"../base/obj/AbsOwner\";\nimport { FrameControl } from \"../base/frame/FrameControl\";\nimport { DamageStatisticsData } from \"../base/damage/DamageStatisticsData\";\nimport { Role } from \"../base/obj/role/role/Role\";\nimport { Monster } from \"../base/obj/role/monster/Monster\";\nimport { Bullet } from \"../base/obj/bullet/Bullet\";\nimport { GuideController } from \"../../guide/GuideController\";\nimport { FightData } from \"../data/FightData\";\n\n\n\nconst { ccclass, property } = _decorator;\n\n\nexport class FightEventControl extends AbsControl {\n\n    private static _instance: FightEventControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new FightEventControl();\n        }\n        return this._instance;\n    }\n\n\n    register(): void {\n        EventMgr.onFight(FightEvent.AbsRole_Deal, this.onAbsRole_Deal, this)\n        EventMgr.onFight(FightEvent.Kill, this.onKill, this)\n        EventMgr.onFight(FightEvent.Fight_Initiative_Revive, this.onFight_Initiative_Revive, this)\n        EventMgr.onFight(FightEvent.Enter_New_PhaseCount, this.onEnter_New_PhaseCount, this)\n        EventMgr.onFight(FightEvent.Clear_All_Monster, this.onClear_All_Monster, this)\n    }\n\n    onAbsRole_Deal(absRole: AbsRole) {\n        absRole.info.onSkillTrigger(tab.Triggertype.Triggertype_Dead)\n        if (!absRole.isDead) { //触发器会可能有复活\n            return\n        }\n        absRole.isDeadComplete = true\n        if (absRole.objType == AbsObjType.role) {\n            EventMgr.emitFight(FightEvent.Fight_Role_Dead, absRole.info)\n            FightRootControl.ins.checkRoleAllDead()\n            // if (!(GuideController.ins.isInFightGuiding() && !GuideController.ins.showMonster)) {\n            //     FightRootControl.ins.checkRoleAllDead()\n            // }\n        } else {\n            EventMgr.emitFight(FightEvent.Fight_Monster_Dead, absRole)\n            absRole.recycle()\n        }\n    }\n\n    onKill(damageData: DamageData, owner: AbsOwner, defanse: AbsRole) {\n        let attack = (owner.abs || FrameControl.ins.getObjById(owner.objId)) as AbsRole\n        if (attack) {\n            if (!attack.isDead) {\n                attack.info.onSkillTrigger(tab.Triggertype.Triggertype_Kill)\n            }\n            DamageStatisticsData.ins.addKill(attack, defanse)\n        }\n    }\n\n    /** 主动复活 */\n    onFight_Initiative_Revive(Role: Role) {\n        let list = FrameControl.ins.getObjList(AbsObjType.enemy)\n        for (let i = 0; i < list.length; i++) {\n            let enemy = list[i] as Monster\n            if (enemy.isActive && !enemy.isDead) {\n                enemy.setReviceBeatBack(true)\n            }\n        }\n        let bulletList = FrameControl.ins.getObjList(AbsObjType.bullet)\n        for (let i = 0; i < bulletList.length; i++) {\n            let bullet = bulletList[i] as Bullet\n            if (!bullet.trigger || bullet.isDead || (bullet.body && bullet.body.isRemove)) {\n                continue\n            }\n            if (bullet.owner.objType == AbsObjType.enemy) {\n                if (bullet.info.configTab.IsReviveClean) {\n                    bullet.recycle()\n                }\n            }\n        }\n    }\n\n    onEnter_New_PhaseCount() {\n        this.onClear_All_Monster()\n    }\n\n    onClear_All_Monster() {\n        let list = FrameControl.ins.getObjList(AbsObjType.enemy)\n        for (let i = 0; i < list.length; i++) {\n            let enemy = list[i] as Monster\n            if (enemy.isActive && !enemy.isDead) {\n                enemy.recycle()\n            }\n        }\n    }\n}"]}