{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/activity/WelfareActivityMainView.ts"],"names":["_decorator","error","instantiate","Node","Prefab","Toggle","ToggleContainer","ViewScreen","SignInView","LoadResAsync","ClientView","ViewName","tab","ActivityData","HeroRoadView","WelfareActivityToggleItem","OpenFunctionMgr","MonthlyCardView","VipPrivilegeView","ccclass","property","WelfareActivityMainView","signInView","newPlayerSignInView","heroRoadView","currTag","currNode","toggleItemMap","monthlyCardView","vipView","register","onShow","initToggle","initView","Map","toggles","toggleContainer","toggleItems","key","item","node","getComponent","isOpen","getActivityOpen","opName","active","updateRedPoint","set","items","Array","from","values","openData","type","isChecked","name","OpenFunctionName","OpenFunctionName_NewServerSignIn","ins","isOpenDailyAcivity","DailyRewardType","DailyRewardType_NewServer","OpenFunctionName_DailySignIn","DailyRewardType_Daily","OpenFunctionName_HeroCollection","isOpenHeroCollectio","OpenFunctionName_MonthlyPass","checkFunctionIsOpen","OpenFunctionName_Vip","initNewPlayerSignInView","initSignInView","initHeroRoadView","initMonthlyCardView","initVipView","view","createView","updateView","NewPlayerSignInView","viewName","viewTab","getViewTab","pfb","Path","parent","activityNode","updateToggleRedPoint","get","onClickToggle","event","target"],"mappings":"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","sourcesContent":["import { _decorator, Component, error, instantiate, Node, Prefab, Toggle, ToggleContainer } from 'cc';\r\nimport { ViewScreen } from '../../../framework/base/ViewScreen';\r\nimport { SignInView } from './signIn/SignInView';\r\nimport { LoadResAsync } from '../../mgr/ResMgr';\r\nimport { ClientView } from '../../mgr/ClientView';\r\nimport { ViewName } from '../../define/ViewDefine';\r\nimport { tab } from '../../../Table/table_gen';\r\nimport { ActivityData } from './ActivityData';\r\nimport { HeroRoadView } from './heroRoad/HeroRoadView';\r\nimport { WelfareActivityToggleItem } from './WelfareActivityToggleItem';\r\nimport { OpenFunctionMgr } from '../../../Common/component/OpenFunctionMgr';\r\nimport { MonthlyCardView } from './monthlyCard/MonthlyCardView';\r\nimport { VipPrivilegeView } from './vip/VipPrivilegeView';\r\nimport { Type } from 'protobufjs';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * \r\n * WelfareActivityMainView\r\n * zhudingchao\r\n * Thu Jun 20 2024 17:14:30 GMT+0800 (中国标准时间)\r\n * db://assets/scripts/logic/model/activity/WelfareActivityMainView.ts\r\n *\r\n */\r\n\r\n@ccclass('WelfareActivityMainView')\r\nexport class WelfareActivityMainView extends ViewScreen {\r\n    @property(Node)\r\n    activityNode: Node = null;\r\n    @property(ToggleContainer)\r\n    toggleContainer: ToggleContainer = null;\r\n    private signInView: SignInView;\r\n    private newPlayerSignInView: SignInView;\r\n    private heroRoadView: HeroRoadView;\r\n    private currTag: tab.OpenFunctionName = 0;\r\n    private currNode: Node = null;\r\n    private toggleItemMap: Map<tab.OpenFunctionName, WelfareActivityToggleItem>;\r\n    private monthlyCardView: MonthlyCardView = null;\r\n    private vipView: VipPrivilegeView = null;\r\n    register(): void {\r\n\r\n    }\r\n    onShow(): void {\r\n        this.initToggle();\r\n        this.initView();\r\n    }\r\n    initToggle() {\r\n        this.toggleItemMap = new Map();\r\n        let toggles = this.toggleContainer.toggleItems;\r\n        for (let key in toggles) {\r\n            let item = toggles[key].node.getComponent(WelfareActivityToggleItem);\r\n            let isOpen = this.getActivityOpen(item.opName);\r\n            if (isOpen) {\r\n                toggles[key].node.active = true;\r\n                item.updateRedPoint();\r\n                this.toggleItemMap.set(item.opName, item);\r\n            } else {\r\n                toggles[key].node.active = false;\r\n            }\r\n\r\n        }\r\n        let items= Array.from(this.toggleItemMap.values())\r\n        if(this.openData&&this.openData[\"type\"]){\r\n            let type=this.openData[\"type\"];\r\n            for(let key in items){\r\n                if(items[key].opName==type){\r\n                    items[key].node.getComponent(Toggle).isChecked=true;\r\n                    this.currTag=type;\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n          \r\n            items[0].node.getComponent(Toggle).isChecked=true;\r\n            this.currTag = items[0].node.getComponent(WelfareActivityToggleItem).opName;\r\n        }\r\n      \r\n        // for (let key in toggles) {\r\n        //     if (toggles[key].isChecked) {\r\n        //         this.currTag = toggles[key].node.getComponent(WelfareActivityToggleItem).opName;\r\n        //     }\r\n        // }\r\n    }\r\n    getActivityOpen(name: tab.OpenFunctionName) {\r\n        let isOpen = false;\r\n        switch (name) {\r\n            case tab.OpenFunctionName.OpenFunctionName_NewServerSignIn:\r\n                isOpen = ActivityData.ins.isOpenDailyAcivity(tab.DailyRewardType.DailyRewardType_NewServer);\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_DailySignIn:\r\n                isOpen = ActivityData.ins.isOpenDailyAcivity(tab.DailyRewardType.DailyRewardType_Daily);\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_HeroCollection:\r\n                isOpen = ActivityData.ins.isOpenHeroCollectio();\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_MonthlyPass:\r\n                isOpen =OpenFunctionMgr.ins.checkFunctionIsOpen(name);\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_Vip:\r\n                isOpen =OpenFunctionMgr.ins.checkFunctionIsOpen(name);\r\n                break;\r\n        }\r\n        return isOpen;\r\n    }\r\n    initView() {\r\n        if (this.currNode) {\r\n            this.currNode.active = false;\r\n        }\r\n        switch (this.currTag) {\r\n            case tab.OpenFunctionName.OpenFunctionName_NewServerSignIn:\r\n                this.initNewPlayerSignInView();\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_DailySignIn:\r\n                this.initSignInView();\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_HeroCollection:\r\n                this.initHeroRoadView();\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_MonthlyPass:\r\n                this.initMonthlyCardView();\r\n                break;\r\n            case tab.OpenFunctionName.OpenFunctionName_Vip:\r\n                this.initVipView();\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    async initSignInView() {\r\n        if (!this.signInView) {\r\n            let view = await this.createView(ViewName.SignInView);\r\n            if (view) {\r\n                this.signInView = view.getComponent(SignInView);\r\n                this.currNode = view;\r\n                this.signInView.initView(tab.DailyRewardType.DailyRewardType_Daily);\r\n            }\r\n            // let pfb: Prefab = await LoadResAsync(viewTab.Path, Prefab)\r\n        } else {\r\n            this.signInView.node.active = true;\r\n            this.currNode = this.signInView.node;\r\n            this.signInView.updateView();\r\n        }\r\n    }\r\n    async initNewPlayerSignInView() {\r\n        if (!this.newPlayerSignInView) {\r\n            let view = await this.createView(ViewName.NewPlayerSignInView);\r\n            if (view) {\r\n                this.newPlayerSignInView = view.getComponent(SignInView);\r\n                this.currNode = view;\r\n                this.newPlayerSignInView.initView(tab.DailyRewardType.DailyRewardType_NewServer);\r\n            }\r\n            // let pfb: Prefab = await LoadResAsync(viewTab.Path, Prefab)\r\n        } else {\r\n            this.newPlayerSignInView.node.active = true;\r\n            this.currNode = this.newPlayerSignInView.node;\r\n            this.newPlayerSignInView.updateView();\r\n        }\r\n    }\r\n    async initHeroRoadView() {\r\n        if (!this.heroRoadView) {\r\n            let view = await this.createView(ViewName.HeroRoadView);\r\n            if (view) {\r\n                this.heroRoadView = view.getComponent(HeroRoadView);\r\n                this.currNode = view;\r\n                this.heroRoadView.initView();\r\n            }\r\n            // let pfb: Prefab = await LoadResAsync(viewTab.Path, Prefab)\r\n        } else {\r\n            this.heroRoadView.node.active = true;\r\n            this.currNode = this.heroRoadView.node;\r\n            this.heroRoadView.updateView();\r\n        }\r\n    }\r\n    async initMonthlyCardView() {\r\n        if (!this.monthlyCardView) {\r\n            let view = await this.createView(ViewName.MonthlyCardView);\r\n            if (view) {\r\n                this.monthlyCardView = view.getComponent(MonthlyCardView);\r\n                this.currNode = view;\r\n                this.monthlyCardView.initView();\r\n            }\r\n            // let pfb: Prefab = await LoadResAsync(viewTab.Path, Prefab)\r\n        } else {\r\n            this.monthlyCardView.node.active = true;\r\n            this.currNode = this.monthlyCardView.node;\r\n            this.monthlyCardView.updateView();\r\n        }\r\n    }\r\n    async initVipView() {\r\n        if (!this.vipView) {\r\n            let view = await this.createView(ViewName.VipPrivilegeView);\r\n            if (view) {\r\n                this.vipView = view.getComponent(VipPrivilegeView);\r\n                this.currNode = view;\r\n                this.vipView.initView();\r\n            }\r\n            // let pfb: Prefab = await LoadResAsync(viewTab.Path, Prefab)\r\n        } else {\r\n            this.vipView.node.active = true;\r\n            this.currNode = this.vipView.node;\r\n            this.vipView.updateView();\r\n        }\r\n    }\r\n    async createView(viewName: ViewName) {\r\n        let viewTab = ClientView.ins.getViewTab(viewName);\r\n        if (viewTab) {\r\n            let pfb: Prefab = await LoadResAsync(viewTab.Path, Prefab)\r\n            let view = instantiate(pfb);\r\n            view.parent = this.activityNode;\r\n            return view;\r\n        } else {\r\n            error(\"view路径没有配置\", viewName)\r\n        }\r\n        return null;\r\n    }\r\n    updateToggleRedPoint(opName: tab.OpenFunctionName) {\r\n        let item = this.toggleItemMap.get(opName);\r\n        if (item) {\r\n            item.updateRedPoint();\r\n        }\r\n\r\n    }\r\n\r\n    onClickToggle(event) {\r\n        let type = event.target.getComponent(WelfareActivityToggleItem).opName;\r\n        if (this.currTag != type) {\r\n            this.currTag = type;\r\n            this.initView();\r\n        }\r\n    }\r\n}"]}