{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/startScrpit/Bridge.ts"],"names":["Bridge","native","JSBridgePath","init","methodCache","bridgeCallback","method","param","console","log","callWithBack","call","methodName","methodSignature","isIos","reflection","callStaticMethod","testCall","code","testCallWithBack","isAndroid"],"mappings":"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","sourcesContent":["import { native, sys } from \"cc\";\n\nconst JSBridgePath = \"com/cocos/game/JSBridge\"\n\n/** 原生桥接\n * 传递参数和返回参数， 统一为String (传递可为空)\n * \n * java 目前 Cocos Creator 中支持的 Java 类型签名有以下 4 种：\n * Java 类型\t签名  I 整数，F 浮点，Z 布尔，Ljava/lang/String;字符串 (ILjava/lang/String;I)Ljava/lang/String;表示参数类型为一个 int，一个 String 和一个 int，一个，返回值类型为 String 的方法\n * \n */\nexport class Bridge {\n    static methodCache = {}\n\n    static isIos: boolean = false\n    static isAndroid: boolean = false\n\n    static init() {\n        // window[\"bridgeCallback\"] = this.bridgeCallback.bind(this)\n        this.methodCache = {}\n        // if (sys.isNative) {\n        //     this.isIos = (sys.os == sys.OS.IOS || sys.os == sys.OS.OSX)\n        //     this.isAndroid = sys.platform == sys.Platform.ANDROID\n        //     native.jsbBridgeWrapper.addNativeEventListener(\"bridgeCallback\", (jsonStr: string) => {\n        //         console.log(\"native回调\", jsonStr)\n        //         let data = JSON.parse(jsonStr)\n        //         if (data) {\n        //             this.bridgeCallback(data.method, data.param)\n        //         }\n        //     })\n        // }\n    }\n\n    static bridgeCallback(method: string, param: string) {\n        if (this.methodCache[method]) {\n            this.methodCache[method](param)\n        } else {\n            console.log(\"未找到回调\")\n        }\n    }\n\n    /**\n     * \n     * @param methodName 原生方法名\n     * @param param 传递的参数（json字符串）签名为空时， 表示无参数并且无返回\n     * @param methodSignature 方法签名 \n     * @param call 回调函数\n     * \n     * ios只有方法名和参数， 不需要签名，只支持不传递参数和传递一个字符串\n     * @returns 原生返回值，(字符串)\n     */\n    static callWithBack(call: Function, methodName: string, param?: string, methodSignature?: string) {\n        if (call) {\n            this.methodCache[methodName] = call\n        }\n        return this.call(methodName, param, methodSignature)\n    }\n\n    /**\n     * \n     * @param methodName 原生方法名\n     * @param param 传递的参数（json字符串） 签名为空时， 表示无参数并且无返回\n     * @param methodSignature 方法签名 \n     * \n     * ios只有方法名和参数， 不需要签名，只支持不传递参数和传递一个字符串\n     * @returns 原生返回值，(字符串)\n     */\n    static call(methodName: string, param?: string, methodSignature?: string) {\n        if (this.isIos) {\n            /** ios只有方法名和参数， 不需要签名 */\n            if (param == null) {\n                return native.reflection.callStaticMethod(\"JSBridge\", methodName)\n            } else {\n                return native.reflection.callStaticMethod(\"JSBridge\", methodName, param)\n            }\n        } else {\n            console.log(\"bridge call\", methodName, methodSignature, param)\n            if (methodSignature == null) {\n                return native.reflection.callStaticMethod(JSBridgePath, methodName, \"()V\")\n            } else if (param == null) {\n                return native.reflection.callStaticMethod(JSBridgePath, methodName, methodSignature)\n            } else {\n                return native.reflection.callStaticMethod(JSBridgePath, methodName, methodSignature, param)\n            }\n\n        }\n    }\n\n\n    //---------------测试----------\n    static testCall() {\n        let code\n        if (this.isIos) {\n            code = this.call(\"getAppVersionCode\")\n        } else {\n            code = this.call(\"getAppVersionCode\", \"()Ljava/lang/String;\")\n        }\n        console.log(\"getAppVersionCode\", code)\n    }\n\n    static testCallWithBack() {\n        if (this.isIos) {\n            this.callWithBack((param: string) => {\n                console.log(\"testCallWithBack回调\", param)\n            }, \"testCallBack:\", \"jstojava\")\n        } else {\n            this.callWithBack((param: string) => {\n                console.log(\"testCallWithBack回调\", param)\n            }, \"testCallBack\", \"jstojava\", \"(Ljava/lang/String;)V\")\n        }\n\n    }\n}"]}