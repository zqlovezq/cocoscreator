{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/guide/GuideTrigger.ts"],"names":["_decorator","Component","log","EventMgr","tab","LocalEvent","GuideController","guideTask","RoleData","ErrCondNotSatisfied","Error","ccclass","property","GuideTrigger","_guideRunning","guideTrunkData","guideBranchData","removeListens","unTarget","setGuideRunning","bRunning","onLoad","onLocal","CheckGuide","checkGuide","ins","isGuiding","undefined","allGuideData","getData","GuideTable","slice","sort","data1","data2","Id","data","GuideType","GuideType_Trunk","push","runGuide","result","guideEndCallBack","guideArray","stopOnFailed","endCallback","bGuideOver","IsGuideFinished","ergodicGuide","async","eachSeries","guideData","next","ScriptName","task","checkPass","checkCondition","checkGuideScene","runningGuideData","runTask","error","finish","setClientData","String","message","err","skip","isGuidePass","condition","guideId","GuideTableById","getValue","Number","clientData","guideTrunk"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAqBC,MAAAA,G,OAAAA,G;;AAEjCC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,G,iBAAAA,G;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,e,iBAAAA,e;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,Q,iBAAAA,Q;;;;;;;;;AACT;AACMC,MAAAA,mB,GAA6B,IAAIC,KAAJ,CAAU,+BAAV,C;OAC7B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBZ,U;;8BAGjBa,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb,SACkCZ,SADlC,CAC4C;AAAA;AAAA;AAAA,eAChCa,aADgC,GACP,KADO;AAAA,eAE9BC,cAF8B;AAAA,eAG9BC,eAH8B;AAAA;;AAIxCC,QAAAA,aAAa,GAAG;AACZ;AAAA;AAAA,oCAASC,QAAT,CAAkB,IAAlB;AACH;;AACDC,QAAAA,eAAe,CAACC,QAAD,EAAW;AACtB,eAAKN,aAAL,GAAqBM,QAArB;AACH;;AACDC,QAAAA,MAAM,GAAS;AACX;AAAA;AAAA,oCAASC,OAAT,CAAiB;AAAA;AAAA,wCAAWC,UAA5B,EAAwC,MAAM;AAC1C,iBAAKC,UAAL;AACH,WAFD,EAEG,IAFH;AAGH;;AACDA,QAAAA,UAAU,GAAG;AACT,cAAI;AAAA;AAAA,kDAAgBC,GAAhB,CAAoBC,SAApB,EAAJ,EAAqC;AACjC;AACH;;AACDxB,UAAAA,GAAG,CAAC,eAAD,CAAH;;AAEA,cAAI,KAAKa,cAAL,KAAwBY,SAA5B,EAAuC;AACnC,gBAAIC,YAAY,GAAG;AAAA;AAAA,4BAAIC,OAAJ,GAAcC,UAAd,CAAyBC,KAAzB,EAAnB;AACAH,YAAAA,YAAY,CAACI,IAAb,CAAkB,CAACC,KAAD,EAAwBC,KAAxB,KAAkDD,KAAK,CAACE,EAAN,GAAWD,KAAK,CAACC,EAArF;AAEA,iBAAKpB,cAAL,GAAsB,EAAtB;AACA,iBAAKC,eAAL,GAAuB,EAAvB,CALmC,CAKV;;AAEzB,iBAAK,IAAIoB,IAAT,IAAiBR,YAAjB,EAA+B;AAC3B,kBAAGQ,IAAI,CAACC,SAAL,KAAiB;AAAA;AAAA,8BAAIA,SAAJ,CAAcC,eAAlC,EAAkD;AAC9C,qBAAKvB,cAAL,CAAoBwB,IAApB,CAAyBH,IAAzB;AACH,eAH0B,CAI3B;AACA;AACA;;AACH;AAEJ;;AACD,eAAKI,QAAL,CAAc,KAAKzB,cAAnB,EAAmC,IAAnC,EAAyC0B,MAAM,IAAI;AAC/C,iBAAKC,gBAAL,CAAsBD,MAAtB;AACH,WAFD;AAGH;;AACDD,QAAAA,QAAQ,CAACG,UAAD,EAA+BC,YAA/B,EAAsDC,WAAtD,EAA8E;AAClF;AACA,cAAIC,UAAU,GAAG;AAAA;AAAA,oCAASrB,GAAT,CAAasB,eAAb,EAAjB;;AACA,cAAI,KAAKjC,aAAL,IAAsBgC,UAA1B,EAAsC;AAClC,gBAAIA,UAAU,IAAID,WAAlB,EAA+BA,WAAW;AAC1C;AACH;;AACD,eAAK1B,eAAL,CAAqB,IAArB;AACA,eAAK6B,YAAL,CAAkBL,UAAlB,EAA8BC,YAA9B,EAA4CC,WAA5C;AACH;AACD;;;AACAG,QAAAA,YAAY,CAACL,UAAD,EAA+BC,YAA/B,EAAsDC,WAAtD,EAA8E;AACtFI,UAAAA,KAAK,CAACC,UAAN,CAAiBP,UAAjB,EAA6B,CAACQ,SAAD,EAAYC,IAAZ,KAAqB;AAC9ClD,YAAAA,GAAG,CAAC,oBAAD,EAAuBiD,SAAS,CAACE,UAAjC,CAAH;;AACA,gBAAI;AACA,kBAAMC,IAAI,GAAG;AAAA;AAAA,0CAAUH,SAAS,CAACE,UAApB,CAAb;;AACA,kBAAI,KAAKE,SAAL,CAAeD,IAAf,EAAqBH,SAArB,CAAJ,EAAqC;AACjC;AACAC,gBAAAA,IAAI;AACP,eAHD,MAGO;AACH;AACA,oBAAI,KAAKI,cAAL,CAAoBF,IAApB,EAA0BH,SAA1B,CAAJ,EAA0C;AACtCjD,kBAAAA,GAAG,CAAC,kBAAD,EAAqBiD,SAAS,CAAChB,EAA/B,CAAH;;AACA,sBAAI,CAAC,KAAKsB,eAAL,CAAqBN,SAArB,CAAL,EAAsC;AAClCC,oBAAAA,IAAI,CAAC,IAAI1C,KAAJ,CAAU,2BAAV,CAAD,CAAJ;AACA;AACH;;AACD,sBAAIyC,SAAS,CAAChB,EAAV,KAAiBR,SAArB,EAAgC,CAE/B;;AACD;AAAA;AAAA,0DAAgBF,GAAhB,CAAoBiC,gBAApB,GAAuCP,SAAvC;AACA;AAAA;AAAA,0DAAgB1B,GAAhB,CAAoBkC,OAApB,CAA4BL,IAA5B,EAAkCH,SAAS,CAAChB,EAA5C,EAAgDyB,KAAK,IAAI;AACrD,wBAAI;AAAA;AAAA,4DAAgBnC,GAAhB,CAAoBiC,gBAAxB,EAA0C;AACtC,0BAAI,CAACE,KAAL,EAAY;AACR1D,wBAAAA,GAAG,sBAAoBiD,SAAS,CAAChB,EAA9B,CAAH;;AACA,4BAAImB,IAAI,CAACO,MAAL,KAAgBlC,SAAhB,IAA6B2B,IAAI,CAACO,MAAL,KAAgB,IAAjD,EAAuD;AACnD3D,0BAAAA,GAAG,4BAA0BiD,SAAS,CAAChB,EAApC,CAAH;AACA;AAAA;AAAA,oDAASV,GAAT,CAAaqC,aAAb,CAA2B,YAA3B,EAAwCC,MAAM,CAACZ,SAAS,CAAChB,EAAX,CAA9C;AACH;AACJ;;AACD;AAAA;AAAA,8DAAgBV,GAAhB,CAAoBiC,gBAApB,GAAuC,IAAvC;AACH;;AACD,wBAAId,YAAJ,EAAkB;AACdQ,sBAAAA,IAAI,CAACQ,KAAD,CAAJ;AACH,qBAFD,MAEO;AACH,0BAAIA,KAAK,YAAalD,KAAtB,EAA8B;AAC1BR,wBAAAA,GAAG,CAAC0D,KAAK,CAACI,OAAP,CAAH;AACH,uBAFD,MAEO;AACH9D,wBAAAA,GAAG,CAAC0D,KAAD,CAAH;AACH;;AACDR,sBAAAA,IAAI;AACP;AACJ,mBArBD;AAsBH,iBAhCD,MAiCK;AACD,sBAAIR,YAAJ,EAAkB;AACd;AACAQ,oBAAAA,IAAI,CAAC3C,mBAAD,CAAJ;AACH,mBAHD,MAGO;AACH;AACA2C,oBAAAA,IAAI;AACP;AACJ;AACJ;AACJ,aAlDD,CAkDE,OAAOQ,KAAP,EAAc;AACZ;AACA;AAAA;AAAA,sDAAgBnC,GAAhB,CAAoBiC,gBAApB,GAAuC,IAAvC;AACAN,cAAAA,IAAI,CAACQ,KAAD,CAAJ;AACH;AACJ,WAzDD,EAyDIK,GAAD,IAAyB;AACxB,iBAAK9C,eAAL,CAAqB,KAArB;;AACA,gBAAI8C,GAAJ,EAAS;AACL,kBAAIA,GAAG,YAAavD,KAApB,EAA4B;AACxBR,gBAAAA,GAAG,CAAC+D,GAAG,CAACD,OAAL,CAAH;AACH,eAFD,MAEO;AACH9D,gBAAAA,GAAG,CAAC+D,GAAD,CAAH;AACH;AACJ;;AACD;AAAA;AAAA,sCAAS/C,QAAT,CAAkB;AAAA;AAAA,oDAAgBO,GAAlC;;AACA,gBAAIoB,WAAJ,EAAiB;AACb,kBAAI,CAACoB,GAAD,IAAQA,GAAG,KAAKxD,mBAApB,EAAyC;AACrC;AACAoC,gBAAAA,WAAW,CAAC,IAAD,CAAX;AACH,eAHD,MAGO;AACH;AACAA,gBAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ;AACJ,WA5ED;AA6EH;;AACDH,QAAAA,gBAAgB,CAACD,MAAD,EAAS;AACrB,cAAIA,MAAJ,EAAY;AACR;AACA,iBAAKD,QAAL,CAAc,KAAKxB,eAAnB,EAAoC,KAApC,EAA2C,MAAM,CAC7C;AACH,aAFD;AAGH,WALD,MAKO,CACH;AACH;AACJ;;AACSuC,QAAAA,SAAS,CAACD,IAAD,EAAYH,SAAZ,EAAgD;AAC/D,cAAI,CAAC,CAACG,IAAI,CAACY,IAAX,EAAiB;AACb,gBAAIZ,IAAI,CAACY,IAAL,EAAJ,EAAiB;AACb;AACA,qBAAO,IAAP;AACH;AACJ;;AAED,iBAAO,KAAKC,WAAL,CAAiBhB,SAAS,CAAChB,EAA3B,CAAP;AACH;;AACSqB,QAAAA,cAAc,CAACF,IAAD,EAAYH,SAAZ,EAAgD;AACpE,cAAIG,IAAI,CAACc,SAAL,KAAmBzC,SAAnB,IAAgC,CAAC2B,IAAI,CAACc,SAAL,EAArC,EAAuD;AACnD,mBAAO,KAAP;AACH;;AAED,iBAAO,IAAP;AACH;;AACSD,QAAAA,WAAW,CAACE,OAAD,EAAU;AAC3B,cAAIlB,SAAS,GAAG;AAAA;AAAA,0BAAItB,OAAJ,GAAcyC,cAAd,CAA6BC,QAA7B,CAAsCF,OAAtC,CAAhB;;AACA,cAAI,CAAClB,SAAL,EAAgB;AACZ,mBAAO,KAAP;AACH;;AACD,cAAGqB,MAAM,CAAC;AAAA;AAAA,oCAAS/C,GAAT,CAAagD,UAAb,CAAwBC,UAAzB,CAAN,GAA6CL,OAAhD,EAAwD;AACpD,mBAAO,KAAP;AACH;;AACD,iBAAO,IAAP;AAEH;;AACSZ,QAAAA,eAAe,CAACN,SAAD,EAAY;AACjC,cAAI,CAACA,SAAL,EAAgB;AACZ,mBAAO,IAAP;AACH;;AACD,iBAAO,IAAP,CAJiC,CAKjC;AACA;AACH;;AAjLuC,O","sourcesContent":["import { _decorator, Component, director, log, Node } from 'cc';\r\nimport { Net } from '../net/Net';\r\nimport { EventMgr } from '../mgr/EventMgr';\r\nimport { tab } from '../../Table/table_gen';\r\nimport { LocalEvent } from '../define/LocalEvent';\r\nimport { GuideController } from './GuideController';\r\nimport { guideTask } from './GuideTask';\r\nimport { RoleData } from '../model/role/RoleData';\r\n// import { task_100 } from './tasks/task_100';\r\nconst ErrCondNotSatisfied: Error = new Error(\"guide condition not satisfied\")\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GuideTrigger')\r\nexport class GuideTrigger extends Component {\r\n    private _guideRunning: boolean = false;\r\n    protected guideTrunkData: tab.GuideTable[];\r\n    protected guideBranchData: tab.GuideTable[];\r\n    removeListens() {\r\n        EventMgr.unTarget(this);\r\n    }\r\n    setGuideRunning(bRunning) {\r\n        this._guideRunning = bRunning;\r\n    }\r\n    onLoad(): void {\r\n        EventMgr.onLocal(LocalEvent.CheckGuide, () => {\r\n            this.checkGuide()\r\n        }, this)\r\n    }\r\n    checkGuide() {\r\n        if (GuideController.ins.isGuiding()) {\r\n            return;\r\n        }\r\n        log('checkGuide...')\r\n\r\n        if (this.guideTrunkData === undefined) {\r\n            let allGuideData = tab.getData().GuideTable.slice();\r\n            allGuideData.sort((data1: tab.GuideTable, data2: tab.GuideTable) => data1.Id - data2.Id)\r\n\r\n            this.guideTrunkData = []\r\n            this.guideBranchData = []//支线\r\n\r\n            for (let data of allGuideData) {\r\n                if(data.GuideType===tab.GuideType.GuideType_Trunk){\r\n                    this.guideTrunkData.push(data)\r\n                }\r\n                // else{\r\n                //     this.guideBranchData.push(data)\r\n                // }\r\n            }\r\n\r\n        }\r\n        this.runGuide(this.guideTrunkData, true, result => {\r\n            this.guideEndCallBack(result);\r\n        })\r\n    }\r\n    runGuide(guideArray: tab.GuideTable[], stopOnFailed: boolean, endCallback?: Function) {\r\n        /* 是否新手引导完毕 */\r\n        let bGuideOver = RoleData.ins.IsGuideFinished();\r\n        if (this._guideRunning || bGuideOver) {\r\n            if (bGuideOver && endCallback) endCallback()\r\n            return;\r\n        }\r\n        this.setGuideRunning(true);\r\n        this.ergodicGuide(guideArray, stopOnFailed, endCallback)\r\n    }\r\n    /* 遍历运行引导 */\r\n    ergodicGuide(guideArray: tab.GuideTable[], stopOnFailed: boolean, endCallback?: Function) {\r\n        async.eachSeries(guideArray, (guideData, next) => {\r\n            log(\"guide checking :%s\", guideData.ScriptName);\r\n            try {\r\n                const task = guideTask[guideData.ScriptName];\r\n                if (this.checkPass(task, guideData)) {\r\n                    //已经引导过了，或task.skip()返回true\r\n                    next();\r\n                } else {\r\n                    // 检测条件\r\n                    if (this.checkCondition(task, guideData)) {\r\n                        log(\"guide runing :%s\", guideData.Id);\r\n                        if (!this.checkGuideScene(guideData)) {\r\n                            next(new Error(\"guide scene not satisfied\"));\r\n                            return;\r\n                        }\r\n                        if (guideData.Id !== undefined) {\r\n\r\n                        }\r\n                        GuideController.ins.runningGuideData = guideData;\r\n                        GuideController.ins.runTask(task, guideData.Id, error => {\r\n                            if (GuideController.ins.runningGuideData) {\r\n                                if (!error) {\r\n                                    log(`guide finished :${guideData.Id}`);\r\n                                    if (task.finish === undefined || task.finish === true) {\r\n                                        log(`guide send to server :${guideData.Id}`);\r\n                                        RoleData.ins.setClientData(\"guideTrunk\",String(guideData.Id))\r\n                                    }\r\n                                }\r\n                                GuideController.ins.runningGuideData = null;\r\n                            }\r\n                            if (stopOnFailed) {\r\n                                next(error);\r\n                            } else {\r\n                                if (error instanceof (Error)) {\r\n                                    log(error.message)\r\n                                } else {\r\n                                    log(error)\r\n                                }\r\n                                next()\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (stopOnFailed) {\r\n                            //不符合引导开启的条件,不再检查下一条\r\n                            next(ErrCondNotSatisfied);\r\n                        } else {\r\n                            //检查下一条\r\n                            next()\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                //发生异常\r\n                GuideController.ins.runningGuideData = null;\r\n                next(error)\r\n            }\r\n        }, (err: Error | string) => {\r\n            this.setGuideRunning(false);\r\n            if (err) {\r\n                if (err instanceof (Error)) {\r\n                    log(err.message)\r\n                } else {\r\n                    log(err)\r\n                }\r\n            }\r\n            EventMgr.unTarget(GuideController.ins)\r\n            if (endCallback) {\r\n                if (!err || err === ErrCondNotSatisfied) {\r\n                    //正常结束\r\n                    endCallback(true)\r\n                } else {\r\n                    //异常结束\r\n                    endCallback(false)\r\n                }\r\n            }\r\n        })\r\n    }\r\n    guideEndCallBack(result) {\r\n        if (result) {\r\n            //检查支线引导\r\n            this.runGuide(this.guideBranchData, false, () => {\r\n                // Net.pushLoaclMessage(LOCAL_MESSAGE.EnablePageViewTouch, true)\r\n            });\r\n        } else {\r\n            // Net.pushLoaclMessage(LOCAL_MESSAGE.EnablePageViewTouch, true)\r\n        }\r\n    }\r\n    protected checkPass(task: any, guideData: tab.GuideTable): boolean {\r\n        if (!!task.skip) {\r\n            if (task.skip()) {\r\n                //跳过\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return this.isGuidePass(guideData.Id);\r\n    }\r\n    protected checkCondition(task: any, guideData: tab.GuideTable): boolean {\r\n        if (task.condition !== undefined && !task.condition()) {\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n    protected isGuidePass(guideId) {\r\n        let guideData = tab.getData().GuideTableById.getValue(guideId);\r\n        if (!guideData) {\r\n            return false;\r\n        }\r\n        if(Number(RoleData.ins.clientData.guideTrunk) < guideId){\r\n            return false\r\n        }\r\n        return true\r\n\r\n    }\r\n    protected checkGuideScene(guideData) {\r\n        if (!guideData) {\r\n            return true;\r\n        }\r\n        return true;\r\n        // let sceneName = guideData.Scene == tab.GuideScene.GuideScene_MainScene ? \"MainScene\" : \"ChessFightScene\";\r\n        // return director.getScene().name === sceneName;\r\n    }\r\n\r\n}\r\n"]}