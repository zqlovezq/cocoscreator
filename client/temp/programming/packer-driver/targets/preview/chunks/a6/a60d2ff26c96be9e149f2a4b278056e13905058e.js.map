{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/activity/battlePass/BattlePassView.ts"],"names":["_decorator","error","instantiate","Node","Prefab","Toggle","ViewPop","BattlePassDataMgr","tab","LoadResAsync","BattlePassItem","EventMgr","proto","TaskData","RedMgr","RedDotType","Net","ccclass","property","BattlePassView","view_type","BattlePassTab","BattlePassTab_MainChapterPass","currNode","onDestroy","register","onMsg","Ptl","BuyBattlePassLevelRsp","on_s2c_BuyBattlePassLevelRsp","ReceiveBattlePassTaskRewardsRsp","on_s2c_ReceiveBattlePassTaskRewardsRsp","GetBattlePassInfoMapRsp","on_s2c_GetBattlePassInfoMapRsp","unRegister","msg","setOnshow","onShow","pass_msg","Msg_GetBattlePassInfoMapReq","Send","GetBattlePassInfoMapReq","refreshEvent","Battle_Pass","openData","ins","getDefaultPassName","switchView","String","i","toggleNode","node_toggle_content","getChildByName","data","getDataByPassName","active","length","getComponent","isChecked","e","customValue","tabName","Number","itemTs","activityNode","view","createView","node","viewName","viewTab","PrefabUrl","pfb","name","parent","code","CommonErrorCode","Succeed","battlePass","getBattlePassData","id","tasks","taskId","task","getBattlePassTaskInfo","taskTab","getData","TaskTableById","getValue","progress","FinishParam1","refreshView"],"mappings":"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","sourcesContent":["import { _decorator, Component, error, EventTouch, instantiate, Node, Prefab, Toggle } from 'cc';\r\nimport { ViewPop } from '../../../../framework/base/ViewPop';\r\nimport { BattlePassDataMgr } from './BattlePassDataMgr';\r\nimport { tab } from '../../../../Table/table_gen';\r\nimport { LoadResAsync } from '../../../mgr/ResMgr';\r\nimport { BattlePassItem } from './BattlePassItem';\r\nimport { EventMgr } from '../../../mgr/EventMgr';\r\nimport { proto } from 'client_protocol';\r\nimport { UIMgr } from '../../../mgr/UIMgr';\r\nimport { ViewName } from '../../../define/ViewDefine';\r\nimport { TaskData } from '../../task/TaskData';\r\nimport { RedMgr } from '../../../mgr/RedMgr';\r\nimport { RedDotType } from '../../../red/RedDotType';\r\nimport { Net } from '../../../net/Net';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattlePassView')\r\nexport class BattlePassView extends ViewPop {\r\n    @property(Node)\r\n    activityNode: Node = null;\r\n    @property(Node)\r\n    node_toggle_content: Node = null;\r\n    private view_type: tab.BattlePassTab = tab.BattlePassTab.BattlePassTab_MainChapterPass;\r\n    private currNode: Node = null;\r\n    protected onDestroy(): void {\r\n        super.onDestroy();\r\n    }\r\n    register(): void {\r\n        // 购买战令等级\r\n        EventMgr.onMsg(proto.Ptl.BuyBattlePassLevelRsp, this.on_s2c_BuyBattlePassLevelRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.ReceiveBattlePassTaskRewardsRsp, this.on_s2c_ReceiveBattlePassTaskRewardsRsp, this);\r\n        EventMgr.onMsg(proto.Ptl.GetBattlePassInfoMapRsp, this.on_s2c_GetBattlePassInfoMapRsp, this);\r\n    }\r\n    unRegister(): void {\r\n        super.unRegister();\r\n    }\r\n    on_s2c_GetBattlePassInfoMapRsp(msg: proto.Msg_GetBattlePassInfoMapRsp){\r\n        this.setOnshow();\r\n    }\r\n    onShow(): void {\r\n        let pass_msg = new proto.Msg_GetBattlePassInfoMapReq();\r\n        Net.Send(proto.Ptl.GetBattlePassInfoMapReq, pass_msg);\r\n    }\r\n    setOnshow() {\r\n        // 默认章节基金\r\n        RedMgr.refreshEvent(RedDotType.Battle_Pass);\r\n        this.view_type = this.openData ? this.openData : BattlePassDataMgr.ins.getDefaultPassName();\r\n        this.switchView(null, String(this.view_type))\r\n        for (let i = 1; i <= 6; i++) {\r\n            const toggleNode = this.node_toggle_content.getChildByName(\"toggle\" + i);\r\n            const data = BattlePassDataMgr.ins.getDataByPassName(i);\r\n            toggleNode.active = data && data.length > 0;\r\n            toggleNode.getComponent(Toggle).isChecked = i === this.view_type;\r\n        }\r\n    }\r\n    async switchView(e: EventTouch, customValue: string) {\r\n        let tabName = Number(customValue);\r\n        if (e && this.view_type === tabName) {\r\n            return;\r\n        }\r\n        if (this.currNode) {\r\n            this.currNode.active = false;\r\n        }\r\n        this.view_type = tabName;\r\n\r\n        let itemTs = null;\r\n        if (this.activityNode.getChildByName(customValue)) {\r\n            itemTs = this.activityNode.getChildByName(customValue).getComponent(BattlePassItem)\r\n        }\r\n        if (!itemTs) {\r\n            let view = await this.createView(this.view_type);\r\n            if (view) {\r\n                const itemTs = view.getComponent(BattlePassItem);\r\n                this.currNode = view;\r\n                itemTs.onShow(this.view_type);\r\n            }\r\n        } else {\r\n            itemTs.node.active = true;\r\n            this.currNode = itemTs.node;\r\n            itemTs.onShow(this.view_type);\r\n        }\r\n    }\r\n    async createView(viewName: tab.BattlePassTab) {\r\n        let viewTab = BattlePassDataMgr.ins.getDataByPassName(viewName)[0];\r\n        if (viewTab && viewTab.PrefabUrl) {\r\n            let pfb: Prefab = await LoadResAsync(viewTab.PrefabUrl, Prefab);\r\n            let view = instantiate(pfb);\r\n            view.name = String(viewName);\r\n            view.parent = this.activityNode;\r\n            return view;\r\n        } else {\r\n            error(\"view路径没有配置\", viewName)\r\n        }\r\n        return null;\r\n    }\r\n    // 购买等级\r\n    on_s2c_BuyBattlePassLevelRsp(msg: proto.Msg_BuyBattlePassLevelRsp) {\r\n        if (msg.error && msg.error.code != proto.CommonErrorCode.Succeed) return;\r\n        RedMgr.refreshEvent(RedDotType.Battle_Pass);\r\n        // 刷新一下progress\r\n        const battlePass = BattlePassDataMgr.ins.getBattlePassData(msg.id);\r\n        for (let i = 0; i < battlePass.tasks.length; i++) {\r\n            const taskId = battlePass.tasks[i].id;\r\n            const task = TaskData.ins.getBattlePassTaskInfo(taskId)\r\n            const taskTab = tab.getData().TaskTableById.getValue(taskId);\r\n            if (task.progress < taskTab.FinishParam1) {\r\n                task.progress = msg.progress;\r\n            }\r\n        }\r\n        this.currNode.getComponent(BattlePassItem).refreshView();\r\n    }\r\n    // 领奖\r\n    on_s2c_ReceiveBattlePassTaskRewardsRsp(msg: proto.Msg_ReceiveBattlePassTaskRewardsRsp) {\r\n        if (msg.error && msg.error.code != proto.CommonErrorCode.Succeed) return;\r\n        this.currNode.getComponent(BattlePassItem).refreshView();\r\n    }\r\n}\r\n\r\n\r\n"]}