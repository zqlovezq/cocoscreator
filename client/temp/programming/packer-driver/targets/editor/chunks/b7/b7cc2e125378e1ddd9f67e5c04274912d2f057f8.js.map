{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/power/powerTab/SkillTriggerTab.ts"],"names":["_decorator","tab","Random","PowerBase","FightData","FightMacro","ccclass","property","Math_RATIO","SkillTriggerTab","powerType","PowerType","PowerType_TriggerTable","configTab","Id","Chance","Triggertype","TriggerNumber","TriggerCd","TriggerCondition","Parameters","Behavior","Argument","TriggerTarget","TriggerGoal","argumentTabs","triggerCount","timeRefresh","cdTime","setConfigId","id","index","length","behavior","argument","Behavior_UseSkill","Behavior_SwitchSkill","push","skillPowers","createTypeAnyId","PowerType_SkillTable","Behavior_SwitchGroup","PowerType_SkillGroupTable","Behavior_ConditionAddBuff","Behavior_AddBuff","PowerType_BuffTable","Behavior_UseEffect","PowerType_EffectTable","Behavior_AddAttackNum","Behavior_BackJump","Behavior_AddSkill","isType","type","getParameters","isParametersSucceed","parm","isTriggerChanceSucceed","count","isSuccess","CFromP","isCanTrigger","addTriggerCount","use","clearTimeRefresh","time","checkTimeRefresh","num","isInCD","getHoldTime","HoldTimePercent","PERCENT"],"mappings":"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","sourcesContent":["import { _decorator, Component } from \"cc\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { Random } from \"../../util/Random\";\nimport { SkillTab } from \"./SkillTab\";\nimport { PowerBase } from \"./PowerBase\";\nimport { FightData } from \"../../data/FightData\";\nimport { FightMacro } from \"../../define/FightDefine\";\n\nconst { ccclass, property } = _decorator;\nconst Math_RATIO = 10000;\n\n@ccclass('SkillTriggerTab')\nexport class SkillTriggerTab extends PowerBase {\n    powerType: tab.PowerType = tab.PowerType.PowerType_TriggerTable\n    configTab: tab.TriggerTable\n    //---------------------配置字段-------------------\n    Id: number // ID \n    Chance: number // 概率 \n    Triggertype: tab.Triggertype // 触发类型 \n    TriggerNumber: number // 触发次数 \n    TriggerCd: number // 触发CD \n    TriggerCondition: tab.TriggerCondition // 触发条件 \n    Parameters: number[] // 条件参数 \n    Behavior: tab.Behavior[] // 触发行为 \n    Argument: number[] // 行为参数 \n    TriggerTarget: tab.TriggerTarget // 条件目标 \n    TriggerGoal: tab.TriggerGoal // 行为目标 \n\n    //---------------------自有字段-------------------\n    argumentTabs: any[] = []\n\n    //已出发次数\n    triggerCount: number = 0\n\n    /** 时间间隔 (触发器) */\n    timeRefresh: number\n\n    /** CD时间 */\n    cdTime: number = 0\n\n    setConfigId(id: number) {\n        super.setConfigId(id)\n\n        //行为参数配置\n        for (let index = 0; index < this.Behavior.length; index++) {\n            const behavior = this.Behavior[index];\n            const argument = this.Argument[index]\n            switch (behavior) {\n                case tab.Behavior.Behavior_UseSkill:\n                case tab.Behavior.Behavior_SwitchSkill:\n                    this.argumentTabs.push(this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillTable, argument))\n                    break\n                case tab.Behavior.Behavior_SwitchGroup:\n                    this.argumentTabs.push(this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillGroupTable, argument))\n                    break\n                case tab.Behavior.Behavior_ConditionAddBuff:\n                case tab.Behavior.Behavior_AddBuff:\n                    this.argumentTabs.push(this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_BuffTable, argument))\n                    break\n                case tab.Behavior.Behavior_UseEffect:\n                    this.argumentTabs.push(this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_EffectTable, argument))\n                    break\n                case tab.Behavior.Behavior_AddAttackNum:\n                    this.argumentTabs.push(argument)\n                    break\n                case tab.Behavior.Behavior_BackJump:\n                    this.argumentTabs.push(argument)\n                    break\n                case tab.Behavior.Behavior_AddSkill:\n                    this.argumentTabs.push(this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillTable, argument))\n                    break\n                default:\n                    this.argumentTabs.push(argument)\n                    break;\n            }\n        }\n    }\n\n    isType(type: tab.Triggertype) {\n        return this.Triggertype == type\n    }\n    /** 触发参数 */\n    getParameters() {\n        return this.Parameters\n    }\n\n    /** 触发器参数是否成功 */\n    isParametersSucceed(parm: number) {\n        if (this.Parameters.length == 0) {\n            return true\n        }\n        return parm >= (this.Parameters[0] || 0)\n    }\n\n    /** 触发器概率是否成功 */\n    isTriggerChanceSucceed(count:number) {\n        // 触发器\n        return Random.isSuccess(Random.CFromP(this.Chance) *  count)\n    }\n\n    /** 是否可触发 */\n    isCanTrigger() {\n        if (this.TriggerNumber) {\n            return this.TriggerNumber > this.triggerCount\n        }\n        return true\n    }\n\n    addTriggerCount() {\n        this.triggerCount += 1\n        this.use()\n    }\n\n    clearTimeRefresh() {\n        this.timeRefresh = FightData.time\n    }\n\n    checkTimeRefresh(num: number) {\n        return FightData.time - this.timeRefresh >= num\n    }\n\n    use() {\n        this.cdTime = FightData.time\n    }\n\n    /** 是否在CD中 */\n    isInCD() {\n        if (this.TriggerCd) {\n            return FightData.time - this.cdTime < this.TriggerCd\n        }\n        return false\n    }\n\n\n    getHoldTime(HoldTimePercent:number = 0){\n        return this.Parameters[0] * (FightMacro.PERCENT - HoldTimePercent) / FightMacro.PERCENT\n    }\n}"]}