{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/mgr/LangMgr.ts"],"names":["LangMgr","JsonAsset","assetManager","resources","AbsMgr","String","prototype","arr","length","reg","r","test","index","RegExp","$1","slice","replace","constKey","txt","prefix_path","LanguageType","nowPath","_currLanguageValue","nowSuffix","worldTable","ins","_instance","init","TW","str","EN","JP","InitData","jsonAsset","get","len","json","WordTable","v","Key","console","log","releaseAsset","getLab","key","checkPath","path","indexOf","transformPath","pattern","replacement","result","setTexture","getCombineString","opt","s"],"mappings":"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","sourcesContent":["import { Director, DynamicAtlasManager, JsonAsset, Node, Prefab, Scene, SpriteFrame, assert, assetManager, director, js, log, resources } from \"cc\";\nimport { AbsMgr } from \"../../framework/base/IAbs\";\nimport { LocalEvent } from \"../define/LocalEvent\";\nimport { EventMgr } from \"./EventMgr\";\nimport { ResMgr } from \"./ResMgr\";\nimport { UIMgr } from \"./UIMgr\";\nimport { tab } from \"../../Table/table_gen\";\nString.prototype[\"format\"] = function (arr: Array<any>) {\n    if (arr.length === 0) {\n        return String(this);\n    }\n    let reg = /(\\{\\d\\})/;\n    let r = this;\n    while (reg.test(r)) {\n        let index: any = RegExp.$1.slice(1, -1);\n        r = r.replace(new RegExp(\"\\\\{\" + index + \"\\\\}\", \"g\"), (index >= arr.length) ? \"\" : arr[index]);\n    }\n    return r;\n};\n\nconst constKey: { txt: string } = {\n    txt: \"\"\n}\nconst prefix_path = \"world_lang_\"\n\nenum LanguageType {\n    EN = \"En_us\",//英文\n    JP = \"Jp_jp\",//日文\n    TW = \"Zh_tw\"//中文繁体\n}\n\n/**\n * 多语言管理\n */\nexport class LangMgr extends AbsMgr {\n\n    private static _instance: LangMgr;\n   \n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new LangMgr();\n        }\n        return this._instance;\n    }\n\n    public nowPath = prefix_path\n    private _currLanguageValue: string;\n    nowSuffix:string\n    init(): void {\n        this._currLanguageValue = LanguageType.TW\n        let str = \"\"\n        switch (this._currLanguageValue) {\n            case LanguageType.EN:\n                str = \"en\"\n                break;\n            case LanguageType.JP:\n                str = \"jp\"\n                break;\n            case LanguageType.TW:\n                str = \"cn\"\n                break;\n            default:\n                break;\n        }\n        this.nowSuffix = str\n        this.nowPath = prefix_path + this.nowSuffix\n    }\n\n    worldTable: any = {}\n    InitData(){\n        this.worldTable = {}\n        let jsonAsset:JsonAsset = (resources.get(this.nowPath,JsonAsset) as JsonAsset)\n        let len = jsonAsset.json.WordTable.length\n        let v \n        for (let index = 0; index < len; index++) {\n            v = jsonAsset.json.WordTable[index]\n            this.worldTable[v.Key] = v[this._currLanguageValue].replace(/\\\\n/g, '\\n')\n        }\n        console.log(this.worldTable)\n        assetManager.releaseAsset(jsonAsset)\n    }   \n\n    static getLab(key: string) {\n        if (LangMgr.ins.worldTable[key]) {\n            return LangMgr.ins.worldTable[key]\n        }\n        return key\n        // let worldTab = tab.getData().WordTableByKey.getValue(key);\n        // if (worldTab) {\n        //     constKey.txt = worldTab[LangMgr.ins._currLanguageValue];\n        //     if (constKey.txt) {\n        //         return constKey.txt.replace(/\\\\n/g, '\\n')\n        //     }\n        //     return constKey.txt;\n        // } else {\n        //     return key;\n        // }\n    }\n\n    /** 检测路径是否为多语言 */\n    static checkPath(path: string) {\n        return path.indexOf(prefix_path) != -1 && path.indexOf(LangMgr.ins.nowPath) == -1\n    }\n\n    static transformPath(path: string) {\n        if (this.checkPath(path)){\n            const pattern: RegExp = /world_lang_(.*?)\\//;\n\n            const replacement: string = LangMgr.ins.nowPath + '/';\n\n            const result: string = path.replace(pattern, replacement);\n            return result\n        }\n        return path\n    }\n    static setTexture() {\n\n    }\n\n    public static getCombineString(key: string, opt?: Array<any>) {\n        let s = LangMgr.getLab(key);\n        if (!s) s = key;\n        if (opt) {\n            s = s[\"format\"](opt);\n        }\n        return s;\n    }\n}"]}