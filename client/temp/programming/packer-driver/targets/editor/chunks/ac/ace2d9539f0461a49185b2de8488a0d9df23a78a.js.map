{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/stage/WorldBossControll.ts"],"names":["WorldPontTab","WorldBossControll","_decorator","AbsControl","tab","EventMgr","FightEvent","FrameControl","AbsObjType","FightData","PowerTabFactory","EffectControl","Func","ccclass","property","Id","StageId","Damage","PointRaito","totalTackDamage","maxHp","lastHp","upHp","nowLv","absBoss","tabs","nowBuffLv","buffMaxHp","buffTabs","ins","_instance","init","register","length","isWorlBoss","index","getData","WorldBossRewardTable","v","stageId","tempTab","GuildBossPointTable","copyTab","push","WorldBossDamTable","setNowDamage","onFight","Boss_Enter","onBoss_Enter","list","getObjList","enemy","info","isBoss","checkLv","checkBuffLv","addWorldBossTackDamage","damage","damagePercent","isUp","emitFight","World_Boss_LvUp","addEffect","EffectId","effectIds","effectId","eff","createType","PowerType","PowerType_EffectTable","setConfigId","console","log","random","showResult"],"mappings":"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","sourcesContent":["import { _decorator } from \"cc\";\nimport { AbsControl } from \"../../../framework/base/IAbs\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { EventMgr } from \"../../mgr/EventMgr\";\nimport { FightEvent } from \"../define/FightEvent\";\nimport { FrameControl } from \"../base/frame/FrameControl\";\nimport { AbsObjType } from \"../base/obj/AbsObj\";\nimport { Monster } from \"../base/obj/role/monster/Monster\";\nimport { FightData } from \"../data/FightData\";\nimport { PowerTabFactory } from \"../power/PowerTabFactory\";\nimport { BuffTab } from \"../power/powerTab/BuffTab\";\nimport { EffectTab } from \"../power/powerTab/EffectTab\";\nimport { EffectControl } from \"../base/effect/EffectControl\";\nimport { Func } from \"../../utils/Func\";\n\nconst { ccclass, property } = _decorator;\n\nexport class WorldPontTab {\n    Id: number // ID \n    StageId: number // 关卡ID \n    Damage: number // 伤害值 \n    PointRaito: number//积分比例\n}\n\n\nexport class WorldBossControll extends AbsControl {\n    private static _instance: WorldBossControll;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new WorldBossControll();\n        }\n        return this._instance;\n    }\n\n    totalTackDamage: number = 0\n    maxHp: number = 0\n    lastHp: number = 0\n    upHp: number = 0\n    nowLv: number = 0\n    absBoss: Monster = null\n\n    tabs: tab.GuildBossPointTable[] = []\n\n    nowBuffLv: number = 0\n    buffMaxHp: number = 0\n    buffTabs: tab.WorldBossDamTable[] = []\n    init(): void {\n        this.register()\n        this.totalTackDamage = 0\n        this.maxHp = 0\n        this.nowLv = 0\n        this.absBoss = null\n        this.tabs.length = 0\n        this.nowBuffLv = 0\n        this.buffMaxHp = 0\n        this.buffTabs.length = 0\n        if (FightData.ins.isWorlBoss()) {\n            for (let index = 0; index < tab.getData().WorldBossRewardTable.length; index++) {\n                const v = tab.getData().WorldBossRewardTable[index];\n                if (v.StageId == FightData.ins.stageId) {\n                    let tempTab = new tab.GuildBossPointTable()\n                    tempTab = Func.copyTab(v, tempTab)\n                    tempTab.PointRaito = 1\n                    this.tabs.push(tempTab)\n                }\n            }\n        } else {\n            for (let index = 0; index < tab.getData().GuildBossPointTable.length; index++) {\n                const v = tab.getData().GuildBossPointTable[index];\n                if (v.StageId == FightData.ins.stageId) {\n                    this.tabs.push(v)\n                }\n            }\n        }\n\n        for (let index = 0; index < tab.getData().WorldBossDamTable.length; index++) {\n            const v = tab.getData().WorldBossDamTable[index];\n            if (v.StageId == FightData.ins.stageId) {\n                this.buffTabs.push(v)\n            }\n        }\n\n        this.setNowDamage()\n    }\n\n    register(): void {\n        EventMgr.onFight(FightEvent.Boss_Enter, this.onBoss_Enter, this)\n    }\n\n    onBoss_Enter() {\n        let list: Monster[] = FrameControl.ins.getObjList(AbsObjType.enemy) as Monster[]\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            if (v.info && v.info.isBoss) {\n                this.absBoss = v\n            }\n        }\n    }\n\n    setNowDamage() {\n        if (this.totalTackDamage >= this.maxHp) {\n            this.checkLv()\n        }\n        if (this.totalTackDamage >= this.buffMaxHp) {\n            this.checkBuffLv()\n        }\n    }\n    addWorldBossTackDamage(damage: number) {\n        this.totalTackDamage += damage\n        this.setNowDamage()\n    }\n    damagePercent() {\n        return (this.totalTackDamage - this.lastHp) / this.upHp\n    }\n\n    checkLv() {\n        let isUp = false\n        for (let index = this.nowLv; index < this.tabs.length; index++) {\n            const v = this.tabs[index];\n            if (this.totalTackDamage >= v.Damage) {\n                this.nowLv = v.Id\n                this.lastHp = v.Damage\n                isUp = true\n            } else {\n                this.maxHp = v.Damage\n                break\n            }\n        }\n        this.upHp = this.maxHp - this.lastHp\n        if (isUp) {\n            EventMgr.emitFight(FightEvent.World_Boss_LvUp)\n        }\n    }\n\n    checkBuffLv() {\n        let isUp = false\n        for (let index = this.nowBuffLv; index < this.buffTabs.length; index++) {\n            const v = this.buffTabs[index];\n            if (this.totalTackDamage >= v.Damage) {\n                this.nowBuffLv = index\n                this.addEffect(v.EffectId)\n            } else {\n                this.buffMaxHp = v.Damage\n                break\n            }\n        }\n    }\n\n    addEffect(effectIds: number[]) {\n        for (let index = 0; index < effectIds.length; index++) {\n            const effectId = effectIds[index];\n            let eff = PowerTabFactory.createType(tab.PowerType.PowerType_EffectTable) as EffectTab\n            eff.setConfigId(effectId)\n            console.log(\"添加世界boss特效\", effectId);\n            eff.random()\n            EffectControl.ins.addEffect(eff, this.absBoss, this.absBoss)\n        }\n    }\n\n\n    showResult() {\n\n    }\n}"]}