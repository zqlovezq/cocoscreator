{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/animation/Avatar.ts"],"names":["Avatar","Color","Component","Layers","Material","Node","Sprite","SpriteAtlas","UIOpacity","UITransform","Vec3","sp","tab","ResMgr","ShaderUtil","JSB","FightData","FightMacro","FPSAvatar","tempPos","tempPos1","color","animationId","animTab","sprite","fpsAvatar","spine","callack","flashWhite","isPause","baseSpeedScale","otherSpeedScale","totalTimeScale","_selfId","animationSprMaterial","testTime","testTime1","isUpdate","time","endTime","socketsPathV3Map","Map","create","anim","avatars","pop","nn","addComponent","selfId","node","layer","Enum","DEFAULT","setFlashWhite","put","removeFromParent","reset","push","getSpriteWhiteMaterial","get","flashWhiteSprite","getSpineWhiteMaterial","flashWhiteSpine","destory","i","length","destroy","renderClear","recycle","putRender","AnimationType","AnimationType_SpriteFrame","Path","timeScale","spr","customMaterial","AnimationType_Plist","AnimationType_SkeletonData","clear","children","console","log","ui","getComponent","opacity","setCb","cb","bo","setAnimationId","id","tempTab","getData","AnimationTableById","getValue","error","isLoad","x","y","z","position","load","play","setFlashWhiteRate","setOtherSpeedScale","speedScale","PERCENT","updateTimeScale","updatePause","pause","resume","paused","ins","setOpaticy","rate","getMaterialInstance","setProperty","skeletonData","getSharedMaterial","updateMaterial","cache","_materialCache","material","avatarPlayComplete","animName","NextAnimation","getPlayTime","Type","FrameCount","FPS","Date","getTime","AnimationSpeed","animation","AnimationName","setAnimation","Loop","updateNodeScale","actionName","atlast","createWithSpriteFrames","setPlistArray","hasImage","undefined","update","dt","Offset","Scale","scale","loadSprite","loadSpine","AnimationType_AnimationClip","loadPlist","getRender","addChild","setTexture","getSprite","animId","SkeletonData","err","resource","premultipliedAlpha","enableBatch","getSpineBonePos","path","_skeleton","bone","bones","set","getPlistArray","key","plistSfs","has","atlas","hasList","list","getSpriteFrames","newList","validIndex","index","v","toString","getNum","name","num","type","fb","sprites","createNode","trim","sizeMode","SizeMode","RAW","Skeleton","fpsAni","fpsAnims","setSprite","render","parent","_spine","setCompleteListener","clearAnimations","clearTracks","spines","_animation","stop","forEach"],"mappings":"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","sourcesContent":["import { Animation, AnimationClip, Color, Component, Layers, Material, Node, Pool, Sorting, Sprite, SpriteAtlas, SpriteFrame, UIOpacity, UITransform, Vec3, View, animation, game, path, size, sp, v2, v3, view } from \"cc\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { Func } from \"../../utils/Func\";\nimport { IReset } from \"../../../framework/base/IAbs\";\nimport { ResMgr } from \"../../mgr/ResMgr\";\nimport { AbsObj } from \"../base/obj/AbsObj\";\nimport { ShaderUtil } from \"../../utils/ShaderUtil\";\nimport { JSB } from \"cc/env\";\nimport { FightRootControl } from \"../FightRootControl\";\nimport { FightData } from \"../data/FightData\";\nimport { FightMacro } from \"../define/FightDefine\";\nimport { FPSAvatar } from \"./FPSAvatar\";\n\n\nconst tempPos: Vec3 = new Vec3(0, 0, 0)\nconst tempPos1: Vec3 = new Vec3(0, 0, 1)\nconst color: Color = new Color()\nexport class Avatar extends Component implements IReset {\n\n    static avatars: Avatar[] = [];\n    static selfId: number = 0\n\n    static create() {\n        let anim = Avatar.avatars.pop()\n\n        if (anim == null) {\n            let nn = new Node(\"Avatar\");\n            anim = nn.addComponent(Avatar)\n            this.selfId += 1\n            anim._selfId = this.selfId\n        }\n        anim.node.layer = Layers.Enum.DEFAULT\n        anim.setFlashWhite(false)\n        return anim\n    }\n\n    static put(anim: Avatar) {\n        anim.node.removeFromParent()\n        anim.reset()\n        Avatar.avatars.push(anim)\n    }\n\n    static getSpriteWhiteMaterial(): Material {\n        return ResMgr.get(ShaderUtil.flashWhiteSprite(), Material)\n    }\n\n    static getSpineWhiteMaterial(): Material {\n        return ResMgr.get(ShaderUtil.flashWhiteSpine(), Material)\n    }\n\n    /** 销毁 */\n    static destory() {\n        for (let i = 0; i < Avatar.avatars.length; i++) {\n            Avatar.avatars[i].reset()\n            Avatar.avatars[i].node.destroy()\n        }\n        Avatar.avatars.length = 0\n        Avatar.renderClear()\n    }\n\n    recycle() {\n        Avatar.put(this)\n    }\n\n    reset(): void {\n\n        if (this.sprite) {\n            Avatar.putRender(tab.AnimationType.AnimationType_SpriteFrame, this.animTab.Path, this.sprite)\n            this.sprite = null\n        }\n\n        if (this.fpsAvatar) {\n            this.fpsAvatar.timeScale = 1\n            this.fpsAvatar.spr.customMaterial = null\n            this.animationSprMaterial = null\n            Avatar.putRender(tab.AnimationType.AnimationType_Plist, this.animTab.Path, this.fpsAvatar)\n            this.fpsAvatar = null\n        }\n\n        if (this.spine) {\n            this.spine.timeScale = 1\n            this.spine.customMaterial = null\n            Avatar.putRender(tab.AnimationType.AnimationType_SkeletonData, this.animTab.Path, this.spine)\n            this.spine = null\n        }\n        if (this.socketsPathV3Map) {\n            this.socketsPathV3Map.clear()\n        }\n        if (this.node.children.length) {\n            console.log(\"多个---\")\n        }\n        let ui = this.node.getComponent(UIOpacity)\n        if (ui) {\n            ui.opacity = 255\n        }\n        this.animTab = null\n        this.animationId = 0\n        this.isUpdate = false\n        this.isPause = false\n        this.time = 0\n        this.endTime = 0\n        this.baseSpeedScale = 1\n        this.otherSpeedScale = 1\n    }\n\n    private animationId: number\n    animTab: tab.AnimationTable\n\n    private sprite: Sprite\n    public fpsAvatar: FPSAvatar\n    public spine: sp.Skeleton\n\n\n    private callack: Function\n    private flashWhite: boolean = false\n    private isPause: boolean = false\n    baseSpeedScale: number = 1\n    otherSpeedScale: number = 1\n    private totalTimeScale: number = 1\n    private _selfId: number\n\n    setCb(cb: Function) {\n        this.callack = cb\n    }\n    setFlashWhite(bo: boolean) {\n        this.flashWhite = bo\n    }\n\n    setAnimationId(id: number) {\n        let tempTab: tab.AnimationTable = tab.getData().AnimationTableById.getValue(id)\n        if (tempTab == null) {\n            console.error(\"找不到AnimationId\", id)\n            return\n        }\n        let isLoad = false\n        if (this.animTab == null || (this.animTab && this.animTab.Path != tempTab.Path)) {\n            // 换资源\n            this.reset()\n            isLoad = true\n        }\n        tempPos.x = tempPos.y = tempPos.z = 0\n        this.node.position = tempPos\n        this.animationId = id\n        this.animTab = tempTab\n        this.otherSpeedScale = 1\n        if (isLoad) {\n            this.load()\n        }\n        this.play()\n        this.setFlashWhiteRate(1)\n    }\n    setOtherSpeedScale(speedScale: number) {\n        this.otherSpeedScale = 1 + speedScale / FightMacro.PERCENT\n        // console.log(\"设置攻击速度\", this.otherSpeedScale)\n        this.updateTimeScale()\n    }\n\n    updatePause(pause) {\n        this.isPause = pause\n        if (this.fpsAvatar) {\n            if (pause) {\n                this.fpsAvatar.pause()\n            } else {\n                this.fpsAvatar.resume()\n            }\n        }\n        if (this.spine) {\n            this.spine.paused = pause\n        }\n    }\n\n    updateTimeScale() {\n        this.totalTimeScale = this.otherSpeedScale * this.baseSpeedScale * FightData.ins.timeScale\n        if (this.spine) {\n            this.spine.timeScale = this.totalTimeScale\n        } else if (this.fpsAvatar) {\n            this.fpsAvatar.timeScale = this.totalTimeScale\n        }\n        // console.log(this.totalTimeScale, this.otherSpeedScale, this.baseSpeedScale, FightData.ins.timeScale)\n    }\n\n    setOpaticy(opacity: number) {\n        let ui = this.node.getComponent(UIOpacity)\n        if (ui == null) {\n            ui = this.node.addComponent(UIOpacity)\n        }\n        ui.opacity = opacity\n    }\n\n    animationSprMaterial: Material\n    setFlashWhiteRate(rate: number) {\n        if (!this.flashWhite) {\n            return\n        }\n        if (this.sprite) {\n            if (this.animationSprMaterial == null) {\n                this.animationSprMaterial = this.sprite.getMaterialInstance(0)\n            }\n            this.animationSprMaterial.setProperty('u_rate', rate)\n        } else if (this.spine) {\n            if (this.spine.skeletonData == null) {\n                return\n            }\n            if (JSB) {\n                this.spine.getSharedMaterial(0)!.setProperty(\"u_rate\", rate);\n                // @ts-ignore \n                this.spine.updateMaterial();\n            } else {\n                // @ts-ignore \n                let cache: any = this.spine._materialCache;\n                for (let i in cache) {\n                    let material = cache[i];\n                    material.setProperty(\"u_rate\", rate);\n                }\n                // @ts-ignore \n                // this.spine.updateMaterial();\n            }\n        } else if (this.fpsAvatar) {\n            if (this.animationSprMaterial == null) {\n                this.animationSprMaterial = this.fpsAvatar.spr.getMaterialInstance(0)\n            }\n            this.animationSprMaterial.setProperty('u_rate', rate)\n        }\n    }\n\n    avatarPlayComplete(animName: string) {\n        if (this.animTab && this.animTab.NextAnimation) {\n            this.setAnimationId(this.animTab.NextAnimation)\n            return\n        }\n        this.callack && this.callack(animName)\n    }\n\n    getPlayTime() {\n        switch (this.animTab.Type) {\n            case tab.AnimationType.AnimationType_SkeletonData:\n                return this.animTab.FrameCount / 30\n            case tab.AnimationType.AnimationType_Plist:\n                return this.animTab.FrameCount / (this.animTab.FPS || 10)\n        }\n        return 0\n    }\n    private testTime: number = 0\n    private testTime1: number = 0\n    play() {\n        this.isUpdate = false\n        this.testTime = FightData.time\n        this.testTime1 = new Date().getTime()\n        switch (this.animTab.Type) {\n            case tab.AnimationType.AnimationType_SkeletonData:\n                this.endTime = this.getPlayTime()\n                this.baseSpeedScale = ((this.animTab.AnimationSpeed || FightMacro.PERCENT) / FightMacro.PERCENT)\n                this.updateTimeScale()\n                if (this.spine.skeletonData && this.spine.animation != this.animTab.AnimationName) {\n                    this.spine.setAnimation(0, this.animTab.AnimationName, this.animTab.Loop)\n                }\n                break\n            case tab.AnimationType.AnimationType_Plist:\n                this.updateNodeScale()\n\n                this.baseSpeedScale = ((this.animTab.AnimationSpeed || FightMacro.PERCENT) / FightMacro.PERCENT)\n                this.endTime = this.getPlayTime()\n                this.updateTimeScale()\n                if (!this.animTab[\"newName\"]) {\n                    this.animTab[\"newName\"] = this.animTab.AnimationName == \"\" ? this.animTab.Path : this.animTab.AnimationName\n                }\n                if (this.fpsAvatar.actionName != this.animTab[\"newName\"]) {\n                    let atlast: SpriteAtlas = ResMgr.get(this.animTab.Path, SpriteAtlas)\n                    if (atlast) {\n                        this.fpsAvatar.createWithSpriteFrames(Avatar.setPlistArray(atlast, this.animTab), this.animTab.FPS)\n                    }\n                }\n                if (this.fpsAvatar.hasImage()) {\n                    this.fpsAvatar.actionName = this.animTab[\"newName\"]\n                    if (this.fpsAvatar.actionName == undefined) {\n                    }\n\n                    this.fpsAvatar.play(this.animTab.Loop)\n                }\n\n\n                break\n            default:\n                return\n        }\n        if (this.animTab.Loop) {\n            return\n        }\n        this.time = 0\n        this.isUpdate = true //开始计时\n\n    }\n    private isUpdate: boolean\n    private time: number\n    private endTime: number\n    protected update(dt: number): void {\n        if (!this.isPause && this.isUpdate) {\n            this.time += dt * this.totalTimeScale\n            if (this.time >= this.endTime) {\n                this.time -= this.endTime\n                // this.endTime = 0\n                this.isUpdate = false\n                this.avatarPlayComplete(this.animTab.AnimationName)\n            }\n        }\n    }\n\n    updateNodeScale() {\n        tempPos.x = this.animTab.Offset[0] || 0\n        tempPos.y = this.animTab.Offset[1] || 0\n\n        tempPos1.x = (this.animTab.Scale[0] || FightMacro.PERCENT) / FightMacro.PERCENT\n        tempPos1.y = (this.animTab.Scale[1] || FightMacro.PERCENT) / FightMacro.PERCENT\n\n        if (this.fpsAvatar) {\n            this.fpsAvatar.node.position = tempPos\n            this.fpsAvatar.node.scale = tempPos1\n        }\n        if (this.sprite) {\n            this.sprite.node.position = tempPos\n            this.sprite.node.scale = tempPos1\n        }\n        if (this.spine) {\n            this.spine.node.position = tempPos\n            this.spine.node.scale = tempPos1\n        }\n    }\n\n    load() {\n        tempPos.x = this.animTab.Offset[0] || 0\n        tempPos.y = this.animTab.Offset[1] || 0\n\n        tempPos1.x = (this.animTab.Scale[0] || FightMacro.PERCENT) / FightMacro.PERCENT\n        tempPos1.y = (this.animTab.Scale[1] || FightMacro.PERCENT) / FightMacro.PERCENT\n        switch (this.animTab.Type) {\n            case tab.AnimationType.AnimationType_SpriteFrame:\n                this.loadSprite()\n                break\n            case tab.AnimationType.AnimationType_SkeletonData:\n                this.loadSpine()\n                break\n            case tab.AnimationType.AnimationType_AnimationClip:\n                break\n            case tab.AnimationType.AnimationType_Plist:\n                this.loadPlist()\n                break\n        }\n    }\n\n    loadSprite() {\n        this.sprite = Avatar.getRender(tab.AnimationType.AnimationType_SpriteFrame) as Sprite\n        this.node.addChild(this.sprite.node)\n        this.sprite.setTexture(this.animTab.Path)\n        this.sprite.node.position = tempPos\n        this.sprite.node.scale = tempPos1\n    }\n\n    getSprite() {\n        return this.sprite\n    }\n\n    loadSpine() {\n        let animId = this.animationId\n        this.spine = Avatar.getRender(tab.AnimationType.AnimationType_SkeletonData) as sp.Skeleton\n\n        this.spine.skeletonData = ResMgr.get(this.animTab.Path, sp.SkeletonData)\n        if (this.spine.skeletonData == null) {\n            ResMgr.load(this.animTab.Path, sp.SkeletonData, null, (err: Error, resource: sp.SkeletonData) => {\n                if (err) {\n                    console.error(err)\n                    return\n                }\n                if (animId != this.animationId) {\n                    return\n                }\n                this.spine.skeletonData = resource\n                this.spine.setAnimation(0, this.animTab.AnimationName, this.animTab.Loop)\n            })\n        }\n\n\n        this.node.addChild(this.spine.node)\n        this.updateNodeScale()\n\n\n        this.spine.premultipliedAlpha = false\n        this.spine.enableBatch = true\n\n        if (this.flashWhite) {\n            this.spine.customMaterial = Avatar.getSpineWhiteMaterial()\n        }\n    }\n\n    loadPlist() {\n        this.animTab.FPS = this.animTab.FPS || 30\n\n        this.fpsAvatar = Avatar.getRender(tab.AnimationType.AnimationType_Plist, this.animTab.Path) as FPSAvatar\n        this.node.addChild(this.fpsAvatar.node)\n\n        if (this.flashWhite) {\n            this.fpsAvatar.spr.customMaterial = Avatar.getSpriteWhiteMaterial()\n        }\n\n        let atlast: SpriteAtlas = ResMgr.get(this.animTab.Path, SpriteAtlas)\n        if (atlast == null) {\n            let animId = this.animationId\n            ResMgr.load(this.animTab.Path, SpriteAtlas, null, (err: Error, resource: SpriteAtlas) => {\n                if (err) {\n                    console.error(err)\n                    return\n                }\n                if (animId != this.animationId) {\n                    if (this.animationId && this.animTab.Path == tab.getData().AnimationTableById.getValue(animId).Path) {\n                        // console.log(\"换id后， 还是同一份资源\")\n                    } else {\n                        return\n                    }\n                }\n                this.updateNodeScale()\n                this.fpsAvatar.createWithSpriteFrames(Avatar.setPlistArray(resource, this.animTab), this.animTab.FPS)\n                this.fpsAvatar.actionName = this.animTab[\"newName\"]\n                this.fpsAvatar.play(this.animTab.Loop)\n            })\n        } else {\n            this.updateNodeScale()\n            this.fpsAvatar.actionName = this.animTab[\"newName\"]\n            this.fpsAvatar.createWithSpriteFrames(Avatar.setPlistArray(atlast, this.animTab), this.animTab.FPS)\n        }\n\n    }\n\n    socketsPathV3Map: Map<string, sp.spine.Bone> = new Map()\n    getSpineBonePos(path: string): sp.spine.Bone {\n        if (this.spine && this.spine._skeleton) {\n            if (this.socketsPathV3Map == null) {\n                this.socketsPathV3Map = new Map()\n            }\n            let bone = this.socketsPathV3Map.get(path)\n            if (bone) {\n                return bone\n            }\n            if (JSB) {\n                bone = this.spine._skeleton.bones[this.spine[\"_cachedSockets\"].get(path)]\n            } else {\n                bone = this.spine._skeleton.bones[this.spine[\"_cachedSockets\"].get(path)]\n            }\n            this.socketsPathV3Map.set(path, bone)\n            return bone\n        }\n\n        return null\n    }\n\n    static spines: sp.Skeleton[] = []; //骨骼动画缓存池\n    static sprites: Sprite[] = [];//精灵缓存池\n    static fpsAnims: FPSAvatar[] = [] //动画  \n    static plistSfs: Map<string, SpriteFrame[]> = new Map() //plist缓存池\n\n    static getPlistArray(animTab: tab.AnimationTable) {\n        let key = animTab.AnimationName == \"\" ? animTab.Path : animTab.AnimationName\n        if (Avatar.plistSfs.has(key)) {\n            return Avatar.plistSfs.get(key)\n        }\n        return null\n    }\n\n    static setPlistArray(atlas: SpriteAtlas, animTab: tab.AnimationTable) {\n        let hasList = Avatar.getPlistArray(animTab)\n        if (Avatar.getPlistArray(animTab)) {\n            return hasList\n        }\n\n        let list = atlas.getSpriteFrames()\n        if (animTab.AnimationName == \"\") {\n            Avatar.plistSfs.set(animTab.Path, list)\n            return list\n        }\n        let newList = []\n        let validIndex = 0\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            let key\n            if (animTab.FrameCount < 10) {\n                key = validIndex.toString()\n            } else {\n                key = Avatar.getNum(validIndex)\n            }\n            if (v.name == (animTab.AnimationName + \"_\" + key)) {\n                newList.push(v)\n                validIndex += 1\n            }\n        }\n        if (newList.length == 0) {\n            newList = list\n        }\n        Avatar.plistSfs.set(animTab.AnimationName, newList)\n        return newList\n    }\n\n\n\n    static getNum(num: number) {\n        if (num < 10) {\n            return \"0\" + num\n        }\n        return num.toString()\n    }\n\n    static getRender(type: tab.AnimationType, path?: string, fb?: Function) {\n        switch (type) {\n            case tab.AnimationType.AnimationType_SpriteFrame:\n                let spr = Avatar.sprites.pop()\n                if (spr == null) {\n                    spr = Avatar.createNode().addComponent(Sprite)\n                    spr.trim = false;\n                    spr.sizeMode = Sprite.SizeMode.RAW;\n                }\n                spr.sizeMode = Sprite.SizeMode.RAW;\n                spr.customMaterial = null\n                if (path) {\n                    spr.setTexture(path)\n                }\n\n                return spr\n            case tab.AnimationType.AnimationType_SkeletonData:\n                let spine = Avatar.createNode().addComponent(sp.Skeleton)\n                return spine\n            case tab.AnimationType.AnimationType_Plist:\n                let fpsAni = Avatar.fpsAnims.pop()\n                if (fpsAni == null) {\n                    fpsAni = FPSAvatar.get()\n                }\n                fpsAni.setSprite(Avatar.getRender(tab.AnimationType.AnimationType_SpriteFrame) as Sprite)\n                fpsAni.timeScale = 1\n                return fpsAni\n            case tab.AnimationType.AnimationType_AnimationClip:\n                break\n        }\n    }\n\n    static putRender(type: tab.AnimationType, path: string, render: any) {\n        render.parent = null\n        switch (type) {\n            case tab.AnimationType.AnimationType_SpriteFrame:\n                (render as Sprite).setTexture(\"\");\n                (render as Sprite).node.removeFromParent()\n                Avatar.sprites.push(render)\n                break\n            case tab.AnimationType.AnimationType_SkeletonData:\n                let _spine = render as sp.Skeleton\n                _spine.setCompleteListener(null)\n                _spine.skeletonData = null\n                _spine.clearAnimations()\n                _spine.clearTracks()\n                _spine.node.removeFromParent()\n                Avatar.spines.push(render)\n                break\n            case tab.AnimationType.AnimationType_Plist:\n                let _animation = render as FPSAvatar\n                _animation.stop()\n                if (_animation.spr) {\n                    Avatar.putRender(tab.AnimationType.AnimationType_SpriteFrame, path, _animation.spr)\n                }\n                _animation.reset()\n                _animation.node.removeFromParent()\n                Avatar.fpsAnims.push(render)\n                break\n            case tab.AnimationType.AnimationType_AnimationClip:\n                break\n        }\n    }\n\n\n    static createNode() {\n        let nn = new Node(\"anim_node\")\n        nn.layer = Layers.Enum.DEFAULT\n        nn.addComponent(UITransform)\n        return nn\n    }\n\n    static renderClear() {\n        Avatar.sprites.forEach(sp => {\n            sp.node.destroy()\n        })\n\n        Avatar.spines.forEach(sp => {\n            sp.node.destroy()\n        })\n\n        Avatar.fpsAnims.forEach(animation => {\n            animation.node.destroy()\n        })\n\n        Avatar.spines.length = 0\n        Avatar.fpsAnims.length = 0\n        Avatar.plistSfs.clear()\n        Avatar.sprites.length = 0\n        Avatar.selfId = 0\n    }\n\n}"]}