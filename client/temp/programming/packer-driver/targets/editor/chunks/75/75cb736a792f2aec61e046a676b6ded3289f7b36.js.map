{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/protobufjs/src/verifier.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","verifier","Enum","util","invalid","field","expected","name","repeated","map","keyType","genVerifyValue","gen","fieldIndex","ref","resolvedType","keys","Object","values","j","length","type","genVerifyKey","mtype","codegen","oneofs","oneofsArray","seenFirstField","i","fieldsArray","_fieldsArray","resolve","safeProp","optional","partOf","oneofProp","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './enum';\nimport { __cjsMetaURL as _req0} from './util';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n module.exports = verifier;\n\n var Enum      = require(\"./enum\"),\n     util      = require(\"./util\");\n\n function invalid(field, expected) {\n     return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n }\n\n /**\n  * Generates a partial value verifier.\n  * @param {Codegen} gen Codegen instance\n  * @param {Field} field Reflected field\n  * @param {number} fieldIndex Field index\n  * @param {string} ref Variable reference\n  * @returns {Codegen} Codegen instance\n  * @ignore\n  */\n function genVerifyValue(gen, field, fieldIndex, ref) {\n     /* eslint-disable no-unexpected-multiline */\n     if (field.resolvedType) {\n         if (field.resolvedType instanceof Enum) { gen\n             (\"switch(%s){\", ref)\n                 (\"default:\")\n                     (\"return%j\", invalid(field, \"enum value\"));\n             for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                 (\"case %i:\", field.resolvedType.values[keys[j]]);\n             gen\n                     (\"break\")\n             (\"}\");\n         } else {\n             gen\n             (\"{\")\n                 (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                 (\"if(e)\")\n                     (\"return%j+e\", field.name + \".\")\n             (\"}\");\n         }\n     } else {\n         switch (field.type) {\n             case \"int32\":\n             case \"uint32\":\n             case \"sint32\":\n             case \"fixed32\":\n             case \"sfixed32\": gen\n                 (\"if(!util.isInteger(%s))\", ref)\n                     (\"return%j\", invalid(field, \"integer\"));\n                 break;\n             case \"int64\":\n             case \"uint64\":\n             case \"sint64\":\n             case \"fixed64\":\n             case \"sfixed64\": gen\n                 (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                     (\"return%j\", invalid(field, \"integer|Long\"));\n                 break;\n             case \"float\":\n             case \"double\": gen\n                 (\"if(typeof %s!==\\\"number\\\")\", ref)\n                     (\"return%j\", invalid(field, \"number\"));\n                 break;\n             case \"bool\": gen\n                 (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                     (\"return%j\", invalid(field, \"boolean\"));\n                 break;\n             case \"string\": gen\n                 (\"if(!util.isString(%s))\", ref)\n                     (\"return%j\", invalid(field, \"string\"));\n                 break;\n             case \"bytes\": gen\n                 (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                     (\"return%j\", invalid(field, \"buffer\"));\n                 break;\n         }\n     }\n     return gen;\n     /* eslint-enable no-unexpected-multiline */\n }\n\n /**\n  * Generates a partial key verifier.\n  * @param {Codegen} gen Codegen instance\n  * @param {Field} field Reflected field\n  * @param {string} ref Variable reference\n  * @returns {Codegen} Codegen instance\n  * @ignore\n  */\n function genVerifyKey(gen, field, ref) {\n     /* eslint-disable no-unexpected-multiline */\n     switch (field.keyType) {\n         case \"int32\":\n         case \"uint32\":\n         case \"sint32\":\n         case \"fixed32\":\n         case \"sfixed32\": gen\n             (\"if(!util.key32Re.test(%s))\", ref)\n                 (\"return%j\", invalid(field, \"integer key\"));\n             break;\n         case \"int64\":\n         case \"uint64\":\n         case \"sint64\":\n         case \"fixed64\":\n         case \"sfixed64\": gen\n             (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                 (\"return%j\", invalid(field, \"integer|Long key\"));\n             break;\n         case \"bool\": gen\n             (\"if(!util.key2Re.test(%s))\", ref)\n                 (\"return%j\", invalid(field, \"boolean key\"));\n             break;\n     }\n     return gen;\n     /* eslint-enable no-unexpected-multiline */\n }\n\n /**\n  * Generates a verifier specific to the specified message type.\n  * @param {Type} mtype Message type\n  * @returns {Codegen} Codegen instance\n  */\n function verifier(mtype) {\n     /* eslint-disable no-unexpected-multiline */\n\n     var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n     (\"if(typeof m!==\\\"object\\\"||m===null)\")\n         (\"return%j\", \"object expected\");\n     var oneofs = mtype.oneofsArray,\n         seenFirstField = {};\n     if (oneofs.length) gen\n     (\"var p={}\");\n\n     for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n         var field = mtype._fieldsArray[i].resolve(),\n             ref   = \"m\" + util.safeProp(field.name);\n\n         if (field.optional) gen\n         (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n         // map fields\n         if (field.map) { gen\n             (\"if(!util.isObject(%s))\", ref)\n                 (\"return%j\", invalid(field, \"object\"))\n             (\"var k=Object.keys(%s)\", ref)\n             (\"for(var i=0;i<k.length;++i){\");\n                 genVerifyKey(gen, field, \"k[i]\");\n                 genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n             (\"}\");\n\n         // repeated fields\n         } else if (field.repeated) { gen\n             (\"if(!Array.isArray(%s))\", ref)\n                 (\"return%j\", invalid(field, \"array\"))\n             (\"for(var i=0;i<%s.length;++i){\", ref);\n                 genVerifyValue(gen, field, i, ref + \"[i]\")\n             (\"}\");\n\n         // required or present fields\n         } else {\n             if (field.partOf) {\n                 var oneofProp = util.safeProp(field.partOf.name);\n                 if (seenFirstField[field.partOf.name] === 1) gen\n             (\"if(p%s===1)\", oneofProp)\n                 (\"return%j\", field.partOf.name + \": multiple values\");\n                 seenFirstField[field.partOf.name] = 1;\n                 gen\n             (\"p%s=1\", oneofProp);\n             }\n             genVerifyValue(gen, field, i, ref);\n         }\n         if (field.optional) gen\n         (\"}\");\n     }\n     return gen\n     (\"return null\");\n     /* eslint-enable no-unexpected-multiline */\n }\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './enum': _req,\n  './util': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}