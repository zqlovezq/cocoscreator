{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/obj/state/StateMachine.ts"],"names":["StateMachine","AbsStateType","DefaultState","constructor","abs","states","currentState","isState","stateType","setAbs","clearState","updateFrame","deltaTime","isDead","avatarPlayComplete","animName","length","addState","addStates","ss","s","Error","run","changeState","default","leave","enter"],"mappings":";;;0DAMaA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;AAJMC,MAAAA,Y,iBAAAA,Y;AAAcC,MAAAA,Y,iBAAAA,Y;;;;;;;AAGjC;8BACaF,Y,GAAN,MAAMA,YAAN,CAAmB;AAKtBG,QAAAA,WAAW,GAAG;AAAA,eAJdC,GAIc,GAJA,IAIA;AAAA,eAHdC,MAGc,GAHO,EAGP;AAAA,eAFdC,YAEc,GAFW,IAEX;AAEb;;AAEDC,QAAAA,OAAO,CAACC,SAAD,EAAY;AACf,iBAAO,KAAKF,YAAL,IAAqB,KAAKA,YAAL,CAAkBE,SAAlB,KAAgCA,SAA5D;AACH;;AAEDC,QAAAA,MAAM,CAACL,GAAD,EAAc;AAChB,eAAKA,GAAL,GAAWA,GAAX;AACA,eAAKM,UAAL;AACH;;AAEDC,QAAAA,WAAW,CAACC,SAAD,EAAoB;AAC3B,cAAI,KAAKR,GAAL,CAASS,MAAb,EAAqB;AAErB,cAAI,KAAKP,YAAT,EAAuB,KAAKA,YAAL,CAAkBK,WAAlB,CAA8BC,SAA9B;AAC1B;;AAEDE,QAAAA,kBAAkB,CAACC,QAAD,EAAmB;AACjC,cAAI,KAAKT,YAAT,EAAuB,KAAKA,YAAL,CAAkBQ,kBAAlB,CAAqCC,QAArC;AAC1B;;AAEDL,QAAAA,UAAU,GAAG;AACT,eAAKL,MAAL,CAAYW,MAAZ,GAAqB,CAArB;AACA,eAAKC,QAAL,CAAc;AAAA;AAAA,6CAAd;AACH;;AAEDC,QAAAA,SAAS,CAACC,EAAD,EAAiB;AACtB,eAAK,MAAMC,CAAX,IAAgBD,EAAhB,EAAoB;AAChB,iBAAKF,QAAL,CAAcG,CAAd;AACH;AACJ;;AAEDH,QAAAA,QAAQ,CAACG,CAAD,EAAc;AAClB,cAAI,KAAKf,MAAL,CAAYe,CAAC,CAACZ,SAAd,CAAJ,EAA8B;AAC1B,kBAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,eAAKhB,MAAL,CAAYe,CAAC,CAACZ,SAAd,IAA2BY,CAA3B;AACH;;AAEDE,QAAAA,GAAG,GAAG;AACF,eAAKC,WAAL,CAAiB;AAAA;AAAA,4CAAaC,OAA9B;AACH;;AAEDD,QAAAA,WAAW,CAACf,SAAD,EAA0B;AACjC,cAAI,KAAKF,YAAT,EAAuB,KAAKA,YAAL,CAAkBmB,KAAlB;AAEvB,eAAKnB,YAAL,GAAoB,KAAKD,MAAL,CAAYG,SAAZ,CAApB;AACA,eAAKF,YAAL,CAAkBG,MAAlB,CAAyB,KAAKL,GAA9B;AACA,eAAKE,YAAL,CAAkBoB,KAAlB;AACA,iBAAO,IAAP;AACH;;AA1DqB,O","sourcesContent":["import { Func } from \"../../../../utils/Func\";\nimport { AbsObj } from \"../AbsObj\";\nimport { AbsState, AbsStateType, DefaultState } from \"./AbsState\";\n\n\n/** 状态机 */\nexport class StateMachine {\n    abs: AbsObj = null;\n    states: AbsState[] = [];\n    currentState: AbsState = null;\n\n    constructor() {\n\n    }\n\n    isState(stateType) {\n        return this.currentState && this.currentState.stateType === stateType\n    }\n\n    setAbs(abs: AbsObj) {\n        this.abs = abs;\n        this.clearState()\n    }\n\n    updateFrame(deltaTime: number) {\n        if (this.abs.isDead) return;\n\n        if (this.currentState) this.currentState.updateFrame(deltaTime);\n    }\n\n    avatarPlayComplete(animName: string) {\n        if (this.currentState) this.currentState.avatarPlayComplete(animName);\n    }\n\n    clearState() {\n        this.states.length = 0;\n        this.addState(new DefaultState())\n    }\n\n    addStates(ss: AbsState[]) {\n        for (const s of ss) {\n            this.addState(s);\n        }\n    }\n\n    addState(s: AbsState) {\n        if (this.states[s.stateType]) {\n            throw new Error(\"AbsState is same\")\n        }\n\n        this.states[s.stateType] = s\n    }\n\n    run() {\n        this.changeState(AbsStateType.default);\n    }\n\n    changeState(stateType: AbsStateType) {\n        if (this.currentState) this.currentState.leave();\n\n        this.currentState = this.states[stateType];\n        this.currentState.setAbs(this.abs)\n        this.currentState.enter();\n        return true\n    }\n\n}\n"]}