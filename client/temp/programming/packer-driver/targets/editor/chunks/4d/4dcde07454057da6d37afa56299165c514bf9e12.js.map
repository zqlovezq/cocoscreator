{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/protobufjs/src/method.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","Method","ReflectionObject","prototype","Object","create","constructor","className","util","name","type","requestType","responseType","requestStream","responseStream","options","comment","parsedOptions","isObject","undefined","isString","TypeError","call","resolvedRequestType","resolvedResponseType","fromJSON","json","toJSON","toJSONOptions","keepComments","Boolean","toObject","resolve","resolved","parent","lookupType","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;;AACAF,QAAAA,MAAM,CAACF,OAAP,GAAiBK,MAAjB,CAL0F,CAO1F;;AACA,YAAIC,gBAAgB,GAAGL,OAAO,CAAC,UAAD,CAA9B;;AACA,SAAC,CAACI,MAAM,CAACE,SAAP,GAAmBC,MAAM,CAACC,MAAP,CAAcH,gBAAgB,CAACC,SAA/B,CAApB,EAA+DG,WAA/D,GAA6EL,MAA9E,EAAsFM,SAAtF,GAAkG,QAAlG;;AAEA,YAAIC,IAAI,GAAGX,OAAO,CAAC,QAAD,CAAlB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,iBAASI,MAAT,CAAgBQ,IAAhB,EAAsBC,IAAtB,EAA4BC,WAA5B,EAAyCC,YAAzC,EAAuDC,aAAvD,EAAsEC,cAAtE,EAAsFC,OAAtF,EAA+FC,OAA/F,EAAwGC,aAAxG,EAAuH;AAEnH;AACA,cAAIT,IAAI,CAACU,QAAL,CAAcL,aAAd,CAAJ,EAAkC;AAC9BE,YAAAA,OAAO,GAAGF,aAAV;AACAA,YAAAA,aAAa,GAAGC,cAAc,GAAGK,SAAjC;AACH,WAHD,MAGO,IAAIX,IAAI,CAACU,QAAL,CAAcJ,cAAd,CAAJ,EAAmC;AACtCC,YAAAA,OAAO,GAAGD,cAAV;AACAA,YAAAA,cAAc,GAAGK,SAAjB;AACH;AAED;;;AACA,cAAI,EAAET,IAAI,KAAKS,SAAT,IAAsBX,IAAI,CAACY,QAAL,CAAcV,IAAd,CAAxB,CAAJ,EACI,MAAMW,SAAS,CAAC,uBAAD,CAAf;AAEJ;;AACA,cAAI,CAACb,IAAI,CAACY,QAAL,CAAcT,WAAd,CAAL,EACI,MAAMU,SAAS,CAAC,8BAAD,CAAf;AAEJ;;AACA,cAAI,CAACb,IAAI,CAACY,QAAL,CAAcR,YAAd,CAAL,EACI,MAAMS,SAAS,CAAC,+BAAD,CAAf;AAEJnB,UAAAA,gBAAgB,CAACoB,IAAjB,CAAsB,IAAtB,EAA4Bb,IAA5B,EAAkCM,OAAlC;AAEA;AACL;AACA;AACA;;AACK,eAAKL,IAAL,GAAYA,IAAI,IAAI,KAApB,CA7BmH,CA6BxF;;AAE3B;AACL;AACA;AACA;;AACK,eAAKC,WAAL,GAAmBA,WAAnB,CAnCmH,CAmCnF;;AAEhC;AACL;AACA;AACA;;AACK,eAAKE,aAAL,GAAqBA,aAAa,GAAG,IAAH,GAAUM,SAA5C,CAzCmH,CAyC5D;;AAEvD;AACL;AACA;AACA;;AACK,eAAKP,YAAL,GAAoBA,YAApB,CA/CmH,CA+CjF;;AAElC;AACL;AACA;AACA;;AACK,eAAKE,cAAL,GAAsBA,cAAc,GAAG,IAAH,GAAUK,SAA9C,CArDmH,CAqD1D;;AAEzD;AACL;AACA;AACA;;AACK,eAAKI,mBAAL,GAA2B,IAA3B;AAEA;AACL;AACA;AACA;;AACK,eAAKC,oBAAL,GAA4B,IAA5B;AAEA;AACL;AACA;AACA;;AACK,eAAKR,OAAL,GAAeA,OAAf;AAEA;AACL;AACA;;AACK,eAAKC,aAAL,GAAqBA,aAArB;AACH;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;;;AACChB,QAAAA,MAAM,CAACwB,QAAP,GAAkB,SAASA,QAAT,CAAkBhB,IAAlB,EAAwBiB,IAAxB,EAA8B;AAC5C,iBAAO,IAAIzB,MAAJ,CAAWQ,IAAX,EAAiBiB,IAAI,CAAChB,IAAtB,EAA4BgB,IAAI,CAACf,WAAjC,EAA8Ce,IAAI,CAACd,YAAnD,EAAiEc,IAAI,CAACb,aAAtE,EAAqFa,IAAI,CAACZ,cAA1F,EAA0GY,IAAI,CAACX,OAA/G,EAAwHW,IAAI,CAACV,OAA7H,EAAsIU,IAAI,CAACT,aAA3I,CAAP;AACH,SAFD;AAIA;AACD;AACA;AACA;AACA;;;AACChB,QAAAA,MAAM,CAACE,SAAP,CAAiBwB,MAAjB,GAA0B,SAASA,MAAT,CAAgBC,aAAhB,EAA+B;AACrD,cAAIC,YAAY,GAAGD,aAAa,GAAGE,OAAO,CAACF,aAAa,CAACC,YAAf,CAAV,GAAyC,KAAzE;AACA,iBAAOrB,IAAI,CAACuB,QAAL,CAAc,CACjB,MADiB,EACE,KAAKrB,IAAL,KAAc,KAAd;AAAuB;AAA2B,eAAKA,IAAvD,IAA+DS,SADjE,EAEjB,aAFiB,EAEE,KAAKR,WAFP,EAGjB,eAHiB,EAGE,KAAKE,aAHP,EAIjB,cAJiB,EAIE,KAAKD,YAJP,EAKjB,gBALiB,EAKE,KAAKE,cALP,EAMjB,SANiB,EAME,KAAKC,OANP,EAOjB,SAPiB,EAOEc,YAAY,GAAG,KAAKb,OAAR,GAAkBG,SAPhC,EAQjB,eARiB,EAQE,KAAKF,aARP,CAAd,CAAP;AAUH,SAZD;AAcA;AACD;AACA;;;AACChB,QAAAA,MAAM,CAACE,SAAP,CAAiB6B,OAAjB,GAA2B,SAASA,OAAT,GAAmB;AAE1C;AACA,cAAI,KAAKC,QAAT,EACI,OAAO,IAAP;AAEJ,eAAKV,mBAAL,GAA2B,KAAKW,MAAL,CAAYC,UAAZ,CAAuB,KAAKxB,WAA5B,CAA3B;AACA,eAAKa,oBAAL,GAA4B,KAAKU,MAAL,CAAYC,UAAZ,CAAuB,KAAKvB,YAA5B,CAA5B;AAEA,iBAAOV,gBAAgB,CAACC,SAAjB,CAA2B6B,OAA3B,CAAmCV,IAAnC,CAAwC,IAAxC,CAAP;AACH,SAVD,CAzJ0F,CAsK3F;;;AAEA,2BAAAc,WAAW,GAAGtC,MAAM,CAACF,OAArB;AAGC,OA3KD,EA2KG,OAAO;AACR,oBAAYL,IADJ;AAER,kBAAUE;AAFF,OAAP,CA3KH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './object';\nimport { __cjsMetaURL as _req0} from './util';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n module.exports = Method;\n\n // extends ReflectionObject\n var ReflectionObject = require(\"./object\");\n ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\n var util = require(\"./util\");\n\n /**\n  * Constructs a new service method instance.\n  * @classdesc Reflected service method.\n  * @extends ReflectionObject\n  * @constructor\n  * @param {string} name Method name\n  * @param {string|undefined} type Method type, usually `\"rpc\"`\n  * @param {string} requestType Request message type\n  * @param {string} responseType Response message type\n  * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n  * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n  * @param {Object.<string,*>} [options] Declared options\n  * @param {string} [comment] The comment for this method\n  * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n  */\n function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n     /* istanbul ignore next */\n     if (util.isObject(requestStream)) {\n         options = requestStream;\n         requestStream = responseStream = undefined;\n     } else if (util.isObject(responseStream)) {\n         options = responseStream;\n         responseStream = undefined;\n     }\n\n     /* istanbul ignore if */\n     if (!(type === undefined || util.isString(type)))\n         throw TypeError(\"type must be a string\");\n\n     /* istanbul ignore if */\n     if (!util.isString(requestType))\n         throw TypeError(\"requestType must be a string\");\n\n     /* istanbul ignore if */\n     if (!util.isString(responseType))\n         throw TypeError(\"responseType must be a string\");\n\n     ReflectionObject.call(this, name, options);\n\n     /**\n      * Method type.\n      * @type {string}\n      */\n     this.type = type || \"rpc\"; // toJSON\n\n     /**\n      * Request type.\n      * @type {string}\n      */\n     this.requestType = requestType; // toJSON, marker\n\n     /**\n      * Whether requests are streamed or not.\n      * @type {boolean|undefined}\n      */\n     this.requestStream = requestStream ? true : undefined; // toJSON\n\n     /**\n      * Response type.\n      * @type {string}\n      */\n     this.responseType = responseType; // toJSON\n\n     /**\n      * Whether responses are streamed or not.\n      * @type {boolean|undefined}\n      */\n     this.responseStream = responseStream ? true : undefined; // toJSON\n\n     /**\n      * Resolved request type.\n      * @type {Type|null}\n      */\n     this.resolvedRequestType = null;\n\n     /**\n      * Resolved response type.\n      * @type {Type|null}\n      */\n     this.resolvedResponseType = null;\n\n     /**\n      * Comment for this method\n      * @type {string|null}\n      */\n     this.comment = comment;\n\n     /**\n      * Options properly parsed into an object\n      */\n     this.parsedOptions = parsedOptions;\n }\n\n /**\n  * Method descriptor.\n  * @interface IMethod\n  * @property {string} [type=\"rpc\"] Method type\n  * @property {string} requestType Request type\n  * @property {string} responseType Response type\n  * @property {boolean} [requestStream=false] Whether requests are streamed\n  * @property {boolean} [responseStream=false] Whether responses are streamed\n  * @property {Object.<string,*>} [options] Method options\n  * @property {string} comment Method comments\n  * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n  */\n\n /**\n  * Constructs a method from a method descriptor.\n  * @param {string} name Method name\n  * @param {IMethod} json Method descriptor\n  * @returns {Method} Created method\n  * @throws {TypeError} If arguments are invalid\n  */\n Method.fromJSON = function fromJSON(name, json) {\n     return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n };\n\n /**\n  * Converts this method to a method descriptor.\n  * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n  * @returns {IMethod} Method descriptor\n  */\n Method.prototype.toJSON = function toJSON(toJSONOptions) {\n     var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n     return util.toObject([\n         \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n         \"requestType\"    , this.requestType,\n         \"requestStream\"  , this.requestStream,\n         \"responseType\"   , this.responseType,\n         \"responseStream\" , this.responseStream,\n         \"options\"        , this.options,\n         \"comment\"        , keepComments ? this.comment : undefined,\n         \"parsedOptions\"  , this.parsedOptions,\n     ]);\n };\n\n /**\n  * @override\n  */\n Method.prototype.resolve = function resolve() {\n\n     /* istanbul ignore if */\n     if (this.resolved)\n         return this;\n\n     this.resolvedRequestType = this.parent.lookupType(this.requestType);\n     this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n     return ReflectionObject.prototype.resolve.call(this);\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './object': _req,\n  './util': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}