{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/move/bullet/BulletMoveTraceTarget.ts"],"names":["BulletMoveTraceTarget","Vec3","BulletMoveLine","tempPos","NextTime","isTargetDead","traceTime","init","updateFrame","dt","traceDirection","abs","getPosition","targetRole","getHitPos","onFlyComplete","onEnemyDead","offDead","isValid","node","off","onDead","on","checkNextBorder"],"mappings":";;;qGASaA,qB;;;;;;;;;;;;;;;AATJC,MAAAA,I,OAAAA,I;;AAEAC,MAAAA,c,iBAAAA,c;;;;;;;;;AAGHC,MAAAA,O,GAAU,IAAIF,IAAJ,E;AAEVG,MAAAA,Q,GAAW,G;AACjB;;uCACaJ,qB,GAAN,MAAMA,qBAAN;AAAA;AAAA,4CAAmD;AAAA;AAAA;AAAA,eACtDK,YADsD,GAC9B,KAD8B;AAAA,eAEtDC,SAFsD,GAElC,CAFkC;AAAA;;AAGtDC,QAAAA,IAAI,GAAS;AACT;AACA,eAAKF,YAAL,GAAoB,KAApB;AACA,eAAKC,SAAL,GAAiBF,QAAjB;AACH;;AAEDI,QAAAA,WAAW,CAACC,EAAD,EAAmB;AAC1B,gBAAMD,WAAN,CAAkBC,EAAlB;AACA,eAAKH,SAAL,IAAkBG,EAAlB;;AACA,cAAI,KAAKH,SAAL,IAAkB,CAAtB,EAAyB;AACrB,iBAAKA,SAAL,GAAiBF,QAAjB;AACA,iBAAKM,cAAL,CAAoB,KAAKC,GAAL,CAASC,WAAT,EAApB,EAA4C,KAAKD,GAAL,CAASE,UAAT,CAAoBC,SAApB,EAA5C;AACH;AACJ;;AAEDC,QAAAA,aAAa,GAAG;AACZ,gBAAMA,aAAN;AACA,eAAKC,WAAL;AACH;;AAEDC,QAAAA,OAAO,GAAG;AACN,cAAI,KAAKN,GAAL,CAASE,UAAT,IAAuB,KAAKF,GAAL,CAASE,UAAT,CAAoBK,OAA/C,EAAwD;AACpD,iBAAKP,GAAL,CAASE,UAAT,CAAoBM,IAApB,CAAyBC,GAAzB,CAA6B,cAA7B,EAA6C,KAAKJ,WAAlD,EAA+D,IAA/D;AACH;AACJ;;AAEDK,QAAAA,MAAM,GAAG;AACL,cAAI,KAAKV,GAAL,CAASE,UAAT,IAAuB,KAAKF,GAAL,CAASE,UAAT,CAAoBK,OAA/C,EAAwD;AACpD,iBAAKP,GAAL,CAASE,UAAT,CAAoBM,IAApB,CAAyBG,EAAzB,CAA4B,cAA5B,EAA4C,KAAKN,WAAjD,EAA8D,IAA9D;AACH;AACJ;;AAEDA,QAAAA,WAAW,GAAG;AACV,eAAKX,YAAL,GAAoB,IAApB;AACA,eAAKY,OAAL;AACH;;AAEDM,QAAAA,eAAe,CAACd,EAAD,EAAa,CACxB;AACH;;AA1CqD,O","sourcesContent":["import { Vec3, math, v2, v3 } from \"cc\";\nimport { AbsMoveType, BulletMove } from \"../AbsMove\";\nimport { BulletMoveLine } from \"./BulletMoveLine\";\nimport { FixedUtil } from \"../../../util/FixedUtil\";\n\nconst tempPos = new Vec3();\n\nconst NextTime = 500\n/** 追中目标 */\nexport class BulletMoveTraceTarget extends BulletMoveLine {\n    isTargetDead: boolean = false\n    traceTime: number = 0\n    init(): void {\n        // //设置子弹角度\n        this.isTargetDead = false\n        this.traceTime = NextTime\n    }\n\n    updateFrame(dt: number): void {\n        super.updateFrame(dt)\n        this.traceTime -= dt\n        if (this.traceTime == 0) {\n            this.traceTime = NextTime\n            this.traceDirection(this.abs.getPosition(), this.abs.targetRole.getHitPos())\n        }\n    }\n\n    onFlyComplete() {\n        super.onFlyComplete()\n        this.onEnemyDead()\n    }\n\n    offDead() {\n        if (this.abs.targetRole && this.abs.targetRole.isValid) {\n            this.abs.targetRole.node.off(\"AbsRole_dead\", this.onEnemyDead, this)\n        }\n    }\n\n    onDead() {\n        if (this.abs.targetRole && this.abs.targetRole.isValid) {\n            this.abs.targetRole.node.on(\"AbsRole_dead\", this.onEnemyDead, this)\n        }\n    }\n\n    onEnemyDead() {\n        this.isTargetDead = true\n        this.offDead()\n    }\n\n    checkNextBorder(dt: number) {\n        //不做屏幕反弹\n    }\n}"]}