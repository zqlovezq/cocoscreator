{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/home/battle/BattleMainDataControl.ts"],"names":["BattleMainDataControl","_decorator","AbsControl","tab","RedMgr","RedDotType","LevelRewardState","ccclass","property","stageInfo","ins","_instance","initData","data","registerCalculateFb","StageFirstReward","setStageRed","refreshHeroRedData","getReceiveStageId","refreshEvent","getStageClearIds","clearedStageIds","getLastStageId","length","getIsPasstStageByStageId","id","clearIds","indexOf","getCurFightStageId","lastPveStageTab","getData","PveStageTableByStageId","getValue","curPveStageId","NextLevelId","StageId","getPassChapterId","stageId","nextStageId","Math","floor","getChapterId","getReceiveFirstRewardIds","receivedMainFirstRewardIds","addReceiveFirstRewardId","_stageId","_indexs","objArr","i","obj","index","push","concat","getReceiveFirstRewardById","idx","getCurMaxAliveSecond","maxAliveSecond","Time","currentMainStageMaxAliveSeconds","getClearedStageAliveSecond","levelId","getStageIsLock","levelArr","MainChapterTableById","StageIds","rewardId","ChapterFirstTab","ChapterFristRewardTable","Id","k","isGot","maxTime","rewardTabData","ChapterFristRewardTableById","j","isPass","getAllIndex","result","curStageId","gotRewards","state","None","NotAchieved","Got","Receive","getMaxPveMainStage","isAllStageClear"],"mappings":"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","sourcesContent":["import { _decorator } from \"cc\";\r\nimport { AbsControl } from \"../../../../framework/base/IAbs\";\r\nimport { proto } from \"client_protocol\";\r\nimport { tab } from \"../../../../Table/table_gen\";\r\nimport { RedMgr } from \"../../../mgr/RedMgr\";\r\nimport { RedDotType } from \"../../../red/RedDotType\";\r\nimport { LevelRewardState } from \"../../../../Common/script/EnumTypeMgr\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n/** 英雄 */\r\nexport class BattleMainDataControl extends AbsControl {\r\n    private stageInfo: proto.Msg_GetMainStageInfoRsp = null;\r\n    private static _instance: BattleMainDataControl;\r\n    public static get ins() {\r\n        if (null == this._instance) {\r\n            this._instance = new BattleMainDataControl();\r\n        }\r\n        return this._instance;\r\n    }\r\n    initData(data: proto.Msg_GetMainStageInfoRsp) {\r\n        this.stageInfo = data;\r\n        RedMgr.ins.registerCalculateFb(RedDotType.StageFirstReward, this.setStageRed, this);\r\n        this.refreshHeroRedData();\r\n    }\r\n    setStageRed(){\r\n        return this.getReceiveStageId()>0\r\n    }\r\n    /* 刷新英雄红点数据 */\r\n    refreshHeroRedData() {\r\n        RedMgr.refreshEvent(RedDotType.StageFirstReward);\r\n    }\r\n    /* 获取已经通关的关卡id列表 */\r\n    getStageClearIds() {\r\n        if(!this.stageInfo){\r\n            return [];\r\n        }\r\n        return this.stageInfo.clearedStageIds;\r\n    }\r\n    /* 获取最新的一个通关id */\r\n    getLastStageId(){\r\n        if(!this.stageInfo){\r\n            return 101\r\n        }\r\n        if(this.stageInfo.clearedStageIds.length===0){\r\n            return 101\r\n        }\r\n        return this.stageInfo.clearedStageIds[this.stageInfo.clearedStageIds.length-1];\r\n    }\r\n    /**\r\n     * 当前关卡是否已经通关\r\n     * @param id \r\n     */\r\n    getIsPasstStageByStageId(id:number):boolean{\r\n        let clearIds = this.getStageClearIds();\r\n        if(clearIds.length==0){\r\n            return false;\r\n        }else{\r\n            return clearIds.indexOf(id)>=0;\r\n        }\r\n    }\r\n    /* 获取当前正在战斗的id */\r\n    getCurFightStageId() {\r\n        // return this._stageInfo.fightingMainStageId;\r\n        const clearIds = this.getStageClearIds();\r\n        if (clearIds.length === 0) {\r\n            return 101;\r\n        }\r\n        const lastPveStageTab = tab.getData().PveStageTableByStageId.getValue(clearIds[clearIds.length - 1]);\r\n        const curPveStageId = lastPveStageTab.NextLevelId?lastPveStageTab.NextLevelId:lastPveStageTab.StageId;\r\n        return curPveStageId;\r\n    }\r\n     /* 获取玩家通关的的章节Id*/\r\n     getPassChapterId() {\r\n        const clearIds = this.getStageClearIds();\r\n        if (clearIds.length === 0) {\r\n            return 0;\r\n        }\r\n        let stageId =clearIds[clearIds.length - 1];\r\n        \r\n        const nextStageId =  tab.getData().PveStageTableByStageId.getValue(stageId).NextLevelId;\r\n        if(Math.floor(nextStageId/100)>Math.floor(stageId / 100)){\r\n            return Math.floor(stageId / 100);\r\n        }else{\r\n            return Math.floor(stageId / 100)-1;\r\n        }\r\n    }\r\n   \r\n    /* 获取玩家最新的章节 */\r\n    getChapterId(id?: number) {\r\n        let stageId = id ? id : this.getCurFightStageId();\r\n        return Math.floor(stageId / 100)\r\n    }\r\n    /* 已领取的首通奖励列表 */\r\n    getReceiveFirstRewardIds() {\r\n        return this.stageInfo.receivedMainFirstRewardIds;\r\n    }\r\n    /* 添加首通奖励 */\r\n    addReceiveFirstRewardId(_stageId: number, _indexs?: number[]) {\r\n        let objArr = [];\r\n        for (let i = 0; i < _indexs.length; i++) {\r\n            let obj: proto.IFirstRewardId = {\r\n                stageId: _stageId,\r\n                index: _indexs[i]\r\n            }\r\n            objArr.push(obj)\r\n        }\r\n        this.stageInfo.receivedMainFirstRewardIds = this.stageInfo.receivedMainFirstRewardIds.concat(objArr);\r\n    }\r\n    getReceiveFirstRewardById(id: number, idx: number) {\r\n        for (let i = 0; i < this.stageInfo.receivedMainFirstRewardIds.length; i++) {\r\n            const data: proto.IFirstRewardId = this.stageInfo.receivedMainFirstRewardIds[i];\r\n            if (data.stageId == id && idx == data.index) {\r\n                return data\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /* 当前关卡的最大存活时间 */\r\n    getCurMaxAliveSecond(id?:number) {\r\n        // 是否完全通过\r\n        const stageId = id?id:this.getCurFightStageId();\r\n        let clearIds = this.getStageClearIds();\r\n        let maxAliveSecond = tab.getData().PveStageTableByStageId.getValue(stageId).Time;\r\n        if(clearIds.indexOf(stageId)>-1){\r\n            return maxAliveSecond;\r\n        }else{\r\n            return this.stageInfo.currentMainStageMaxAliveSeconds;\r\n        }\r\n    }\r\n    /* 已经通关的存活时间 */\r\n    getClearedStageAliveSecond(levelId: number) {\r\n        return tab.getData().PveStageTableByStageId.getValue(levelId).Time;\r\n    }\r\n    /* 当前关卡是否解锁 */\r\n    getStageIsLock(id: number): boolean {\r\n        if (id === 1) {\r\n            return false;\r\n        }\r\n        const clearIds = this.getStageClearIds();\r\n        const lastPveStageTab = tab.getData().PveStageTableByStageId.getValue(clearIds[clearIds.length - 1]);\r\n        if (!lastPveStageTab) {\r\n            return true;\r\n        }\r\n        const curPveStageId = lastPveStageTab.NextLevelId?lastPveStageTab.NextLevelId:lastPveStageTab.StageId;\r\n        let levelArr = tab.getData().MainChapterTableById.getValue(id).StageIds;\r\n        for (let i = 0; i < levelArr.length; i++) {\r\n            let stageId = levelArr[i];\r\n            if (curPveStageId >= stageId) {\r\n                return false\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /* 返回还没有领取奖励的stageId */\r\n    getReceiveStageId(): number {\r\n        let rewardId = 0;\r\n        const stageId = this.getCurFightStageId();\r\n        const ChapterFirstTab = tab.getData().ChapterFristRewardTable;\r\n        for (let i = 0; i < ChapterFirstTab.length; i++) {\r\n            if (rewardId) {\r\n                break;\r\n            }\r\n            const id = ChapterFirstTab[i].Id;\r\n            if (id > stageId) {\r\n                break;\r\n            } else if (id < stageId) {\r\n                // 通关的列表 判断是否全部领取了奖励\r\n                for (let k = 0; k < 3; k++) {\r\n                    let isGot = this.getReceiveFirstRewardById(id, k);\r\n                    if (isGot) {\r\n                        continue\r\n                    } else {\r\n                        rewardId = id;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                // 判断当前的最大通关时间内 是否有奖励可以领 但是没有领\r\n                const maxTime = this.getCurMaxAliveSecond();\r\n                const rewardTabData = tab.getData().ChapterFristRewardTableById.getValue(stageId);\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (rewardTabData.Time[j] > maxTime) {\r\n                        continue\r\n                    } else {\r\n                        let isGot = this.getReceiveFirstRewardById(id, j);\r\n                        if (isGot) {\r\n                            continue\r\n                        } else {\r\n                            const isPass = this.getIsPasstStageByStageId(stageId);\r\n                            if(j===2){\r\n                                if(isPass){\r\n                                    rewardId = stageId;\r\n                                }\r\n                            }else{\r\n                                rewardId = stageId;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return rewardId\r\n    }\r\n    // 获取当前列表可以领取奖励的所有idexs\r\n    getAllIndex(stageId:number){\r\n        const result = [];\r\n        const curStageId = this.getCurFightStageId();\r\n        const rewardTabData = tab.getData().ChapterFristRewardTableById.getValue(stageId);\r\n        for (let i = 0; i < rewardTabData.Time.length; i++) {\r\n            const gotRewards = this.getReceiveFirstRewardById(rewardTabData.Id, i);\r\n            let isGot = false;\r\n            if (gotRewards) {\r\n                isGot = true;\r\n            }\r\n            let state = LevelRewardState.None;\r\n            if (rewardTabData.Id > curStageId) {\r\n                state = LevelRewardState.NotAchieved\r\n            } else if (rewardTabData.Id <curStageId) {\r\n                // 判断是否领取\r\n                if (isGot) {\r\n                    state = LevelRewardState.Got;\r\n                } else {\r\n                    state = LevelRewardState.Receive;\r\n                }\r\n            } else {\r\n                // 获取当前的时间\r\n                const maxTime = this.getCurMaxAliveSecond();\r\n                if (maxTime < rewardTabData.Time[i]) {\r\n                    state = LevelRewardState.NotAchieved\r\n                } else {\r\n                    // 判断是否领取\r\n                    if (isGot) {\r\n                        state = LevelRewardState.Got;\r\n                    } else {\r\n                        // state = LevelRewardState.Receive;\r\n                        if(i==rewardTabData.Time.length-1){\r\n                            // 是否通关\r\n                            if(this.getIsPasstStageByStageId(stageId)){\r\n                                state = LevelRewardState.Receive;\r\n                            }else{\r\n                                state = LevelRewardState.NotAchieved;\r\n                            }\r\n                        }else{\r\n                            state = LevelRewardState.Receive;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(state===LevelRewardState.Receive){\r\n                result.push(i);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /* 获取当前主线列表最大关卡 */\r\n    getMaxPveMainStage():tab.PveStageTable{\r\n        return tab.getData().PveStageTableByStageId.getValue(3505);\r\n    }\r\n    /* 当前是否主线全部通关 */\r\n    isAllStageClear(){\r\n        const clearIds = this.getStageClearIds();\r\n        return clearIds.indexOf(3505)>-1;\r\n    }\r\n}"]}