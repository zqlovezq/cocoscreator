{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/home/battle/BattleMainEliteData.ts"],"names":["_decorator","AbsControl","tab","BattleMainDataControl","ccclass","property","BattleMainEliteData","eliteStageInfo","ins","_instance","initData","msg","getStageClearIds","clearedStageIds","getLastStageId","length","getIsPasstStageByStageId","id","clearIds","indexOf","getCurFightStageId","lastPveStageTab","getData","PveStageTableByStageId","getValue","curPveStageId","NextLevelId","StageId","getPassChapterId","stageId","nextStageId","caleStageId","Math","floor","getChapterId","getReceiveFirstRewardIds","receivedFirstRewardStageIds","addReceiveFirstRewardId","push","getReceiveFirstRewardById","i","getCurMaxAliveSecond","maxAliveSecond","Time","currentStageMaxAliveSeconds","getClearedStageAliveSecond","levelId","getStageIsLock","passNormalStage","isPassAll","isAllStageClear","levelArr","MainChapterTableById","EliteStageIds","getReceiveStageId","lastId","rewardIds","lastRewardId","getMaxPveMainStage","getChapterCount","chapterId","maxCount","MainChapterTable","_tab","_id","Id","curCount"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { AbsControl } from '../../../../framework/base/IAbs';\r\nimport { proto } from 'client_protocol';\r\nimport { tab } from '../../../../Table/table_gen';\r\nimport { TRIALLAYER } from '../../../../Common/script/EnumTypeMgr';\r\nimport { BattleMainDataControl } from './BattleMainDataControl';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleMainEliteData')\r\nexport class BattleMainEliteData extends AbsControl {\r\n    public eliteStageInfo: proto.Msg_GetEliteStageInfoRsp = null;\r\n    private static _instance: BattleMainEliteData;\r\n    public static get ins() {\r\n        if (null == this._instance) {\r\n            this._instance = new BattleMainEliteData();\r\n        }\r\n        return this._instance;\r\n    }\r\n    initData(msg: proto.Msg_GetEliteStageInfoRsp) {\r\n        this.eliteStageInfo = msg;\r\n    }\r\n    /* 获取已经通关的关卡id列表 */\r\n    getStageClearIds() {\r\n        if (!this.eliteStageInfo) {\r\n            return [];\r\n        }\r\n        return this.eliteStageInfo.clearedStageIds;\r\n    }\r\n    /* 获取最新的一个通关id */\r\n    getLastStageId() {\r\n        if (!this.eliteStageInfo) {\r\n            return 100101\r\n        }\r\n        if (this.eliteStageInfo.clearedStageIds.length === 0) {\r\n            return 100101\r\n        }\r\n        return this.eliteStageInfo.clearedStageIds[this.eliteStageInfo.clearedStageIds.length - 1];\r\n    }\r\n    /**\r\n    * 当前关卡是否已经通关\r\n    * @param id \r\n    */\r\n    getIsPasstStageByStageId(id: number): boolean {\r\n        let clearIds = this.getStageClearIds();\r\n        if (clearIds.length == 0) {\r\n            return false;\r\n        } else {\r\n            return clearIds.indexOf(id) >= 0;\r\n        }\r\n    }\r\n    /* 获取当前正在战斗的id */\r\n    getCurFightStageId() {\r\n        // return this._stageInfo.fightingMainStageId;\r\n        const clearIds = this.getStageClearIds();\r\n        if (clearIds.length === 0) {\r\n            return 100101;\r\n        }\r\n        const lastPveStageTab = tab.getData().PveStageTableByStageId.getValue(clearIds[clearIds.length - 1]);\r\n        const curPveStageId = lastPveStageTab.NextLevelId ? lastPveStageTab.NextLevelId : lastPveStageTab.StageId;\r\n        return curPveStageId;\r\n    }\r\n    /* 获取玩家通关的的章节Id*/\r\n    getPassChapterId() {\r\n        const clearIds = this.getStageClearIds();\r\n        if (clearIds.length === 0) {\r\n            return 100101;\r\n        }\r\n        let stageId = clearIds[clearIds.length - 1];\r\n\r\n        const nextStageId = tab.getData().PveStageTableByStageId.getValue(stageId).NextLevelId - 100000;\r\n        const caleStageId = stageId-100000;\r\n        if (Math.floor(nextStageId / 100) > Math.floor(caleStageId / 100)) {\r\n            return Math.floor(caleStageId / 100);\r\n        } else {\r\n            return Math.floor(caleStageId / 100) - 1;\r\n        }\r\n    }\r\n    /* 获取玩家最新的章节 */\r\n    getChapterId(id?: number) {\r\n        let stageId = id ? id : this.getCurFightStageId();\r\n        return Math.floor((stageId - 100000) / 100)\r\n    }\r\n    /* 已领取的首通奖励列表 */\r\n    getReceiveFirstRewardIds() {\r\n        return this.eliteStageInfo.receivedFirstRewardStageIds;\r\n    }\r\n    /* 添加首通奖励 */\r\n    addReceiveFirstRewardId(stageId: number) {\r\n        this.eliteStageInfo.receivedFirstRewardStageIds.push(stageId)\r\n    }\r\n    getReceiveFirstRewardById(id: number) {\r\n        for (let i = 0; i < this.eliteStageInfo.receivedFirstRewardStageIds.length; i++) {\r\n            const stageId: number = this.eliteStageInfo.receivedFirstRewardStageIds[i];\r\n            if (stageId == id) {\r\n                return stageId\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /* 当前关卡的最大存活时间 */\r\n    getCurMaxAliveSecond(id?: number) {\r\n        // 是否完全通过\r\n        const stageId = id ? id : this.getCurFightStageId();\r\n        let clearIds = this.getStageClearIds();\r\n        let maxAliveSecond = tab.getData().PveStageTableByStageId.getValue(stageId).Time;\r\n        if (clearIds.indexOf(stageId) > -1) {\r\n            return maxAliveSecond;\r\n        } else {\r\n            return this.eliteStageInfo.currentStageMaxAliveSeconds;\r\n        }\r\n    }\r\n    /* 已经通关的存活时间 */\r\n    getClearedStageAliveSecond(levelId: number) {\r\n        return tab.getData().PveStageTableByStageId.getValue(levelId).Time;\r\n    }\r\n    /* 当前关卡是否解锁 */\r\n    getStageIsLock(id: number): boolean {\r\n        if (id === 1) {\r\n            return false;\r\n        }\r\n        // 当前的章节id要小于普通关卡的章节id\r\n        const passNormalStage = BattleMainDataControl.ins.getPassChapterId();\r\n        const isPassAll = BattleMainDataControl.ins.isAllStageClear();\r\n        if (isPassAll&&this.getPassChapterId()===34) {\r\n            return false;\r\n        }\r\n        if (passNormalStage < id) {\r\n            return true;\r\n        }\r\n\r\n        const clearIds = this.getStageClearIds();\r\n        const lastPveStageTab = tab.getData().PveStageTableByStageId.getValue(clearIds[clearIds.length - 1]);\r\n        if (!lastPveStageTab) {\r\n            return true;\r\n        }\r\n        const curPveStageId = lastPveStageTab.NextLevelId ? lastPveStageTab.NextLevelId : lastPveStageTab.StageId;\r\n        let levelArr = tab.getData().MainChapterTableById.getValue(id).EliteStageIds;\r\n        for (let i = 0; i < levelArr.length; i++) {\r\n            let stageId = levelArr[i];\r\n            if (curPveStageId >= stageId) {\r\n                return false\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /* 返回还没有领取奖励的stageId */\r\n    getReceiveStageId(): number {\r\n        // 通关副本\r\n        const lastId = this.getLastStageId();\r\n        const rewardIds = this.eliteStageInfo.receivedFirstRewardStageIds;\r\n        if (rewardIds.length === 0) {\r\n            return 100101\r\n        }\r\n        const lastRewardId = rewardIds[rewardIds.length - 1];\r\n        if (lastRewardId < lastId) {\r\n            return tab.getData().PveStageTableByStageId.getValue(lastRewardId).NextLevelId;\r\n        } else if (lastRewardId === lastId) {\r\n            return tab.getData().PveStageTableByStageId.getValue(lastRewardId).NextLevelId;\r\n        }\r\n    }\r\n    /* 获取当前主线列表最大关卡 */\r\n    getMaxPveMainStage(): tab.PveStageTable {\r\n        return tab.getData().PveStageTableByStageId.getValue(3505);\r\n    }\r\n    /* 获取当前通关了多少章节 总共可以打多少章节 */\r\n    getChapterCount() {\r\n        let chapterId = BattleMainDataControl.ins.getPassChapterId();\r\n        const isPassAll = BattleMainDataControl.ins.isAllStageClear();\r\n        if (isPassAll) {\r\n            chapterId++\r\n        }\r\n        const clearIds = this.getStageClearIds();\r\n        let maxCount = 0;\r\n        for (let i = 0; i < tab.getData().MainChapterTable.length; i++) {\r\n            const _tab = tab.getData().MainChapterTable[i];\r\n            const _id = _tab.Id;\r\n            if (_id <= chapterId) {\r\n                maxCount += _tab.EliteStageIds.length;\r\n            }\r\n        }\r\n        return {\r\n            curCount:clearIds.length,\r\n            maxCount:maxCount\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}