{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/@protobufjs/path/index.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","path","isAbsolute","test","normalize","replace","parts","split","absolute","prefix","shift","i","length","splice","join","resolve","originPath","includePath","alreadyNormalized","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;;8BAEDC,Y,GAAe,cAAYC,G;;AACjCF,MAAAA,UAAU,CAACG,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;AAEA;AACD;AACA;AACA;AACA;;AACC,YAAIC,IAAI,GAAGL,OAAX;;AAEA,YAAIM,UAAU;AACd;AACD;AACA;AACA;AACA;AACCD,QAAAA,IAAI,CAACC,UAAL,GAAkB,SAASA,UAAT,CAAoBD,IAApB,EAA0B;AACxC,iBAAO,eAAeE,IAAf,CAAoBF,IAApB,CAAP;AACH,SARD;;AAUA,YAAIG,SAAS;AACb;AACD;AACA;AACA;AACA;AACCH,QAAAA,IAAI,CAACG,SAAL,GAAiB,SAASA,SAAT,CAAmBH,IAAnB,EAAyB;AACtCA,UAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,KAAb,EAAoB,GAApB,EACKA,OADL,CACa,SADb,EACwB,GADxB,CAAP;AAEA,cAAIC,KAAK,GAAML,IAAI,CAACM,KAAL,CAAW,GAAX,CAAf;AAAA,cACIC,QAAQ,GAAGN,UAAU,CAACD,IAAD,CADzB;AAAA,cAEIQ,MAAM,GAAK,EAFf;AAGA,cAAID,QAAJ,EACIC,MAAM,GAAGH,KAAK,CAACI,KAAN,KAAgB,GAAzB;;AACJ,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,GAAmC;AAC/B,gBAAIN,KAAK,CAACK,CAAD,CAAL,KAAa,IAAjB,EAAuB;AACnB,kBAAIA,CAAC,GAAG,CAAJ,IAASL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,KAAiB,IAA9B,EACIL,KAAK,CAACO,MAAN,CAAa,EAAEF,CAAf,EAAkB,CAAlB,EADJ,KAEK,IAAIH,QAAJ,EACDF,KAAK,CAACO,MAAN,CAAaF,CAAb,EAAgB,CAAhB,EADC,KAGD,EAAEA,CAAF;AACP,aAPD,MAOO,IAAIL,KAAK,CAACK,CAAD,CAAL,KAAa,GAAjB,EACHL,KAAK,CAACO,MAAN,CAAaF,CAAb,EAAgB,CAAhB,EADG,KAGH,EAAEA,CAAF;AACP;;AACD,iBAAOF,MAAM,GAAGH,KAAK,CAACQ,IAAN,CAAW,GAAX,CAAhB;AACH,SA5BD;AA8BA;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCb,QAAAA,IAAI,CAACc,OAAL,GAAe,SAASA,OAAT,CAAiBC,UAAjB,EAA6BC,WAA7B,EAA0CC,iBAA1C,EAA6D;AACxE,cAAI,CAACA,iBAAL,EACID,WAAW,GAAGb,SAAS,CAACa,WAAD,CAAvB;AACJ,cAAIf,UAAU,CAACe,WAAD,CAAd,EACI,OAAOA,WAAP;AACJ,cAAI,CAACC,iBAAL,EACIF,UAAU,GAAGZ,SAAS,CAACY,UAAD,CAAtB;AACJ,iBAAO,CAACA,UAAU,GAAGA,UAAU,CAACX,OAAX,CAAmB,gBAAnB,EAAqC,EAArC,CAAd,EAAwDO,MAAxD,GAAiER,SAAS,CAACY,UAAU,GAAG,GAAb,GAAmBC,WAApB,CAA1E,GAA6GA,WAApH;AACH,SARD,CA5D0F,CAuE3F;;;AAEA,2BAAAE,WAAW,GAAGrB,MAAM,CAACF,OAArB;AAGC,OA5ED,EA4EG,EA5EH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\r\n\r\n /**\r\n  * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n  * @memberof util\r\n  * @namespace\r\n  */\r\n var path = exports;\r\n\r\n var isAbsolute =\r\n /**\r\n  * Tests if the specified path is absolute.\r\n  * @param {string} path Path to test\r\n  * @returns {boolean} `true` if path is absolute\r\n  */\r\n path.isAbsolute = function isAbsolute(path) {\r\n     return /^(?:\\/|\\w+:)/.test(path);\r\n };\r\n\r\n var normalize =\r\n /**\r\n  * Normalizes the specified path.\r\n  * @param {string} path Path to normalize\r\n  * @returns {string} Normalized path\r\n  */\r\n path.normalize = function normalize(path) {\r\n     path = path.replace(/\\\\/g, \"/\")\r\n                .replace(/\\/{2,}/g, \"/\");\r\n     var parts    = path.split(\"/\"),\r\n         absolute = isAbsolute(path),\r\n         prefix   = \"\";\r\n     if (absolute)\r\n         prefix = parts.shift() + \"/\";\r\n     for (var i = 0; i < parts.length;) {\r\n         if (parts[i] === \"..\") {\r\n             if (i > 0 && parts[i - 1] !== \"..\")\r\n                 parts.splice(--i, 2);\r\n             else if (absolute)\r\n                 parts.splice(i, 1);\r\n             else\r\n                 ++i;\r\n         } else if (parts[i] === \".\")\r\n             parts.splice(i, 1);\r\n         else\r\n             ++i;\r\n     }\r\n     return prefix + parts.join(\"/\");\r\n };\r\n\r\n /**\r\n  * Resolves the specified include path against the specified origin path.\r\n  * @param {string} originPath Path to the origin file\r\n  * @param {string} includePath Include path relative to origin path\r\n  * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n  * @returns {string} Path to the include file\r\n  */\r\n path.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n     if (!alreadyNormalized)\r\n         includePath = normalize(includePath);\r\n     if (isAbsolute(includePath))\r\n         return includePath;\r\n     if (!alreadyNormalized)\r\n         originPath = normalize(originPath);\r\n     return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n };\r\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}