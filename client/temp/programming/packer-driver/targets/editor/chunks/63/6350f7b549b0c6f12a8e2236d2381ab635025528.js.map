{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/ai/MonsterHunt.ts"],"names":["MonsterHunt","Vec3","AbsStateType","SearchEnemy","tab","Vector2","tempPos","tempStartPos","Max_Time","Min_Time","abs","targetRole","checkTime","nextCheck","setAbs","updateFrame","dt","checkMove","findTarget","isDead","getBySearchEnemy","objId","objType","getHitPos","EffectUnit","EffectUnit_Enemy","info","configTab","SearchRules","velocity","x","y","checkAttack","set","lengthSqr","squaredDistance","onSkillTrigger","Triggertype","Triggertype_SearchEnemy","distance","sqr","attackRange","onAttack","enterState","roleMove","getPosition","traceDirection","setVelocityAngle","nowSkill","getNowSkill","isInCD","attrData","checkSkillEffectUnit","checSkillBulletEffectUnit","changeState","roleAttack","state","isState"],"mappings":"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","sourcesContent":["import { Vec3, View, game, size, v2, v3, view } from \"cc\";\nimport { AbsRole } from \"../obj/role/AbsRole\";\nimport { AbsObj } from \"../obj/AbsObj\";\nimport { AbsStateType } from \"../obj/state/AbsState\";\nimport { PlayerControl } from \"../obj/role/role/PlayerControl\";\nimport { SearchEnemy } from \"./SearchEnemy\";\nimport { Monster } from \"../obj/role/monster/Monster\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { Vector2 } from \"../../../../framework/collision/Maths\";\n\nconst enum HuntState {\n    Warning = 1,\n    Attack = 2\n}\nconst tempPos = new Vec3(0, 0, 0);\nconst tempStartPos = new Vec3(0, 0, 0);\n\nconst Max_Time = 500\nconst Min_Time = 100\n/** \n * 怪物寻敌 \n */\nexport class MonsterHunt {\n\n    abs: Monster\n    targetRole: AbsRole\n\n    checkTime: number = 500;\n    nextCheck: number = 0; //下一轮时间\n\n    setAbs(abs) {\n        this.abs = abs\n        this.checkTime = Max_Time\n    }\n\n    updateFrame(dt: number) {\n        //--范围检测\n        this.checkMove(dt)\n    }\n\n    findTarget() {\n        if (this.targetRole == null || (this.targetRole && this.targetRole.isDead)) {\n            this.targetRole = SearchEnemy.getBySearchEnemy(this.abs.objId, this.abs.objType, this.abs.getHitPos(), tab.EffectUnit.EffectUnit_Enemy, this.abs.info.configTab.SearchRules)\n        }\n        if (this.targetRole == null) {\n            // console.log(\"怪物 根据锁敌规则， 没有找到敌人，根据默认规则再次查找\")\n        }\n    }\n\n    checkMove(dt: number) {\n        if (this.abs.isDead) {\n            return\n        }\n        this.nextCheck -= dt;\n        if (this.nextCheck <= 0) {\n            this.nextCheck = this.checkTime;\n            this.targetRole = null\n            this.findTarget()\n            if (this.targetRole == null) {\n                this.abs.velocity.x = this.abs.velocity.y = 0\n                return\n            }\n\n            this.checkAttack()\n        }\n    }\n\n    //检测攻击范围，发动攻击\n    checkAttack(): void {\n        tempPos.set(this.targetRole.getHitPos())\n        let lengthSqr = Vector2.squaredDistance(this.abs.getHitPos(), tempPos)\n        this.abs.info.onSkillTrigger(tab.Triggertype.Triggertype_SearchEnemy, { distance: lengthSqr })\n        let sqr = this.abs.info.attackRange * this.abs.info.attackRange - lengthSqr\n        //攻击半径\n        if (sqr > 0) {\n            this.checkTime = Max_Time\n            this.onAttack()\n        } else {\n            if (sqr < -10000){\n                this.checkTime = Min_Time\n            }\n            this.enterState(AbsStateType.roleMove)\n            if (this.abs.getPosition().x < 100) {\n                //计算朝目标行进方向\n                tempPos.set(this.abs.getHitPos())\n                this.abs.traceDirection(tempPos, this.targetRole.getHitPos())\n            } else {\n                this.abs.setVelocityAngle(180)\n            }\n        }\n    }\n\n    //进入攻击范围\n    onAttack() {\n        let nowSkill = this.abs.info.getNowSkill()\n        if (nowSkill) {\n            this.abs.velocity.x = this.abs.velocity.y = 0\n            //检测技能是否可以释放\n            if (nowSkill.isInCD(this.abs.info.attrData)) {\n                // console.log(\"怪物技能cd,站这不动\")\n                return\n            }\n            if (this.abs.info.checkSkillEffectUnit(nowSkill) || this.abs.info.checSkillBulletEffectUnit(nowSkill)) {\n                //进入攻击状态\n                this.abs.changeState(AbsStateType.roleAttack)\n            } else {\n                // console.log(\"没有敌人\")\n            }\n        }\n    }\n\n\n    enterState(state: AbsStateType) {\n        if (this.abs.isState(state)) {\n            return\n        }\n        this.abs.changeState(state)\n    }\n}"]}