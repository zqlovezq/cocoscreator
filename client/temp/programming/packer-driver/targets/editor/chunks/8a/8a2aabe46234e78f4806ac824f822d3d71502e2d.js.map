{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/hero/herobag/HeroAttrPop.ts"],"names":["_decorator","instantiate","Node","Prefab","ViewPop","HeroAttrPopItem","tab","HeroAttr","HeroAttrMgr","ccclass","property","HeroAttrPop","attrMap","register","onShow","openData","initView","heroAttr","attr","map","getData","HeroAttrClientTableByType","forEach","key","value","ShowHeroAttr","node","itemPrefab","com","getComponent","IsBase","parent","baseNode","extraNode","num","has","get","AttrType","AttrType_Attack","getHeroTotalAttack","AttrType_Defence","getHeroTotalDefence","AttrType_Hp","getHeroTotalHp","initData","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab } from 'cc';\r\nimport { ViewPop } from '../../../../framework/base/ViewPop';\r\nimport { HeroAttrPopItem } from './HeroAttrPopItem';\r\nimport { tab } from '../../../../Table/table_gen';\r\nimport { HeroAttr, HeroAttrMgr } from '../../../../Common/script/HeroAttrMgr';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HeroAttrPop')\r\nexport class HeroAttrPop extends ViewPop {\r\n    @property(Node)\r\n    baseNode: Node = null;\r\n    @property(Node)\r\n    extraNode: Node = null;\r\n    @property(Prefab)\r\n    itemPrefab: Prefab = null;\r\n\r\n    private attrMap: Map<tab.AttrType, number>\r\n    register(): void {\r\n\r\n    }\r\n    onShow(): void {\r\n        this.attrMap = this.openData[\"attrMap\"];\r\n        this.initView();\r\n    }\r\n    initView() {\r\n        if (!this.attrMap) {\r\n            return;\r\n        }\r\n\r\n        let heroAttr = new HeroAttr;\r\n        heroAttr.attr = this.attrMap;\r\n\r\n        let map = tab.getData().HeroAttrClientTableByType;\r\n        map.forEach((key, value) => {\r\n            if(value.ShowHeroAttr){\r\n                let node: Node = instantiate(this.itemPrefab);\r\n                let com = node.getComponent(HeroAttrPopItem);\r\n                if (value.IsBase) {\r\n                    node.parent = this.baseNode;\r\n                } else {\r\n                    node.parent = this.extraNode;\r\n                }\r\n                // let num=this.attrMap.has(key)?this.attrMap.get(key):0;\r\n                let num = 0;\r\n                num = this.attrMap.has(key) ? this.attrMap.get(key) : 0;\r\n                // if (key === tab.AttrType.AttrType_Attack) {\r\n                //     num = this.attrMap.get(tab.AttrType.AttrType_TotalAttack) ?? num;\r\n                // } else if (key == tab.AttrType.AttrType_Defence) {\r\n                //     num = this.attrMap.get(tab.AttrType.AttrType_TotalDefence) ?? num;\r\n                // } else if (key == tab.AttrType.AttrType_Hp) {\r\n                //     num = this.attrMap.get(tab.AttrType.AttrType_TotalHp) ?? num;\r\n                // } else if (key == tab.AttrType.AttrType_CriticalDamage) {\r\n                //     num = Math.floor(num / 100);\r\n                // }\r\n\r\n                if (key === tab.AttrType.AttrType_Attack) {\r\n                    num = HeroAttrMgr.getHeroTotalAttack(heroAttr) ?? num;\r\n                } else if (key == tab.AttrType.AttrType_Defence) {\r\n                    num = HeroAttrMgr.getHeroTotalDefence(heroAttr)?? num;\r\n                } else if (key == tab.AttrType.AttrType_Hp) {\r\n                    num = HeroAttrMgr.getHeroTotalHp(heroAttr)?? num;\r\n                } \r\n                // else if (key == tab.AttrType.AttrType_CriticalDamage) {\r\n                //     num = Math.floor(num / 100);\r\n                // }\r\n\r\n                com.initData(value, num);\r\n            }\r\n           \r\n        })\r\n        // if(this.attrMap){\r\n        //     this.attrMap.forEach((value,key)=>{\r\n        //         let node:Node=instantiate(this.itemPrefab);\r\n        //         let com= node.getComponent(HeroAttrPopItem);\r\n        //         let t=tab.getData().HeroAttrClientTableByType.getValue(key);\r\n        //         if(t.IsBase){\r\n        //             node.parent=this.baseNode;\r\n        //         }else{\r\n        //             node.parent=this.extraNode;\r\n        //         }\r\n        //         com.initData(t,value);\r\n        //     })\r\n\r\n        // }\r\n    }\r\n    protected onDestroy(): void {\r\n        super.onDestroy()\r\n    }\r\n}\r\n\r\n\r\n"]}