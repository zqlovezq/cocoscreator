{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/jianghu/GameplayViewDataMgr.ts"],"names":["_decorator","AbsControl","proto","JIANGHU_TYPE","tab","RoleData","ccclass","property","GameplayViewDataMgr","curFightStageId","ExportMap","Map","StageTabMap","_WorldBossMsg","_DailyChallengeDataMsg","_DailyChallengeBuffs","_ClimbTowerInfoMsg","ins","_instance","initData","dataMap","clear","Object","keys","forEach","key","_key","Number","isNaN","NONE","set","exportData","ExportStageInfo","clearedStageIds","receivedFirstRewardStageIds","arr","i","getData","PveStageTable","length","stageTab","StageType","push","getStageTab","id","get","getExportInfo","setCurFightStageId","ids","StageId","NextLevelId","getCurSweepStageId","maxStageId","sweep","indexOf","addExportInfo","clearedId","getSweepInfo","view_type","curExportInfo","freeTimes","buyTimes","diamondData","haveFreeTimes","haveBuyTimes","GoldStage","GetKeyValue_ConfigTable","GoldStageSweepFreeCount","GoldStageSweepBuyCount","getPrivilegeValue","VipBonus","VipBonus_DailyStageBuySweepCount","GoldStageSweepBuyCost","FeedStageSweepFreeCount","FeedStageSweepBuyCount","FeedStageSweepBuyCost","freeSweepTimes","notFreeSweepTimes","maxFreeTimes","maxBuyTimes","worldBossMsg","msg","dailyChallengeDataMsg","DailyChallengeData","level","cd","challengeCount","challengeTotalCount","receivedScore","maxScore","dailyChallengeBuffs","buffs","climbTowerInfoMsg","defeatTimes","getClimbTowerPassLevelId","passId"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { AbsControl } from '../../../framework/base/IAbs';\r\nimport { proto } from 'client_protocol';\r\nimport { JIANGHU_TYPE } from '../../../Common/script/EnumTypeMgr';\r\nimport { tab } from '../../../Table/table_gen';\r\nimport { RoleData } from '../role/RoleData';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameplayDataMgr')\r\nexport class GameplayViewDataMgr extends AbsControl {\r\n    public curFightStageId: number = 0;\r\n    private ExportMap: Map<JIANGHU_TYPE, proto.IExportStageInfo> = new Map();\r\n    private StageTabMap: Map<JIANGHU_TYPE, tab.PveStageTable[]> = new Map();\r\n    private _WorldBossMsg: proto.Msg_WorldBossDataPush;\r\n    private _DailyChallengeDataMsg: proto.IDailyChallengeData;\r\n    private _DailyChallengeBuffs: Array<number>;\r\n    private _ClimbTowerInfoMsg:proto.Msg_GetClimbTowerInfoRsp;\r\n    private static _instance: GameplayViewDataMgr;\r\n    public static get ins() {\r\n        if (null == this._instance) {\r\n            this._instance = new GameplayViewDataMgr();\r\n        }\r\n        return this._instance;\r\n    }\r\n    initData(dataMap: any) {\r\n        this.ExportMap.clear();\r\n        this.StageTabMap.clear();\r\n\r\n        Object.keys(JIANGHU_TYPE).forEach(key => {\r\n            const _key = Number(key)\r\n            if (!isNaN(_key) && _key !== JIANGHU_TYPE.NONE) {\r\n                if (dataMap[_key]) {\r\n                    this.ExportMap.set(_key, dataMap[key])\r\n                } else {\r\n                    let exportData = new proto.ExportStageInfo();\r\n                    exportData.clearedStageIds = [];\r\n                    exportData.receivedFirstRewardStageIds = [];\r\n                    this.ExportMap.set(_key, exportData)\r\n                }\r\n\r\n                const arr = [];\r\n                for (let i = 0; i < tab.getData().PveStageTable.length; i++) {\r\n                    const stageTab = tab.getData().PveStageTable[i];\r\n                    if (stageTab.StageType == _key) {\r\n                        arr.push(stageTab);\r\n                    }\r\n                }\r\n                this.StageTabMap.set(_key, arr)\r\n            }\r\n        })\r\n    }\r\n    getStageTab(id: JIANGHU_TYPE) {\r\n        return this.StageTabMap.get(id);\r\n    }\r\n    // 获取探险数据\r\n    getExportInfo(id: JIANGHU_TYPE) {\r\n        return this.ExportMap.get(id);\r\n    }\r\n    // 设置当前关卡id\r\n    setCurFightStageId(id: JIANGHU_TYPE){\r\n        const ids = this.ExportMap.get(id).clearedStageIds;\r\n        if (ids.length == 0) {\r\n            this.curFightStageId = this.StageTabMap.get(id)[0].StageId;\r\n        } else {\r\n            if(this.StageTabMap.get(id)[ids.length - 1].NextLevelId){\r\n                this.curFightStageId = this.StageTabMap.get(id)[ids.length - 1].NextLevelId;\r\n            }else{\r\n                this.curFightStageId = this.getStageTab(id)[this.getStageTab(id).length-1].StageId;\r\n            }\r\n        }\r\n    }\r\n    getCurSweepStageId(id){\r\n        const maxStageId =  this.getStageTab(id)[this.getStageTab(id).length-1].StageId;\r\n        const ids = this.ExportMap.get(id).clearedStageIds;\r\n        if(this.curFightStageId<maxStageId){\r\n            return this.curFightStageId-1;\r\n        }else{\r\n            const sweep = ids.indexOf(this.curFightStageId) > -1;\r\n            if(sweep){\r\n                return this.curFightStageId\r\n            }else{\r\n                return this.curFightStageId-1;\r\n            }\r\n        }\r\n    }\r\n    // 增加探险通关数据\r\n    addExportInfo(id: tab.PveStageType,clearedId:number){\r\n        const ids = this.ExportMap.get(Number(id)).clearedStageIds??[];\r\n        if(ids.indexOf(clearedId)>-1){\r\n            return\r\n        }else{\r\n            ids.push(clearedId);\r\n        }\r\n    }\r\n    /* 处理一下扫荡信息 */\r\n    getSweepInfo(view_type: JIANGHU_TYPE) {\r\n        const curExportInfo = this.getExportInfo(view_type)\r\n        let freeTimes = 0;\r\n        let buyTimes = 0;\r\n        let diamondData = [];\r\n        let haveFreeTimes = 0;\r\n        let haveBuyTimes = 0;\r\n        if (view_type === JIANGHU_TYPE.GoldStage) {\r\n            // 免费次数为\r\n            freeTimes = tab.getData().GetKeyValue_ConfigTable().GoldStageSweepFreeCount;\r\n            buyTimes = tab.getData().GetKeyValue_ConfigTable().GoldStageSweepBuyCount+RoleData.ins.getPrivilegeValue(tab.VipBonus.VipBonus_DailyStageBuySweepCount);\r\n            diamondData = tab.getData().GetKeyValue_ConfigTable().GoldStageSweepBuyCost;\r\n        } else {\r\n            freeTimes = tab.getData().GetKeyValue_ConfigTable().FeedStageSweepFreeCount;\r\n            buyTimes = tab.getData().GetKeyValue_ConfigTable().FeedStageSweepBuyCount+RoleData.ins.getPrivilegeValue(tab.VipBonus.VipBonus_DailyStageBuySweepCount);;\r\n            diamondData = tab.getData().GetKeyValue_ConfigTable().FeedStageSweepBuyCost;\r\n        }\r\n        haveFreeTimes = freeTimes - curExportInfo.freeSweepTimes;\r\n        haveBuyTimes = buyTimes - curExportInfo.notFreeSweepTimes;\r\n        return {\r\n            maxFreeTimes: freeTimes,\r\n            maxBuyTimes: buyTimes,\r\n            buyTimes: haveBuyTimes,\r\n            freeTimes: haveFreeTimes,\r\n            diamondData: diamondData,\r\n        }\r\n    }\r\n\r\n    get worldBossMsg() {\r\n        return this._WorldBossMsg;\r\n    }\r\n    set worldBossMsg(msg: proto.Msg_WorldBossDataPush) {\r\n        this._WorldBossMsg = msg;\r\n    }\r\n    /**每日挑战数据 */\r\n    get dailyChallengeDataMsg() {\r\n        if(!this._DailyChallengeDataMsg){\r\n            this._DailyChallengeDataMsg=new  proto.DailyChallengeData();\r\n            this._DailyChallengeDataMsg.level=1;\r\n            this._DailyChallengeDataMsg.cd=-1;\r\n            this._DailyChallengeDataMsg.challengeCount=0;\r\n            this._DailyChallengeDataMsg.challengeTotalCount=0;\r\n            this._DailyChallengeDataMsg.receivedScore=0;\r\n        }\r\n        return this._DailyChallengeDataMsg;\r\n    }\r\n    set dailyChallengeDataMsg(msg: proto.IDailyChallengeData) {\r\n        if(!msg){\r\n            msg=new  proto.DailyChallengeData();\r\n            msg.level=1;\r\n            msg.cd=-1;\r\n            msg.challengeCount=0;\r\n            msg.challengeTotalCount=0;\r\n            msg.receivedScore=0;\r\n        }\r\n        if(!msg.cd){\r\n            msg.cd=0;\r\n        }\r\n        if(!msg.level){\r\n            msg.level=1;\r\n        }\r\n        if(!msg.challengeCount){\r\n            msg.challengeCount=0;\r\n        }\r\n        if(!msg.maxScore){\r\n            msg.maxScore=0;\r\n        }\r\n        if(!msg.receivedScore){\r\n            msg.receivedScore=0;\r\n        }\r\n        if(!msg.challengeTotalCount){\r\n            msg.challengeTotalCount=0;\r\n        }\r\n        this._DailyChallengeDataMsg = msg;\r\n    }\r\n    set dailyChallengeBuffs(buffs){\r\n        this._DailyChallengeBuffs=buffs;\r\n\r\n    }\r\n    get dailyChallengeBuffs(){\r\n        return this._DailyChallengeBuffs;\r\n    }\r\n    /**\r\n     * 爬塔信息\r\n     */\r\n    get climbTowerInfoMsg(){\r\n        return this._ClimbTowerInfoMsg;\r\n    }\r\n    set climbTowerInfoMsg(msg:proto.Msg_GetClimbTowerInfoRsp){\r\n        if(!msg.defeatTimes){\r\n            msg.defeatTimes=0;\r\n        }\r\n        this._ClimbTowerInfoMsg=msg;\r\n    }\r\n    /**获取精英挑战通关id */\r\n    getClimbTowerPassLevelId(){\r\n        let passId = this.climbTowerInfoMsg.clearedStageIds.length == 0 ? 0 :  this.climbTowerInfoMsg.clearedStageIds[ this.climbTowerInfoMsg.clearedStageIds.length - 1]\r\n        return passId;\r\n    }\r\n}\r\n\r\n\r\n"]}