{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/FightRootControl.ts"],"names":["_decorator","Vec3","AbsControl","Func","AbsObjType","AbsObjFactory","FrameControl","PlayerControl","Avatar","SceneMgr","BulletControl","BuffControl","MonsterControl","DamageLab","BuffUI","WaveTimeControl","ColliderMgr","EffectUI","RogueControl","EventMgr","FightEvent","DropControl","FightMsgControl","FightData","Fixed","FightEventControl","DamageCalculation","TestAttr","DamageData","AbsOwner","proto","DeadEffectUI","FightMacro","WorldBossControll","UIMgr","ViewName","SkillControl","DamageStatisticsData","ShadowEffect","Sound","GuideController","RevoltCheatControl","FightGainBuffControl","PvpControl","PvpObjFactory","ccclass","property","FightState","tempPos","FightRootControl","rootView","uiView","isExitIng","_fightState","ready","fightResult","Msg_FinishStageReq","Result","Quit","iUpdates","isTestChuguai","testBulletId","testSkillGroupId","isBound","isTime","monsterAttack","monsterMove","damageToggle","damageShow","max","ingTime","iLen","dtSecTime","lsit","ins","_instance","register","init","isDestory","isTest","setState","initRegister","isWorldAndGuildBoss","console","log","length","push","setRoot","root","camera","position","set","setUIView","setPvpUIView","getRootView","getUIView","getObjectsNode","objects","getBulletNode","isBelow","getBullet","getDamagesNode","damages","state","checkEnd","end","warn","enterMain","isState","checkFightResult","isFight","ing","onQuitFight","showFightResult","checkRoleAllDead","isAllDeadByObjType","role","roles","getObjList","isWin","i","isActive","isDead","result","Win","Lose","isWorlBoss","show","viewName","FightWorldBossResultPop","data","cb","exitFight","req","aliveSeconds","nowTotalTime","score","totalTackDamage","killNum","totalKill","killBossNum","bossKill","collectFeatherNum","feather","bossFightData","getBossList","record","MainStageCleardRecord","stageId","weaponIds","getNowSelectIdList","heroes","heros","getHeros","totalDamage","index","element","hero","StageHero","heroItemId","itemId","level","damage","getRoleById","id","forEach","Math","floor","sendFightResult","pvpEnd","start","emitFight","Fight_Start","isInFightGuiding","Fight_Start_Complete","timeInMonster","update","dt","pause","toFixed","iFightUpdate","SECOND","fight_Sec","nextSec","preCollider","inst","lateCollider","isPvp","onDestory","getHasLen","lateUpdate","addObj","iFrame","removeObj","Iframe","put","scheduleOnce","recycleAll","uiRecycles","v","effs","node","getComponentsInChildren","name","isValid","destroy","destory","destroyFightEffect","purge","leaveFight","schedule","len","enemy","getLeader","createEnemy","random","monsterId","info","getData","setConfigId","speed","setAttrList","concat","defanse","x","y","z","addMonster","getCount","getRendderCout"],"mappings":"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","sourcesContent":["import { _decorator, CCInteger, Color, Component, director, instantiate, JsonAsset, Label, Node, Prefab, Quat, Rect, resources, sp, Sprite, SpriteAtlas, SpriteFrame, sys, tween, UITransform, Vec2, Vec3, view } from 'cc';\nimport { AbsControl } from '../../framework/base/IAbs';\nimport { Monster } from './base/obj/role/monster/Monster';\nimport { Func } from '../utils/Func';\nimport { ResMgr } from '../mgr/ResMgr';\nimport { FightUIView } from './FightUIView';\nimport { FightRootView } from './FightRootView';\nimport { AbsObj, AbsObjType } from './base/obj/AbsObj';\nimport { AbsObjFactory } from './base/obj/AbsObjFactory';\nimport { FrameControl } from './base/frame/FrameControl';\nimport { PlayerControl } from './base/obj/role/role/PlayerControl';\nimport { Avatar } from './animation/Avatar';\nimport { SceneMgr, ScenesName } from '../mgr/SceneMgr';\nimport { Loading } from '../model/Loading';\nimport { BulletControl } from './base/obj/bullet/BulletControl';\nimport { BuffControl } from './base/buff/BuffControl';\nimport { MonsterControl } from './base/obj/role/monster/MonsterControl';\nimport { DamageLab } from './base/damage/DamageLab';\nimport { tab } from '../../Table/table_gen';\nimport { BuffUI } from './base/buff/BuffUI';\nimport { Leveljson } from './table/Leveljson';\nimport { WaveTimeControl } from './wave/WaveTimeControl';\nimport { CommonTipsPop, CommonTipsPopCloseType } from '../model/common/CommonTipsPop';\nimport { ColliderMgr } from '../../framework/collision/ColliderMgr';\nimport { EffectUI } from './base/effect/EffectUI';\nimport { MonsterInfo } from './base/obj/role/monster/MonsterInfo';\nimport { RogueControl } from './view/rogue/RogueControl';\nimport { EventMgr } from '../mgr/EventMgr';\nimport { FightEvent } from './define/FightEvent';\nimport { DropControl } from './drop/DropControl';\nimport { FightMsgControl } from './FightMsgControl';\nimport { SkillPowers } from './power/SkillPowers';\nimport { FightData } from './data/FightData';\nimport Fixed from '../../framework/collision/Fixed';\nimport { FightEventControl } from './define/FightEventControl';\nimport { DamageCalculation } from './base/damage/DamageCalculation';\nimport { Random } from './util/Random';\nimport { TestAttr } from '../../TestAttr';\nimport { DamageData } from './base/damage/DamageData';\nimport { AbsOwner } from './base/obj/AbsOwner';\nimport { proto } from 'client_protocol';\nimport { DeadEffectUI } from './base/effect/DeadEffectUI';\nimport { FightMacro, IFightUpdate } from './define/FightDefine';\nimport { WorldBossControll } from './stage/WorldBossControll';\nimport { UIMgr } from '../mgr/UIMgr';\nimport { ViewName } from '../define/ViewDefine';\nimport { SkillControl } from './base/skill/SkillControl';\nimport { DamageStatisticsData } from './base/damage/DamageStatisticsData';\nimport { ShadowEffect } from './base/effect/ShadowEffect';\nimport Sound from '../utils/Sound';\nimport { LocalEvent } from '../define/LocalEvent';\nimport { GuideController } from '../guide/GuideController';\nimport { RevoltCheatControl } from './cheat/RevoltCheatControl';\nimport { FightGainBuffControl } from './gainBuff/FightGainBuffControl';\nimport { PvpUIView } from './pvp/PvpUIView';\nimport { PvpControl } from './pvp/PvpControl';\nimport { PvpObjFactory } from './pvp/obj/PvpObjFactory';\n\nconst { ccclass, property } = _decorator;\n\nexport enum FightState {\n    /** 准备 */\n    ready,\n    /** 进行中 */\n    ing,\n    /** 结束 */\n    end,\n}\n\nconst tempPos = new Vec3(0, 0, 0);\n@ccclass('FightRootControl')\nexport class FightRootControl extends AbsControl {\n    private static _instance: FightRootControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new FightRootControl();\n            this._instance.register()\n        }\n        return this._instance;\n    }\n    private rootView: FightRootView\n    private uiView: FightUIView\n    /** 退出中 */\n    isExitIng: boolean = false\n\n\n    /** 战斗状态 */\n    _fightState: FightState = FightState.ready\n    fightResult: proto.Msg_FinishStageReq.Result = proto.Msg_FinishStageReq.Result.Quit\n\n    iUpdates: IFightUpdate[] = []\n    init(): void {\n        this.isExitIng = false\n        FightData.ins.isDestory = false\n        FightRootControl.ins.isTime = !FightMsgControl.ins.isTest\n        this.setState(FightState.ready)\n\n        DamageCalculation.init()\n        AbsObjFactory.init()\n        FrameControl.ins.init()\n        PlayerControl.ins.init()\n        BulletControl.ins.init()\n        BuffControl.ins.init()\n        MonsterControl.ins.init()\n        WaveTimeControl.ins.init()\n        RogueControl.ins.init()\n        DropControl.ins.init()\n        FightEventControl.ins.init()\n        SkillControl.ins.init()\n        FightGainBuffControl.ins.initRegister()\n        RevoltCheatControl.ins.init()\n        if (FightData.ins.isWorldAndGuildBoss()) {\n            WorldBossControll.ins.init()\n        }\n\n        PvpControl.ins.init()\n\n        console.log(\"init-----------\")\n        this.iUpdates.length = 0\n        this.iUpdates.push(FightData.ins)\n        this.iUpdates.push(DropControl.ins)\n        this.iUpdates.push(RogueControl.ins)\n        this.iUpdates.push(WaveTimeControl.ins)\n        this.iUpdates.push(FrameControl.ins)\n        this.iUpdates.push(PvpControl.ins)\n    }\n\n    register() {\n    }\n\n    setRoot(root: FightRootView) {\n        this.rootView = root\n\n        this.rootView.camera.position = tempPos.set(0.1, 0.1, 1)\n    }\n    setUIView(uiView: FightUIView) {\n        this.uiView = uiView\n    }\n    setPvpUIView(uiView: PvpUIView) {\n        this.uiView = uiView as any\n    }\n\n    getRootView() {\n        return this.rootView\n    }\n\n    getUIView() {\n        return this.uiView\n    }\n\n    getObjectsNode() {\n        return this.rootView.objects\n    }\n\n    getBulletNode(isBelow: boolean) {\n        return this.rootView.getBullet(isBelow)\n    }\n    getDamagesNode() {\n        return this.rootView.damages\n    }\n\n    setState(state: FightState, checkEnd?: boolean) {\n        if (this._fightState == FightState.end && state == FightState.end) {\n            console.warn(\"已在结算状态，无需重复设置,喊程序看日志\")\n            if (FightData.ins.isDestory) {\n                this.enterMain()\n            }\n            return\n        }\n        this._fightState = state\n        if (this.isState(FightState.end) && checkEnd) {\n            this.checkFightResult()\n        }\n    }\n    isFight() {\n        return this._fightState == FightState.ing\n    }\n\n    isState(state: FightState) {\n        return this._fightState == state\n    }\n\n    onQuitFight() {\n        console.log(\"quitFight-----------\")\n        this.setState(FightState.end)\n        this.fightResult = proto.Msg_FinishStageReq.Result.Quit\n        this.showFightResult()\n    }\n\n    checkRoleAllDead() {\n        if (FrameControl.ins.isAllDeadByObjType(AbsObjType.role)) {\n            //全部死亡\n            this.setState(FightState.end, true)\n        }\n    }\n\n    checkFightResult() {\n        let roles = FrameControl.ins.getObjList(AbsObjType.role)\n        let isWin = false\n        for (let i = 0; i < roles.length; i++) {\n            let role = roles[i]\n            if (!role.isActive) {\n                continue\n            }\n            if (!role.isDead) {\n                isWin = true\n                break\n            }\n        }\n\n        let result\n        if (isWin || FightData.ins.isWorldAndGuildBoss()) { //世界bosss都是胜利\n            result = proto.Msg_FinishStageReq.Result.Win\n        } else {\n            result = proto.Msg_FinishStageReq.Result.Lose\n        }\n\n        this.fightResult = result;\n        if (FightData.ins.isWorlBoss()) {\n            UIMgr.ins.show({\n                viewName: ViewName.FightWorldBossResultPop, data: {\n                    cb: () => {\n                        this.showFightResult()\n                    }\n                }\n            })\n        } else {\n            this.showFightResult()\n        }\n    }\n\n    showFightResult() {\n        this.exitFight()\n        let req = new proto.Msg_FinishStageReq()\n        req.result = this.fightResult\n        req.aliveSeconds = WaveTimeControl.ins.nowTotalTime || 0\n        req.score = (FightData.ins.isWorldAndGuildBoss()) && WorldBossControll.ins.totalTackDamage\n        req.killNum = DamageStatisticsData.ins.totalKill\n        req.killBossNum = DamageStatisticsData.ins.bossKill\n        req.collectFeatherNum = DropControl.ins.feather\n        req.bossFightData = RevoltCheatControl.ins.getBossList()\n        // if (FightData.ins.isMainLine()) {\n        let record = new proto.MainStageCleardRecord()\n        req.record = record\n        record.stageId = FightData.ins.stageId\n        record.weaponIds = RogueControl.ins.getNowSelectIdList()\n        record.heroes = []\n\n        let heros = PlayerControl.ins.getHeros()\n        let totalDamage = 0\n        for (let index = 0; index < heros.length; index++) {\n            const element = heros[index];\n            let hero = new proto.MainStageCleardRecord.StageHero()\n            hero.heroItemId = element.itemId\n            hero.level = element.level\n            hero.damage = 0\n            if (DamageStatisticsData.ins.getRoleById(heros[index].id)) {\n                hero.damage = DamageStatisticsData.ins.getRoleById(heros[index].id).damage\n                totalDamage += hero.damage\n            }\n            record.heroes.push(hero)\n        }\n        record.heroes.forEach(hero => {\n            hero.damage = Math.floor(hero.damage * 100 / totalDamage)\n        })\n        // }\n\n        FightMsgControl.ins.sendFightResult(req)\n    }\n\n    pvpEnd() {\n        this.fightResult = proto.Msg_FinishStageReq.Result.Quit\n        this.exitFight()\n    }\n\n    isTestChuguai: boolean = false\n    testBulletId: number = 0\n    testSkillGroupId: number = 0\n    isBound: boolean\n    isTime: boolean = false\n    monsterAttack: boolean = true\n    monsterMove: boolean = true\n    damageToggle: boolean = false\n    damageShow: boolean = true\n    max: number = 0\n\n    start() {\n        this.setState(FightState.ing)\n        EventMgr.emitFight(FightEvent.Fight_Start)\n        if (!GuideController.ins.isInFightGuiding()) {\n            EventMgr.emitFight(FightEvent.Fight_Start_Complete)\n        }\n\n        this.timeInMonster()\n    }\n\n    ingTime: number = 0\n    iLen: number = 0\n    dtSecTime: number = 0\n    update(dt: number) {\n        if (FightData.ins.pause) {\n            return\n        }\n        if (this.isState(FightState.ready)) {\n            return\n        }\n        // this.ingTime = new Date().getTime()\n        if (this.isState(FightState.ing)) {\n            dt = Fixed.toFixed(dt * 1000)\n            this.iLen = this.iUpdates.length\n            for (let index = 0; index < this.iLen; index++) {\n                this.iUpdates[index].iFightUpdate(dt)\n            }\n            this.dtSecTime += dt\n            if (this.dtSecTime >= FightMacro.SECOND) {\n                this.dtSecTime -= FightMacro.SECOND\n                EventMgr.emitFight(FightEvent.fight_Sec)\n                DamageStatisticsData.ins.nextSec()\n            }\n        }\n        FrameControl.ins.preCollider();\n        ColliderMgr.inst.update(dt);\n        FrameControl.ins.lateCollider();\n        if (this.isExitIng && !FightData.ins.isDestory) {\n            if (FightData.ins.isPvp) {\n                this.onDestory()\n            } else {\n                if (FrameControl.ins.getHasLen() == 0) {\n                    this.onDestory()\n                }\n            }\n        }\n        // console.log(\"消耗时间：\", new Date().getTime() - this.ingTime)\n    }\n\n    lateUpdate(dt: number): void {\n\n    }\n\n    addObj(iFrame: any) {\n        FrameControl.ins.addObj(iFrame)\n    }\n\n    removeObj(Iframe: any) {\n        FrameControl.ins.removeObj(Iframe)\n        AbsObjFactory.put(Iframe)\n    }\n\n    exitFight() {\n        this.isExitIng = true\n\n        this.rootView.scheduleOnce(() => {\n            FrameControl.ins.recycleAll()\n            PvpControl.ins.recycleAll()\n            /** UI上需要回收资源的组件 */\n            let uiRecycles = [DeadEffectUI, EffectUI]\n            for (let index = 0; index < uiRecycles.length; index++) {\n                const v = uiRecycles[index];\n                let effs = this.rootView.node.getComponentsInChildren(v.name)\n                effs.forEach(v => {\n                    if (v.isValid && v.node.isValid) {\n                        v[\"remove\"]()\n                    }\n                })\n            }\n        })\n    }\n\n    onDestory() {\n        console.log(\"战斗对象池销毁---\")\n        if (FightData.ins.isDestory) {\n            return\n        }\n        FightData.ins.isDestory = true\n        this.rootView.scheduleOnce(() => {\n            AbsObjFactory.destroy()\n            PvpObjFactory.destroy()\n            BuffUI.destory()\n            EffectUI.destory()\n            ShadowEffect.destory()\n\n            DamageLab.destroy()\n            DamageData.destroy()\n            AbsOwner.destroy()\n            Avatar.destory()\n            Sound.ins.destroyFightEffect()\n\n\n            if (this.fightResult == proto.Msg_FinishStageReq.Result.Quit || FightMsgControl.ins.isTest) {\n                this.enterMain()\n            }\n        })\n    }\n    lsit: number[] = [\n        10001,\n        10002,\n        10003,\n        10004,\n        10101,\n        10102,\n        10103,\n        10201,\n        10202,\n        10203,\n    ]\n    async enterMain() {\n        PvpControl.ins.purge()\n        PlayerControl.ins.destroy()\n        FightData.ins.purge()\n        SceneMgr.ins.leaveFight(FightMsgControl.ins.isTest)\n    }\n\n\n    timeInMonster() {\n\n        // //定时刷怪\n        let i = 1;\n        this.rootView.schedule(() => {\n            if (this.isExitIng) {\n                return\n            }\n            let len = FrameControl.ins.getObjList(AbsObjType.enemy).length\n            if (!this.isTestChuguai) {\n                return\n            }\n            if (PlayerControl.ins.getLeader() == null) {\n                return\n            }\n            if (len < this.max) {\n                this.createEnemy(this.lsit[Func.random(0, this.lsit.length - 1)]);\n                i++;\n            }\n        }, 0.1);\n    }\n\n    createEnemy(monsterId?: number) {\n        let info = AbsObjFactory.getData(AbsObjType.enemy) as MonsterInfo\n        info.setConfigId(monsterId || 1001)\n        info.speed = 50\n        info.setAttrList([\n        ].concat(TestAttr.defanse))\n        info.init()\n\n        //以主角为中心进行刷怪\n        tempPos.x = Func.random(0, 200)\n        tempPos.y = Func.random(-300, 300)\n        tempPos.z = 0\n        MonsterControl.ins.addMonster(info, tempPos)\n    }\n\n\n    getCount() {\n        return this.rootView.getRendderCout()\n    }\n}\n\n"]}