{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/wave/WaveTimeControl.ts"],"names":["_decorator","Vec3","AbsControl","PhaseclearType","MonsterControl","FightRootControl","FightState","EventMgr","FightEvent","FrameControl","AbsObjType","UIMgr","PlayerControl","FightData","ViewName","ccclass","property","tempPos","Seconds_1000","WaveTimeControl","levelJson","secondsTime","nowPhaseIndex","_nowTotalTime","totalTime","phaseTimeIndex","isPhaseTimeComplete","Cycless","dtTime","ins","_instance","init","register","length","onFight","Fight_Start","onFightStart","Fight_Monster_Dead","onFight_Monster_Dead","Select_leader","onSelect_leader","setStageJson","abs","isNext","levelPhase","info","isBoss","phaseclearcondition","bossDead","allDead","isAllDeadByObjType","enemy","checkNextPhase","isTime","updateSeconds","stageJson","getTotalTime","initPhase","nowTotalTime","Math","min","phaseTime","updatePhase","time","addPhaseCount","list","getObjList","index","v","isDead","console","log","phaseComplete","isFight","phaseList","hasPhase","emitFight","Clear_All_Monster","setState","end","setNowPhase","Enter_New_PhaseCount","getLeader","iFightUpdate","dt","isCyclesOver","splice","isTrigger","updateTime","inCycles","phaseOverTime","len","times","inLevelphaseTime","lpt","inTime","isMonster","inMonster","push","cycles","count","isWarning","inWarning","addMonsterByLevelPhaseTime","show","viewName","WarningPop","data","warning","Warning"],"mappings":"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","sourcesContent":["import { _decorator, CCInteger, Color, Component, director, instantiate, Label, Node, Prefab, Quat, Rect, sp, Sprite, tween, UITransform, Vec2, Vec3, view } from 'cc';\nimport { AbsControl } from '../../../framework/base/IAbs';\nimport { Leveljson, LevelPhaseTime, PhaseclearType } from '../table/Leveljson';\nimport { MonsterControl } from '../base/obj/role/monster/MonsterControl';\nimport { FightRootControl, FightState } from '../FightRootControl';\nimport { EventMgr } from '../../mgr/EventMgr';\nimport { FightEvent } from '../define/FightEvent';\nimport { AbsRole } from '../base/obj/role/AbsRole';\nimport { Monster } from '../base/obj/role/monster/Monster';\nimport { FrameControl } from '../base/frame/FrameControl';\nimport { AbsObjType } from '../base/obj/AbsObj';\nimport { ShowTips, UIMgr } from '../../mgr/UIMgr';\nimport { PlayerControl } from '../base/obj/role/role/PlayerControl';\nimport { FightData } from '../data/FightData';\nimport { ViewName } from '../../define/ViewDefine';\nimport { IFightUpdate } from '../define/FightDefine';\nimport { GuideController } from '../../guide/GuideController';\nimport { LocalEvent } from '../../define/LocalEvent';\n\n\nconst { ccclass, property } = _decorator;\n\nconst tempPos = new Vec3(0, 0, 0);\nconst Seconds_1000 = 1000;\n/** 波次 时间 */\n@ccclass('WaveTimeControl')\nexport class WaveTimeControl extends AbsControl implements IFightUpdate {\n\n    private static _instance: WaveTimeControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new WaveTimeControl();\n        }\n        return this._instance;\n    }\n    levelJson: Leveljson = null\n    /** 时间 秒 */\n    secondsTime: number = 0\n    //波次\n    nowPhaseIndex: number = 0\n    /** 当前总时间 */\n    _nowTotalTime: number\n    /** 总时间 */\n    totalTime: number\n\n    /** 阶段时间索引 */\n    phaseTimeIndex: number = 0\n    /** 阶段时间完成 */\n    isPhaseTimeComplete: boolean = false\n\n    /** 周期出怪数组 */\n    Cycless: LevelPhaseTime[] = []\n\n\n    private dtTime: number = 0\n    init(): void {\n        this.register()\n        this.levelJson = null\n        this.secondsTime = 0\n        this.dtTime = 0\n        this.nowPhaseIndex = 0\n        this._nowTotalTime = 0\n        this.isPhaseTimeComplete = false\n        this.Cycless.length = 0\n    }\n\n    register(): void {\n        EventMgr.onFight(FightEvent.Fight_Start, this.onFightStart, this)\n        EventMgr.onFight(FightEvent.Fight_Monster_Dead, this.onFight_Monster_Dead, this)\n        EventMgr.onFight(FightEvent.Select_leader, this.onSelect_leader, this)\n    }\n\n    onFightStart() {\n        this.setStageJson(FightData.ins.levelJson)\n    }\n\n\n    onFight_Monster_Dead(abs: Monster) {\n        if (!this.isPhaseTimeComplete) {//阶段时间未完成\n            return\n        }\n\n        let isNext = false\n        if (this.levelJson.levelPhase) {\n            if (abs.info.isBoss && this.levelJson.levelPhase.phaseclearcondition == PhaseclearType.bossDead) {\n                //boss死亡， 进入下一阶段\n                isNext = true\n\n            } else if (this.levelJson.levelPhase.phaseclearcondition == PhaseclearType.allDead) {\n                //全部清除， 进入下一阶段\n                isNext = FrameControl.ins.isAllDeadByObjType(AbsObjType.enemy)\n            }\n        }\n\n        if (isNext) {\n            this.checkNextPhase()\n        }\n    }\n\n    onSelect_leader() {\n        if (!FightRootControl.ins.isTime) {\n            return\n        }\n        this.updateSeconds()\n    }\n\n    setStageJson(stageJson: Leveljson) {\n        this.levelJson = stageJson\n        this.totalTime = this.levelJson.getTotalTime()\n\n        this.initPhase()\n    }\n\n    get nowTotalTime() {\n        if (this.levelJson && this.levelJson.levelPhase) {\n            return this._nowTotalTime + Math.min(this.levelJson.levelPhase.phaseTime, this.secondsTime)\n        }\n        return 0\n    }\n\n    initPhase() {\n        this.secondsTime = 0\n        this.nowPhaseIndex = 0\n        this.Cycless.length = 0\n        this.updatePhase()\n    }\n\n    /** 检测下一个阶段 */\n    checkNextPhase() {\n        if (this.levelJson.levelPhase.phaseclearcondition == PhaseclearType.time) {//时间---\n            this.addPhaseCount()\n        } else if (this.levelJson.levelPhase.phaseclearcondition == PhaseclearType.bossDead) {//BOSS死亡---\n            let list: Monster[] = FrameControl.ins.getObjList(AbsObjType.enemy) as Monster[]\n            for (let index = 0; index < list.length; index++) {\n                const v = list[index];\n                if (v.info && v.info.isBoss) {\n                    if (!v.isDead) {\n                        console.log(\"boss存活, 等待boss死亡---\")\n                        return\n                    }\n                }\n            }\n            this.addPhaseCount()\n        } else if (this.levelJson.levelPhase.phaseclearcondition == PhaseclearType.allDead) {//全部清除---\n            let isDead = FrameControl.ins.isAllDeadByObjType(AbsObjType.enemy)\n            if (!isDead) {\n                console.log(\"等待怪物全部清除---\")\n                return\n            }\n            this.addPhaseCount()\n        }\n\n    }\n    /** 阶段完成 */\n    phaseComplete() {\n        this.isPhaseTimeComplete = true\n        console.log(\"当前阶段时间完成---\")\n        this.checkNextPhase()\n    }\n\n    /** 增加阶段 */\n    addPhaseCount() {\n        if (!FightRootControl.ins.isFight()) {\n            return\n        }\n        console.log(\"进入下一阶段---\")\n        this.isPhaseTimeComplete = false\n        this.secondsTime = 0\n        this.dtTime = 0\n\n        this._nowTotalTime = 0\n        for (let index = 0; index <= this.nowPhaseIndex; index++) {\n            const v = this.levelJson.phaseList[index];\n            if (v) {\n                this._nowTotalTime += v.phaseTime\n            }\n        }\n\n\n        this.nowPhaseIndex += 1\n        if (this.levelJson.hasPhase(this.nowPhaseIndex)) {\n            this.updatePhase()\n        } else {\n            this.isPhaseTimeComplete = true\n            console.log(\"没有下一阶段---胜利？\")\n            EventMgr.emitFight(FightEvent.Clear_All_Monster)\n            FightRootControl.ins.setState(FightState.end, true)\n        }\n    }\n\n    updatePhase() {\n        this.levelJson.setNowPhase(this.nowPhaseIndex)\n        this.phaseTimeIndex = 0\n        this.Cycless.length = 0\n        EventMgr.emitFight(FightEvent.Enter_New_PhaseCount)\n        if (PlayerControl.ins.getLeader() == null) {\n            return\n        }\n        this.updateSeconds()\n    }\n\n    iFightUpdate(dt: number) {\n        if (PlayerControl.ins.getLeader() == null) {\n            return\n        }\n        if (!FightRootControl.ins.isTime) {\n            return\n        }\n        if (this.isPhaseTimeComplete) {\n            return\n        }\n\n        this.dtTime += dt\n\n        for (let index = this.Cycless.length - 1; index >= 0; index--) {\n            const v = this.Cycless[index];\n            if (v.isCyclesOver()) {\n                // console.log(\"触发移除\", v)\n                this.Cycless.splice(index, 1)\n                continue\n            }\n            let isTrigger = v.updateTime(dt)\n            isTrigger && this.inCycles(v)\n        }\n\n        if (this.dtTime > Seconds_1000) {\n            this.dtTime -= Seconds_1000\n            this.secondsTime += 1\n            this.updateSeconds()\n        }\n    }\n\n    /** 更新秒时间 */\n    updateSeconds() {\n        if (this.secondsTime == this.levelJson.levelPhase.phaseOverTime) {\n            this.phaseComplete()\n            return\n        }\n\n        let len = this.levelJson.levelPhase.times.length\n        for (let index = this.phaseTimeIndex; index < len; index++) {\n            const v = this.levelJson.levelPhase.times[index];\n            if (v.time == this.secondsTime) {\n                this.inLevelphaseTime(v)\n                this.phaseTimeIndex = index\n            }\n        }\n    }\n\n    inLevelphaseTime(lpt: LevelPhaseTime) {\n        lpt.inTime = true\n        // console.log(\"处理\", this.nowPhaseIndex, \"时间index\", lpt)\n        if (lpt.isMonster()) {\n            this.inMonster(lpt)\n            if (!lpt.isCyclesOver()) {\n                this.Cycless.push(lpt)\n            } else if (lpt.cycles == 0) {\n                for (let index = 1; index < lpt.count; index++) {\n                    this.inMonster(lpt)\n                }\n            }\n        } else if (lpt.isWarning()) {\n            this.inWarning(lpt)\n        }\n    }\n\n    inCycles(lpt: LevelPhaseTime) {\n        // console.log(\"触发\", this.nowPhaseIndex, \"时间index\", this.phaseTimeIndex, lpt.nowCount, lpt.count)\n        if (lpt.isMonster()) {\n            this.inMonster(lpt)\n        } else if (lpt.isWarning()) {\n            this.inWarning(lpt)\n        }\n    }\n\n    inMonster(lpt: LevelPhaseTime) {\n        // console.log(\"出怪\")\n        MonsterControl.ins.addMonsterByLevelPhaseTime(lpt)\n    }\n\n    inWarning(lpt: LevelPhaseTime) {\n        console.log(\"警告\")\n        UIMgr.ins.show({ viewName: ViewName.WarningPop, data: lpt.warning })\n        EventMgr.emitFight(FightEvent.Warning, lpt.warning)\n    }\n}\n\n"]}