{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/guide/Locator.ts"],"names":["findChildNodeByName","pNode","strName","needActive","isValid","name","Scene","activeInHierarchy","child","children","pChildFind","_decorator","log","DefaultLocatorTimeOut","ccclass","property","Locator","parse","locator","names","split","segments","map","index","indexOf","symbol","trim","seekNodeByName","root","locateNode","cb","locating","startTime","Date","now","node","i","length","item","getChildByName","active","setTimeout","getNodeFullPath","array","temp","unshift","parent","join","timeout"],"mappings":"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","sourcesContent":["import { _decorator, isValid ,log,Node, Scene} from \"cc\";\r\n\r\nexport let DefaultLocatorTimeOut = 8000;\r\n\r\n/**\r\n * @object\r\n * Location主要用从场景树中检索UI节点\r\n */\r\n\r\nconst { ccclass, property } = _decorator;\r\n@ccclass\r\nexport class Locator {\r\n    static locating = false;\r\n    static startTime: number;\r\n    static timeout: number = DefaultLocatorTimeOut;\r\n    /**\r\n     * 定位解析\r\n     * @param locator\r\n     * @returns {Array}\r\n     */\r\n    static parse(locator) {\r\n        log(locator, 'locator string is null');\r\n        //使用正则表达示分隔名字\r\n        let names = locator.split(/[.,//,>,#]/g);\r\n        let segments = names.map(function (name) {\r\n            let index = locator.indexOf(name);\r\n            let symbol = locator[index - 1] || '>';\r\n            return { symbol: symbol, name: name.trim() };\r\n        });\r\n        // console.log('segments----->', segments);\r\n        return segments;\r\n    }\r\n\r\n    /**\r\n     * 通过节点名搜索节点对象\r\n     * @param root\r\n     * @param name\r\n     * @returns {*}\r\n     */\r\n    static seekNodeByName(root, name) {\r\n        return findChildNodeByName(root, name, true)\r\n    }\r\n\r\n    /**\r\n     * 在root节点中，定位locator\r\n     * @param root\r\n     * @param locator\r\n     * @param cb\r\n     */\r\n    static locateNode(root, locator, cb) {\r\n        if(!isValid(root)) {\r\n            //root已经销毁，不要再在它下面找了\r\n            cb('locateNode root is not valid')\r\n            return null;\r\n        }\r\n\r\n        if (!Locator.locating) {\r\n            Locator.startTime = Date.now();\r\n            Locator.locating = true;\r\n        }\r\n\r\n        let segments = Locator.parse(locator);\r\n        let child, node = root;\r\n        for (let i = 0; i < segments.length; i++) {\r\n            let item = segments[i];\r\n            switch (item.symbol) {\r\n                case '/':\r\n                case '_':\r\n                    child = node.getChildByName(item.name);\r\n                    break;\r\n                case '.':\r\n                    child = node[item.name];\r\n                    break;\r\n                case '>':\r\n                    child = Locator.seekNodeByName(node, item.name);\r\n                    break;\r\n            }\r\n\r\n            if (!child) {\r\n                node = null;\r\n                break;\r\n            }\r\n            node = child;\r\n        }\r\n\r\n        if (node && node.active && cb) {\r\n            Locator.locating = false;\r\n            cb(null, node);\r\n        } else if (cb) {\r\n            if (false/*Date.now() - Locator.startTime > Locator.timeout*/) {\r\n                //超时还找不到节点，返回错误\r\n                cb(`timeout: ${locator} `);\r\n            } else {\r\n                setTimeout(function () {\r\n                    Locator.locateNode(root, locator, cb);\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    static getNodeFullPath(node) {\r\n        let array = [];\r\n        let temp = node;\r\n        do {\r\n            array.unshift(temp.name);\r\n            temp = temp.parent;\r\n        } while (temp && temp.name !== 'Canvas')\r\n        return array.join('/');\r\n    }\r\n}\r\n\r\nexport function findChildNodeByName(pNode:Node, strName:string, needActive=false) {\r\n\r\n\tif(!pNode || !isValid(pNode)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tif (pNode.name == strName) {\r\n\t\tif(needActive) {\r\n\t\t\tif(pNode instanceof Scene || pNode.activeInHierarchy) {\r\n\t\t\t\t//scene没有activeInHierarchy\r\n\t\t\t\treturn pNode;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!needActive || pNode.activeInHierarchy) {\r\n\t\t\treturn pNode;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let child of pNode.children) {\r\n\t\tlet pChildFind = findChildNodeByName(child, strName, needActive);\r\n\t\tif (pChildFind) {\r\n\t\t\treturn pChildFind;\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n"]}