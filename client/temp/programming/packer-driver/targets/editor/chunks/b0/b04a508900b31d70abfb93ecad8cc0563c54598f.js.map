{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/cheat/RevoltCheatControl.ts"],"names":["_decorator","AbsControl","EventMgr","FightEvent","proto","FightData","RogueControl","Fixed","PlayerControl","ccclass","property","RevoltCheatControl","bossDatas","bossMap","Map","ins","_instance","init","register","clear","length","onFight","Fight_Start","onFightStart","Boss_Enter","onBoss_Enter","Fight_Monster_Dead","onFight_Monster_Dead","Fight_Initiative_Revive","onFight_Initiative_Revive","getBoss","bossId","index","getBossByObjId","objId","get","getBossList","absRole","dd","StageBossFightData","info","configId","bossSerial","weaponList","getSelectAllIdList","startTime","toFixed","time","fightTime","heroList","getHeroList","combatData","push","set","console","error","list","roles","getRoles","role","StageFightHeroData","heroClass","configTab","Class","heroSerial","hp","attrData","bufferList","buffs","buff","buffData","StageFightBufferData","bufferId","buffId","createTime","addTime","layer","ruleNumber","adder","addOwner","target","owner","isBoss","boss","reviveRecord","addRogue","rogueId","StageFightExtraWeaponData","timestamp","weaponId","extraWeaponList","addBulletDamage","bullet","attack","defanse","damageData","CombatData","ev","CombatEvent","Attack","CombatEventAttack","attacker","bulletId","isFatalAtk","isCritical","isCriticalPoint","damage","addBuff","ownerRole","addCombatDataByBuff","createAddBuff","AddBuffer","addBuffer","CombatEventAddBuffer","removeBuff","isAdd","isRole","createRemoveBuff","RemoveBuffer","removeBuffer","CombatEventRemoveBuffer"],"mappings":"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","sourcesContent":["import { _decorator, CCInteger, Color, Component, instantiate, Label, Node, Prefab, Quat, Rect, Size, sp, Sprite, tween, UITransform, Vec2, Vec3, view } from 'cc';\nimport { AbsControl } from '../../../framework/base/IAbs';\nimport { EventMgr } from '../../mgr/EventMgr';\nimport { FightEvent } from '../define/FightEvent';\nimport { proto } from 'client_protocol';\nimport { Monster } from '../base/obj/role/monster/Monster';\nimport { FightData } from '../data/FightData';\nimport { RogueControl } from '../view/rogue/RogueControl';\nimport Fixed from '../../../framework/collision/Fixed';\nimport { AbsRole } from '../base/obj/role/AbsRole';\nimport { PlayerControl } from '../base/obj/role/role/PlayerControl';\nimport { Bullet } from '../base/obj/bullet/Bullet';\nimport { DamageData } from '../base/damage/DamageData';\nimport { Buff } from '../base/buff/Buff';\nimport { LocalEvent } from '../../define/LocalEvent';\nimport { GuideController } from '../../guide/GuideController';\nimport { RoleData } from '../../model/role/RoleData';\n\nconst { ccclass, property } = _decorator;\n\n/**\n * 反作弊控制器\n */\n@ccclass('RevoltCheatControl')\nexport class RevoltCheatControl extends AbsControl {\n    private static _instance: RevoltCheatControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new RevoltCheatControl();\n            this._instance.init();\n        }\n        return this._instance;\n    }\n\n\n    bossDatas: proto.StageBossFightData[] = []\n    bossMap: Map<number, proto.StageBossFightData> = new Map()\n    init(): void {\n        this.register()\n        this.clear()\n    }\n\n    clear() {\n        this.bossMap.clear()\n        this.bossDatas.length = 0\n    }\n\n    register(): void {\n        EventMgr.onFight(FightEvent.Fight_Start, this.onFightStart, this)\n        EventMgr.onFight(FightEvent.Boss_Enter, this.onBoss_Enter, this)\n        EventMgr.onFight(FightEvent.Fight_Monster_Dead, this.onFight_Monster_Dead, this)\n        EventMgr.onFight(FightEvent.Fight_Initiative_Revive, this.onFight_Initiative_Revive, this)\n    }\n\n    onFightStart() {\n        this.clear()\n    }\n\n    getBoss(bossId: number) {\n        for (let index = this.bossDatas.length - 1; index >= 0; index--) {\n            if (this.bossDatas[index].bossId == bossId) {\n                return this.bossDatas[index]\n            }\n        }\n    }\n\n    getBossByObjId(objId: number) {\n        return this.bossMap.get(objId)\n    }\n\n\n    getBossList() {\n        return this.bossDatas\n    }\n\n    onBoss_Enter(absRole: Monster) {\n        let dd = new proto.StageBossFightData()\n        dd.bossId = absRole.info.configId\n        dd.bossSerial = absRole.objId\n        dd.weaponList = RogueControl.ins.getSelectAllIdList()\n        dd.startTime = Fixed.toFixed(FightData.time / 1000)  //先记录出生时间\n        dd.fightTime = 0\n        dd.heroList = this.getHeroList()\n        dd.combatData = []\n        this.bossDatas.push(dd)\n        this.bossMap.set(dd.bossSerial, dd)\n        console.error(\"boss出场\", dd, this.bossDatas)\n    }\n\n    getHeroList() {\n        let list = []\n        let roles = PlayerControl.ins.getRoles()\n        for (let index = 0; index < roles.length; index++) {\n            const role = roles[index];\n            let dd = new proto.StageFightHeroData()\n            dd.heroClass = role.info.configTab.Class\n            dd.heroSerial = role.objId\n            dd.hp = role.info.attrData.hp\n\n            dd.bufferList = []\n            for (let index = 0; index < role.info.buffs.length; index++) {\n                let buff = role.info.buffs[index];\n                let buffData = new proto.StageFightBufferData()\n                buffData.bufferId = buff.buffId\n                buffData.createTime = Fixed.toFixed(buff.addTime)\n                buffData.layer = buff.ruleNumber\n                buffData.adder = buff.addOwner.objId\n                buffData.target = buff.owner.objId\n\n                dd.bufferList.push(buffData)\n            }\n\n            list.push(dd)\n        }\n\n        return list\n    }\n\n    /** boss死亡 */\n    onFight_Monster_Dead(absRole: Monster) {\n        if (absRole.info && absRole.info.isBoss) {\n            let boss = this.getBossByObjId(absRole.objId)\n            if (boss) {\n                boss.fightTime = Fixed.toFixed(FightData.time / 1000)\n                console.error(\"boss死亡\", boss, this.bossDatas)\n            }\n        }\n    }\n\n    /** 鸡 复活 */\n    onFight_Initiative_Revive(absRole: AbsRole) {\n        for (let index = 0; index < this.bossDatas.length; index++) {\n            const boss = this.bossDatas[index];\n            if (boss.fightTime == 0) {\n                boss.reviveRecord.push(absRole.info.configId)\n            }\n        }\n    }\n\n    addRogue(rogueId:number){\n        for (let index = 0; index < this.bossDatas.length; index++) {\n            const boss = this.bossDatas[index];\n            if (boss.fightTime == 0) {\n                let dd = new proto.StageFightExtraWeaponData()\n                dd.timestamp = FightData.time\n                dd.weaponId = rogueId\n                boss.extraWeaponList.push(dd)\n            }\n        }\n    }\n\n    //造成伤害\n    addBulletDamage(bullet: Bullet, attack: AbsRole, defanse: AbsRole, damageData: DamageData) {\n        let boss = this.getBossByObjId(defanse.objId)\n        if (boss) {\n            let dd = new proto.CombatData()\n            dd.timestamp = FightData.time\n            dd.ev = proto.CombatEvent.Attack\n            dd.attack = new proto.CombatEventAttack()\n            dd.attack.attacker = bullet.owner.objId\n            dd.attack.bulletId = bullet.info.configId\n            dd.attack.target = defanse.objId\n            dd.attack.isFatalAtk = damageData.isCritical //会心\n            dd.attack.isCritical = damageData.isCriticalPoint//暴击\n            dd.attack.damage = damageData.damage\n\n            boss.combatData.push(dd)\n        }\n    }\n\n    addBuff(ownerRole: AbsRole, buff: Buff) {\n        this.addCombatDataByBuff(true, ownerRole, buff)\n    }\n\n    createAddBuff(buff: Buff) {\n        let addBuff = new proto.CombatData()\n        addBuff.timestamp = FightData.time\n        addBuff.ev = proto.CombatEvent.AddBuffer\n        addBuff.addBuffer = new proto.CombatEventAddBuffer()\n        addBuff.addBuffer.bufferId = buff.buffId\n        addBuff.addBuffer.adder = buff.addOwner.objId\n        addBuff.addBuffer.target = buff.owner.objId\n        addBuff.addBuffer.layer = buff.ruleNumber\n        return addBuff\n    }\n\n    removeBuff(ownerRole: AbsRole, buff: Buff) {\n        this.addCombatDataByBuff(false, ownerRole, buff)\n    }\n\n    addCombatDataByBuff(isAdd: boolean, ownerRole: AbsRole, buff: Buff) {\n        if (ownerRole && ownerRole.isRole()) {\n            for (let index = 0; index < this.bossDatas.length; index++) {\n                const boss = this.bossDatas[index];\n                if (boss.fightTime == 0) {\n                    boss.combatData.push(isAdd ? this.createAddBuff(buff) : this.createRemoveBuff(buff))\n                }\n            }\n        } else if (buff && buff.owner) {\n            let boss = this.getBossByObjId(buff.owner.objId)\n            if (boss) {\n                boss.combatData.push(isAdd ? this.createAddBuff(buff) : this.createRemoveBuff(buff))\n            }\n        }\n    }\n\n    createRemoveBuff(buff: Buff) {\n        let removeBuff = new proto.CombatData()\n        removeBuff.timestamp = FightData.time\n        removeBuff.ev = proto.CombatEvent.RemoveBuffer\n        removeBuff.removeBuffer = new proto.CombatEventRemoveBuffer()\n        removeBuff.removeBuffer.bufferId = buff.buffId\n        removeBuff.removeBuffer.owner = buff.addOwner.objId\n        removeBuff.removeBuffer.layer = buff.ruleNumber\n        return removeBuff\n    }\n}\n\n"]}