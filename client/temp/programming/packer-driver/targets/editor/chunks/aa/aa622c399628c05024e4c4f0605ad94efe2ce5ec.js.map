{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/frame/FrameControl.ts"],"names":["_decorator","game","AbsControl","ColliderMgr","AbsObjType","EventMgr","FightEvent","ccclass","property","FrameControl","ins","_instance","constructor","allAbsObj","Map","absAllMap","intervalColliderAbss","dtTime","init","register","clear","length","key","set","frameRate","frameIndex","sortIndex","onFight","Pause","onPause","Time_Scale","onTime_Scale","deal_clear_bullet","onDeal_clear_bullet","bo","updatePause","time","updateTimeScale","abs","objList","getObjList","bullet","len","index","v","owner","objId","onOwnerDeal","addObj","objType","push","isCollisionInterval","removeCollisionInterval","splice","removeObj","delete","get","getObjById","updateAllBound","forEach","list","k","initGraphics","iFightUpdate","dt","updateFrame","emitFight","Sort_AbsRole","preCollider","lateCollider","absObjUpdateFrame","pause","avatar","timeScale","isAllDeadByObjType","absType","isDead","isActive","isDeadComplete","recycleAll","v1","isRecycle","recycle","getHasLen","console","log","inst","getBodyLen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAyCC,MAAAA,I,OAAAA,I;;AACzCC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,W,iBAAAA,W;;AACQC,MAAAA,U,iBAAAA,U;;AACRC,MAAAA,Q,iBAAAA,Q;;AAKAC,MAAAA,U,iBAAAA,U;;;;;;;;;OAIH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;8BAGjBS,Y,WADZF,OAAO,CAAC,cAAD,C,2BAAR,MACaE,YADb;AAAA;AAAA,oCACqE;AAE5C,mBAAHC,GAAG,GAAG;AACpB,cAAI,QAAQ,KAAKC,SAAjB,EAA4B;AACxB,iBAAKA,SAAL,GAAiB,IAAIF,YAAJ,EAAjB;AACH;;AACD,iBAAO,KAAKE,SAAZ;AACH;;AASDC,QAAAA,WAAW,GAAG;AACV;AADU,eAPNC,SAOM,GAP6B,IAAIC,GAAJ,EAO7B;;AANd;AAMc,eALNC,SAKM,GAL2B,IAAID,GAAJ,EAK3B;;AAHd;AAGc,eAFNE,oBAEM,GAF2B,EAE3B;AAAA,eAwGdC,MAxGc,GAwGG,CAxGH;AAEb;;AAGDC,QAAAA,IAAI,GAAS;AACT,eAAKC,QAAL;AACA,eAAKN,SAAL,CAAeO,KAAf;AACA,eAAKL,SAAL,CAAeK,KAAf;AACA,eAAKJ,oBAAL,CAA0BK,MAA1B,GAAmC,CAAnC;;AACA,eAAK,MAAMC,GAAX;AAAA;AAAA,wCAA8B;AAC1B,gBAAI,OAAO;AAAA;AAAA,0CAAWA,GAAX,CAAP,IAA0B,QAA9B,EAAwC;AACpC,mBAAKT,SAAL,CAAeU,GAAf,CAAmBD,GAAnB,EAAwB,EAAxB;AACH;AACJ;;AACDrB,UAAAA,IAAI,CAACuB,SAAL,GAAiB,EAAjB;AACAf,UAAAA,YAAY,CAACgB,UAAb,GAA0B,CAA1B;AACAhB,UAAAA,YAAY,CAACiB,SAAb,GAAyB,CAAzB;AACH;;AAEDP,QAAAA,QAAQ,GAAS;AACb;AAAA;AAAA,oCAASQ,OAAT,CAAiB;AAAA;AAAA,wCAAWC,KAA5B,EAAmC,KAAKC,OAAxC,EAAiD,IAAjD;AACA;AAAA;AAAA,oCAASF,OAAT,CAAiB;AAAA;AAAA,wCAAWG,UAA5B,EAAwC,KAAKC,YAA7C,EAA2D,IAA3D;AACA;AAAA;AAAA,oCAASJ,OAAT,CAAiB;AAAA;AAAA,wCAAWK,iBAA5B,EAA+C,KAAKC,mBAApD,EAAyE,IAAzE;AAEH;;AAEDJ,QAAAA,OAAO,CAACK,EAAD,EAAc;AACjB,eAAKC,WAAL,CAAiBD,EAAjB;AACH;;AACDH,QAAAA,YAAY,CAACK,IAAD,EAAe;AACvB,eAAKC,eAAL,CAAqBD,IAArB;AACH;;AAEDH,QAAAA,mBAAmB,CAACK,GAAD,EAAe;AAC9B;AACA,cAAIC,OAAO,GAAG,KAAKC,UAAL,CAAgB;AAAA;AAAA,wCAAWC,MAA3B,CAAd;AACA,cAAIC,GAAG,GAAGH,OAAO,CAAClB,MAAlB;;AACA,eAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,kBAAMC,CAAC,GAAGL,OAAO,CAACI,KAAD,CAAjB;;AACA,gBAAIC,CAAC,CAACC,KAAF,CAAQC,KAAR,IAAiBR,GAAG,CAACQ,KAAzB,EAAgC;AAC5BF,cAAAA,CAAC,CAACG,WAAF;AACH;AACJ;AACJ;;AAEDC,QAAAA,MAAM,CAACV,GAAD,EAAc;AAChB,cAAIC,OAAO,GAAG,KAAKC,UAAL,CAAgBF,GAAG,CAACW,OAApB,CAAd;AACAV,UAAAA,OAAO,CAACW,IAAR,CAAaZ,GAAb;AACA,eAAKvB,SAAL,CAAeQ,GAAf,CAAmBe,GAAG,CAACQ,KAAvB,EAA8BR,GAA9B;;AAEA,cAAIA,GAAG,CAACa,mBAAJ,EAAJ,EAA+B;AAC3B,iBAAKnC,oBAAL,CAA0BkC,IAA1B,CAA+BZ,GAA/B;AACH;AACJ;;AAEDc,QAAAA,uBAAuB,CAACd,GAAD,EAAc;AACjC,cAAIA,GAAG,CAACa,mBAAJ,EAAJ,EAA+B;AAC3B,gBAAIZ,OAAO,GAAG,KAAKvB,oBAAnB;AACA,gBAAI0B,GAAG,GAAGH,OAAO,CAAClB,MAAlB;;AACA,iBAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,oBAAMC,CAAC,GAAGL,OAAO,CAACI,KAAD,CAAjB;;AACA,kBAAIC,CAAC,IAAIN,GAAT,EAAc;AACVC,gBAAAA,OAAO,CAACc,MAAR,CAAeV,KAAf,EAAsB,CAAtB;AACA,uBAAO,IAAP;AACH;AACJ;AACJ;AACJ;;AAEDW,QAAAA,SAAS,CAAChB,GAAD,EAAc;AACnB,cAAIC,OAAO,GAAG,KAAKC,UAAL,CAAgBF,GAAG,CAACW,OAApB,CAAd;AACA,cAAIP,GAAG,GAAGH,OAAO,CAAClB,MAAlB;AACA,eAAKN,SAAL,CAAewC,MAAf,CAAsBjB,GAAG,CAACQ,KAA1B;AACA,eAAKM,uBAAL,CAA6Bd,GAA7B;;AACA,eAAK,IAAIK,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,kBAAMC,CAAC,GAAGL,OAAO,CAACI,KAAD,CAAjB;;AACA,gBAAIC,CAAC,IAAIN,GAAT,EAAc;AACVC,cAAAA,OAAO,CAACc,MAAR,CAAeV,KAAf,EAAsB,CAAtB;AACA,qBAAO,IAAP;AACH;AACJ;;AACD,iBAAO,KAAP;AACH;;AAEDH,QAAAA,UAAU,CAACS,OAAD,EAAsB;AAC5B,iBAAO,KAAKpC,SAAL,CAAe2C,GAAf,CAAmB;AAAA;AAAA,wCAAWP,OAAX,CAAnB,CAAP;AACH;;AAEDQ,QAAAA,UAAU,CAACX,KAAD,EAAgB;AACtB,iBAAO,KAAK/B,SAAL,CAAeyC,GAAf,CAAmBV,KAAnB,CAAP;AACH;;AAEDY,QAAAA,cAAc,GAAG;AACb,eAAK7C,SAAL,CAAe8C,OAAf,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChC,gBAAInB,GAAG,GAAGkB,IAAI,CAACvC,MAAf;;AAEA,iBAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,oBAAMC,CAAC,GAAGgB,IAAI,CAACjB,KAAD,CAAd;AACAC,cAAAA,CAAC,CAACkB,YAAF;AACH;AACJ,WAPD;AAQH;;AAKDC,QAAAA,YAAY,CAACC,EAAD,EAAmB;AAC3BvD,UAAAA,YAAY,CAACgB,UAAb;AAEA,eAAKwC,WAAL,CAAiBD,EAAjB;AACAvD,UAAAA,YAAY,CAACiB,SAAb;;AACA,cAAIjB,YAAY,CAACiB,SAAb,IAA0B,EAA9B,EAAkC;AAC9BjB,YAAAA,YAAY,CAACiB,SAAb,GAAyB,CAAzB;AACA;AAAA;AAAA,sCAASwC,SAAT,CAAmB;AAAA;AAAA,0CAAWC,YAA9B;AACH;AACJ;;AAEDC,QAAAA,WAAW,GAAG;AACV,cAAI7B,OAAO,GAAG,KAAKvB,oBAAnB;AACA,cAAI0B,GAAG,GAAGH,OAAO,CAAClB,MAAlB;;AACA,eAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,kBAAMC,CAAC,GAAGL,OAAO,CAACI,KAAD,CAAjB;AACAC,YAAAA,CAAC,IAAIA,CAAC,CAACwB,WAAF,EAAL;AACH;AACJ;;AACDC,QAAAA,YAAY,GAAG;AACX,cAAI9B,OAAO,GAAG,KAAKvB,oBAAnB;AACA,cAAI0B,GAAG,GAAGH,OAAO,CAAClB,MAAlB;;AACA,eAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,kBAAMC,CAAC,GAAGL,OAAO,CAACI,KAAD,CAAjB;AACAC,YAAAA,CAAC,IAAIA,CAAC,CAACyB,YAAF,EAAL;AACH;AACJ;;AAEDJ,QAAAA,WAAW,CAACD,EAAD,EAAa;AACpB,eAAKnD,SAAL,CAAe8C,OAAf,CAAuB,CAACf,CAAD,EAAIiB,CAAJ,KAAU;AAC7B,iBAAKS,iBAAL,CAAuB1B,CAAvB,EAA0BoB,EAA1B;AACH,WAFD;AAGH;;AAEDM,QAAAA,iBAAiB,CAACV,IAAD,EAAiBI,EAAjB,EAA6B;AAC1C,cAAItB,GAAG,GAAGkB,IAAI,CAACvC,MAAf;;AAEA,eAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,kBAAMC,CAAC,GAAGgB,IAAI,CAACjB,KAAD,CAAd;AACAC,YAAAA,CAAC,IAAIA,CAAC,CAACqB,WAAF,CAAcD,EAAd,CAAL;AACH;AACJ;;AAED7B,QAAAA,WAAW,CAACoC,KAAD,EAAQ;AACf,eAAK1D,SAAL,CAAe8C,OAAf,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChC,gBAAInB,GAAG,GAAGkB,IAAI,CAACvC,MAAf;;AAEA,iBAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,oBAAMC,CAAC,GAAGgB,IAAI,CAACjB,KAAD,CAAd;;AACA,kBAAIC,CAAC,IAAIA,CAAC,CAAC4B,MAAX,EAAmB;AACf5B,gBAAAA,CAAC,CAAC4B,MAAF,CAASrC,WAAT,CAAqBoC,KAArB;AACH;AACJ;AACJ,WATD;AAUH;;AAEDlC,QAAAA,eAAe,CAACoC,SAAD,EAAoB;AAC/B,eAAK5D,SAAL,CAAe8C,OAAf,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChC,gBAAInB,GAAG,GAAGkB,IAAI,CAACvC,MAAf;;AAEA,iBAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,oBAAMC,CAAC,GAAGgB,IAAI,CAACjB,KAAD,CAAd;;AACA,kBAAIC,CAAC,IAAIA,CAAC,CAAC4B,MAAX,EAAmB;AACf5B,gBAAAA,CAAC,CAAC4B,MAAF,CAASnC,eAAT;AACH;AACJ;AACJ,WATD;AAUH;AAKD;;;AACAqC,QAAAA,kBAAkB,CAACC,OAAD,EAAsB;AACpC,cAAIf,IAAI,GAAG,KAAKpB,UAAL,CAAgBmC,OAAhB,CAAX;AACA,cAAIjC,GAAG,GAAGkB,IAAI,CAACvC,MAAf;;AACA,eAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,kBAAMC,CAAC,GAAGgB,IAAI,CAACjB,KAAD,CAAd;;AACA,gBAAI,CAACC,CAAC,CAACgC,MAAH,IAAahC,CAAC,CAACiC,QAAf,IAA2B,CAACjC,CAAC,CAACkC,cAAlC,EAAkD;AAC9C,qBAAO,KAAP;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;AAED;;;AACAC,QAAAA,UAAU,GAAG;AACT,eAAKlE,SAAL,CAAe8C,OAAf,CAAuB,CAACf,CAAD,EAAIiB,CAAJ,KAAU;AAC7B,gBAAInB,GAAG,GAAGE,CAAC,CAACvB,MAAZ;;AACA,iBAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,GAA5B,EAAiCC,KAAK,EAAtC,EAA0C;AACtC,oBAAMqC,EAAE,GAAGpC,CAAC,CAACD,KAAD,CAAZ;AACA,eAACqC,EAAE,CAACC,SAAJ,IAAiBD,EAAE,CAACE,OAAH,EAAjB;AACH;AACJ,WAND;AAOA,eAAKnE,SAAL,CAAeK,KAAf;AACH;;AAED+D,QAAAA,SAAS,GAAG;AACR,cAAIzC,GAAG,GAAG,CAAV;AACA,eAAK7B,SAAL,CAAe8C,OAAf,CAAuB,CAACf,CAAD,EAAIiB,CAAJ,KAAU;AAC7BnB,YAAAA,GAAG,IAAIE,CAAC,CAACvB,MAAT;AACH,WAFD;AAGA+D,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB3C,GAAzB,EAA6B;AAAA;AAAA,0CAAY4C,IAAZ,CAAiBC,UAAjB,EAA7B;AACA,iBAAO7C,GAAP;AACH;;AAnOgE,O,UAClD/B,S,mBAwHRc,U,GAAqB,C,UACrBC,S,GAAoB,C","sourcesContent":["import { _decorator, CCInteger, Color, Component, game, instantiate, Label, Node, Prefab, Quat, Rect, sp, Sprite, tween, UITransform, Vec2, Vec3 } from 'cc';\nimport { AbsControl } from '../../../../framework/base/IAbs';\nimport { ColliderMgr } from '../../../../framework/collision/ColliderMgr';\nimport { AbsObj, AbsObjType } from '../obj/AbsObj';\nimport { EventMgr } from '../../../mgr/EventMgr';\nimport { Role } from '../obj/role/role/Role';\nimport Fixed from '../../../../framework/collision/Fixed';\nimport { RoleInfo } from '../obj/role/role/RoleInfo';\nimport { WaveTimeControl } from '../../wave/WaveTimeControl';\nimport { FightEvent } from '../../define/FightEvent';\nimport { AbsRole } from '../obj/role/AbsRole';\nimport { Bullet } from '../obj/bullet/Bullet';\nimport { IFightUpdate } from '../../define/FightDefine';\nconst { ccclass, property } = _decorator;\n\n@ccclass('FrameControl')\nexport class FrameControl extends AbsControl implements IFightUpdate {\n    private static _instance: FrameControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new FrameControl();\n        }\n        return this._instance;\n    }\n\n    private allAbsObj: Map<string, AbsObj[]> = new Map<string, AbsObj[]>()\n    /** 根据唯一id记录 */\n    private absAllMap: Map<number, AbsObj> = new Map<number, AbsObj>()\n\n    /** 触碰间隔 */\n    private intervalColliderAbss: AbsObj[] = []\n\n    constructor() {\n        super()\n    }\n\n\n    init(): void {\n        this.register()\n        this.allAbsObj.clear()\n        this.absAllMap.clear()\n        this.intervalColliderAbss.length = 0\n        for (const key in AbsObjType) {\n            if (typeof AbsObjType[key] == 'number') {\n                this.allAbsObj.set(key, [])\n            }\n        }\n        game.frameRate = 60\n        FrameControl.frameIndex = 0\n        FrameControl.sortIndex = 0\n    }\n\n    register(): void {\n        EventMgr.onFight(FightEvent.Pause, this.onPause, this)\n        EventMgr.onFight(FightEvent.Time_Scale, this.onTime_Scale, this)\n        EventMgr.onFight(FightEvent.deal_clear_bullet, this.onDeal_clear_bullet, this)\n        \n    }\n\n    onPause(bo: boolean) {\n        this.updatePause(bo)\n    }\n    onTime_Scale(time: number) {\n        this.updateTimeScale(time)\n    }\n\n    onDeal_clear_bullet(abs: AbsRole) {\n        //刷新下子弹来源死亡\n        let objList = this.getObjList(AbsObjType.bullet) as Bullet[]\n        let len = objList.length\n        for (let index = 0; index < len; index++) {\n            const v = objList[index];\n            if (v.owner.objId == abs.objId) {\n                v.onOwnerDeal()\n            }\n        }\n    }\n\n    addObj(abs: AbsObj) {\n        let objList = this.getObjList(abs.objType)\n        objList.push(abs)\n        this.absAllMap.set(abs.objId, abs)\n\n        if (abs.isCollisionInterval()) {\n            this.intervalColliderAbss.push(abs)\n        }\n    }\n\n    removeCollisionInterval(abs: AbsObj) {\n        if (abs.isCollisionInterval()) {\n            let objList = this.intervalColliderAbss\n            let len = objList.length\n            for (let index = 0; index < len; index++) {\n                const v = objList[index];\n                if (v == abs) {\n                    objList.splice(index, 1)\n                    return true\n                }\n            }\n        }\n    }\n\n    removeObj(abs: AbsObj) {\n        let objList = this.getObjList(abs.objType)\n        let len = objList.length\n        this.absAllMap.delete(abs.objId)\n        this.removeCollisionInterval(abs)\n        for (let index = 0; index < len; index++) {\n            const v = objList[index];\n            if (v == abs) {\n                objList.splice(index, 1)\n                return true\n            }\n        }\n        return false\n    }\n\n    getObjList(objType: AbsObjType) {\n        return this.allAbsObj.get(AbsObjType[objType])\n    }\n\n    getObjById(objId: number) {\n        return this.absAllMap.get(objId)\n    }\n\n    updateAllBound() {\n        this.allAbsObj.forEach((list, k) => {\n            let len = list.length\n\n            for (let index = 0; index < len; index++) {\n                const v = list[index];\n                v.initGraphics()\n            }\n        })\n    }\n\n    dtTime: number = 0\n    static frameIndex: number = 0\n    static sortIndex: number = 0\n    iFightUpdate(dt: number): void {\n        FrameControl.frameIndex++\n\n        this.updateFrame(dt)\n        FrameControl.sortIndex++\n        if (FrameControl.sortIndex >= 60) {\n            FrameControl.sortIndex = 0\n            EventMgr.emitFight(FightEvent.Sort_AbsRole)\n        }\n    }\n\n    preCollider() {\n        let objList = this.intervalColliderAbss\n        let len = objList.length\n        for (let index = 0; index < len; index++) {\n            const v = objList[index];\n            v && v.preCollider()\n        }\n    }\n    lateCollider() {\n        let objList = this.intervalColliderAbss\n        let len = objList.length\n        for (let index = 0; index < len; index++) {\n            const v = objList[index];\n            v && v.lateCollider()\n        }\n    }\n\n    updateFrame(dt: number) {\n        this.allAbsObj.forEach((v, k) => {\n            this.absObjUpdateFrame(v, dt)\n        })\n    }\n\n    absObjUpdateFrame(list: AbsObj[], dt: number) {\n        let len = list.length\n\n        for (let index = 0; index < len; index++) {\n            const v = list[index];\n            v && v.updateFrame(dt)\n        }\n    }\n\n    updatePause(pause) {\n        this.allAbsObj.forEach((list, k) => {\n            let len = list.length\n\n            for (let index = 0; index < len; index++) {\n                const v = list[index];\n                if (v && v.avatar) {\n                    v.avatar.updatePause(pause)\n                }\n            }\n        })\n    }\n\n    updateTimeScale(timeScale: number) {\n        this.allAbsObj.forEach((list, k) => {\n            let len = list.length\n\n            for (let index = 0; index < len; index++) {\n                const v = list[index];\n                if (v && v.avatar) {\n                    v.avatar.updateTimeScale()\n                }\n            }\n        })\n    }\n\n\n\n\n    /** 根据指定类型获取是否全部死亡 */\n    isAllDeadByObjType(absType: AbsObjType) {\n        let list = this.getObjList(absType)\n        let len = list.length\n        for (let index = 0; index < len; index++) {\n            const v = list[index];\n            if (!v.isDead && v.isActive && !v.isDeadComplete) {\n                return false\n            }\n        }\n        return true\n    }\n\n    /** 回收全部对象 */\n    recycleAll() {\n        this.allAbsObj.forEach((v, k) => {\n            let len = v.length\n            for (let index = 0; index < len; index++) {\n                const v1 = v[index];\n                !v1.isRecycle && v1.recycle()\n            }\n        })\n        this.absAllMap.clear()\n    }\n\n    getHasLen() {\n        let len = 0\n        this.allAbsObj.forEach((v, k) => {\n            len += v.length\n        })\n        console.log(\"getHasLen\", len,ColliderMgr.inst.getBodyLen())\n        return len\n    }\n\n\n}\n\n"]}