{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/activity/battlePass/BattlePassItem.ts"],"names":["_decorator","Component","instantiate","Label","Node","ProgressBar","Toggle","UITransform","tab","BattlePassDataMgr","InfiniteList","BattlePassChildToggleItem","BattlePassItemCell","TaskData","LangMgr","dailyBuyShop","setTextTime","PayControl","ItemData","ShowItemNotEnoughTips","ShowTips","proto","Net","RedMgr","RedDotType","ChannelMgr","RoleData","ccclass","property","BattlePassItem","battlePassData","_curPassBattleId","_list","_countDown","onShow","tabName","tabId","ins","getDataByPassName","Id","getData","BattlePassTableById","getValue","item_battle_pass","addChild","cell_item","node_toggle","active","length","createToggleItem","initView","isInit","groupListData","list_view","getContent","getComponent","setAnchorPoint","Init","getCellNumber","getCellCount","bind","getCellSize","getCellWidth","getCellIdentifer","getCellView","getCellData","GetCellData","node","on","onScrolling","Reload","idx","getAwardIndex","count","Math","ceil","TaskIds","pos","GetScrollPosOfCell","setContentPos","x","showAsyncView","data","i","_data","refreshToggleRed","node_toggle_child_content","children","item","toggleItemTs","refreshRed","destroyAllChildren","viewData","toggleItem","toggle_child_item","initData","isChecked","switchView","id","refreshView","Refresh","UpdateContent","taskId","battleId","notSetY","battlePassTab","PassType","BattlePassType","BattlePassType_LoopBattlePass","refreshProgress","offset","getScrollOffset","movex","battlePass","getBattlePassData","tasks","task","getBattlePassTaskInfo","isReceived","RechargeTab","RechargeTableById","RechargeId","node_buy","isBoughtAdvance","lbl_price","string","getSdkRechargeShowPrice","node_lv_progress","node_time","node_advance_lock","unschedule","updateTime","now","getServerUtcTime","endTime","Number","lastResetTime","PassValue","schedule","lbl_count_time","onClickBuyBattlePass","self","requestPay","buyBattlePassData","refreshEvent","Battle_Pass","progress","lv","max","maxLv","taskTab","TaskTableById","FinishParam1","tab1","tab2","taskTab1","taskTab2","_tab1","_taskTab1","lblLv","getChildByName","String","progressBar","onClickBuyBattlePassLv","costItemId","BuyLvCostId","costItemCount","BuyLvCostNum","haveCount","getCount","lvLbl","tips","getLab","pass_msg","Msg_BuyBattlePassLevelReq","Send","Ptl","BuyBattlePassLevelReq"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Label, log, Node, ProgressBar, Toggle, UITransform } from 'cc';\r\nimport { ComponentBase } from '../../../../framework/base/ComponentBase';\r\nimport { tab } from '../../../../Table/table_gen';\r\nimport { BattlePassDataMgr } from './BattlePassDataMgr';\r\nimport InfiniteList from '../../../../Common/InfiniteList/InfiniteList';\r\nimport { BattlePassChildToggleItem } from './BattlePassChildToggleItem';\r\nimport { BattlePassItemCell } from './BattlePassItemCell';\r\nimport { TaskData } from '../../task/TaskData';\r\nimport { LangMgr } from '../../../mgr/LangMgr';\r\nimport { dailyBuyShop, setTextTime } from '../../../utils/GameUtil';\r\nimport { PayControl } from '../../pay/PayControl';\r\nimport { ItemData } from '../../item/ItemData';\r\nimport { ShowItemNotEnoughTips, ShowTips } from '../../../mgr/UIMgr';\r\nimport { proto } from 'client_protocol';\r\nimport { Net } from '../../../net/Net';\r\nimport { RedMgr } from '../../../mgr/RedMgr';\r\nimport { RedDotType } from '../../../red/RedDotType';\r\nimport { ChannelMgr } from '../../../../channel/ChannelMgr';\r\nimport { RoleData } from '../../role/RoleData';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattlePassItem')\r\nexport class BattlePassItem extends Component {\r\n    @property(InfiniteList)\r\n    list_view: InfiniteList = null;\r\n    @property(Node)\r\n    node_toggle_child_content: Node = null;\r\n    @property(Node)\r\n    toggle_child_item: Node = null;\r\n    @property(Node)\r\n    cell_item: Node = null;\r\n    @property(Node)\r\n    item_battle_pass: Node = null;\r\n    @property(Label)\r\n    lbl_price: Label = null;\r\n    @property(Node)\r\n    node_lv_progress: Node = null;\r\n    @property(Node)\r\n    node_time: Node = null;\r\n    @property(Label)\r\n    lbl_count_time: Label = null;\r\n    @property(Node)\r\n    node_advance_lock: Node = null;\r\n    @property(Node)\r\n    node_toggle: Node = null;\r\n    @property(Node)\r\n    node_buy:Node = null;\r\n\r\n    private battlePassData: tab.BattlePassTable[] = [];\r\n    private _curPassBattleId: number = 0;\r\n    private _list: tab.BattlePassTable = null;\r\n    private _countDown: number = 0;\r\n    onShow(tabName: tab.BattlePassTab,tabId?:number) {\r\n        // 根据tabNaem获取信息\r\n        if(!tabId){\r\n            this.battlePassData = BattlePassDataMgr.ins.getDataByPassName(tabName);\r\n            this._curPassBattleId = this.battlePassData[0].Id;\r\n        }else{\r\n            this.battlePassData = [tab.getData().BattlePassTableById.getValue(tabId)];\r\n            this._curPassBattleId = tabId;\r\n        }   \r\n        // 如果数组长度大于1则创建toggle\r\n        this.item_battle_pass.addChild(this.cell_item);\r\n        if(this.node_toggle){\r\n            this.node_toggle.active = this.battlePassData.length > 1;\r\n        }\r\n        if (this.battlePassData.length > 1) {\r\n            //创建toggle\r\n            this.createToggleItem();\r\n        }\r\n        this.initView(true);\r\n    }\r\n    initView(isInit: boolean) {\r\n        this._list = this.groupListData();\r\n        if (isInit) {\r\n            this.list_view.getContent().getComponent(UITransform).setAnchorPoint(0, 0.5);\r\n            this.list_view.Init({\r\n                getCellNumber: this.getCellCount.bind(this),\r\n                getCellSize: this.getCellWidth.bind(this),\r\n                getCellIdentifer: this.getCellIdentifer.bind(this),\r\n                getCellView: this.getCellView.bind(this),\r\n                getCellData: this.GetCellData.bind(this),\r\n            });\r\n            this.list_view.node.on(\"scrolling\", this.onScrolling, this);\r\n        } else {\r\n            this.list_view.Reload(false, true)\r\n        }\r\n        let idx = this.getAwardIndex();\r\n        const count = Math.ceil(890/130);\r\n        if (idx > this._list.TaskIds.length - count) {\r\n            idx = this._list.TaskIds.length - count;\r\n            this.item_battle_pass.active = false;\r\n        } else {\r\n            this.item_battle_pass.active = true;\r\n        }\r\n        const pos = this.list_view.GetScrollPosOfCell(idx);\r\n        this.list_view.setContentPos(-pos.x+65, -pos.x+65, 0);\r\n        this.showAsyncView();\r\n    }\r\n    groupListData() {\r\n        const data = this.battlePassData;\r\n        for (let i = 0; i < data.length; i++) {\r\n            const _data = data[i];\r\n            if (_data.Id === this._curPassBattleId) {\r\n                return _data;\r\n            }\r\n        }\r\n    }\r\n    // 刷新toggle红点\r\n    refreshToggleRed(){\r\n        if(this.node_toggle_child_content&&this.node_toggle_child_content.children.length>0){\r\n            for(let i=0;i<this.node_toggle_child_content.children.length;i++){\r\n                const item = this.node_toggle_child_content.children[i];\r\n                const toggleItemTs = item.getComponent(BattlePassChildToggleItem);\r\n                toggleItemTs.refreshRed();\r\n            }\r\n        }\r\n    }\r\n    // 根据当前数据创建横向页签\r\n    createToggleItem() {\r\n        this.node_toggle_child_content.destroyAllChildren();\r\n        const viewData = this.battlePassData;\r\n        for (let i = 0; i < viewData.length; i++) {\r\n            const toggleItem = instantiate(this.toggle_child_item);\r\n            this.node_toggle_child_content.addChild(toggleItem);\r\n            const toggleItemTs = toggleItem.getComponent(BattlePassChildToggleItem);\r\n            toggleItemTs.initData(viewData[i], this);\r\n            if (i === 0) {\r\n                toggleItem.getComponent(Toggle).isChecked = true;\r\n            }\r\n        }\r\n    }\r\n    switchView(id: number) {\r\n        this._curPassBattleId = id;\r\n        this.initView(false);\r\n    }\r\n    // 刷新界面\r\n    refreshView() {\r\n        this.list_view.Refresh();\r\n        this.refreshToggleRed();\r\n        this.item_battle_pass.children[0].getComponent(BattlePassItemCell).UpdateContent({ taskId: this._list.TaskIds[this._list.TaskIds.length - 1], battleId: this._curPassBattleId, notSetY: true })\r\n        const battlePassTab = tab.getData().BattlePassTableById.getValue(this._curPassBattleId);\r\n        if (battlePassTab.PassType === tab.BattlePassType.BattlePassType_LoopBattlePass) {\r\n            this.refreshProgress();\r\n        }\r\n    }\r\n    getCellCount() {\r\n        return this._list.TaskIds.length;\r\n    }\r\n    getCellWidth() {\r\n        return 130;\r\n    }\r\n    getCellIdentifer() {\r\n        return \"BattlePassItemCell\";\r\n    }\r\n    getCellView() {\r\n        return instantiate(this.cell_item).getComponent(BattlePassItemCell);\r\n    }\r\n    GetCellData(idx: number) {\r\n        return { taskId: this._list.TaskIds[idx], battleId: this._curPassBattleId }\r\n    }\r\n    onScrolling() {\r\n        const offset = this.list_view.getScrollOffset();\r\n        const x = offset.x;\r\n        const movex = this.list_view.GetScrollPosOfCell(this._list.TaskIds.length - 2);\r\n        this.item_battle_pass.active = !((-x + 805) >= movex.x)\r\n    }\r\n    // 获取当前可以领取奖励的index\r\n    getAwardIndex() {\r\n        let idx = 0;\r\n        const battlePass = BattlePassDataMgr.ins.getBattlePassData(this._curPassBattleId);\r\n        for (let i = 0; i < battlePass.tasks.length; i++) {\r\n            const taskId = battlePass.tasks[i].id\r\n            const task = TaskData.ins.getBattlePassTaskInfo(taskId);\r\n            if (task.isReceived) {\r\n                idx = i;\r\n            }\r\n        }\r\n        return idx;\r\n    }\r\n    showAsyncView() {\r\n        this.item_battle_pass.children[0].getComponent(BattlePassItemCell).UpdateContent({ taskId: this._list.TaskIds[this._list.TaskIds.length - 1], battleId: this._curPassBattleId, notSetY: true })\r\n        // 设置购买战令金额\r\n        const battlePassTab = tab.getData().BattlePassTableById.getValue(this._curPassBattleId);\r\n        const RechargeTab = tab.getData().RechargeTableById.getValue(battlePassTab.RechargeId);\r\n        const battlePass = BattlePassDataMgr.ins.getBattlePassData(this._curPassBattleId);\r\n\r\n        this.node_buy.active = !battlePass.isBoughtAdvance;\r\n        this.lbl_price.string =ChannelMgr.getSdkRechargeShowPrice(RechargeTab)// LangMgr.getCombineString(\"ui_commondesc_73\", [RechargeTab.Price]);\r\n        // 购买等级\r\n        if(this.node_lv_progress){\r\n            this.node_lv_progress.active = battlePassTab.PassType === tab.BattlePassType.BattlePassType_LoopBattlePass;\r\n        }\r\n        if(this.node_time){\r\n            this.node_time.active = false;\r\n        }\r\n        this.node_advance_lock.active = !battlePass.isBoughtAdvance;\r\n        this.unschedule(this.updateTime);\r\n        if (battlePassTab.PassType === tab.BattlePassType.BattlePassType_LoopBattlePass) {\r\n            // 周期战令 结束事件\r\n            const now = RoleData.ins.getServerUtcTime()\r\n            const endTime = Number(battlePass.lastResetTime) + battlePassTab.PassValue * 24 * 3600;\r\n            this._countDown = endTime - now;\r\n            this.node_time.active = this._countDown > 0;\r\n            this.updateTime();\r\n            this.schedule(this.updateTime, 1);\r\n            this.refreshProgress();\r\n        }\r\n    }\r\n    updateTime() {\r\n        // 获取刷新周期\r\n        this._countDown--;\r\n        if (this._countDown <= 0) {\r\n            this._countDown = 0;\r\n            this.unschedule(this.updateTime);\r\n        } else {\r\n            this.lbl_count_time.string = setTextTime(this._countDown);\r\n        }\r\n    }\r\n    // 购买战令\r\n    onClickBuyBattlePass() {\r\n        const battlePassTab = tab.getData().BattlePassTableById.getValue(this._curPassBattleId);\r\n        var self = this;\r\n        PayControl.ins.requestPay(battlePassTab.RechargeId, () => {\r\n            BattlePassDataMgr.ins.buyBattlePassData(this._curPassBattleId);\r\n            RedMgr.refreshEvent(RedDotType.Battle_Pass);\r\n            self.refreshView();\r\n            this.node_buy.active = false;\r\n        })\r\n    }\r\n    refreshProgress() {\r\n        // 获取当前进度值\r\n        const battlePass = BattlePassDataMgr.ins.getBattlePassData(this._curPassBattleId);\r\n        let progress = 0;\r\n        let lv = 0;\r\n        let max = 0;\r\n        let maxLv = 0;\r\n        for (let i = 0; i < battlePass.tasks.length; i++) {\r\n            const taskId = battlePass.tasks[i].id;\r\n            const task = TaskData.ins.getBattlePassTaskInfo(taskId)\r\n            const taskTab = tab.getData().TaskTableById.getValue(taskId);\r\n            if(progress<task.progress){\r\n                progress = task.progress;\r\n            }\r\n            if (task.progress < taskTab.FinishParam1) {\r\n                lv = i;\r\n                break;\r\n            }\r\n            if (i === battlePass.tasks.length - 1 && task.progress >= taskTab.FinishParam1) {\r\n                lv = i;\r\n                maxLv = i + 1;\r\n            }\r\n        }\r\n        if (lv > 0) {\r\n            const tab1 = battlePass.tasks[lv].id;\r\n            const tab2 = battlePass.tasks[lv - 1].id;\r\n            const taskTab1 = tab.getData().TaskTableById.getValue(tab1);\r\n            const taskTab2 = tab.getData().TaskTableById.getValue(tab2);\r\n            max = taskTab1.FinishParam1 - taskTab2.FinishParam1;\r\n            progress = progress-taskTab2.FinishParam1;\r\n        } else {\r\n            const _tab1 = battlePass.tasks[lv].id;\r\n            const _taskTab1 = tab.getData().TaskTableById.getValue(_tab1);\r\n            max = _taskTab1.FinishParam1;\r\n            // progress = progress-_taskTab1.FinishParam1;\r\n        }\r\n        const lblLv = this.node_lv_progress.getChildByName(\"lv_txt\").getComponent(Label);\r\n        lblLv.string = maxLv ? String(maxLv) : String(lv);\r\n        const progressBar = this.node_lv_progress.getChildByName(\"score_bar\").getComponent(ProgressBar);\r\n        progressBar.progress = progress / max;\r\n    }\r\n    // 购买战令等级\r\n    onClickBuyBattlePassLv() {\r\n        // 判断钻石是否够\r\n        const battlePassTab = tab.getData().BattlePassTableById.getValue(this._curPassBattleId);\r\n        const costItemId = battlePassTab.BuyLvCostId;\r\n        const costItemCount = battlePassTab.BuyLvCostNum;\r\n        const haveCount = ItemData.ins.getCount(costItemId);\r\n        if (haveCount < costItemCount) {\r\n            ShowItemNotEnoughTips(costItemId);\r\n            return;\r\n        }\r\n        // 判断是否达到最高级\r\n        const lvLbl = this.node_lv_progress.getChildByName(\"lv_txt\").getComponent(Label);\r\n        if (Number(lvLbl.string) >= battlePassTab.TaskIds.length) {\r\n            const tips = LangMgr.getLab(\"ui_equip_18\");\r\n            ShowTips(tips);\r\n            return;\r\n        }\r\n        dailyBuyShop(costItemId,costItemCount,-1,\"Tips_common_buy\",()=>{\r\n            let pass_msg = new proto.Msg_BuyBattlePassLevelReq();\r\n            pass_msg.id = this._curPassBattleId;\r\n            Net.Send(proto.Ptl.BuyBattlePassLevelReq, pass_msg);\r\n        },battlePassTab.Id)\r\n    }\r\n}\r\n\r\n"]}