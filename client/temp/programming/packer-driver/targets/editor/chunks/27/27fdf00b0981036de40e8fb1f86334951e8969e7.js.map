{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/prestige/PrestigeData.ts"],"names":["_decorator","TaskInfo","tab","EventMgr","LocalEvent","ccclass","property","PrestigeData","taskMap","_level","_questLogTable","isInit","_attrMap","ins","_instance","purge","initData","msg","clear","Map","key","tasks","info","merge","set","taskTabId","level","lv","initAttrMap","emitLocal","Prestige_Change","questLogTable","getData","QuestLogTableByLevel","getValue","getTaskInfoByTableId","get","getHomeShowTaskInfo","taskids","TaskIds","isReceived","receiveQuestLog","forEach","value","index","taskIds","indexOf","id","updateTask","isChange","addedTasks","length","taskTable","TaskType","TaskType_QuestLog","finishedTasks","taskTab","TaskTableById","removedTasks","delete","getIsRedPoint","currTable","maxLevel","QuestLogTable","Level","isCanLevel","isCanReceived","attrMap","attrTypes","QuestLogAttrType","has","QuestLogAttrValue"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { IClear } from '../../../framework/base/IAbs';\r\nimport { TaskInfo } from '../task/TaskInfo';\r\nimport { proto } from 'client_protocol';\r\nimport { tab } from '../../../Table/table_gen';\r\nimport { EventMgr } from '../../mgr/EventMgr';\r\nimport { LocalEvent } from '../../define/LocalEvent';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * \r\n * PrestigeData\r\n * zhudingchao\r\n * Thu Jun 06 2024 10:49:08 GMT+0800 (中国标准时间)\r\n * db://assets/scripts/logic/model/prestige/PrestigeData.ts\r\n *\r\n */\r\n\r\n@ccclass('PrestigeData')\r\nexport class PrestigeData implements IClear {\r\n    private taskMap: Map<number, TaskInfo>;\r\n    private _level: number = 0;\r\n    private static _instance: PrestigeData;\r\n    private _questLogTable: tab.QuestLogTable;\r\n    private isInit = false;\r\n    private _attrMap: Map<number, number>;\r\n    public static get ins() {\r\n        if (null == this._instance) {\r\n            this._instance = new PrestigeData();\r\n        }\r\n        return this._instance;\r\n    }\r\n    purge() {\r\n\r\n    }\r\n    initData(msg: proto.Msg_GetQuestLogsRsp) {\r\n\r\n        this.isInit = true;\r\n        if (this.taskMap) {\r\n            this.taskMap.clear();\r\n        }\r\n        this.taskMap = new Map();\r\n        for (let key in msg.tasks) {\r\n            let info = new TaskInfo();\r\n            info.merge(msg.tasks[key]);\r\n            this.taskMap.set(info.taskTabId, info);\r\n        }\r\n        this.level = msg.level;\r\n    }\r\n    get level() {\r\n        return this._level;\r\n    }\r\n    set level(lv: number) {\r\n        if (this._level != lv) {\r\n            this._level = lv;\r\n            this._questLogTable = null;\r\n            this.initAttrMap();\r\n            EventMgr.emitLocal(LocalEvent.Prestige_Change);\r\n        }\r\n    }\r\n    get questLogTable() {\r\n        if (!this._questLogTable) {\r\n            this._questLogTable = tab.getData().QuestLogTableByLevel.getValue(this.level);\r\n        }\r\n        return this._questLogTable;\r\n    }\r\n    getTaskInfoByTableId(taskTabId: number) {\r\n        return this.taskMap.get(taskTabId);\r\n    }\r\n    getHomeShowTaskInfo() {\r\n        if (!this.isInit) {\r\n            return null;\r\n        }\r\n\r\n        let taskids = this.questLogTable.TaskIds;\r\n        for (let key in taskids) {\r\n            let info = this.getTaskInfoByTableId(taskids[key]);\r\n            if (info && !info.isReceived) {\r\n                return info;\r\n            }\r\n        }\r\n        return this.getTaskInfoByTableId(taskids[0]);\r\n    }\r\n    receiveQuestLog(msg: proto.Msg_ReceiveQuestLogRewardRsp) {\r\n        this.taskMap.forEach((value) => {\r\n            let index = msg.taskIds.indexOf(value.id);\r\n            if (index >= 0) {\r\n                value.isReceived = true;\r\n            }\r\n        })\r\n        EventMgr.emitLocal(LocalEvent.Prestige_Change);\r\n    }\r\n    updateTask(msg: proto.Msg_TaskChangePush) {\r\n        let isChange = false;\r\n        if (msg.addedTasks && msg.addedTasks.length > 0) {\r\n            let tasks = msg.addedTasks;\r\n            for (let key in tasks) {\r\n                let info = new TaskInfo();\r\n                info.merge(tasks[key]);\r\n                if (info.taskTable.TaskType == tab.TaskType.TaskType_QuestLog) {\r\n                    if (this.taskMap) {\r\n                        this.taskMap.set(info.taskTabId, info);\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        if (msg.finishedTasks && msg.finishedTasks.length > 0) {\r\n            let tasks = msg.finishedTasks;\r\n            for (let key in tasks) {\r\n                let taskTab = tab.getData().TaskTableById.getValue(tasks[key].taskTabId);\r\n                let info: TaskInfo = null;\r\n                if (taskTab.TaskType == tab.TaskType.TaskType_QuestLog) {\r\n                    if (this.taskMap) {\r\n                        info = this.taskMap.get(tasks[key].taskTabId)\r\n                    }\r\n                }\r\n                if (info) {\r\n                    info.merge(tasks[key]);\r\n                    isChange = true;\r\n                }\r\n            }\r\n        }\r\n        if (msg.removedTasks && msg.removedTasks.length > 0) {\r\n            let tasks = msg.removedTasks;\r\n            for (let key in tasks) {\r\n                let taskTab = tab.getData().TaskTableById.getValue(tasks[key].taskTabId);\r\n                if (taskTab.TaskType == tab.TaskType.TaskType_QuestLog) {\r\n                    if (this.taskMap) {\r\n                        this.taskMap.delete(tasks[key].taskTabId);\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        if (isChange) {\r\n            EventMgr.emitLocal(LocalEvent.Prestige_Change);\r\n        }\r\n    }\r\n    getIsRedPoint() {\r\n        let currTable = tab.getData().QuestLogTableByLevel.getValue(this.level);\r\n\r\n        // 所有任务完成\r\n        const maxLevel = tab.getData().QuestLogTable[tab.getData().QuestLogTable.length-1].Level\r\n        if(this.level>=maxLevel){\r\n            return false\r\n        }\r\n\r\n        let isCanLevel = true;\r\n        if (currTable) {\r\n            let taskIds = currTable.TaskIds;\r\n            for (let key in taskIds) {\r\n\r\n                let info = this.taskMap.get(taskIds[key]);\r\n                if (info == null){\r\n                    return false\r\n                }\r\n                if (info && info.isCanReceived) {\r\n                    return true;\r\n                }\r\n                if (info&&currTable.Level == PrestigeData.ins.level) {\r\n                    if (isCanLevel) {\r\n                        isCanLevel = info.isReceived;\r\n                    }\r\n                }\r\n            }\r\n            if (isCanLevel && currTable.Level == PrestigeData.ins.level) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**冒险日志属性加成map */\r\n    get attrMap() {\r\n        if (!this._attrMap) {\r\n            this.initAttrMap();\r\n        }\r\n        return this._attrMap;\r\n    }\r\n    private initAttrMap() {\r\n        if (!this._attrMap) {\r\n            this._attrMap = new Map();\r\n        } else {\r\n            this._attrMap.clear();\r\n        }\r\n        let attrTypes = this.questLogTable.QuestLogAttrType;\r\n        for (let key in attrTypes) {\r\n            // let table = tab.getData().EquipAttrTableById.getValue(this.baseAttr[key]);\r\n            // let addValue=\r\n\r\n            if (this._attrMap.has(attrTypes[key])) {\r\n                let value = this._attrMap.get(attrTypes[key]);\r\n                this._attrMap.set(attrTypes[key], value + this.questLogTable.QuestLogAttrValue[key]);\r\n            } else {\r\n                this._attrMap.set(attrTypes[key], this.questLogTable.QuestLogAttrValue[key]);\r\n            }\r\n        }\r\n    }\r\n}"]}