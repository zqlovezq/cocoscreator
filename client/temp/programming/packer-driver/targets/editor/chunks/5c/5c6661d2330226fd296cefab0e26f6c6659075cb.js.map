{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/obj/role/AbsRole.ts"],"names":["Vec3","_decorator","js","AbsObj","StateMachine","AbsStateType","MonsterMoveLine","FixedUtil","DamageTick","EventMgr","FightEvent","ShadowEffect","GuideController","LocalEvent","ccclass","property","tempPos","MAX_HIT_TIME","AbsRole","aiMachine","damageTicks","bulletDamageGroup","Map","parentSoleId","info","backJump","avatarShadow","isReviceBeatBack","reviceBeatTime","hitColorFrame","isBeatBack","beatBackVelocity","beatBackSpeed","beatBackDt","maxBeatFrame","curBearFrame","reset","recycle","length","clear","quitBeatBack","set","ZERO","initMachine","initShadow","configTab","Shadow","setAbs","run","move","updateFrame","dt","updateHitTime","index","v","isValid","splice","setStealth","isbool","_isActive","setTrigger","avatar","setOpaticy","isAttack","isState","roleAttack","getShotPos","animationId","animTab","AttackPoint","getAvatarSpineBonePos","formatStr","getHitPos","boneName","bone","getBonePos","spine","node","x","scale","getScale","position","y","getPosition","z","getSpineBonePos","onHitDrop","dropObj","addDamageTick","bulletSoleId","time","tick","setLiftTime","push","checkDamageTick","addDamegeGroupId","groupId","checkBulletDamageGroup","get","addParentSoleId","soleId","checkParentSoleId","changeState","stateType","RoleVertigo","roleDead","roleIdle","console","log","ins","isInFightGuiding","isLeader","emitLocal","roleIdleState","onDead","isDead","emit","onRevive","RoleRevive","setBackJump","dd","RoleBackJump","setIsHit","_beatBackSpeed","Math","ceil","beatBackUpdate","setFlashWhiteRate","max","min","velocity","normalize","abs","multiplyScalar","voRatio","deltaTimeMovePostion","setPosition","updateHP","animId","create","emitFight","Effect_Add_To_Layer","updateActive","active","isActive","setSkillBearBack","bo","setCommonBeatBack"],"mappings":"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","sourcesContent":["import { Color, Input, Layers, Node, PhysicsSystem, Prefab, Quat, UITransform, Vec2, Vec3, _decorator, js, sp, v3 } from 'cc';\nimport { AbsObj, AbsObjType } from '../AbsObj';\nimport { StateMachine } from '../state/StateMachine';\nimport { Buff } from '../../buff/Buff';\nimport { AbsStateType } from '../state/AbsState';\nimport { AbsRoleInfo } from './AbsRoleInfo';\nimport { MonsterMoveLine } from '../../move/AbsMove';\nimport { FixedUtil } from '../../../util/FixedUtil';\nimport { DamageTick } from '../../cd/DamageTick';\nimport { Avatar } from '../../../animation/Avatar';\nimport { EventMgr } from '../../../../mgr/EventMgr';\nimport { FightEvent } from '../../../define/FightEvent';\nimport { ShadowEffect } from '../../effect/ShadowEffect';\nimport { GuideController } from '../../../../guide/GuideController';\nimport { LocalEvent } from '../../../../define/LocalEvent';\n\nconst { ccclass, property } = _decorator;\nconst tempPos = new Vec3();\n\nconst MAX_HIT_TIME = 160\n\n\n/**战斗对象 地图上 角色、怪物*/\n@ccclass('AbsRole')\nexport class AbsRole extends AbsObj {\n    aiMachine: StateMachine\n\n    /** 伤害间隔 */\n    damageTicks: Array<DamageTick> = []\n    /** 子弹伤害组 key_bool */\n    bulletDamageGroup: Map<number, number> = new Map()\n    /** 父级唯一id  （伤害忽略）a子弹死亡触发的b子弹，再碰撞时不做伤害 */\n    parentSoleId: Map<string, number> = new Map()\n\n    info: AbsRoleInfo\n\n    backJump: number[]\n    avatarShadow: ShadowEffect\n    /** 复活击退 */\n    isReviceBeatBack: boolean = false\n    reviceBeatTime: number = 0\n\n    reset(): void {\n        this.avatarShadow.recycle()\n        this.avatarShadow = null\n        super.reset()\n        if (this.backJump) {\n            this.backJump = null\n        }\n        this.damageTicks.length = 0\n        this.bulletDamageGroup.clear()\n        this.parentSoleId.clear()\n        this.beatBackSpeed = 0\n\n        this.quitBeatBack()\n        this.isReviceBeatBack = false\n        this.beatBackVelocity.set(Vec3.ZERO)\n        this.hitColorFrame = 0\n    }\n\n    initMachine() {\n        this.initShadow(this.info.configTab.Shadow)\n        super.initMachine()\n\n        if (this.aiMachine == null) {\n            this.aiMachine = new StateMachine()\n        }\n\n        this.aiMachine.setAbs(this)\n        this.aiMachine.run()\n\n        this.move = new MonsterMoveLine()\n        this.move.setAbs(this)\n\n    }\n\n    updateFrame(dt: number): void {\n        this.updateHitTime(dt)\n        super.updateFrame(dt)\n\n        for (let index = this.damageTicks.length - 1; index >= 0; index--) {\n            const v = this.damageTicks[index];\n            if (!v.isValid()) {\n                this.damageTicks.splice(index, 1)\n                continue\n            }\n            v.updateFrame(dt)\n        }\n    }\n\n    setStealth(isbool: boolean) {\n        this._isActive = !isbool\n        this.setTrigger(!isbool)\n        this.avatar.setOpaticy(isbool ? 180 : 255)\n    }\n\n    isAttack() {\n        return this.isState(AbsStateType.roleAttack)\n    }\n\n    /** 射击位置 */\n    getShotPos() {\n        if (this.animationId > 0 && this.avatar.animTab && this.avatar.animTab.AttackPoint != \"\") {\n            return this.getAvatarSpineBonePos(js.formatStr(\"root/%s\", this.avatar.animTab.AttackPoint))\n        }\n        return this.getAvatarSpineBonePos(\"root/point_attack\")\n    }\n\n    /** 命中位置 */\n    getHitPos() {\n        return this.getAvatarSpineBonePos(\"root/point_beattack\")\n    }\n\n    getAvatarSpineBonePos(boneName: string) {\n        let bone = this.getBonePos(boneName)\n        if (bone) {\n            if (this.avatar && this.avatar.spine && this.avatar.spine.node) {\n                tempPos.x = bone.x * this.avatar.spine.node.scale.x * this.getScale().x + this.avatar.spine.node.position.x\n                tempPos.y = bone.y * this.avatar.spine.node.scale.y * this.getScale().y + this.avatar.spine.node.position.y\n            } else {\n                tempPos.x = bone.x\n                tempPos.y = bone.y\n            }\n\n            tempPos.x += this.getPosition().x\n            tempPos.y += this.getPosition().y\n            tempPos.z += this.getPosition().z\n            return tempPos\n        }\n        return this.getPosition()\n    }\n    /** 获取骨骼位置， 英雄会在role里重写， 优先读取表内 */\n    getBonePos(boneName: string) {\n        return this.avatar.getSpineBonePos(boneName)\n    }\n\n    /** 触碰掉落 */\n    onHitDrop(dropObj: AbsObj) {\n\n    }\n\n    addDamageTick(bulletSoleId: string, time: number) {\n        let tick = new DamageTick()\n        tick.reset()\n        tick.setLiftTime(time)\n        tick.bulletSoleId = bulletSoleId\n        this.damageTicks.push(tick)\n\n    }\n\n    /** 检测伤害间隔 */\n    checkDamageTick(bulletSoleId: string) {\n        for (let index = 0; index < this.damageTicks.length; index++) {\n            const v = this.damageTicks[index];\n            if (v.bulletSoleId == bulletSoleId) {\n                return v.isValid()\n            }\n        }\n        return false\n    }\n\n    /** 添加伤害组id */\n    addDamegeGroupId(groupId: number) {\n        this.bulletDamageGroup.set(groupId, 1)\n    }\n\n    /** 检测是否已有同组子弹伤害 */\n    checkBulletDamageGroup(groupId: number) {\n        return groupId == 0 ? 0 : this.bulletDamageGroup.get(groupId) || 0\n    }\n\n    /** 添加伤害组id */\n    addParentSoleId(soleId: string) {\n        this.parentSoleId.set(soleId, 1)\n    }\n\n    /** 检测是否已被父级子弹伤害过 */\n    checkParentSoleId(soleId: string) {\n        return soleId == \"\" ? 0 : this.parentSoleId.get(soleId) || 0\n    }\n    changeState(stateType: AbsStateType) {\n        if (this.isState(AbsStateType.RoleVertigo)) {\n            if (!(stateType == AbsStateType.roleDead || stateType == AbsStateType.roleIdle)) {\n                console.log(\"眩晕状态只能切换到死亡、空闲 状态\")\n                return\n            }\n        }\n        if (GuideController.ins.isInFightGuiding() && this.info.isLeader) {\n            if (stateType === AbsStateType.roleIdle) {\n                EventMgr.emitLocal(LocalEvent.roleIdleState, true)\n            } else {\n                EventMgr.emitLocal(LocalEvent.roleIdleState, false)\n            }\n        }\n        return super.changeState(stateType)\n    }\n    /** 死亡 */\n    onDead() {\n        this.setTrigger(false)\n        this.isDead = true\n        this.node.emit(\"AbsRole_dead\", this)\n        this.changeState(AbsStateType.roleDead)\n    }\n\n    /** 复活 */\n    onRevive() {\n\n        this.changeState(AbsStateType.RoleRevive)\n    }\n    setBackJump(dd: number[]) {\n        this.backJump = dd\n        this.changeState(AbsStateType.RoleBackJump)\n    }\n\n    hitColorFrame: number = 0;\n    isBeatBack: boolean = false\n    beatBackVelocity: Vec3 = new Vec3()\n    beatBackSpeed: number = 0\n    beatBackDt: number = 0\n    maxBeatFrame: number = 0\n    curBearFrame: number = 0\n    /** 设置节点被命中 \n     * @param _beatBackSpeed 击退速度\n     */\n    setIsHit(_beatBackSpeed: number) {\n        if (this.hitColorFrame > 0) {\n            return\n        }\n        this.beatBackSpeed = _beatBackSpeed\n        this.hitColorFrame = MAX_HIT_TIME\n    }\n\n    updateHitTime(dt: number) {\n        if (this.hitColorFrame == 0) {\n            return\n        }\n        if (this.hitColorFrame == MAX_HIT_TIME) {\n            this.maxBeatFrame = Math.ceil(MAX_HIT_TIME / dt)\n            this.curBearFrame = this.maxBeatFrame\n        }\n        this.beatBackUpdate(dt)\n        this.setFlashWhiteRate()\n        this.hitColorFrame -= dt\n        this.curBearFrame -= 1\n        this.hitColorFrame = Math.max(this.hitColorFrame, 0)\n        this.curBearFrame = Math.max(this.curBearFrame, 0)\n        if (this.hitColorFrame == 0) {\n            this.setFlashWhiteRate()\n            this.quitBeatBack()\n        }\n    }\n\n    setFlashWhiteRate() {\n        this.avatar.setFlashWhiteRate(Math.min((MAX_HIT_TIME - this.hitColorFrame) / MAX_HIT_TIME, 1))\n    }\n\n    beatBackUpdate(dt: number) {\n        if (this.beatBackSpeed == 0 || this.curBearFrame == 0) { //没有击退速度\n            this.quitBeatBack()\n            return\n        }\n\n        if (this.curBearFrame + 1 == this.maxBeatFrame) {\n            this.isBeatBack = true\n\n            this.beatBackVelocity.set(this.velocity)\n            this.beatBackVelocity.normalize()\n            // this.beatBackVelocity.x = -this.beatBackVelocity.x\n            // this.beatBackVelocity.y = -this.beatBackVelocity.y\n\n            this.beatBackVelocity.x = Math.abs(this.beatBackVelocity.x)\n            this.beatBackVelocity.y = Math.abs(this.beatBackVelocity.y)\n\n            this.beatBackVelocity.multiplyScalar(this.beatBackSpeed * this.voRatio)\n\n            this.beatBackDt = dt\n\n            FixedUtil.deltaTimeMovePostion(tempPos, this.avatar.node.position, this.beatBackVelocity, this.beatBackDt * 2)\n            tempPos.x = Math.min(tempPos.x, 20)\n            tempPos.y = Math.min(tempPos.y, 20)\n            this.avatar.node.position = tempPos\n            return\n        } else if (this.curBearFrame > 1) {\n            return\n        } else if (this.curBearFrame == 1) {\n            if (this.isBeatBack) {\n                FixedUtil.deltaTimeMovePostion(tempPos, this.getPosition(), this.velocity, this.beatBackDt * 2)\n                this.setPosition(tempPos);\n            }\n        }\n\n        this.quitBeatBack()\n    }\n    quitBeatBack() {\n        this.isBeatBack = false\n        if (this.avatar && this.avatar.node) {\n            tempPos.x = tempPos.y = tempPos.z = 0\n            this.avatar.node.position = tempPos\n        }\n    }\n\n    updateHP() {\n\n    }\n\n    initShadow(animId: number) {\n        this.avatarShadow = ShadowEffect.create()\n        EventMgr.emitFight(FightEvent.Effect_Add_To_Layer, \"shadow\", this.avatarShadow.node)\n        this.avatarShadow.run(animId)\n    }\n\n    updateActive() {\n        this.avatarShadow.node.active = this.isActive\n    }\n\n\n    setPosition(position: Vec3): void {\n        super.setPosition(position)\n        if (this.avatarShadow) {\n            this.avatarShadow.node.setPosition(position)\n        }\n    }\n\n    setSkillBearBack(bo: boolean, velocity: Vec3) {\n        if (bo) {\n            this.beatBackVelocity.set(velocity)\n        }\n        this.setCommonBeatBack(bo)\n    }\n    setCommonBeatBack(bo: boolean) {\n        this.isReviceBeatBack = bo\n        if (bo) {\n            this.reviceBeatTime = 0\n        }\n    }\n}\n"]}