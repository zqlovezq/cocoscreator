{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/damage/DamageData.ts"],"names":["DamageData","Color","Vec3","_decorator","tab","Func","FightMacro","ccclass","property","CriticalColor","BLUE","CriticalPointColor","YELLOW","TearColor","RED","HealColor","GREEN","PerSubHealColor","DamageSource","DamageColorType","splitConfig","colors","list","white","yellow","blue","green","red","index","length","v","strs","getData","GetKeyValue_ConfigTable","path","offsetx","checkInt","size","get","owner","pool","pop","put","obj","reset","push","destroy","copy","data","dd","isCritical","isCriticalPoint","isTear","isHeal","isHealPer","isPerSubHeal","isShield","damage","source","isSelfDamage","sourceObjId","constructor","isTransferDamage","addBuffTab","pos","frameIndex","set","ZERO","recycle","isDamage","getShowStr","damageStr","getColor","colorType"],"mappings":"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","sourcesContent":["import { Color, Vec3, _decorator } from \"cc\";\nimport { BuffTab } from \"../../power/powerTab/BuffTab\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { Func } from \"../../../utils/Func\";\nimport { runtimeBundleName } from \"../../../../../../extensions/localization-editor/static/assets/core/localization-global\";\nimport { FightMacro } from \"../../define/FightDefine\";\n\nconst { ccclass, property } = _decorator;\n\n\nconst CriticalColor = Color.BLUE //会心\nconst CriticalPointColor = Color.YELLOW//暴击、会心并暴击\nconst TearColor = Color.RED //撕裂\nconst HealColor = Color.GREEN //治疗、百分比治疗\nconst PerSubHealColor = Color.RED //百分比掉血\n\nexport enum DamageSource {\n    bullet = 1,\n    buff = 2\n}\n\n\nexport enum DamageColorType {\n    white = 0,\n    yellow = 1,\n    blue = 2,\n    green = 3,\n    red = 4\n}\n\n/** 伤害数据 */\nexport class DamageData {\n    static pool: DamageData[] = []\n\n    static colors = {}\n\n    static splitConfig() {\n        if (DamageData.colors[0]) {\n            return\n        }\n        let list = [DamageColorType.white, DamageColorType.yellow, DamageColorType.blue, DamageColorType.green, DamageColorType.red]\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            let strs = tab.getData().GetKeyValue_ConfigTable()[\"FightDamageColor_\" + v]\n            DamageData.colors[v] = { path: strs[0], offsetx: Func.checkInt(strs[1]), size: Func.checkInt(strs[2]) }\n        }\n    }\n\n    static get(): DamageData {\n        let owner\n        if (this.pool.length > 0) {\n            owner = this.pool.pop()\n        } else {\n            owner = new DamageData()\n        }\n        return owner\n    }\n\n    static put(obj: DamageData) {\n        obj.reset()\n        this.pool.push(obj)\n    }\n\n    static destroy() {\n        this.pool.length = 0\n    }\n\n    static copy(data: DamageData): DamageData {\n        let dd = DamageData.get()\n        dd.isCritical = data.isCritical\n        dd.isCriticalPoint = data.isCriticalPoint\n        dd.isTear = data.isTear\n        dd.isHeal = data.isHeal\n        dd.isHealPer = data.isHealPer\n        dd.isPerSubHeal = data.isPerSubHeal\n        dd.isShield = data.isShield\n        dd.damage = data.damage\n        dd.source = data.source\n        dd.isSelfDamage = data.isSelfDamage\n        dd.sourceObjId = data.sourceObjId\n        return dd\n    }\n\n    isCritical: boolean //是否会心\n    isCriticalPoint: boolean //是否暴击\n    isTear: boolean //是否撕裂\n    isHeal: boolean //是否治疗\n    isHealPer: boolean //是否百分比治疗\n    isPerSubHeal: boolean //是否百分比掉血\n    isShield: boolean//是否为护盾\n    isTransferDamage: boolean //是否为链接伤害\n    source: DamageSource\n    isSelfDamage: boolean = false //是否为自损\n    sourceObjId: number = 0\n\n    addBuffTab: BuffTab //计算伤害时， 增加buff, 目前只做了眩晕\n    damage: number\n    pos?: Vec3\n    frameIndex?: number\n\n    constructor() {\n        this.pos = new Vec3()\n    }\n\n    reset() {\n        this.isCritical = false\n        this.isCriticalPoint = false\n        this.isTear = false\n        this.isHeal = false\n        this.isHealPer = false\n        this.isPerSubHeal = false\n        this.isShield = false\n        this.isTransferDamage = false\n        this.damage = 0\n        this.frameIndex = 0\n        this.isSelfDamage = false\n        this.addBuffTab = null\n        this.sourceObjId = 0\n        if (this.pos) {\n            this.pos.set(Vec3.ZERO)\n        }\n    }\n\n    recycle() {\n        DamageData.put(this)\n    }\n\n    /** 是否为伤害 */\n    isDamage() {\n        if (this.isHeal || this.isHealPer || this.isShield) {\n            return false\n        }\n        return true\n    }\n\n    getShowStr() {\n        return FightMacro.damageStr(this.damage)\n    }\n\n\n    getColor(): { path: string, offsetx: number, size: number } {\n        let colorType: DamageColorType = DamageColorType.white\n        if (this.isCritical && this.isCriticalPoint || this.isCriticalPoint) {\n            colorType = DamageColorType.yellow\n        } else if (this.isCritical) {\n            colorType = DamageColorType.blue\n        } else if (this.isHeal || this.isHealPer) {\n            colorType = DamageColorType.green\n        } else if (this.isTear || this.isPerSubHeal) {\n            colorType = DamageColorType.red\n        } else if (this.isPerSubHeal) {\n        }\n        return DamageData.colors[colorType]\n    }\n}"]}