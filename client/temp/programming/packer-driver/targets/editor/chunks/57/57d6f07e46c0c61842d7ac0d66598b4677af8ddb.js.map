{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/hero/HeroInfo.ts"],"names":["HeroInfo","_decorator","proto","tab","HeroTeamControl","ItemData","HeroData","StaticBaseAttr","ccclass","property","Hero","constructor","_AttrMap","Map","_extrarMap","_stepsMap","_MaterialItemMap","_MaterialHeroMap","_HeroSkillMap","_itemTable","_heroTable","_heroStarUpTable","_heroBaseAttrTable","_heroClassTable","_heroAptitudeTable","_herosMaterialMap","merge","hero","key","getAttrByHeroId","id","createDefaultData","itemId","star","heroTable","DefaultStar","level","AttrMap","refreshBaseAttrMap","itemTable","getData","ItemTableById","getValue","HeroTableById","heroStarUpTable","i","HeroStarUpTable","length","starTab","HeroStar","HeroId","HeroStarUpTableById","Id","heroAttrTable","HeroAttrTableById","BaseHeroAttrId","heroClassTable","HeroClassTableByHeroClass","Class","heroAptitudeTable","HeroAptitudeTableByHeroAptitude","Aptitude","getHeroLevel","TeamSlot","ins","heroInTeam","getMinTeamLevel","getAttrByType","type","get","getAttrTotoalByType","baseAttr","Number","has","extraSelfAttr","getExtraAttrMap","extraAllAttr","getExtraAttr","resonanceLevel","getResonanceAttrByType","resonanceStar","AttrType","AttrType_Attack","selfPer1","AttrType_DamagePer1","selfPer2","AttrType_DamagePer2","selfPer3","AttrType_DamagePer3","allPer1","allfPer2","allfPer3","per","Math","floor","AttrType_Hp","AttrType_HpPer","AttrType_Defence","AttrType_DefencePer1","AttrType_DefencePer2","AttrType_DefencePer3","clear","ExtraAttrTarget","value","ExtraAttrList","_attrTab","ExtraAttrTarget_Mine","k","HeroAttrType","_type","_value","HeroAttrValue","mapValue","set","getMaterialByLevel","starLevel","endLevel","map","resonanceLimit","maxLevelLimit","maxLevel","MaxLevel","minLevel","_resonanceLimit","_maxLevelLimit","levelUpData","HeroLevelUpTableByLevel","MinTeamLevel","MaterialIds","MaterialId","MaterialCount","MaterialNum","getMaterialByStar","defaultTab","_starTab","j","setDataInMaterialHeroMap","finshedStarSteps","stepId","HeroStarStepTableById","HeroStarUpType","CostHeroStar","costCount","CostHeroNum","keyId","HeroStarUpType_SameNameHero","HeroStarUpType_SameClassHero","getHeroCommonCost","HeroClass","HeroClass_Any","heroClass","HeroCommonCostTable","costData","getHerosCommonCost","arr","push","HeroStarUpType_AnyHero","checkLevelUp1","startLevel","MaterialNoEnough","materialMap","forEach","totalMaterialCount","getCount","checkLevelUp","minTeamLevel","maxTeamLevel","getMaxTeamLevel","checkLevelEnd","teammateLevel","minLevelMax","getMaxLevelByTeammate","starLevelMax","HeroLevelUpTable","upTab","Level","getFinishStep","count","steps","NeedStarSteps","indexOf","checkStarUpMaterialEnough","MaterialEnough","filterMap","totalCount","costType","heros","getHerosByType","size","_stepIdMaterialEnough","checkIsFullByStepId","CostItemId","itemCount","CostItemNum","stepHeros","itemEnough","haveCount","needCount","needStar","_count","_star","getHeros","info","infoId","isSelf","isTeam","isStar","TamagonIds","TamagonId","t","getHeroSkillMap","DescType","data","getHeroStarUpTableByStar","setHerosMaterialMap","sameName","getHerosMaterialMapCount","setHerosMaterialById","isSelect","heroId","sameClass","obj","delete","getHerosMaterialById","getHerosMaterialMap","getStepMaterialData","stepTab","useType","_num","num","initHeroItemId"],"mappings":"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","sourcesContent":["import { _decorator } from \"cc\";\nimport { proto } from \"client_protocol\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { HeroTeamControl } from \"./HeroTeamControl\";\nimport { ItemData } from \"../item/ItemData\";\nimport { HeroData } from \"./HeroData\";\nimport { StaticBaseAttr } from \"./StaticBaseAttr\";\nimport { Long } from \"protobufjs\";\nexport interface materialHeros {\n    type: tab.HeroStarUpType,\n    needCount: number,\n    itemId?: number\n}\nexport interface needMaterial {\n    map: Map<number, number>,\n    resonanceLimit: boolean,\n    maxLevelLimit: boolean\n}\n\nconst { ccclass, property } = _decorator;\n\n/** 英雄数据 */\nexport class HeroInfo extends proto.Hero {\n    private _AttrMap: Map<tab.AttrType, number> = new Map()\n    private _extrarMap: Map<tab.AttrType, number> = new Map()\n    private _stepsMap: Map<tab.AttrType, number> = new Map()//阶段属性\n    private _MaterialItemMap: Map<number, number> = new Map()\n    private _MaterialHeroMap: Map<number, number> = new Map()\n    // private _MaterialStepMap: Map<tab.HeroStarUpType, number[]> = new Map();\n    private _HeroSkillMap: Map<tab.HeroStarDescType, tab.HeroStarUpTable[]> = new Map()\n    private _itemTable: tab.ItemTable;\n    private _heroTable: tab.HeroTable;\n    private _heroStarUpTable: tab.HeroStarUpTable;\n    private _heroBaseAttrTable: tab.HeroAttrTable;\n    private _heroClassTable: tab.HeroClassTable;\n    private _heroAptitudeTable: tab.HeroAptitudeTable;\n    private _herosMaterialMap: Map<number, materialHeros> = new Map();\n    constructor() {\n        super()\n    }\n\n    merge(hero: proto.Hero) {\n        for (const key in hero) {\n            this[key] = hero[key]\n        }\n        this._AttrMap = StaticBaseAttr.getAttrByHeroId(this.id, this._AttrMap);\n    }\n    /**\n     * 创建默认数据\n     * @param itemId \n     */\n    createDefaultData(itemId: number, star?: number) {\n        this.itemId = itemId;\n        this.id = 0;\n        this.star = star ? star : this.heroTable.DefaultStar;\n        this.level = 0;\n    }\n    /* 获取英雄属性 */\n    get AttrMap() {\n        return this._AttrMap;\n    }\n    /* 刷新英雄基础属性 */\n    refreshBaseAttrMap() {\n        this._AttrMap = StaticBaseAttr.getAttrByHeroId(this.id, this._AttrMap);\n    }\n    /**\n     * 道具数据\n    */\n    get itemTable() {\n        if (!this._itemTable) {\n            this._itemTable = tab.getData().ItemTableById.getValue(this.itemId);\n        }\n        return this._itemTable;\n    }\n    /**\n     * 英雄数据\n    */\n    get heroTable() {\n        if (!this._heroTable) {\n            this._heroTable = tab.getData().HeroTableById.getValue(this.itemId);\n        }\n        return this._heroTable;\n    }\n    /**\n     * 英雄升星数据\n    */\n    get heroStarUpTable() {\n        if (!this._heroStarUpTable) {\n            for (let i = 0; i < tab.getData().HeroStarUpTable.length; i++) {\n                let starTab = tab.getData().HeroStarUpTable[i];\n                if (starTab.HeroStar === this.star && this.itemId === starTab.HeroId) {\n                    return tab.getData().HeroStarUpTableById.getValue(starTab.Id);\n                }\n            }\n        }\n        return this._heroStarUpTable;\n    }\n    /** \n     * 英雄基础数据  \n    */\n    get heroAttrTable() {\n        if (!this._heroBaseAttrTable) {\n            this._heroBaseAttrTable = tab.getData().HeroAttrTableById.getValue(this.heroTable.BaseHeroAttrId);\n        }\n        return this._heroBaseAttrTable;\n    }\n    /** \n     * 英雄职业数据 \n    */\n    get heroClassTable() {\n        if (!this._heroClassTable) {\n            this._heroClassTable = tab.getData().HeroClassTableByHeroClass.getValue(this.heroTable.Class);\n        }\n        return this._heroClassTable;\n    }\n    /** \n    * 英雄品质数据 \n   */\n    get heroAptitudeTable() {\n        if (!this._heroAptitudeTable) {\n            this._heroAptitudeTable = tab.getData().HeroAptitudeTableByHeroAptitude.getValue(this.heroTable.Aptitude);\n        }\n        return this._heroAptitudeTable;\n    }\n    /**\n     * 获取当前英雄的等级\n    */\n    getHeroLevel() {\n        let level = 1;\n        /* 英雄是否上阵 返回队伍等级 */\n        let TeamSlot: proto.ITeamSlot = HeroTeamControl.ins.heroInTeam(this.id)\n        if (TeamSlot) {\n            level = TeamSlot.level;\n        } else {\n            /* 返回共鸣等级---队伍中最小的等级 */\n            level = HeroTeamControl.ins.getMinTeamLevel();\n        }\n        return level;\n    }\n    /**\n    * 获取当前英雄的基础属性\n    */\n    getAttrByType(type: tab.AttrType) {\n        /* 遍历基础属性 */\n        return this.AttrMap.get(type);\n    }\n    /*  */\n    /**\n    * 获取当前英雄的totoal属性\n    */\n    getAttrTotoalByType(type: tab.AttrType) {\n        /* 遍历基础属性 */\n        let baseAttr = Number(this.AttrMap.has(type) ? this.AttrMap.get(type) : 0);\n        /* 装备属性 */\n        // let equipAttrMap = EquipData.ins.getEquipContainerDataByHeroClass(type).totalAttrMap;\n        // baseAttr += equipAttrMap.has(type) ? equipAttrMap.get(type) : 0\n        let extraSelfAttr = this.getExtraAttrMap();\n        let extraAllAttr = HeroTeamControl.ins.getExtraAttr();\n        if (HeroTeamControl.ins.heroInTeam(this.id)) {\n            /* 等级共鸣属性 */\n            let resonanceLevel = HeroTeamControl.ins.getResonanceAttrByType(type, true);\n            /* 星级共鸣属性 */\n            let resonanceStar = HeroTeamControl.ins.getResonanceAttrByType(type, false);\n            baseAttr += resonanceLevel ? resonanceLevel : 0;\n            baseAttr += resonanceStar ? resonanceStar : 0;\n\n            baseAttr += extraAllAttr.has(type) ? extraAllAttr.get(type) : 0\n            baseAttr += extraSelfAttr.has(type) ? extraSelfAttr.get(type) : 0\n\n            if (type == tab.AttrType.AttrType_Attack) {\n                // 攻击百分比\n                let selfPer1 = extraSelfAttr.has(tab.AttrType.AttrType_DamagePer1) ? extraSelfAttr.get(tab.AttrType.AttrType_DamagePer1) : 0;\n                let selfPer2 = extraSelfAttr.has(tab.AttrType.AttrType_DamagePer2) ? extraSelfAttr.get(tab.AttrType.AttrType_DamagePer2) : 0;\n                let selfPer3 = extraSelfAttr.has(tab.AttrType.AttrType_DamagePer3) ? extraSelfAttr.get(tab.AttrType.AttrType_DamagePer3) : 0;\n\n                let allPer1 = extraAllAttr.has(tab.AttrType.AttrType_DamagePer1) ? extraAllAttr.get(tab.AttrType.AttrType_DamagePer1) : 0;\n                let allfPer2 = extraAllAttr.has(tab.AttrType.AttrType_DamagePer2) ? extraAllAttr.get(tab.AttrType.AttrType_DamagePer2) : 0;\n                let allfPer3 = extraAllAttr.has(tab.AttrType.AttrType_DamagePer3) ? extraAllAttr.get(tab.AttrType.AttrType_DamagePer3) : 0;\n                let per = selfPer1 + selfPer2 + selfPer3 + allPer1 + allfPer2 + allfPer3;\n                baseAttr = baseAttr = Math.floor((1 + per / 10000) * baseAttr);\n            } else if (type == tab.AttrType.AttrType_Hp) {\n                // 生命百分比\n                let selfPer1 = extraSelfAttr.has(tab.AttrType.AttrType_HpPer) ? extraSelfAttr.get(tab.AttrType.AttrType_HpPer) : 0;\n                let allPer1 = extraAllAttr.has(tab.AttrType.AttrType_HpPer) ? extraAllAttr.get(tab.AttrType.AttrType_HpPer) : 0;\n                let per = selfPer1 + allPer1;\n                baseAttr = baseAttr = Math.floor((1 + per / 10000) * baseAttr);\n            } else if (type == tab.AttrType.AttrType_Defence) {\n                // 生命百分比\n                // 攻击百分比\n                let selfPer1 = extraSelfAttr.has(tab.AttrType.AttrType_DefencePer1) ? extraSelfAttr.get(tab.AttrType.AttrType_DefencePer1) : 0;\n                let selfPer2 = extraSelfAttr.has(tab.AttrType.AttrType_DefencePer2) ? extraSelfAttr.get(tab.AttrType.AttrType_DefencePer2) : 0;\n                let selfPer3 = extraSelfAttr.has(tab.AttrType.AttrType_DefencePer3) ? extraSelfAttr.get(tab.AttrType.AttrType_DefencePer3) : 0;\n\n                let allPer1 = extraAllAttr.has(tab.AttrType.AttrType_DefencePer1) ? extraAllAttr.get(tab.AttrType.AttrType_DefencePer1) : 0;\n                let allfPer2 = extraAllAttr.has(tab.AttrType.AttrType_DefencePer2) ? extraAllAttr.get(tab.AttrType.AttrType_DamagePer2) : 0;\n                let allfPer3 = extraAllAttr.has(tab.AttrType.AttrType_DefencePer3) ? extraAllAttr.get(tab.AttrType.AttrType_DefencePer3) : 0;\n                let per = selfPer1 + selfPer2 + selfPer3 + allPer1 + allfPer2 + allfPer3;\n                baseAttr = Math.floor((1 + per / 10000) * baseAttr);\n            } else {\n                baseAttr += extraAllAttr.has(type) ? extraAllAttr.get(type) : 0\n                baseAttr += extraSelfAttr.has(type) ? extraSelfAttr.get(type) : 0\n            }\n        } else {\n            return baseAttr;\n        }\n        return baseAttr;\n    }\n    getExtraAttrMap() {\n        this._extrarMap.clear();\n        let _heroStarUpTable = this.heroStarUpTable;\n        if (_heroStarUpTable.ExtraAttrTarget.length > 0) {\n            for (let i = 0; i < _heroStarUpTable.ExtraAttrTarget.length; i++) {\n                let type = _heroStarUpTable.ExtraAttrTarget[i];\n                let value = _heroStarUpTable.ExtraAttrList[i];\n                let _attrTab = tab.getData().HeroAttrTableById.getValue(value);\n                if (type === tab.ExtraAttrTarget.ExtraAttrTarget_Mine) {\n                    for (let k = 0; k < _attrTab.HeroAttrType.length; k++) {\n                        let _type = _attrTab.HeroAttrType[k];\n                        let _value = _attrTab.HeroAttrValue[k];\n                        if (_type) {\n                            if (this._extrarMap.has(_type)) {\n                                let mapValue = this._extrarMap.get(_type)\n                                if (mapValue) {\n                                    this._extrarMap.set(_type, mapValue + _value);\n                                }\n                            } else {\n                                this._extrarMap.set(_type, _value);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return this._extrarMap;\n    }\n    /* 当前英雄传入任意level 获取到达需要的材料 */\n    getMaterialByLevel(starLevel: number, endLevel: number): needMaterial {\n        this._MaterialItemMap.clear();\n        if (endLevel === 1) {\n            return { map: this._MaterialItemMap, resonanceLimit: false, maxLevelLimit: false };\n        }\n        let maxLevel = this.heroStarUpTable.MaxLevel;\n        let minLevel = HeroTeamControl.ins.getMinTeamLevel();\n        let _resonanceLimit = false;\n        let _maxLevelLimit = false;\n        for (let i = starLevel; i < endLevel; i++) {\n            /* 需要的资源 */\n            let levelUpData: tab.HeroLevelUpTable = tab.getData().HeroLevelUpTableByLevel.getValue(i);\n            if (minLevel < levelUpData.MinTeamLevel) {\n                /* 升级表里 有最小队伍等级限制时 不达标 返回材料 */\n                _resonanceLimit = true;\n                break;\n            }\n            if (i >= maxLevel) {\n                /* 升级表里 有最大等级限制 */\n                _maxLevelLimit = true;\n                break;\n            }\n            /* 消耗材料组 */\n            for (let k = 0; k < levelUpData.MaterialIds.length; k++) {\n                let MaterialId = levelUpData.MaterialIds[k];\n                let MaterialCount = levelUpData.MaterialNum[k];\n                if (this._MaterialItemMap.get(MaterialId)) {\n                    this._MaterialItemMap.set(MaterialId, this._MaterialItemMap.get(MaterialId) + MaterialCount)\n                } else {\n                    this._MaterialItemMap.set(MaterialId, MaterialCount);\n                }\n            }\n        }\n        return { map: this._MaterialItemMap, resonanceLimit: _resonanceLimit, maxLevelLimit: _maxLevelLimit };\n    }\n    /* 当前英雄传入任意星级获取需要的材料 */\n    getMaterialByStar(): Map<number, number> {\n        let star = this.star;\n        this._MaterialHeroMap.clear();\n        let defaultTab: tab.HeroStarUpTable;\n        for (let i = 0; i < tab.getData().HeroStarUpTable.length; i++) {\n            let _starTab = tab.getData().HeroStarUpTable[i];\n            if (_starTab.HeroStar === this.heroTable.DefaultStar && this.itemId === _starTab.HeroId) {\n                defaultTab = _starTab;\n                break;\n            }\n        }\n        let id = defaultTab.Id\n        for (let j = defaultTab.HeroStar; j < star; j++) {\n            let starTab = tab.getData().HeroStarUpTableById.getValue(id + (j - defaultTab.HeroStar));\n            this.setDataInMaterialHeroMap(starTab, defaultTab);\n        }\n        if (this.finshedStarSteps.length > 0) {\n            for (let k = 0; k < this.finshedStarSteps.length; k++) {\n                let stepId = this.finshedStarSteps[k];\n                let starTab = tab.getData().HeroStarStepTableById.getValue(stepId);\n                this.setDataInMaterialHeroMap(starTab, defaultTab);\n            }\n        }\n        return this._MaterialHeroMap;\n    }\n    /* 将重置数据放入map中 */\n    setDataInMaterialHeroMap(starTab: tab.HeroStarUpTable | tab.HeroStarStepTable, defaultTab: tab.HeroStarUpTable) {\n        for (let i = 0; i < starTab.HeroStarUpType.length; i++) {\n            let type: tab.HeroStarUpType = starTab.HeroStarUpType[i];\n            let star: number = starTab.CostHeroStar[i];\n            let costCount: number = starTab.CostHeroNum[i];\n            // 同名\n            let keyId = 0;\n            if (type === tab.HeroStarUpType.HeroStarUpType_SameNameHero) {\n                /* 根据itemId+star生成starUpId */\n                keyId = (star - defaultTab.HeroStar) + defaultTab.Id\n            } else if (type == tab.HeroStarUpType.HeroStarUpType_SameClassHero) {\n                keyId = this.getHeroCommonCost(star, this.heroTable.Class);\n            } else {\n                keyId = this.getHeroCommonCost(star, tab.HeroClass.HeroClass_Any);\n            }\n            if (this._MaterialHeroMap.has(keyId)) {\n                this._MaterialHeroMap.set(keyId, this._MaterialHeroMap.get(keyId) + costCount)\n            } else {\n                this._MaterialHeroMap.set(keyId, costCount)\n            }\n        }\n    }\n    getHeroCommonCost(star: number, heroClass: tab.HeroClass) {\n        for (let i = 0; i < tab.getData().HeroCommonCostTable.length; i++) {\n            let costData = tab.getData().HeroCommonCostTable[i];\n            if (costData.HeroStar === star && costData.HeroClass == heroClass) {\n                return costData.Id;\n            }\n        }\n    }\n    getHerosCommonCost(star: number, heroClass: tab.HeroClass, type: tab.HeroStarUpType) {\n        let arr = [];\n        if (type === tab.HeroStarUpType.HeroStarUpType_SameClassHero) {\n            for (let i = 0; i < tab.getData().HeroCommonCostTable.length; i++) {\n                let costData = tab.getData().HeroCommonCostTable[i];\n                if (costData.HeroStar === star && (costData.HeroClass == heroClass || costData.HeroClass === tab.HeroClass.HeroClass_Any)) {\n                    arr.push(costData.Id);\n                }\n            }\n        } else if (type === tab.HeroStarUpType.HeroStarUpType_AnyHero) {\n            for (let i = 0; i < tab.getData().HeroCommonCostTable.length; i++) {\n                let costData = tab.getData().HeroCommonCostTable[i];\n                if (costData.HeroStar === star) {\n                    arr.push(costData.Id);\n                }\n            }\n        }\n        return arr;\n    }\n    /* 检查heroId连升N级 */\n    checkLevelUp1(): number {\n        /* 升级需要经验+金币 */\n        /* 先获取当前hero等级 */\n        let level = this.getHeroLevel();\n        let minLevel = HeroTeamControl.ins.getMinTeamLevel();\n        let startLevel = level;\n        /* 检查所有的条件 */\n        // let MaterialMap: Map<number, number> = new Map();\n        // let minLevel = HeroTeamControl.ins.getMinTeamLevel();\n        /* 获取当前heroid最高等级 */\n        let maxLevel = this.heroStarUpTable.MaxLevel;\n        let MaterialNoEnough = false;\n        for (let i = level; i < maxLevel; i++) {\n            let materialMap = this.getMaterialByLevel(startLevel, i + 1).map;\n\n            let levelUpData: tab.HeroLevelUpTable = tab.getData().HeroLevelUpTableByLevel.getValue(i);\n            if (minLevel < levelUpData.MinTeamLevel) {\n                /* 升级表里 有最小队伍等级限制时 不达标 返回材料 */\n                level = i;\n                break;\n            }\n\n            if (materialMap.get(1002)) {\n                level = i;\n                break\n            }\n            materialMap.forEach((value, key) => {\n                let totalMaterialCount = ItemData.ins.getCount(key);\n                if (totalMaterialCount < value) {\n                    MaterialNoEnough = true;\n                }\n            })\n            if (MaterialNoEnough) {\n                level = i;\n                break\n            } else {\n                level = i + 1;\n            }\n        }\n        return level;\n    }\n    checkLevelUp(): number {\n        // step1 英雄等级是否相同\n        let minTeamLevel = HeroTeamControl.ins.getMinTeamLevel();\n        let maxTeamLevel = HeroTeamControl.ins.getMaxTeamLevel();\n        let startLevel = -1;\n        let endLevel = -1;\n        let level = this.getHeroLevel();\n        let levelUpData: tab.HeroLevelUpTable = tab.getData().HeroLevelUpTableByLevel.getValue(maxTeamLevel);\n        if (minTeamLevel === maxTeamLevel) {\n            startLevel = minTeamLevel;\n            endLevel = (Math.floor(startLevel / 10) + 1) * 10;\n            return this.checkLevelEnd(startLevel, endLevel);\n        } else {\n            //要升级英雄等级是否达到队友最低等级需求\n            if (level < levelUpData.MinTeamLevel) {\n                // 否 升级至【队友最低等级】\n                startLevel = level;\n                endLevel = levelUpData.MinTeamLevel;\n                return this.checkLevelEnd(startLevel, endLevel);\n            } else {\n                // 是\n                // 要升级英雄等级是否为最高等级\n                if (level === maxTeamLevel) {\n                    // 是 英雄升至10的整数倍数\n                    startLevel = level;\n                    endLevel = (Math.floor(startLevel / 10) + 1) * 10;\n                    return this.checkLevelEnd(startLevel, endLevel);\n                } else {\n                    // 否 英雄升级至5的整数倍数\n                    startLevel = level;\n                    endLevel = (Math.floor(startLevel / 5) + 1) * 5;\n                    return this.checkLevelEnd(startLevel, endLevel);\n                }\n            }\n        }\n    }\n    checkLevelEnd(startLevel: number, endLevel: number): number {\n        let MaterialNoEnough = false;\n        // 队友最低等级约束\n        const teammateLevel = HeroTeamControl.ins.getMinTeamLevel(this);\n        const minLevelMax = this.getMaxLevelByTeammate(teammateLevel);\n        if (minLevelMax < endLevel) {\n            endLevel = minLevelMax;\n        }\n        // 星级约束\n        const starLevelMax = this.heroStarUpTable.MaxLevel;\n        if (starLevelMax < endLevel) {\n            endLevel = starLevelMax;\n        }\n\n        // 材料约束\n        for (let i = startLevel; i < endLevel; i++) {\n            let materialMap = this.getMaterialByLevel(startLevel, i + 1).map;\n            materialMap.forEach((value, key) => {\n                let totalMaterialCount = ItemData.ins.getCount(key);\n                if (totalMaterialCount < value) {\n                    MaterialNoEnough = true;\n                }\n            })\n            if (MaterialNoEnough) {\n                return i;\n            }\n        }\n        return endLevel;\n    }\n    /* 通过队友的最低等级获取当前可以升级的最大值 */\n    getMaxLevelByTeammate(level: number) {\n        for (let i = level; i < tab.getData().HeroLevelUpTable.length; i++) {\n            const upTab = tab.getData().HeroLevelUpTable[i];\n            const minLevel = upTab.MinTeamLevel;\n            if (minLevel > level) {\n                return upTab.Level;\n            }\n        }\n    }\n    /* 当前阶段完成的step数量 */\n    getFinishStep(): number {\n        let count = 0;\n        let starTab = this.heroStarUpTable;\n        let steps = starTab.NeedStarSteps;\n        // 所有玩家完成的阶段ids数组this.finshedStarSteps\n        for (let i = 0; i < steps.length; i++) {\n            let id = steps[i];\n            if (this.finshedStarSteps.indexOf(id) > -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n    /* 检查hero升星材料是否够 HeroStarUpType*/\n    checkStarUpMaterialEnough(stepId?: number) {\n        /* 升星消耗的都是英雄 */\n        // 先获取当前的StarUpTable\n        let starTab = stepId ? tab.getData().HeroStarStepTableById.getValue(stepId) : this.heroStarUpTable;\n        let MaterialEnough = true;\n\n        if (starTab.HeroStarUpType.length === 0 && this.heroStarUpTable.NeedStarSteps.length === 0) {\n            return false;\n        }\n\n        let filterMap = new Map();\n        let totalCount = 0;\n        for (let i = 0; i < starTab.HeroStarUpType.length; i++) {\n            let costType: tab.HeroStarUpType = starTab.HeroStarUpType[i];\n            let costCount: number = starTab.CostHeroNum[i];\n            totalCount += costCount;\n            let heros = this.getHerosByType(costType, stepId, filterMap);\n            if (heros.map.size < costCount) {\n                MaterialEnough = false;\n                break;\n            } else {\n                let count = 0;\n                heros.map.forEach((value, key) => {\n                    count++;\n                    if (count <= costCount) {\n                        filterMap.set(key, value);\n                    }\n                })\n            }\n        }\n        /* 如果当前是进阶阶段 */\n        if (this.heroStarUpTable.NeedStarSteps.length > 0 && this.getFinishStep() < 4) {\n            // 判断进阶的每个部分是否材料够 够的话返回\n            if (!stepId) {\n                for (let i = 0; i < this.heroStarUpTable.NeedStarSteps.length; i++) {\n                    let stepId = this.heroStarUpTable.NeedStarSteps[i];\n                    const _stepIdMaterialEnough = this.checkIsFullByStepId(stepId, totalCount, MaterialEnough, filterMap)\n                    MaterialEnough = MaterialEnough && _stepIdMaterialEnough;\n                }\n            } else {\n                MaterialEnough = this.checkIsFullByStepId(stepId, totalCount, MaterialEnough, filterMap)\n            }\n        } else {\n            /* 升星需要材料 */\n            if (starTab.CostItemId.length > 0) {\n                for (let i = 0; i < starTab.CostItemId.length; i++) {\n                    let itemId = starTab.CostItemId[i];\n                    let itemCount = starTab.CostItemNum[i];\n                    let totalCount = ItemData.ins.getCount(itemId);\n                    if (totalCount < itemCount) {\n                        MaterialEnough = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return MaterialEnough;\n    }\n    /* 通过stepId返回材料是否满足 */\n    checkIsFullByStepId(stepId: number, totalCount, MaterialEnough, filterMap) {\n        if (this.finshedStarSteps.indexOf(stepId) > -1) {\n            return true\n        }\n        let starTab = tab.getData().HeroStarStepTableById.getValue(stepId);\n        // 当前阶段消耗类型\n        for (let i = 0; i < starTab.HeroStarUpType.length; i++) {\n            let costType: tab.HeroStarUpType = starTab.HeroStarUpType[i];\n            let costCount: number = starTab.CostHeroNum[i];\n            totalCount += costCount;\n            let stepHeros = this.getHerosByType(costType, stepId);\n            if (stepHeros.map.size < costCount) {\n                return false\n            }\n            else {\n                let count = 0;\n                stepHeros.map.forEach((value, key) => {\n                    count++;\n                    if (count <= costCount) {\n                        filterMap.set(key, value);\n                    }\n                })\n            }\n        }\n        // 阶段消耗道具\n        let itemEnough = true;\n        for(let i=0;i<starTab.CostItemId.length;i++){\n            const haveCount = ItemData.ins.getCount(starTab.CostItemId[i]);\n            const needCount = starTab.CostItemNum[i];\n            if(haveCount<needCount){\n                itemEnough = false;\n            }\n        }\n        return MaterialEnough&&itemEnough;\n    }\n    getHerosByType(type: tab.HeroStarUpType, stepId?: number, filterMap?: Map<number, any>) {\n        let map = new Map<number, any>()\n        let starTab = stepId ? tab.getData().HeroStarStepTableById.getValue(stepId) : this.heroStarUpTable;\n        let needCount = 0;\n        let needStar = 0;\n        for (let i = 0; i < starTab.HeroStarUpType.length; i++) {\n            let _type: tab.HeroStarUpType = starTab.HeroStarUpType[i];\n            let _count: number = starTab.CostHeroNum[i];\n            let _star: number = starTab.CostHeroStar[i];\n            // 同名\n            if (type === _type) {\n                needCount = _count;\n                needStar = _star;\n                break;\n            }\n        }\n        let heros = HeroData.ins.getHeros();\n        const id = Number(this.id);\n        for (let i = 0; i < heros.length; i++) {\n            let info: HeroInfo = heros[i];\n            // 是否是升级id\n            const infoId = Number(info.id);\n            let isSelf = infoId === id;\n            // 是否在队伍中\n            let isTeam = HeroTeamControl.ins.heroInTeam(infoId);\n            let isStar = info.star === needStar\n            if (isStar && !isSelf && !isTeam) {\n                // 同名\n                if (filterMap && filterMap.get(infoId) && filterMap.get(infoId).type !== type) {\n                    continue;\n                }\n                if (type === tab.HeroStarUpType.HeroStarUpType_SameNameHero) {\n                    if (info.itemId == this.itemId) {\n                        map.set(infoId, info);\n                    }\n                } else if (type === tab.HeroStarUpType.HeroStarUpType_SameClassHero) {\n                    if (info.heroTable.Class == this.heroTable.Class) {\n                        map.set(infoId, info);\n                    }\n                } else {\n                    map.set(infoId, info);\n                }\n            }\n        }\n        if (type !== tab.HeroStarUpType.HeroStarUpType_SameNameHero) {\n            let heroClass = type === tab.HeroStarUpType.HeroStarUpType_AnyHero ? tab.HeroClass.HeroClass_Any : this.heroTable.Class\n            let TamagonIds = this.getHerosCommonCost(needStar, heroClass, type);\n            if (TamagonIds) {\n                for (let i = 0; i < TamagonIds.length; i++) {\n                    let TamagonId = TamagonIds[i];\n                    const itemCount = ItemData.ins.getCount(TamagonId);\n                    for (let t = 0; t < itemCount; t++) {\n                        let value = t + 1;\n                        map.set(TamagonId + value, value);\n                    }\n                }\n            }\n        }\n        return { map: map, needCount: needCount, star: needStar };\n    }\n    /* 获取当前hero的所有技能map */\n    getHeroSkillMap(): Map<tab.HeroStarDescType, tab.HeroStarUpTable[]> {\n        if (this._HeroSkillMap.size > 0) {\n            return this._HeroSkillMap;\n        }\n        for (let i = 0; i < tab.getData().HeroStarUpTable.length; i++) {\n            let starTab = tab.getData().HeroStarUpTable[i];\n            if (this.itemId === starTab.HeroId) {\n                for (let j = 0; j < starTab.DescType.length; j++) {\n                    const DescType = starTab.DescType[j];\n                    let data = this._HeroSkillMap.get(DescType) ? this._HeroSkillMap.get(DescType) : [];\n                    data.push(starTab);\n                    this._HeroSkillMap.set(DescType, data);\n                }\n\n            }\n        }\n        return this._HeroSkillMap;\n    }\n    /* 传入任意星级获取当前的HeroStarUpTable信息 */\n    getHeroStarUpTableByStar(star: number): tab.HeroStarUpTable {\n        for (let i = 0; i < tab.getData().HeroStarUpTable.length; i++) {\n            let starTab = tab.getData().HeroStarUpTable[i];\n            if (this.itemId === starTab.HeroId && star === starTab.HeroStar) {\n                return starTab;\n            }\n        }\n        return this.heroStarUpTable;\n    }\n    setHerosMaterialMap(stepId?: number): Map<number, materialHeros> {\n        this._herosMaterialMap.clear();\n        let sameName = this.getHerosByType(tab.HeroStarUpType.HeroStarUpType_SameNameHero, stepId);\n        let count = 0;\n        sameName.map.forEach((value, key) => {\n            count++;\n            if (count <= sameName.needCount) {\n                this._herosMaterialMap.set(key, {\n                    needCount: sameName.needCount,\n                    type: tab.HeroStarUpType.HeroStarUpType_SameNameHero,\n                })\n            }\n        })\n        return this._herosMaterialMap\n    }\n    /* 选择材料的数量 */\n    getHerosMaterialMapCount(type: tab.HeroStarUpType): number {\n        let count = 0;\n        this._herosMaterialMap.forEach((value, key) => {\n            if (value.type === type) {\n                count++;\n            }\n        })\n        return count;\n    }\n    /* 添加|删除选择的材料 */\n    setHerosMaterialById(isSelect: boolean, heroId: number, type: tab.HeroStarUpType, itemId?: number) {\n        if (this._herosMaterialMap.get(heroId) && this._herosMaterialMap.get(heroId).type !== type) {\n            return;\n        }\n        const sameClass = this.getHerosByType(type);\n\n        if (isSelect) {\n            let obj: materialHeros = {\n                needCount: sameClass.needCount,\n                type: type,\n            }\n            if (itemId) {\n                obj.itemId = itemId;\n            }\n            this._herosMaterialMap.set(heroId, obj);\n        } else {\n            this._herosMaterialMap.delete(heroId);\n        }\n    }\n    getHerosMaterialById(heroId: number) {\n        let obj = null;\n        if (this._herosMaterialMap.get(heroId)) {\n            obj = this._herosMaterialMap.get(heroId)\n        }\n        return obj\n    }\n    getHerosMaterialMap() {\n        return this._herosMaterialMap;\n    }\n    /* 通过材料类型获取需要的数据 */\n    getStepMaterialData(stepTab: tab.HeroStarStepTable, type: tab.HeroStarUpType) {\n        const useType = stepTab.HeroStarUpType;\n        for (let i = 0; i < useType.length; i++) {\n            const _type = useType[i];\n            const _num = stepTab.CostHeroNum[i];\n            const _star = stepTab.CostHeroStar[i];\n            if (_type === type) {\n                return {\n                    num: _num,\n                    star: _star\n                }\n            }\n        }\n    }\n    initHeroItemId(heroId: number) {\n        this.id = 0;\n        this.itemId = heroId;;\n        this.star = this.heroTable.DefaultStar;\n    }\n}"]}