{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/@protobufjs/base64/index.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","base64","length","string","p","n","charAt","Math","ceil","b64","Array","s64","i","encode","buffer","start","end","parts","chunk","j","t","b","push","String","fromCharCode","apply","slice","join","invalidEncoding","decode","offset","c","charCodeAt","undefined","Error","test","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\r\n\r\n /**\r\n  * A minimal base64 implementation for number arrays.\r\n  * @memberof util\r\n  * @namespace\r\n  */\r\n var base64 = exports;\r\n\r\n /**\r\n  * Calculates the byte length of a base64 encoded string.\r\n  * @param {string} string Base64 encoded string\r\n  * @returns {number} Byte length\r\n  */\r\n base64.length = function length(string) {\r\n     var p = string.length;\r\n     if (!p)\r\n         return 0;\r\n     var n = 0;\r\n     while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n         ++n;\r\n     return Math.ceil(string.length * 3) / 4 - n;\r\n };\r\n\r\n // Base64 encoding table\r\n var b64 = new Array(64);\r\n\r\n // Base64 decoding table\r\n var s64 = new Array(123);\r\n\r\n // 65..90, 97..122, 48..57, 43, 47\r\n for (var i = 0; i < 64;)\r\n     s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n /**\r\n  * Encodes a buffer to a base64 encoded string.\r\n  * @param {Uint8Array} buffer Source buffer\r\n  * @param {number} start Source start\r\n  * @param {number} end Source end\r\n  * @returns {string} Base64 encoded string\r\n  */\r\n base64.encode = function encode(buffer, start, end) {\r\n     var parts = null,\r\n         chunk = [];\r\n     var i = 0, // output index\r\n         j = 0, // goto index\r\n         t;     // temporary\r\n     while (start < end) {\r\n         var b = buffer[start++];\r\n         switch (j) {\r\n             case 0:\r\n                 chunk[i++] = b64[b >> 2];\r\n                 t = (b & 3) << 4;\r\n                 j = 1;\r\n                 break;\r\n             case 1:\r\n                 chunk[i++] = b64[t | b >> 4];\r\n                 t = (b & 15) << 2;\r\n                 j = 2;\r\n                 break;\r\n             case 2:\r\n                 chunk[i++] = b64[t | b >> 6];\r\n                 chunk[i++] = b64[b & 63];\r\n                 j = 0;\r\n                 break;\r\n         }\r\n         if (i > 8191) {\r\n             (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n             i = 0;\r\n         }\r\n     }\r\n     if (j) {\r\n         chunk[i++] = b64[t];\r\n         chunk[i++] = 61;\r\n         if (j === 1)\r\n             chunk[i++] = 61;\r\n     }\r\n     if (parts) {\r\n         if (i)\r\n             parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n         return parts.join(\"\");\r\n     }\r\n     return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n };\r\n\r\n var invalidEncoding = \"invalid encoding\";\r\n\r\n /**\r\n  * Decodes a base64 encoded string to a buffer.\r\n  * @param {string} string Source string\r\n  * @param {Uint8Array} buffer Destination buffer\r\n  * @param {number} offset Destination offset\r\n  * @returns {number} Number of bytes written\r\n  * @throws {Error} If encoding is invalid\r\n  */\r\n base64.decode = function decode(string, buffer, offset) {\r\n     var start = offset;\r\n     var j = 0, // goto index\r\n         t;     // temporary\r\n     for (var i = 0; i < string.length;) {\r\n         var c = string.charCodeAt(i++);\r\n         if (c === 61 && j > 1)\r\n             break;\r\n         if ((c = s64[c]) === undefined)\r\n             throw Error(invalidEncoding);\r\n         switch (j) {\r\n             case 0:\r\n                 t = c;\r\n                 j = 1;\r\n                 break;\r\n             case 1:\r\n                 buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                 t = c;\r\n                 j = 2;\r\n                 break;\r\n             case 2:\r\n                 buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                 t = c;\r\n                 j = 3;\r\n                 break;\r\n             case 3:\r\n                 buffer[offset++] = (t & 3) << 6 | c;\r\n                 j = 0;\r\n                 break;\r\n         }\r\n     }\r\n     if (j === 1)\r\n         throw Error(invalidEncoding);\r\n     return offset - start;\r\n };\r\n\r\n /**\r\n  * Tests if the specified string appears to be base64 encoded.\r\n  * @param {string} string String to test\r\n  * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n  */\r\n base64.test = function test(string) {\r\n     return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n };\r\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}