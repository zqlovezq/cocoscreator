{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/protobufjs/src/parse.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","_req6","_req7","_req8","_req9","url","define","exports","require","module","__filename","__dirname","parse","filename","defaults","keepCase","tokenize","Root","Type","Field","MapField","OneOf","Enum","Service","Method","types","util","base10Re","base10NegRe","base16Re","base16NegRe","base8Re","base8NegRe","numberRe","nameRe","typeRefRe","fqTypeRefRe","source","root","options","preferTrailingComment","tn","alternateCommentMode","next","push","peek","skip","cmnt","head","pkg","imports","weakImports","syntax","isProto3","ptr","applyCase","name","camelCase","illegal","token","insideTryCatch","Error","line","readString","values","join","readValue","acceptTypeRef","parseNumber","e","test","readRanges","target","acceptStrings","start","parseId","dummy","undefined","setOption","value","ifBlock","parseRange_block","parseOption","parseRange_line","parseInlineOptions","sign","charAt","substring","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","parseImport","whichImports","parseSyntax","parseCommon","parent","parseType","parseEnum","parseService","parseExtension","obj","fnIf","fnElse","trailingLine","comment","type","parseType_block","parseMapField","parseField","parseOneOf","extensions","reserved","add","rule","extend","parseGroup","endsWith","startsWith","field","parseField_block","parseField_line","oneof","repeated","packed","basic","fieldName","lcFirst","ucFirst","id","group","parseGroup_block","keyType","mapKey","valueType","parseMapField_block","parseMapField_line","parseOneOf_block","enm","parseEnum_block","parseEnumValue","parseEnumValue_block","parseEnumValue_line","isCustom","option","propName","slice","optionValue","parseOptionValue","setParsedOption","objectResult","lastValue","prevValue","concat","simpleValue","service","parseService_block","parseMethod","commentText","requestType","requestStream","responseType","responseStream","method","parseMethod_block","reference","parseExtension_block","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './tokenize';\nimport { __cjsMetaURL as _req0} from './root';\nimport { __cjsMetaURL as _req1} from './type';\nimport { __cjsMetaURL as _req2} from './field';\nimport { __cjsMetaURL as _req3} from './mapfield';\nimport { __cjsMetaURL as _req4} from './oneof';\nimport { __cjsMetaURL as _req5} from './enum';\nimport { __cjsMetaURL as _req6} from './service';\nimport { __cjsMetaURL as _req7} from './method';\nimport { __cjsMetaURL as _req8} from './types';\nimport { __cjsMetaURL as _req9} from './util';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n module.exports = parse;\n\n parse.filename = null;\n parse.defaults = { keepCase: false };\n\n var tokenize  = require(\"./tokenize\"),\n     Root      = require(\"./root\"),\n     Type      = require(\"./type\"),\n     Field     = require(\"./field\"),\n     MapField  = require(\"./mapfield\"),\n     OneOf     = require(\"./oneof\"),\n     Enum      = require(\"./enum\"),\n     Service   = require(\"./service\"),\n     Method    = require(\"./method\"),\n     types     = require(\"./types\"),\n     util      = require(\"./util\");\n\n var base10Re    = /^[1-9][0-9]*$/,\n     base10NegRe = /^-?[1-9][0-9]*$/,\n     base16Re    = /^0[x][0-9a-fA-F]+$/,\n     base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n     base8Re     = /^0[0-7]+$/,\n     base8NegRe  = /^-?0[0-7]+$/,\n     numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n     nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n     typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n     fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n /**\n  * Result object returned from {@link parse}.\n  * @interface IParserResult\n  * @property {string|undefined} package Package name, if declared\n  * @property {string[]|undefined} imports Imports, if any\n  * @property {string[]|undefined} weakImports Weak imports, if any\n  * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n  * @property {Root} root Populated root instance\n  */\n\n /**\n  * Options modifying the behavior of {@link parse}.\n  * @interface IParseOptions\n  * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n  * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n  * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n  */\n\n /**\n  * Options modifying the behavior of JSON serialization.\n  * @interface IToJSONOptions\n  * @property {boolean} [keepComments=false] Serializes comments.\n  */\n\n /**\n  * Parses the given .proto source and returns an object with the parsed contents.\n  * @param {string} source Source contents\n  * @param {Root} root Root to populate\n  * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n  * @returns {IParserResult} Parser result\n  * @property {string} filename=null Currently processing file name for error reporting, if known\n  * @property {IParseOptions} defaults Default {@link IParseOptions}\n  */\n function parse(source, root, options) {\n     /* eslint-disable callback-return */\n     if (!(root instanceof Root)) {\n         options = root;\n         root = new Root();\n     }\n     if (!options)\n         options = parse.defaults;\n\n     var preferTrailingComment = options.preferTrailingComment || false;\n     var tn = tokenize(source, options.alternateCommentMode || false),\n         next = tn.next,\n         push = tn.push,\n         peek = tn.peek,\n         skip = tn.skip,\n         cmnt = tn.cmnt;\n\n     var head = true,\n         pkg,\n         imports,\n         weakImports,\n         syntax,\n         isProto3 = false;\n\n     var ptr = root;\n\n     var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\n\n     /* istanbul ignore next */\n     function illegal(token, name, insideTryCatch) {\n         var filename = parse.filename;\n         if (!insideTryCatch)\n             parse.filename = null;\n         return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n     }\n\n     function readString() {\n         var values = [],\n             token;\n         do {\n             /* istanbul ignore if */\n             if ((token = next()) !== \"\\\"\" && token !== \"'\")\n                 throw illegal(token);\n\n             values.push(next());\n             skip(token);\n             token = peek();\n         } while (token === \"\\\"\" || token === \"'\");\n         return values.join(\"\");\n     }\n\n     function readValue(acceptTypeRef) {\n         var token = next();\n         switch (token) {\n             case \"'\":\n             case \"\\\"\":\n                 push(token);\n                 return readString();\n             case \"true\": case \"TRUE\":\n                 return true;\n             case \"false\": case \"FALSE\":\n                 return false;\n         }\n         try {\n             return parseNumber(token, /* insideTryCatch */ true);\n         } catch (e) {\n\n             /* istanbul ignore else */\n             if (acceptTypeRef && typeRefRe.test(token))\n                 return token;\n\n             /* istanbul ignore next */\n             throw illegal(token, \"value\");\n         }\n     }\n\n     function readRanges(target, acceptStrings) {\n         var token, start;\n         do {\n             if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\n                 target.push(readString());\n             else\n                 target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\n         } while (skip(\",\", true));\n         var dummy = {options: undefined};\n         dummy.setOption = function(name, value) {\n           if (this.options === undefined) this.options = {};\n           this.options[name] = value;\n         };\n         ifBlock(\n             dummy,\n             function parseRange_block(token) {\n               /* istanbul ignore else */\n               if (token === \"option\") {\n                 parseOption(dummy, token);  // skip\n                 skip(\";\");\n               } else\n                 throw illegal(token);\n             },\n             function parseRange_line() {\n               parseInlineOptions(dummy);  // skip\n             });\n     }\n\n     function parseNumber(token, insideTryCatch) {\n         var sign = 1;\n         if (token.charAt(0) === \"-\") {\n             sign = -1;\n             token = token.substring(1);\n         }\n         switch (token) {\n             case \"inf\": case \"INF\": case \"Inf\":\n                 return sign * Infinity;\n             case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\n                 return NaN;\n             case \"0\":\n                 return 0;\n         }\n         if (base10Re.test(token))\n             return sign * parseInt(token, 10);\n         if (base16Re.test(token))\n             return sign * parseInt(token, 16);\n         if (base8Re.test(token))\n             return sign * parseInt(token, 8);\n\n         /* istanbul ignore else */\n         if (numberRe.test(token))\n             return sign * parseFloat(token);\n\n         /* istanbul ignore next */\n         throw illegal(token, \"number\", insideTryCatch);\n     }\n\n     function parseId(token, acceptNegative) {\n         switch (token) {\n             case \"max\": case \"MAX\": case \"Max\":\n                 return 536870911;\n             case \"0\":\n                 return 0;\n         }\n\n         /* istanbul ignore if */\n         if (!acceptNegative && token.charAt(0) === \"-\")\n             throw illegal(token, \"id\");\n\n         if (base10NegRe.test(token))\n             return parseInt(token, 10);\n         if (base16NegRe.test(token))\n             return parseInt(token, 16);\n\n         /* istanbul ignore else */\n         if (base8NegRe.test(token))\n             return parseInt(token, 8);\n\n         /* istanbul ignore next */\n         throw illegal(token, \"id\");\n     }\n\n     function parsePackage() {\n\n         /* istanbul ignore if */\n         if (pkg !== undefined)\n             throw illegal(\"package\");\n\n         pkg = next();\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(pkg))\n             throw illegal(pkg, \"name\");\n\n         ptr = ptr.define(pkg);\n         skip(\";\");\n     }\n\n     function parseImport() {\n         var token = peek();\n         var whichImports;\n         switch (token) {\n             case \"weak\":\n                 whichImports = weakImports || (weakImports = []);\n                 next();\n                 break;\n             case \"public\":\n                 next();\n                 // eslint-disable-next-line no-fallthrough\n             default:\n                 whichImports = imports || (imports = []);\n                 break;\n         }\n         token = readString();\n         skip(\";\");\n         whichImports.push(token);\n     }\n\n     function parseSyntax() {\n         skip(\"=\");\n         syntax = readString();\n         isProto3 = syntax === \"proto3\";\n\n         /* istanbul ignore if */\n         if (!isProto3 && syntax !== \"proto2\")\n             throw illegal(syntax, \"syntax\");\n\n         skip(\";\");\n     }\n\n     function parseCommon(parent, token) {\n         switch (token) {\n\n             case \"option\":\n                 parseOption(parent, token);\n                 skip(\";\");\n                 return true;\n\n             case \"message\":\n                 parseType(parent, token);\n                 return true;\n\n             case \"enum\":\n                 parseEnum(parent, token);\n                 return true;\n\n             case \"service\":\n                 parseService(parent, token);\n                 return true;\n\n             case \"extend\":\n                 parseExtension(parent, token);\n                 return true;\n         }\n         return false;\n     }\n\n     function ifBlock(obj, fnIf, fnElse) {\n         var trailingLine = tn.line;\n         if (obj) {\n             if(typeof obj.comment !== \"string\") {\n               obj.comment = cmnt(); // try block-type comment\n             }\n             obj.filename = parse.filename;\n         }\n         if (skip(\"{\", true)) {\n             var token;\n             while ((token = next()) !== \"}\")\n                 fnIf(token);\n             skip(\";\", true);\n         } else {\n             if (fnElse)\n                 fnElse();\n             skip(\";\");\n             if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\n                 obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n         }\n     }\n\n     function parseType(parent, token) {\n\n         /* istanbul ignore if */\n         if (!nameRe.test(token = next()))\n             throw illegal(token, \"type name\");\n\n         var type = new Type(token);\n         ifBlock(type, function parseType_block(token) {\n             if (parseCommon(type, token))\n                 return;\n\n             switch (token) {\n\n                 case \"map\":\n                     parseMapField(type, token);\n                     break;\n\n                 case \"required\":\n                 case \"repeated\":\n                     parseField(type, token);\n                     break;\n\n                 case \"optional\":\n                     /* istanbul ignore if */\n                     if (isProto3) {\n                         parseField(type, \"proto3_optional\");\n                     } else {\n                         parseField(type, \"optional\");\n                     }\n                     break;\n\n                 case \"oneof\":\n                     parseOneOf(type, token);\n                     break;\n\n                 case \"extensions\":\n                     readRanges(type.extensions || (type.extensions = []));\n                     break;\n\n                 case \"reserved\":\n                     readRanges(type.reserved || (type.reserved = []), true);\n                     break;\n\n                 default:\n                     /* istanbul ignore if */\n                     if (!isProto3 || !typeRefRe.test(token))\n                         throw illegal(token);\n\n                     push(token);\n                     parseField(type, \"optional\");\n                     break;\n             }\n         });\n         parent.add(type);\n     }\n\n     function parseField(parent, rule, extend) {\n         var type = next();\n         if (type === \"group\") {\n             parseGroup(parent, rule);\n             return;\n         }\n         // Type names can consume multiple tokens, in multiple variants:\n         //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n         //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n         //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n         //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n         // Keep reading tokens until we get a type name with no period at the end,\n         // and the next token does not start with a period.\n         while (type.endsWith(\".\") || peek().startsWith(\".\")) {\n             type += next();\n         }\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(type))\n             throw illegal(type, \"type\");\n\n         var name = next();\n\n         /* istanbul ignore if */\n         if (!nameRe.test(name))\n             throw illegal(name, \"name\");\n\n         name = applyCase(name);\n         skip(\"=\");\n\n         var field = new Field(name, parseId(next()), type, rule, extend);\n         ifBlock(field, function parseField_block(token) {\n\n             /* istanbul ignore else */\n             if (token === \"option\") {\n                 parseOption(field, token);\n                 skip(\";\");\n             } else\n                 throw illegal(token);\n\n         }, function parseField_line() {\n             parseInlineOptions(field);\n         });\n\n         if (rule === \"proto3_optional\") {\n             // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n             var oneof = new OneOf(\"_\" + name);\n             field.setOption(\"proto3_optional\", true);\n             oneof.add(field);\n             parent.add(oneof);\n         } else {\n             parent.add(field);\n         }\n\n         // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n         // parsing proto2 descriptors without the option, where applicable. This must be done for\n         // all known packable types and anything that could be an enum (= is not a basic type).\n         if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\n             field.setOption(\"packed\", false, /* ifNotSet */ true);\n     }\n\n     function parseGroup(parent, rule) {\n         var name = next();\n\n         /* istanbul ignore if */\n         if (!nameRe.test(name))\n             throw illegal(name, \"name\");\n\n         var fieldName = util.lcFirst(name);\n         if (name === fieldName)\n             name = util.ucFirst(name);\n         skip(\"=\");\n         var id = parseId(next());\n         var type = new Type(name);\n         type.group = true;\n         var field = new Field(fieldName, id, name, rule);\n         field.filename = parse.filename;\n         ifBlock(type, function parseGroup_block(token) {\n             switch (token) {\n\n                 case \"option\":\n                     parseOption(type, token);\n                     skip(\";\");\n                     break;\n\n                 case \"required\":\n                 case \"repeated\":\n                     parseField(type, token);\n                     break;\n\n                 case \"optional\":\n                     /* istanbul ignore if */\n                     if (isProto3) {\n                         parseField(type, \"proto3_optional\");\n                     } else {\n                         parseField(type, \"optional\");\n                     }\n                     break;\n\n                 case \"message\":\n                     parseType(type, token);\n                     break;\n\n                 case \"enum\":\n                     parseEnum(type, token);\n                     break;\n\n                 /* istanbul ignore next */\n                 default:\n                     throw illegal(token); // there are no groups with proto3 semantics\n             }\n         });\n         parent.add(type)\n               .add(field);\n     }\n\n     function parseMapField(parent) {\n         skip(\"<\");\n         var keyType = next();\n\n         /* istanbul ignore if */\n         if (types.mapKey[keyType] === undefined)\n             throw illegal(keyType, \"type\");\n\n         skip(\",\");\n         var valueType = next();\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(valueType))\n             throw illegal(valueType, \"type\");\n\n         skip(\">\");\n         var name = next();\n\n         /* istanbul ignore if */\n         if (!nameRe.test(name))\n             throw illegal(name, \"name\");\n\n         skip(\"=\");\n         var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n         ifBlock(field, function parseMapField_block(token) {\n\n             /* istanbul ignore else */\n             if (token === \"option\") {\n                 parseOption(field, token);\n                 skip(\";\");\n             } else\n                 throw illegal(token);\n\n         }, function parseMapField_line() {\n             parseInlineOptions(field);\n         });\n         parent.add(field);\n     }\n\n     function parseOneOf(parent, token) {\n\n         /* istanbul ignore if */\n         if (!nameRe.test(token = next()))\n             throw illegal(token, \"name\");\n\n         var oneof = new OneOf(applyCase(token));\n         ifBlock(oneof, function parseOneOf_block(token) {\n             if (token === \"option\") {\n                 parseOption(oneof, token);\n                 skip(\";\");\n             } else {\n                 push(token);\n                 parseField(oneof, \"optional\");\n             }\n         });\n         parent.add(oneof);\n     }\n\n     function parseEnum(parent, token) {\n\n         /* istanbul ignore if */\n         if (!nameRe.test(token = next()))\n             throw illegal(token, \"name\");\n\n         var enm = new Enum(token);\n         ifBlock(enm, function parseEnum_block(token) {\n           switch(token) {\n             case \"option\":\n               parseOption(enm, token);\n               skip(\";\");\n               break;\n\n             case \"reserved\":\n               readRanges(enm.reserved || (enm.reserved = []), true);\n               break;\n\n             default:\n               parseEnumValue(enm, token);\n           }\n         });\n         parent.add(enm);\n     }\n\n     function parseEnumValue(parent, token) {\n\n         /* istanbul ignore if */\n         if (!nameRe.test(token))\n             throw illegal(token, \"name\");\n\n         skip(\"=\");\n         var value = parseId(next(), true),\n             dummy = {\n                 options: undefined\n             };\n         dummy.setOption = function(name, value) {\n             if (this.options === undefined)\n                 this.options = {};\n             this.options[name] = value;\n         };\n         ifBlock(dummy, function parseEnumValue_block(token) {\n\n             /* istanbul ignore else */\n             if (token === \"option\") {\n                 parseOption(dummy, token); // skip\n                 skip(\";\");\n             } else\n                 throw illegal(token);\n\n         }, function parseEnumValue_line() {\n             parseInlineOptions(dummy); // skip\n         });\n         parent.add(token, value, dummy.comment, dummy.options);\n     }\n\n     function parseOption(parent, token) {\n         var isCustom = skip(\"(\", true);\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(token = next()))\n             throw illegal(token, \"name\");\n\n         var name = token;\n         var option = name;\n         var propName;\n\n         if (isCustom) {\n             skip(\")\");\n             name = \"(\" + name + \")\";\n             option = name;\n             token = peek();\n             if (fqTypeRefRe.test(token)) {\n                 propName = token.slice(1); //remove '.' before property name\n                 name += token;\n                 next();\n             }\n         }\n         skip(\"=\");\n         var optionValue = parseOptionValue(parent, name);\n         setParsedOption(parent, option, optionValue, propName);\n     }\n\n     function parseOptionValue(parent, name) {\n         // { a: \"foo\" b { c: \"bar\" } }\n         if (skip(\"{\", true)) {\n             var objectResult = {};\n\n             while (!skip(\"}\", true)) {\n                 /* istanbul ignore if */\n                 if (!nameRe.test(token = next())) {\n                     throw illegal(token, \"name\");\n                 }\n                 if (token === null) {\n                   throw illegal(token, \"end of input\");\n                 }\n\n                 var value;\n                 var propName = token;\n\n                 skip(\":\", true);\n\n                 if (peek() === \"{\")\n                     value = parseOptionValue(parent, name + \".\" + token);\n                 else if (peek() === \"[\") {\n                     // option (my_option) = {\n                     //     repeated_value: [ \"foo\", \"bar\" ]\n                     // };\n                     value = [];\n                     var lastValue;\n                     if (skip(\"[\", true)) {\n                         do {\n                             lastValue = readValue(true);\n                             value.push(lastValue);\n                         } while (skip(\",\", true));\n                         skip(\"]\");\n                         if (typeof lastValue !== \"undefined\") {\n                             setOption(parent, name + \".\" + token, lastValue);\n                         }\n                     }\n                 } else {\n                     value = readValue(true);\n                     setOption(parent, name + \".\" + token, value);\n                 }\n\n                 var prevValue = objectResult[propName];\n\n                 if (prevValue)\n                     value = [].concat(prevValue).concat(value);\n\n                 objectResult[propName] = value;\n\n                 // Semicolons and commas can be optional\n                 skip(\",\", true);\n                 skip(\";\", true);\n             }\n\n             return objectResult;\n         }\n\n         var simpleValue = readValue(true);\n         setOption(parent, name, simpleValue);\n         return simpleValue;\n         // Does not enforce a delimiter to be universal\n     }\n\n     function setOption(parent, name, value) {\n         if (parent.setOption)\n             parent.setOption(name, value);\n     }\n\n     function setParsedOption(parent, name, value, propName) {\n         if (parent.setParsedOption)\n             parent.setParsedOption(name, value, propName);\n     }\n\n     function parseInlineOptions(parent) {\n         if (skip(\"[\", true)) {\n             do {\n                 parseOption(parent, \"option\");\n             } while (skip(\",\", true));\n             skip(\"]\");\n         }\n         return parent;\n     }\n\n     function parseService(parent, token) {\n\n         /* istanbul ignore if */\n         if (!nameRe.test(token = next()))\n             throw illegal(token, \"service name\");\n\n         var service = new Service(token);\n         ifBlock(service, function parseService_block(token) {\n             if (parseCommon(service, token))\n                 return;\n\n             /* istanbul ignore else */\n             if (token === \"rpc\")\n                 parseMethod(service, token);\n             else\n                 throw illegal(token);\n         });\n         parent.add(service);\n     }\n\n     function parseMethod(parent, token) {\n         // Get the comment of the preceding line now (if one exists) in case the\n         // method is defined across multiple lines.\n         var commentText = cmnt();\n\n         var type = token;\n\n         /* istanbul ignore if */\n         if (!nameRe.test(token = next()))\n             throw illegal(token, \"name\");\n\n         var name = token,\n             requestType, requestStream,\n             responseType, responseStream;\n\n         skip(\"(\");\n         if (skip(\"stream\", true))\n             requestStream = true;\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(token = next()))\n             throw illegal(token);\n\n         requestType = token;\n         skip(\")\"); skip(\"returns\"); skip(\"(\");\n         if (skip(\"stream\", true))\n             responseStream = true;\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(token = next()))\n             throw illegal(token);\n\n         responseType = token;\n         skip(\")\");\n\n         var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n         method.comment = commentText;\n         ifBlock(method, function parseMethod_block(token) {\n\n             /* istanbul ignore else */\n             if (token === \"option\") {\n                 parseOption(method, token);\n                 skip(\";\");\n             } else\n                 throw illegal(token);\n\n         });\n         parent.add(method);\n     }\n\n     function parseExtension(parent, token) {\n\n         /* istanbul ignore if */\n         if (!typeRefRe.test(token = next()))\n             throw illegal(token, \"reference\");\n\n         var reference = token;\n         ifBlock(null, function parseExtension_block(token) {\n             switch (token) {\n\n                 case \"required\":\n                 case \"repeated\":\n                     parseField(parent, token, reference);\n                     break;\n\n                 case \"optional\":\n                     /* istanbul ignore if */\n                     if (isProto3) {\n                         parseField(parent, \"proto3_optional\", reference);\n                     } else {\n                         parseField(parent, \"optional\", reference);\n                     }\n                     break;\n\n                 default:\n                     /* istanbul ignore if */\n                     if (!isProto3 || !typeRefRe.test(token))\n                         throw illegal(token);\n                     push(token);\n                     parseField(parent, \"optional\", reference);\n                     break;\n             }\n         });\n     }\n\n     var token;\n     while ((token = next()) !== null) {\n         switch (token) {\n\n             case \"package\":\n\n                 /* istanbul ignore if */\n                 if (!head)\n                     throw illegal(token);\n\n                 parsePackage();\n                 break;\n\n             case \"import\":\n\n                 /* istanbul ignore if */\n                 if (!head)\n                     throw illegal(token);\n\n                 parseImport();\n                 break;\n\n             case \"syntax\":\n\n                 /* istanbul ignore if */\n                 if (!head)\n                     throw illegal(token);\n\n                 parseSyntax();\n                 break;\n\n             case \"option\":\n\n                 parseOption(ptr, token);\n                 skip(\";\");\n                 break;\n\n             default:\n\n                 /* istanbul ignore else */\n                 if (parseCommon(ptr, token)) {\n                     head = false;\n                     continue;\n                 }\n\n                 /* istanbul ignore next */\n                 throw illegal(token);\n         }\n     }\n\n     parse.filename = null;\n     return {\n         \"package\"     : pkg,\n         \"imports\"     : imports,\n          weakImports  : weakImports,\n          syntax       : syntax,\n          root         : root\n     };\n }\n\n /**\n  * Parses the given .proto source and returns an object with the parsed contents.\n  * @name parse\n  * @function\n  * @param {string} source Source contents\n  * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n  * @returns {IParserResult} Parser result\n  * @property {string} filename=null Currently processing file name for error reporting, if known\n  * @property {IParseOptions} defaults Default {@link IParseOptions}\n  * @variation 2\n  */\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './tokenize': _req,\n  './root': _req0,\n  './type': _req1,\n  './field': _req2,\n  './mapfield': _req3,\n  './oneof': _req4,\n  './enum': _req5,\n  './service': _req6,\n  './method': _req7,\n  './types': _req8,\n  './util': _req9,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}