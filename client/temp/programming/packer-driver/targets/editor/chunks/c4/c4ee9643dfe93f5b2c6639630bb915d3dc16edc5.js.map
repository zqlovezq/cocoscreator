{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/skill/SkillTrigger.ts"],"names":["_decorator","tab","Random","ccclass","property","Math_RATIO","SkillTrigger","configId","configTab","get","triggerId","sk","skillTriger","pop","setConfigId","put","push","id","getData","TriggerTableById","getValue","isType","type","Triggertype","getParameters","Parameters","isParametersSucceed","parm","isTriggerChanceSucceed","isSuccess","Chance","reset","destroy"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,G,iBAAAA,G;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;;;OAGH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;AACxBK,MAAAA,U,GAAa,K;;8BAGNC,Y,WADZH,OAAO,CAAC,cAAD,C,2BAAR,MACaG,YADb,CAC0B;AAAA;AAAA,eAgBtBC,QAhBsB;AAAA,eAiBtBC,SAjBsB;AAAA;;AAGZ,eAAHC,GAAG,CAACC,SAAD,EAAoB;AAC1B,cAAIC,EAAE,GAAGL,YAAY,CAACM,WAAb,CAAyBC,GAAzB,EAAT;;AACA,cAAIF,EAAE,IAAI,IAAV,EAAgB;AACZA,YAAAA,EAAE,GAAG,IAAIL,YAAJ,EAAL;AACH;;AACDK,UAAAA,EAAE,CAACG,WAAH,CAAeJ,SAAf;AACA,iBAAOC,EAAP;AACH;;AAES,eAAHI,GAAG,CAACJ,EAAD,EAAmB;AACzBL,UAAAA,YAAY,CAACM,WAAb,CAAyBI,IAAzB,CAA8BL,EAA9B;AACH;;AAKDG,QAAAA,WAAW,CAACG,EAAD,EAAa;AACpB,eAAKV,QAAL,GAAgBU,EAAhB;AACA,eAAKT,SAAL,GAAiB;AAAA;AAAA,0BAAIU,OAAJ,GAAcC,gBAAd,CAA+BC,QAA/B,CAAwCH,EAAxC,CAAjB;AACH;;AAEDI,QAAAA,MAAM,CAACC,IAAD,EAAwB;AAC1B,iBAAO,KAAKd,SAAL,CAAee,WAAf,IAA8BD,IAArC;AACH;AACD;;;AACAE,QAAAA,aAAa,GAAG;AACZ,iBAAO,KAAKhB,SAAL,CAAeiB,UAAtB;AACH;AAED;;;AACAC,QAAAA,mBAAmB,CAACC,IAAD,EAAe;AAC9B,iBAAOA,IAAI,IAAI,KAAKH,aAAL,EAAf;AACH;AAED;;;AACAI,QAAAA,sBAAsB,GAAG;AACrB;AACA,iBAAO;AAAA;AAAA,gCAAOC,SAAP,CAAiB,KAAKrB,SAAL,CAAesB,MAAhC,CAAP;AACH;;AAGDC,QAAAA,KAAK,GAAG;AACJ,eAAKxB,QAAL,GAAgB,CAAhB;AACA,eAAKC,SAAL,GAAiB,IAAjB;AACH;;AAEDwB,QAAAA,OAAO,GAAG;AACN1B,UAAAA,YAAY,CAACM,WAAb,CAAyBI,IAAzB,CAA8B,IAA9B;AACH;;AAnDqB,O,UACPJ,W,GAA8B,E","sourcesContent":["import { _decorator, Component } from \"cc\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { Random } from \"../../util/Random\";\nimport { Skill } from \"./Skill\";\n\nconst { ccclass, property } = _decorator;\nconst Math_RATIO = 10000;\n\n@ccclass('SkillTrigger')\nexport class SkillTrigger {\n    private static skillTriger: SkillTrigger[] = []\n\n    static get(triggerId: number) {\n        let sk = SkillTrigger.skillTriger.pop()\n        if (sk == null) {\n            sk = new SkillTrigger()\n        }\n        sk.setConfigId(triggerId)\n        return sk\n    }\n\n    static put(sk: SkillTrigger) {\n        SkillTrigger.skillTriger.push(sk)\n    }\n\n    configId: number\n    configTab: tab.TriggerTable\n\n    setConfigId(id: number) {\n        this.configId = id\n        this.configTab = tab.getData().TriggerTableById.getValue(id)\n    }\n\n    isType(type: tab.Triggertype) {\n        return this.configTab.Triggertype == type\n    }\n    /** 触发参数 */\n    getParameters() {\n        return this.configTab.Parameters\n    }\n\n    /** 触发器参数是否成功 */\n    isParametersSucceed(parm: number) {\n        return parm >= this.getParameters()\n    }\n\n    /** 触发器概率是否成功 */\n    isTriggerChanceSucceed() {\n        // 触发器\n        return Random.isSuccess(this.configTab.Chance)\n    }\n\n\n    reset() {\n        this.configId = 0\n        this.configTab = null\n    }\n\n    destroy() {\n        SkillTrigger.skillTriger.push(this)\n    }\n}"]}