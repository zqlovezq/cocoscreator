{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/gainBuff/FightGainBuffControl.ts"],"names":["FightGainBuffControl","_decorator","AbsControl","tab","EventMgr","FightEvent","ccclass","property","gainMap","Map","ins","_instance","purge","clear","init","initRegister","register","onFight","Fight_Start_Complete","onFight_Start_Complete","Select_leader","onSelect_leader","checkAbsRoleGainBuff","oncheckAbsRoleGainBuff","gainList","getListByType","EffectTarget","EffectTarget_Rogue","i","length","conf","index","CorrespondingId","emitFight","giveRogue","leaderRole","list","EffectTarget_Hero","v","Own","OwnClass","OwnClass_TeamLeader","gainAbsRole","checkHeroUp","absRole","isRole","inRole","isMonster","inMonster","addIds","ids","forEach","id","addId","getData","PveStageBuffTableById","getValue","push","hasType","type","has","set","get","hasTypeAndCorrespondingId","j","vid","role","heroClass","ownClassToHeroClass","OwnClass_All","info","isHeroClass","monster","EffectTarget_Monster","skillTab","skillPowers","createTypeAnyId","PowerType","PowerType_SkillTable","addSkill","own","HeroClass","HeroClass_Any","OwnClass_Assassin","HeroClass_Assassin","OwnClass_Archer","HeroClass_Archer","OwnClass_Priest","HeroClass_Priest","OwnClass_Caster","HeroClass_Caster","OwnClass_Warrior","HeroClass_Warrior","HeroClass_Max"],"mappings":"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","sourcesContent":["import { _decorator } from \"cc\";\nimport { AbsControl, IClear } from \"../../../framework/base/IAbs\";\nimport { tab } from \"../../../Table/table_gen\";\n// import { RogueControl } from \"../view/rogue/RogueControl\";\nimport { EventMgr } from \"../../mgr/EventMgr\";\nimport { FightEvent } from \"../define/FightEvent\";\nimport { Role } from \"../base/obj/role/role/Role\";\nimport { RogueControl } from \"../view/rogue/RogueControl\";\nimport { AbsRole } from \"../base/obj/role/AbsRole\";\nimport { Monster } from \"../base/obj/role/monster/Monster\";\nimport { SkillControl } from \"../base/skill/SkillControl\";\nimport { SkillTab } from \"../power/powerTab/SkillTab\";\n\nconst { ccclass, property } = _decorator;\n\n/** 战场增益buff */\nexport class FightGainBuffControl extends AbsControl implements IClear {\n    private static _instance: FightGainBuffControl;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new FightGainBuffControl();\n        }\n        return this._instance;\n    }\n\n    gainMap: Map<tab.EffectTarget, tab.PveStageBuffTable[]> = new Map();\n    purge(): void {\n        this.gainMap.clear()\n    }\n\n    init() {\n        this.purge()\n    }\n\n    initRegister() {\n        this.register()\n    }\n\n    register() {\n        EventMgr.onFight(FightEvent.Fight_Start_Complete, this.onFight_Start_Complete, this)\n        EventMgr.onFight(FightEvent.Select_leader, this.onSelect_leader, this)\n        EventMgr.onFight(FightEvent.checkAbsRoleGainBuff, this.oncheckAbsRoleGainBuff, this)\n    }\n\n    onFight_Start_Complete() {\n        //处理进场送rogueid\n        let gainList = this.getListByType(tab.EffectTarget.EffectTarget_Rogue)\n        for (let i = 0; i < gainList.length; i++) {\n            let conf = gainList[i]\n            for (let index = 0; index < conf.CorrespondingId.length; index++) {\n                EventMgr.emitFight(FightEvent.giveRogue, conf.CorrespondingId[index])\n            }\n        }\n    }\n    onSelect_leader(leaderRole: Role) {\n        let list = this.getListByType(tab.EffectTarget.EffectTarget_Hero)\n        if (list.length > 0) {\n            for (let index = 0; index < list.length; index++) {\n                const v = list[index];\n                if (v.Own == tab.OwnClass.OwnClass_TeamLeader) {\n                    this.gainAbsRole(leaderRole, v)\n                }\n            }\n        }\n        EventMgr.emitFight(FightEvent.checkHeroUp, leaderRole)\n    }\n\n    oncheckAbsRoleGainBuff(absRole: AbsRole) {\n        if (absRole.isRole()) {\n            this.inRole(absRole as Role)\n        } else if (absRole.isMonster()) {\n            this.inMonster(absRole as Monster)\n        }\n    }\n\n    addIds(ids: number[]) {\n        ids.forEach(id => {\n            this.addId(id)\n        })\n\n    }\n\n    addId(id: number) {\n        let conf = tab.getData().PveStageBuffTableById.getValue(id)\n        if (conf) {\n            let list = this.getListByType(conf.EffectTarget)\n            list.push(conf)\n        }\n    }\n\n    hasType(type: tab.EffectTarget) {\n        return this.gainMap.has(type);\n    }\n\n    getListByType(type: tab.EffectTarget) {\n        if (!this.hasType(type)) {\n            this.gainMap.set(type, [])\n        }\n        return this.gainMap.get(type);\n    }\n\n    /** 是否有指定类型的对应id */\n    hasTypeAndCorrespondingId(type: tab.EffectTarget, id: number) {\n        let list = this.getListByType(type)\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            for (let j = 0; j < v.CorrespondingId.length; j++) {\n                const vid = v.CorrespondingId[j];\n                if (vid == id) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n\n    // /**\n    //  * \n    //  * @param role 角色\n    //  */\n    inRole(role: Role) {\n        let list = this.getListByType(tab.EffectTarget.EffectTarget_Hero)\n        if (list.length > 0) {\n            for (let index = 0; index < list.length; index++) {\n                const v = list[index];\n                if (v.Own == tab.OwnClass.OwnClass_TeamLeader) { //队长在选择完英雄后，事件内处理\n                    continue;\n                }\n                let heroClass: tab.HeroClass = this.ownClassToHeroClass(v.Own)\n                if (v.Own == tab.OwnClass.OwnClass_All) {\n                    this.gainAbsRole(role, v)\n                } else if (role.info.isHeroClass(heroClass)) {\n                    this.gainAbsRole(role, v)\n                }\n            }\n        }\n    }\n\n    inMonster(monster: Monster) {\n        let list = this.getListByType(tab.EffectTarget.EffectTarget_Monster)\n        if (list.length > 0) {\n            for (let index = 0; index < list.length; index++) {\n                const v = list[index];\n                if (v.Own == tab.OwnClass.OwnClass_All) {\n                    this.gainAbsRole(monster, v)\n                }\n            }\n        }\n    }\n\n    gainAbsRole(absRole: AbsRole, conf: tab.PveStageBuffTable) {\n        // console.log(\"增益\", absRole, conf)\n        for (let index = 0; index < conf.CorrespondingId.length; index++) {\n            const v = conf.CorrespondingId[index];\n            let skillTab = absRole.info.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillTable, v) as SkillTab\n            EventMgr.emitFight(FightEvent.addSkill, skillTab, absRole)\n        }\n    }\n\n\n    ownClassToHeroClass(own: tab.OwnClass) {\n        switch (own) {\n            case tab.OwnClass.OwnClass_All:\n                return tab.HeroClass.HeroClass_Any\n            case tab.OwnClass.OwnClass_Assassin:\n                return tab.HeroClass.HeroClass_Assassin\n            case tab.OwnClass.OwnClass_Archer:\n                return tab.HeroClass.HeroClass_Archer\n            case tab.OwnClass.OwnClass_Priest:\n                return tab.HeroClass.HeroClass_Priest\n            case tab.OwnClass.OwnClass_Caster:\n                return tab.HeroClass.HeroClass_Caster\n            case tab.OwnClass.OwnClass_Warrior:\n                return tab.HeroClass.HeroClass_Warrior\n        }\n        return tab.HeroClass.HeroClass_Max\n    }\n\n}"]}