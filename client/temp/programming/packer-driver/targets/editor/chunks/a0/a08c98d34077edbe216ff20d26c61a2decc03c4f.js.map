{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/model/mutation/TalentItem.ts"],"names":["_decorator","Color","Label","ProgressBar","Sprite","tween","Vec3","InfiniteCell","Func","tab","RoleData","ItemData","ccclass","property","TalentItem","_itemData","_view","_big_data","UpdateContent","data","view","smallLevel","ins","gene","smallGeneLevel","bigLevel","bigGeneLevel","playerLv","level","cocosNodeZIndex","node","small","Id","lbl_lv","string","String","UnlockArgs","sp_big","getChildByName","active","sp_line","bar_progress","progress","bigTab","getData","GeneLevelTableById","getValue","bigNeedSmalllevel","bar_big_progress","k","length","geneData","_smallBtn","smallX","getPosition","x","i","smallBtn","iconPath","EnableIcon","DisableIcon","setTexture","needSmallGeneRes","MaterialCountList","haveSmallCount","getCount","MaterialIdList","color","fromHEX","setPosition","y","big","posX","posY","needBigGeneRes","haveBigCount","clickSmallBtn","event","idx","showSmallTips","target","clickBigBtn","showBigTips","talentItemSmallAction","callback","next","to","call","start","position","onUpdate","ratio"],"mappings":"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","sourcesContent":["import { _decorator, Color, Component, EventTouch, Label, Node, ProgressBar, Sprite, tween, Vec3 } from 'cc';\r\nimport InfiniteCell from '../../../Common/InfiniteList/InfiniteCell';\r\nimport { Func } from '../../utils/Func';\r\nimport { tab } from '../../../Table/table_gen';\r\nimport { TalentView } from './TalentView';\r\nimport { RoleData } from '../role/RoleData';\r\nimport { ItemData } from '../item/ItemData';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TalentItem')\r\nexport class TalentItem extends InfiniteCell {\r\n    @property(Label)\r\n    lbl_lv: Label = null;\r\n    @property(Sprite)\r\n    sp_mini_1: Sprite = null;\r\n    @property(Sprite)\r\n    sp_mini_2: Sprite = null;\r\n    @property(Sprite)\r\n    sp_mini_3: Sprite = null;\r\n    @property(Sprite)\r\n    sp_big: Sprite = null;\r\n    @property(ProgressBar)\r\n    bar_progress: ProgressBar = null;\r\n    @property(ProgressBar)\r\n    bar_big_progress: ProgressBar = null;\r\n    @property(Sprite)\r\n    sp_line: Sprite = null;\r\n    private _itemData = null;\r\n    private _view: TalentView = null;\r\n    private _big_data: tab.GeneLevelTable = null;\r\n    UpdateContent(data: any): void {\r\n        // console.log(data);\r\n        this._view = data.view;\r\n        this._itemData = data.data;\r\n        const smallLevel = RoleData.ins.gene.smallGeneLevel;\r\n        const bigLevel = 10000 + RoleData.ins.gene.bigGeneLevel;\r\n        const playerLv = RoleData.ins.level;\r\n        Func.cocosNodeZIndex(this.node, this._itemData[0].small.Id);\r\n        this.lbl_lv.string = String(this._itemData[0].small.UnlockArgs);\r\n        this.sp_big.node.getChildByName(\"lvup_node\").active = false;\r\n        this.sp_big.node.active = false;\r\n        this.sp_line.node.active = false;\r\n        if (this._itemData[2].small.Id <= smallLevel) {\r\n            this.bar_progress.progress = 1\r\n        }\r\n        if (this._itemData[0].small.Id > smallLevel) {\r\n            this.bar_progress.progress = 0\r\n        }\r\n        if (RoleData.ins.gene.bigGeneLevel) {\r\n            const bigTab = tab.getData().GeneLevelTableById.getValue(bigLevel);\r\n            const bigNeedSmalllevel = bigTab.UnlockArgs;\r\n            if (this._itemData[2].small.Id < bigNeedSmalllevel) {\r\n                this.bar_big_progress.progress = 1;\r\n            }\r\n            if (this._itemData[0].small.Id > bigNeedSmalllevel) {\r\n                this.bar_big_progress.progress = 0;\r\n            }\r\n            for (let k = 0; k < this._itemData.length; k++) {\r\n                const geneData = this._itemData[k]\r\n                const small: tab.GeneLevelTable = geneData.small;\r\n                if (small.Id === bigNeedSmalllevel) {\r\n                    const _smallBtn = this[\"sp_mini_\" + (k + 1)];\r\n                    const smallX = _smallBtn.node.getPosition().x;\r\n                    this.bar_big_progress.progress = smallX / 268;\r\n                }\r\n            }\r\n        } else {\r\n            this.bar_big_progress.progress = 0;\r\n        }\r\n        for (let i = 0; i < this._itemData.length; i++) {\r\n            const geneData = this._itemData[i]\r\n            const small: tab.GeneLevelTable = geneData.small;\r\n            const smallBtn = this[\"sp_mini_\" + (i + 1)]\r\n            const iconPath = small.Id <= smallLevel ? small.EnableIcon : small.DisableIcon;\r\n            smallBtn.setTexture(iconPath);\r\n\r\n            // 判断当前是否可以升级\r\n            const needSmallGeneRes = small.MaterialCountList[0];\r\n            const haveSmallCount = ItemData.ins.getCount(small.MaterialIdList[0]);\r\n            if (i === 0) {\r\n                if (small.UnlockArgs === (playerLv+1)) {\r\n                    this.sp_line.node.active = true;\r\n                    this.sp_line.color = new Color().fromHEX(\"#ffb300\")\r\n                    this.sp_line.node.setPosition(new Vec3(0, this.sp_line.node.getPosition().y, 0));\r\n                }\r\n            }\r\n            if (small.Id == smallLevel + 1 && playerLv >= small.UnlockArgs) {\r\n                const smallX = smallBtn.node.getPosition().x;\r\n                this.sp_line.node.active = true;\r\n                this.sp_line.color = new Color().fromHEX(\"#00FCFF\")\r\n                this.sp_line.node.setPosition(new Vec3(smallX, this.sp_line.node.getPosition().y, 0));\r\n                this.bar_progress.progress = smallX / 268\r\n                smallBtn.node.getChildByName(\"lvup\").active = haveSmallCount >= needSmallGeneRes\r\n            } else {\r\n                smallBtn.node.getChildByName(\"lvup\").active = false;\r\n            }\r\n            if (geneData.big) {\r\n                this._big_data = geneData.big;\r\n                // const equipSkillTab = tab.getData().EquipSkillTableById.getValue(this._big_data.AttrValue);\r\n                this.sp_big.node.active = true;\r\n                const posX = smallBtn.node.getPosition().x;\r\n                const posY = this.sp_big.node.getPosition().y;\r\n                this.sp_big.node.setPosition(new Vec3(posX, posY, 0));\r\n                const iconPath = this._big_data.Id <= bigLevel ? this._big_data.EnableIcon : this._big_data.DisableIcon;\r\n                this.sp_big.setTexture(iconPath);\r\n                const needBigGeneRes = this._big_data.MaterialCountList[0];\r\n                const haveBigCount = ItemData.ins.getCount(this._big_data.MaterialIdList[0]);\r\n                if (haveBigCount >= needBigGeneRes && this._big_data.Id == bigLevel + 1 && smallLevel >= this._big_data.UnlockArgs) {\r\n                    this.sp_big.node.getChildByName(\"lvup_node\").active = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    clickSmallBtn(event: EventTouch, idx: string) {\r\n        const data = this._itemData[idx].small;\r\n        this._view.showSmallTips(event.target, data);\r\n    }\r\n    clickBigBtn(event: EventTouch, idx: string) {\r\n        this._view.showBigTips(event.target, this._big_data);\r\n    }\r\n    /* 做一个动画 this.sp_line往前移动一个单位 this.bar_progress移动一个单位*/\r\n    talentItemSmallAction(callback: Function) {\r\n        const smallLevel = RoleData.ins.gene.smallGeneLevel;\r\n        let idx = 0;\r\n        for (let k = 0; k < this._itemData.length; k++) {\r\n            const geneData = this._itemData[k]\r\n            const small: tab.GeneLevelTable = geneData.small;\r\n            if (small.Id === smallLevel + 1) {\r\n                idx = k;\r\n                break;\r\n            }\r\n        }\r\n        let next = idx + 1;\r\n        let smallX = 0;\r\n        if (next > 2) {\r\n            smallX = 268;\r\n        } else {\r\n            const smallBtn = this[\"sp_mini_\" + (next + 1)];\r\n            smallX = smallBtn.node.getPosition().x;\r\n        }\r\n\r\n        tween(this.bar_progress)\r\n            .to(0.5, { progress: smallX / 268 })\r\n            .call(()=>{\r\n                callback();\r\n            })\r\n            .start()\r\n        tween(this.sp_line.node.position)\r\n            .to(0.5,new Vec3(smallX,this.sp_line.node.getPosition().y,0),{\r\n                onUpdate : (target:Vec3, ratio:number)=>{\r\n                    this.sp_line.node.position = target;\r\n                }\r\n            })\r\n            .start()\r\n    }\r\n}\r\n\r\n\r\n"]}