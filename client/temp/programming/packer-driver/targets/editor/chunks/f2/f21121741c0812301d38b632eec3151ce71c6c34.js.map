{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/view/test/FightTestAttr.ts"],"names":["_decorator","instantiate","js","Label","Node","v3","ViewPop","UIMgr","FightRoleTeam","tab","LangMgr","PlayerControl","FightData","ccclass","property","FightTestAttr","create","ins","pause","show","viewName","hide","hideView","register","onShow","fightTeam","refresh","inTest","index","items","length","element","nn","node","on","EventType","TOUCH_START","showInfo","info","globleAttr","GlobleNode","AttrType","AttrType_InitialScroll","AttrType_AddScroll","AttrType_RefreshCount","onCloseClick","nameLab","string","attrNode","destroyAllChildren","role","getRole","itemId","itemTab","getData","ItemTableById","getValue","getLab","Name","attrList","attrData","hp","maxHp","shield","iterator","attr","push","attrLab","active","position","toString","addChild","console","log","formatStr","getComponent","triggerNode","skillGroupNode","skillGroups","normalGroup","weaponeGroup","v","skillGroupItem","getChildByName","Id","nn1","skillLayoutItem","createSkill","skills","takeSkillNode","takeSkills","layout","skillItem","addtTrigger","skill","triggerTabs","attrs","key","value","getRoleAttr","roles","forEach","getAttr"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, EditBox, EventTouch, game, instantiate, js, Label, Layers, Node, Size, Sprite, SpriteFrame, Toggle, Tween, tween, UIOpacity, UITransform, v2, v3, Vec3, view } from 'cc';\nimport { ViewPop } from '../../../../framework/base/ViewPop';\nimport { FightRootControl, FightState } from '../../FightRootControl';\nimport { UIMgr } from '../../../mgr/UIMgr';\nimport { FightRoleTeam } from '../common/FightRoleTeam';\nimport { HeroFightInfo } from '../../data/HeroFightInfo';\nimport { tab } from '../../../../Table/table_gen';\nimport { LangMgr } from '../../../mgr/LangMgr';\nimport { PlayerControl } from '../../base/obj/role/role/PlayerControl';\nimport { FightData } from '../../data/FightData';\nimport { SkillTab } from '../../power/powerTab/SkillTab';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('FightTestAttr')\nexport class FightTestAttr extends ViewPop {\n    static async create() {\n        FightData.ins.pause = true\n        await UIMgr.ins.show({ viewName: \"FightTestAttr\" })\n    }\n\n    static hide() {\n        FightData.ins.pause = false\n        UIMgr.ins.hideView(\"FightTestAttr\")\n    }\n\n\n    @property(FightRoleTeam)\n    fightTeam: FightRoleTeam = null\n    @property(Label)\n    nameLab: Label = null\n\n    @property(Node)\n    attrNode: Node = null\n\n    @property(Node)\n    skillGroupNode: Node = null\n\n    @property(Node)\n    skillGroupItem: Node = null\n\n    @property(Node)\n    skillLayoutItem: Node = null\n\n    @property(Node)\n    skillItem: Node = null\n\n    @property(Node)\n    takeSkillNode: Node = null\n\n    @property(Node)\n    triggerNode: Node = null\n    @property(Node)\n    GlobleNode: Node = null\n\n\n\n    @property(Node)\n    attrLab: Node = null\n\n    register(): void {\n\n    }\n\n    onShow(): void {\n        this.fightTeam.refresh()\n\n        let inTest = true\n        for (let index = 0; index < this.fightTeam.items.length; index++) {\n            const element = this.fightTeam.items[index];\n            let nn = element.node\n            nn.on(Node.EventType.TOUCH_START, () => {\n                this.showInfo(element.info)\n            })\n            if (element.info && inTest) {\n                inTest = false\n                this.showInfo(element.info)\n            }\n        }\n        this.globleAttr(this.GlobleNode, [tab.AttrType.AttrType_InitialScroll, tab.AttrType.AttrType_AddScroll, tab.AttrType.AttrType_RefreshCount])\n    }\n\n    onCloseClick() {\n        FightTestAttr.hide()\n    }\n\n    showInfo(info: HeroFightInfo) {\n        this.nameLab.string = \"\"\n        this.attrNode.destroyAllChildren()\n        if (info == null) {\n            return\n        }\n\n        let role = PlayerControl.ins.getRole(info.itemId)\n        if (role == null) {\n            return\n        }\n        let itemTab = tab.getData().ItemTableById.getValue(info.itemId)\n        this.nameLab.string = LangMgr.getLab(itemTab.Name)\n\n        let attrList = [\n            [\"当前血量\", role.info.attrData.hp],\n            [\"最大血量\", role.info.attrData.maxHp],\n            [\"当前护盾\", role.info.attrData.shield],\n        ]\n        for (const iterator of role.info.attrData.attr) {\n            attrList.push([tab.AttrType[iterator[0]], iterator[1]])\n        }\n\n        for (let index = 0; index < attrList.length; index++) {\n            const iterator = attrList[index];\n            let nn = instantiate(this.attrLab)\n            nn.active = true\n            nn.position = v3(150-  ((7-iterator[1].toString().length)*15),0,0)\n            this.attrNode.addChild(nn)\n            console.log(iterator[0], js.formatStr(\"%s：%s\", iterator[0], iterator[1]))\n\n\n            nn.getComponent(Label).string = js.formatStr(\"%s %s：%s \", iterator[0], tab.AttrType[iterator[0]] || 0, iterator[1])\n        }\n\n        this.triggerNode.destroyAllChildren()\n\n        this.skillGroupNode.destroyAllChildren()\n        let skillGroups = [role.info.normalGroup, role.info.weaponeGroup]\n        for (let index = 0; index < skillGroups.length; index++) {\n            const v = skillGroups[index];\n            if (v == null) {\n                continue\n            }\n            let nn = instantiate(this.skillGroupItem)\n            nn.active = true\n            nn.position = v3()\n            this.skillGroupNode.addChild(nn)\n            nn.getChildByName(\"Label\").getComponent(Label).string = \"技能组ID:\" + v.Id\n\n            let nn1 = instantiate(this.skillLayoutItem)\n            nn1.active = true\n            nn1.position = v3()\n            nn.getChildByName(\"skillLayoutItem\").addChild(nn1)\n            this.createSkill(nn1, v.skills)\n        }\n\n        //携带的技能\n        this.createSkill(this.takeSkillNode, role.info.takeSkills)\n\n      \n    }\n\n    createSkill(layout: Node, skills: SkillTab[]) {\n        layout.destroyAllChildren()\n        for (let index = 0; index < skills.length; index++) {\n            const v = skills[index];\n            let nn = instantiate(this.skillItem)\n            nn.active = true\n            nn.position = v3()\n            layout.addChild(nn)\n            nn.getChildByName(\"Label\").getComponent(Label).string = \"ID:\" + v.Id\n            this.addtTrigger(v)\n        }\n    }\n\n    addtTrigger(skill:SkillTab){\n        for (let index = 0; index < skill.triggerTabs.length; index++) {\n            const v = skill.triggerTabs[index];\n            let nn = instantiate(this.skillItem)\n            nn.active = true\n            nn.position = v3()\n            this.triggerNode.addChild(nn)\n            nn.getChildByName(\"Label\").getComponent(Label).string = \"ID:\" + v.Id\n        }\n    }\n\n    globleAttr(layout: Node, attrs: tab.AttrType[]) {\n        layout.destroyAllChildren()\n        for (let index = 0; index < attrs.length; index++) {\n\n            let nn = instantiate(this.skillItem)\n            nn.active = true\n            nn.position = v3()\n            layout.addChild(nn)\n\n            let key = attrs[index]\n            let value = this.getRoleAttr(key)\n            nn.getChildByName(\"Label\").getComponent(Label).string = js.formatStr(\"%s：%s\", LangMgr.getLab(tab.AttrType[key]), value)\n\n            // console.log(js.formatStr(\"%s：%s\", iterator[0], iterator[1]))\n        }\n    }\n\n    getRoleAttr(attr: tab.AttrType) {\n        let value = 0\n        PlayerControl.ins.roles.forEach((role) => {\n            value += role.info.attrData.getAttr(attr)\n        })\n        return value\n    }\n}\n"]}