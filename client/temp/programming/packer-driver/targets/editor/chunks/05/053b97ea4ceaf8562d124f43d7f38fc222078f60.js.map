{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/utils/SensitiveWordsManager.ts"],"names":["SensitiveWordsManager","JsonAsset","assetManager","resources","sensitive_tab","Mint","mint","ins","_ins","Init","undefined","LoadTable","sensitiveArray","data","getData","SensitiveWordsTable","push","SensitiveWords","test","progressCallback","Promise","resolve","load","error","resource","InitData","json","releaseAsset","check","str","verify","replace","filter","text","testStr","console","log"],"mappings":";;;wIAMqBA,qB;;;;;;;;;;;;;;;;;;;AANZC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,S,OAAAA,S;;AACzBC,MAAAA,a,iBAAAA,a;;AAEFC,MAAAA,I;;;;;;;;;AAEP;yBACqBL,qB,GAAN,MAAMA,qBAAN,CAA4B;AAAA;AAAA,eAS/BM,IAT+B;AAAA;;AAElB,mBAAHC,GAAG,GAAG;AACpB,cAAIP,qBAAqB,CAACQ,IAAtB,KAA+B,IAAnC,EAAyC;AACrCR,YAAAA,qBAAqB,CAACQ,IAAtB,GAA6B,IAAIR,qBAAJ,EAA7B;AACH;;AACD,iBAAOA,qBAAqB,CAACQ,IAA7B;AACH;;AAIgB,cAAJC,IAAI,GAAG;AAChB,cAAI,KAAKH,IAAL,KAAcI,SAAlB,EAA6B;AACzB;AACH;;AACD,eAAKJ,IAAL,GAAY,IAAZ;AAEA,gBAAM,KAAKK,SAAL,EAAN;AACA,cAAIC,cAAc,GAAG,EAArB;;AACA,eAAK,IAAIC,IAAT,IAAiB;AAAA;AAAA,8CAAcC,OAAd,GAAwBC,mBAAzC,EAA8D;AAC1DH,YAAAA,cAAc,CAACI,IAAf,CAAoBH,IAAI,CAACI,cAAzB;AACH;;AACD,eAAKX,IAAL,GAAY;AAAA;AAAA,4BAASM,cAAT,CAAZ;AAEA,eAAKM,IAAL;AACH;;AAGDP,QAAAA,SAAS,CAACQ,gBAAD,EAAoG;AACzG,iBAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BlB,YAAAA,SAAS,CAACmB,IAAV,CAAe,+BAAf,EAAgDrB,SAAhD,EAA2DkB,gBAA3D,EAA6E,CAACI,KAAD,EAAeC,QAAf,KAAiC;AAC1G,kBAAID,KAAJ,EAAW;AACP,sBAAMA,KAAN;AACH;;AACD;AAAA;AAAA,kDAAcE,QAAd,CAAuBD,QAAQ,CAACE,IAAhC;AACAxB,cAAAA,YAAY,CAACyB,YAAb,CAA0BH,QAA1B;AACAH,cAAAA,OAAO;AACV,aAPD;AAQH,WATM,CAAP;AAUH;AAED;AACJ;AACA;;;AACWO,QAAAA,KAAK,CAACC,GAAD,EAAuB;AAC/B,cAAI,CAAC,KAAKvB,IAAV,EAAgB;AACZ,mBAAO,IAAP;AACH;;AACD,iBAAO,KAAKA,IAAL,CAAUwB,MAAV,CAAiBD,GAAjB,CAAP;AACH;AAED;AACJ;AACA;;;AACWE,QAAAA,OAAO,CAACF,GAAD,EAAsB;AAChC,cAAI,CAAC,KAAKvB,IAAV,EAAgB;AACZ,mBAAOuB,GAAP;AACH;;AACD,iBAAO,KAAKvB,IAAL,CAAU0B,MAAV,CAAiBH,GAAjB,EAAsBI,IAA7B;AACH;;AAEDf,QAAAA,IAAI,GAAG;AACH,cAAIgB,OAAO,GAAG,2EAAd;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYpC,qBAAqB,CAACO,GAAtB,CAA0BwB,OAA1B,CAAkCG,OAAlC,CAAZ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYpC,qBAAqB,CAACO,GAAtB,CAA0BqB,KAA1B,CAAgCM,OAAhC,CAAZ;AACH;;AAjEsC,O;;AAAtBlC,MAAAA,qB,CACAQ,I,GAA8B,I","sourcesContent":["import { JsonAsset, assetManager, resources } from 'cc';\r\nimport { sensitive_tab } from '../../Table/sensitive_words_gen';\r\nimport { LoadResAsync } from '../mgr/ResMgr';\r\nimport Mint from '../../sensitive_word/src';\r\n\r\n//敏感词检测\r\nexport default class SensitiveWordsManager {\r\n    protected static _ins: SensitiveWordsManager = null\r\n    public static get ins() {\r\n        if (SensitiveWordsManager._ins === null) {\r\n            SensitiveWordsManager._ins = new SensitiveWordsManager();\r\n        }\r\n        return SensitiveWordsManager._ins;\r\n    }\r\n\r\n    private mint: Mint\r\n\r\n    public async Init() {\r\n        if (this.mint !== undefined) {\r\n            return\r\n        }\r\n        this.mint = null;\r\n\r\n        await this.LoadTable();\r\n        let sensitiveArray = []\r\n        for (let data of sensitive_tab.getData().SensitiveWordsTable) {\r\n            sensitiveArray.push(data.SensitiveWords)\r\n        }\r\n        this.mint = new Mint(sensitiveArray)\r\n\r\n        this.test()\r\n    }\r\n\r\n\r\n    LoadTable(progressCallback?: (completedCount: number, totalCount: number, item: any) => void): Promise<void> {\r\n        return new Promise(resolve => {\r\n            resources.load('tabledata/sensitive_words_gen', JsonAsset, progressCallback, (error: Error, resource: any) => {\r\n                if (error) {\r\n                    throw error;\r\n                }\r\n                sensitive_tab.InitData(resource.json)\r\n                assetManager.releaseAsset(resource)\r\n                resolve();\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 检测有没有敏感词，没有敏感词时返回true\r\n     */\r\n    public check(str: string): boolean {\r\n        if (!this.mint) {\r\n            return true;\r\n        }\r\n        return this.mint.verify(str);\r\n    }\r\n\r\n    /**\r\n     * 把字符串中的敏感词替换为*\r\n     */\r\n    public replace(str: string): string {\r\n        if (!this.mint) {\r\n            return str;\r\n        }\r\n        return this.mint.filter(str).text\r\n    }\r\n\r\n    test() {\r\n        let testStr = \"75年前的今天，中国人民同世界人民一道，以顽强的意志和英勇的斗争，彻底打败了法西斯主义，取得了正义战胜邪恶、光明战胜黑暗、进步战胜反动的伟大胜利！\"\r\n        console.log(SensitiveWordsManager.ins.replace(testStr))\r\n        console.log(SensitiveWordsManager.ins.check(testStr))\r\n    }\r\n}\r\n\r\n"]}