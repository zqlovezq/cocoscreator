{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/framework/Bridge.ts"],"names":["Bridge","native","sys","JSBridgePath_ANDROID","JSBridgePath_IOS","getPlatform","isIos","isAndroid","init","methodCache","isNative","os","OS","IOS","OSX","platform","Platform","ANDROID","jsbBridgeWrapper","addNativeEventListener","jsonStr","console","log","data","JSON","parse","bridgeCallback","method","param","testCall","testCallWithBack","addEvent","methodName","call","callWithBack","methodSignature","reflection","callStaticMethod","code"],"mappings":"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","sourcesContent":["import { native, sys } from \"cc\";\nimport { NATIVE } from \"cc/env\";\n\nconst JSBridgePath_ANDROID = \"com/cocos/game/JSBridge\"\nconst JSBridgePath_IOS = \"JSBridge\"\n\n/** 原生桥接\n * 传递参数和返回参数， 统一为String (传递可为空)\n * \n * java 目前 Cocos Creator 中支持的 Java 类型签名有以下 4 种：\n * Java 类型\t签名  I 整数，F 浮点，Z 布尔，Ljava/lang/String;字符串 (ILjava/lang/String;I)Ljava/lang/String;表示参数类型为一个 int，一个 String 和一个 int，一个，返回值类型为 String 的方法\n */\nexport class Bridge {\n    static methodCache = {}\n\n    static isIos: boolean = false\n    static isAndroid: boolean = false\n\n    static getPlatform() {\n        return Bridge.isIos ? \"ios\" : Bridge.isAndroid ? \"android\" : \"h5\"\n    }\n\n    static init() {\n        // window[\"bridgeCallback\"] = this.bridgeCallback.bind(this)\n        this.methodCache = {}\n        if (sys.isNative) {\n            this.isIos = (sys.os == sys.OS.IOS || sys.os == sys.OS.OSX)\n            this.isAndroid = sys.platform == sys.Platform.ANDROID\n            native.jsbBridgeWrapper.addNativeEventListener(\"bridgeCallback\", (jsonStr: string) => {\n                console.log(\"native回调\", jsonStr)\n                let data = JSON.parse(jsonStr)\n                if (data) {\n                    this.bridgeCallback(data.method, data.param)\n                }\n            })\n        }\n        this.testCall()\n        this.testCallWithBack()\n    }\n\n    static bridgeCallback(method: string, param: string) {\n        if (this.methodCache[method]) {\n            this.methodCache[method](param)\n        } else {\n            console.log(\"未找到回调\")\n        }\n    }\n\n    static addEvent(methodName:string,call:Function){\n        if (call) {\n            this.methodCache[methodName] = call\n        }\n    }\n\n    /**\n     * \n     * @param methodName 原生方法名\n     * @param methodSignature 方法签名 \n     * @param param 传递的参数（json字符串）签名为空时， 表示无参数并且无返回\n     * @param call 回调函数\n     * \n     * ios只有方法名和参数， 不需要签名，只支持不传递参数和传递一个字符串\n     * @returns 原生返回值，(字符串)\n     */\n    static callWithBack(call: Function, methodName: string, methodSignature?: string, param?: string) {\n        \n        this.addEvent(methodName,call)\n        return this.call(methodName, methodSignature, param)\n    }\n\n    /**\n     * \n     * @param methodName 原生方法名\n     * @param methodSignature 方法签名 \n     * @param param 传递的参数（json字符串） 签名为空时， 表示无参数并且无返回\n     * \n     * ios只有方法名和参数， 不需要签名，只支持不传递参数和传递一个字符串\n     * @returns 原生返回值，(字符串)\n     */\n    static call(methodName: string, methodSignature?: string, param?: string) {\n        console.log(methodName,methodSignature,param)\n        if (this.isIos) {\n            /** ios只有方法名和参数， 不需要签名 */\n            if (param == null) {\n                return native.reflection.callStaticMethod(JSBridgePath_IOS, methodName)\n            } else {\n                return native.reflection.callStaticMethod(JSBridgePath_IOS, methodName, param)\n            }\n        } else if (this.isAndroid) {\n            if (methodSignature == null) {\n                return native.reflection.callStaticMethod(JSBridgePath_ANDROID, methodName, \"()V\")\n            } else if (param == null) {\n                return native.reflection.callStaticMethod(JSBridgePath_ANDROID, methodName, methodSignature)\n            } else {\n                return native.reflection.callStaticMethod(JSBridgePath_ANDROID, methodName, methodSignature, param)\n            }\n        }\n    }\n\n\n    //---------------测试----------\n    static testCall() {\n        let code\n        if (this.isIos) {\n            code = this.call(\"getAppVersionCode\")\n        } else {\n            code = this.call(\"getAppVersionCode\", \"()Ljava/lang/String;\")\n        }\n        console.log(\"getAppVersionCode\", code)\n    }\n\n    static testCallWithBack() {\n        if (this.isIos) {\n            this.callWithBack((param: string) => {\n                console.log(\"testCallWithBack回调\", param)\n            }, \"testCallBack:\", null, \"jstojava\")\n        } else {\n            this.callWithBack((param: string) => {\n                console.log(\"testCallWithBack回调\", param)\n            }, \"testCallBack\", \"(Ljava/lang/String;)V\", \"jstojava\")\n        }\n\n    }\n}"]}