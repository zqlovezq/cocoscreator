{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/@protobufjs/pool/index.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","pool","alloc","slice","size","SIZE","MAX","slab","offset","pool_alloc","buf","call","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;;8BAEDC,Y,GAAe,cAAYC,G;;AACjCF,MAAAA,UAAU,CAACG,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;;AACAF,QAAAA,MAAM,CAACF,OAAP,GAAiBK,IAAjB;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,iBAASA,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAC9B,cAAIC,IAAI,GAAKD,IAAI,IAAI,IAArB;AACA,cAAIE,GAAG,GAAMD,IAAI,KAAK,CAAtB;AACA,cAAIE,IAAI,GAAK,IAAb;AACA,cAAIC,MAAM,GAAGH,IAAb;AACA,iBAAO,SAASI,UAAT,CAAoBL,IAApB,EAA0B;AAC7B,gBAAIA,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAGE,GAAvB,EACI,OAAOJ,KAAK,CAACE,IAAD,CAAZ;;AACJ,gBAAII,MAAM,GAAGJ,IAAT,GAAgBC,IAApB,EAA0B;AACtBE,cAAAA,IAAI,GAAGL,KAAK,CAACG,IAAD,CAAZ;AACAG,cAAAA,MAAM,GAAG,CAAT;AACH;;AACD,gBAAIE,GAAG,GAAGP,KAAK,CAACQ,IAAN,CAAWJ,IAAX,EAAiBC,MAAjB,EAAyBA,MAAM,IAAIJ,IAAnC,CAAV;AACA,gBAAII,MAAM,GAAG,CAAb,EAAgB;AACZA,cAAAA,MAAM,GAAG,CAACA,MAAM,GAAG,CAAV,IAAe,CAAxB;AACJ,mBAAOE,GAAP;AACH,WAXD;AAYH,SAnDyF,CAsD3F;;;AAEA,2BAAAE,WAAW,GAAGd,MAAM,CAACF,OAArB;AAGC,OA3DD,EA2DG,EA3DH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\r\n module.exports = pool;\r\n\r\n /**\r\n  * An allocator as used by {@link util.pool}.\r\n  * @typedef PoolAllocator\r\n  * @type {function}\r\n  * @param {number} size Buffer size\r\n  * @returns {Uint8Array} Buffer\r\n  */\r\n\r\n /**\r\n  * A slicer as used by {@link util.pool}.\r\n  * @typedef PoolSlicer\r\n  * @type {function}\r\n  * @param {number} start Start offset\r\n  * @param {number} end End offset\r\n  * @returns {Uint8Array} Buffer slice\r\n  * @this {Uint8Array}\r\n  */\r\n\r\n /**\r\n  * A general purpose buffer pool.\r\n  * @memberof util\r\n  * @function\r\n  * @param {PoolAllocator} alloc Allocator\r\n  * @param {PoolSlicer} slice Slicer\r\n  * @param {number} [size=8192] Slab size\r\n  * @returns {PoolAllocator} Pooled allocator\r\n  */\r\n function pool(alloc, slice, size) {\r\n     var SIZE   = size || 8192;\r\n     var MAX    = SIZE >>> 1;\r\n     var slab   = null;\r\n     var offset = SIZE;\r\n     return function pool_alloc(size) {\r\n         if (size < 1 || size > MAX)\r\n             return alloc(size);\r\n         if (offset + size > SIZE) {\r\n             slab = alloc(SIZE);\r\n             offset = 0;\r\n         }\r\n         var buf = slice.call(slab, offset, offset += size);\r\n         if (offset & 7) // align to 32 bit\r\n             offset = (offset | 7) + 1;\r\n         return buf;\r\n     };\r\n }\r\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}