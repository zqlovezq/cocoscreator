{"version":3,"sources":["file:///C:/chickenStarClient/client/node_modules/@protobufjs/fetch/index.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","fetch","asPromise","inquire","fs","filename","options","callback","xhr","readFile","fetchReadFileCallback","err","contents","XMLHttpRequest","binary","toString","fetch_xhr","onreadystatechange","fetchOnReadyStateChange","readyState","undefined","status","Error","buffer","response","i","responseText","length","push","charCodeAt","Uint8Array","overrideMimeType","responseType","open","send","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '@protobufjs/aspromise';\nimport { __cjsMetaURL as _req0} from '@protobufjs/inquire';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\r\n module.exports = fetch;\r\n\r\n var asPromise = require(\"@protobufjs/aspromise\"),\r\n     inquire   = require(\"@protobufjs/inquire\");\r\n\r\n var fs = inquire(\"fs\");\r\n\r\n /**\r\n  * Node-style callback as used by {@link util.fetch}.\r\n  * @typedef FetchCallback\r\n  * @type {function}\r\n  * @param {?Error} error Error, if any, otherwise `null`\r\n  * @param {string} [contents] File contents, if there hasn't been an error\r\n  * @returns {undefined}\r\n  */\r\n\r\n /**\r\n  * Options as used by {@link util.fetch}.\r\n  * @typedef FetchOptions\r\n  * @type {Object}\r\n  * @property {boolean} [binary=false] Whether expecting a binary response\r\n  * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n  */\r\n\r\n /**\r\n  * Fetches the contents of a file.\r\n  * @memberof util\r\n  * @param {string} filename File path or url\r\n  * @param {FetchOptions} options Fetch options\r\n  * @param {FetchCallback} callback Callback function\r\n  * @returns {undefined}\r\n  */\r\n function fetch(filename, options, callback) {\r\n     if (typeof options === \"function\") {\r\n         callback = options;\r\n         options = {};\r\n     } else if (!options)\r\n         options = {};\r\n\r\n     if (!callback)\r\n         return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n     // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n     if (!options.xhr && fs && fs.readFile)\r\n         return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n             return err && typeof XMLHttpRequest !== \"undefined\"\r\n                 ? fetch.xhr(filename, options, callback)\r\n                 : err\r\n                 ? callback(err)\r\n                 : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n         });\r\n\r\n     // use the XHR version otherwise.\r\n     return fetch.xhr(filename, options, callback);\r\n }\r\n\r\n /**\r\n  * Fetches the contents of a file.\r\n  * @name util.fetch\r\n  * @function\r\n  * @param {string} path File path or url\r\n  * @param {FetchCallback} callback Callback function\r\n  * @returns {undefined}\r\n  * @variation 2\r\n  */\r\n\r\n /**\r\n  * Fetches the contents of a file.\r\n  * @name util.fetch\r\n  * @function\r\n  * @param {string} path File path or url\r\n  * @param {FetchOptions} [options] Fetch options\r\n  * @returns {Promise<string|Uint8Array>} Promise\r\n  * @variation 3\r\n  */\r\n\r\n /**/\r\n fetch.xhr = function fetch_xhr(filename, options, callback) {\r\n     var xhr = new XMLHttpRequest();\r\n     xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n         if (xhr.readyState !== 4)\r\n             return undefined;\r\n\r\n         // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n         // reliably distinguished from an actually empty file for security reasons. feel free\r\n         // to send a pull request if you are aware of a solution.\r\n         if (xhr.status !== 0 && xhr.status !== 200)\r\n             return callback(Error(\"status \" + xhr.status));\r\n\r\n         // if binary data is expected, make sure that some sort of array is returned, even if\r\n         // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n         if (options.binary) {\r\n             var buffer = xhr.response;\r\n             if (!buffer) {\r\n                 buffer = [];\r\n                 for (var i = 0; i < xhr.responseText.length; ++i)\r\n                     buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n             }\r\n             return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n         }\r\n         return callback(null, xhr.responseText);\r\n     };\r\n\r\n     if (options.binary) {\r\n         // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n         if (\"overrideMimeType\" in xhr)\r\n             xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n         xhr.responseType = \"arraybuffer\";\r\n     }\r\n\r\n     xhr.open(\"GET\", filename);\r\n     xhr.send();\r\n };\r\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '@protobufjs/aspromise': _req,\n  '@protobufjs/inquire': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}