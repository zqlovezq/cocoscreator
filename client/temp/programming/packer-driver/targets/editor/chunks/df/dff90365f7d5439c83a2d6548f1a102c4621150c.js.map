{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/view/damage/FightDamageRankPop.ts"],"names":["_decorator","Node","UITransform","v3","view","ViewPop","FightDamageRankItem","DamageStatisticsData","PlayerControl","ccclass","property","FightDamageRankPop","heroItems","damageInfos","onLoad","index","heros","children","length","v","push","getComponent","schedule","refresh","register","start","pos","node","convertToNodeSpaceAR","openData","event","getUILocation","x","y","bgNode","width","getVisibleSize","height","pop","position","onShow","list","ins","getIntoHeros","isIntoFight","getRoleById","id","active","setData","total","damage","Math","max","setDamage","secDamage"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, EditBox, EventTouch, game, instantiate, js, Label, Layers, Node, Size, Sprite, SpriteFrame, Toggle, Tween, tween, UIOpacity, UITransform, v2, v3, Vec3, view } from 'cc';\nimport { ViewPop } from '../../../../framework/base/ViewPop';\nimport { FightDamageRankItem } from './FightDamageRankItem';\nimport { DamageStatisticsData, DamageStatisticsInfo } from '../../base/damage/DamageStatisticsData';\nimport { PlayerControl } from '../../base/obj/role/role/PlayerControl';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('FightDamageRankPop')\nexport class FightDamageRankPop extends ViewPop {\n    @property(Node)\n    pop: Node = null\n    @property(UITransform)\n    bgNode:UITransform=null;\n\n    @property(Node)\n    heros: Node = null\n\n    heroItems: FightDamageRankItem[] = []\n\n    damageInfos: DamageStatisticsInfo[] = []\n\n    protected onLoad(): void {\n        for (let index = 0; index < this.heros.children.length; index++) {\n            const v = this.heros.children[index];\n            this.heroItems.push(v.getComponent(FightDamageRankItem))\n        }\n\n        this.schedule(() => {\n            this.refresh()\n        }, 0.5)\n    }\n\n    register(): void {\n\n    }\n    protected start(): void {\n        let pos = this.node.getComponent(UITransform).convertToNodeSpaceAR(v3(this.openData.event.getUILocation().x, this.openData.event.getUILocation().y))\n        pos.x + 50;\n        if(pos.x+this.bgNode.width>view.getVisibleSize().width/2){\n            pos.x=view.getVisibleSize().width/2-this.bgNode.width;\n        }\n        if(pos.y-this.bgNode.height<view.getVisibleSize().height/2){\n            pos.y=-view.getVisibleSize().height/2+this.bgNode.height-50;\n        }\n        this.pop.position = pos\n        this.refresh()\n    }\n    onShow(): void {\n\n\n        let list = PlayerControl.ins.getIntoHeros()\n\n        for (let index = 0; index < list.length; index++) {\n            if (list[index].isIntoFight()) {\n                this.damageInfos.push(DamageStatisticsData.ins.getRoleById(list[index].id))\n            }\n        }\n\n        for (let index = 0; index < this.heroItems.length; index++) {\n            const v = this.heroItems[index];\n            if (list[index]) {\n                v.node.active = true\n                v.setData(list[index])\n            } else {\n                v.node.active = false\n            }\n\n        }\n        this.refresh()\n    }\n\n    refresh() {\n        let total = 0\n        for (let index = 0; index < this.damageInfos.length; index++) {\n            const v = this.damageInfos[index];\n            total += v.damage\n        }\n        total = Math.max(total, 1)\n\n        for (let index = 0; index < this.damageInfos.length; index++) {\n            const v = this.damageInfos[index];\n            if (this.heroItems[index]) {\n                this.heroItems[index].setDamage(v.damage, total,v.secDamage)\n            }\n\n        }\n    }\n}\n"]}