{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/mgr/ResMgr.ts"],"names":["LoadResAsync","url","type","progressCallback","Promise","resolve","ResMgr","load","err","resource","console","error","setSpData","_spine","data","skeletonData","setTexture","sprite","path","isValid","spriteFrame","SpriteFram","get","SpriteFrame","loadByResMap","list","totalRes","promiseArray","completedRes","key","res","loadPromise","push","then","all","Label","Sprite","Texture2D","_decorator","assetManager","sp","SceneMgr","EDITOR","LangMgr","ccclass","property","log","getBundle","setFont","font","systemFont","gameResBundle","transforPath","paths","transformPath","indexOf","onProgress","onComplete","map","getSceneMap","getNowSceneName","addRef","preload","items","release","isRelease","sceneName","cache","has","set","releaseScene","ass","_type","refCount","printCache","iterator","Map","Skeleton","prototype","useSystemFont","icon"],"mappings":"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","sourcesContent":["import { Asset, AssetManager, Font, Label, Node, NodeEventType, Prefab, Sprite, SpriteFrame, Texture2D, _decorator, assetManager, director, macro, path, resources, settings, sp } from \"cc\";\nimport { SceneMgr } from \"./SceneMgr\";\nimport { EDITOR } from \"cc/env\";\nimport { LangMgr } from \"./LangMgr\";\n\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('ResMgr')\nexport class ResMgr {\n    static isRelease: boolean = false\n    static log() {\n        console.log(\"ResMgr.log\", ResMgr.getBundle())\n    }\n    static gameResBundle: AssetManager.Bundle\n\n    static cache: Map<string, {}> = new Map()\n\n    static systemFont:Font = null\n\n    static setFont(font:Font){\n        ResMgr.systemFont = font\n    }\n\n    //全局只有gameRes一个有效bundle\n    static getBundle(): AssetManager.Bundle {\n        if (ResMgr.gameResBundle == null) {\n            ResMgr.gameResBundle = assetManager.getBundle(\"gameRes\")\n        }\n        return ResMgr.gameResBundle\n    }\n\n    static transforPath(paths: string, type: typeof Asset) {\n        paths = LangMgr.transformPath(paths)\n        if (type == SpriteFrame) {\n            if (paths.indexOf(\"/spriteFrame\") == -1) {\n                paths = paths + \"/spriteFrame\"\n            }\n        } else if (type == Texture2D) {\n            paths = paths + \"/texture\"\n        }\n        return paths\n    }\n    static get<T extends Asset>(paths: string, type: typeof Asset) {\n        paths = ResMgr.transforPath(paths, type)\n        return ResMgr.getBundle().get<T>(paths, type)\n    }\n\n    //除了LoadResAsync函数，其他任何地方都不应该使用ResMgr\n    public static load<T extends Asset>(paths: string, type: typeof Asset,\n        onProgress: (finish: number, total: number, item: AssetManager.RequestItem) => void,\n        onComplete: (error: Error, assets: T | null) => void) {\n\n        paths = ResMgr.transforPath(paths, type)\n\n        let res = ResMgr.getBundle().get<T>(paths, type)\n        if (res) {\n            if (onComplete) {\n                onComplete(null, res)\n            }\n        } else {\n            ResMgr.getBundle().load(paths, type, onProgress, (error: Error, res: T) => {\n                if (onComplete) {\n                    onComplete(error, res)\n                }\n                let map = ResMgr.getSceneMap(SceneMgr.getNowSceneName())\n                map[paths] = type\n            })\n        }\n    }\n\n    public static addRef(paths: string, type: typeof Asset) {\n        ResMgr.load(paths, type, null, (err: Error, resource: any) => {\n            if (resource) {\n                resource.addRef()\n            }\n        })\n    }\n\n    public static preload(paths: string, type: typeof Asset,\n        onComplete: () => void) {\n        ResMgr.getBundle().preload(paths, type, (error: Error, items: AssetManager.RequestItem[]) => {\n            onComplete && onComplete()\n        })\n    }\n\n    public static release(path: string, type: typeof Asset) {\n        if (ResMgr.isRelease) {\n            path = ResMgr.transforPath(path, type)\n            ResMgr.getBundle().release(path, type)\n        }\n\n        // setTimeout(() => {\n        //     ResMgr.getBundle().preload(path)\n        // }, 100);\n    }\n\n    static getSceneMap(sceneName: string) {\n        if (!ResMgr.cache.has(sceneName)) {\n            ResMgr.cache.set(sceneName, {})\n        }\n        return ResMgr.cache.get(sceneName)\n    }\n    public static releaseScene(sceneName: string) {\n        let map = ResMgr.getSceneMap(sceneName)\n        // console.log(\"释放场景资源\", sceneName, map,ResMgr.cache)\n        let ass: Asset\n        for (let key in map) {\n            let _type = map[key]\n            ass = ResMgr.getBundle().get(key, _type)\n            if (ass && ass.refCount == 0) {\n                ResMgr.getBundle().release(key, _type)\n                // delete map[key]\n            }\n        }\n\n\n    }\n\n    public static printCache() {\n        for (const iterator of ResMgr.cache) {\n            let map = iterator[1]\n            for (let key in map) {\n                let _type = map[key]\n                if (ResMgr.getBundle().get(key, _type)) {\n                    // console.log(key, ResMgr.getBundle().get(key, _type).refCount)\n                }\n            }\n        }\n    }\n}\n\n/*  */\nexport function LoadResAsync(url: string, type: typeof Asset,\n    progressCallback?: (completedCount: number, totalCount: number, item: any) => void): Promise<any> {\n    return new Promise(resolve => {\n        ResMgr.load(url, type, progressCallback, (err: Error, resource: any) => {\n            if (err) {\n                console.error(url, err);\n                resolve(null);\n            } else {\n                resolve(resource);\n            }\n        })\n    })\n}\n\nsp.Skeleton.prototype.setSpData = function (data: sp.SkeletonData) {\n    setSpData(this, data);\n}\n\nfunction setSpData(_spine: sp.Skeleton, data: sp.SkeletonData) {\n    _spine.skeletonData = data\n}\n\nLabel.prototype[\"start\"] = function () {\n    if (EDITOR) {\n        return\n    }\n    if (this.useSystemFont && ResMgr.systemFont) {\n        this.font = ResMgr.systemFont\n    }\n    // console.log(\"start\", this.font, \"更换字体\", this.useSystemFont)\n}\n\nSprite.prototype.setTexture = async function (icon: string) {\n    setTexture(this, icon);\n}\n\nasync function setTexture(sprite: Sprite, path: string) {\n    if (path == null || !sprite || !sprite.isValid) {\n        return;\n    }\n    sprite[\"loadPath\"] = path\n    if (path == \"\") {\n        sprite.spriteFrame = null\n        return\n    }\n    let SpriteFram: SpriteFrame = ResMgr.get(path, SpriteFrame);\n    if (!SpriteFram) {\n        SpriteFram = await LoadResAsync(path, SpriteFrame);\n    }\n    if (!sprite.isValid) {\n        return\n    }\n\n    if (sprite[\"loadPath\"] != path) {//解决多次加载引起的最终会显示加载最慢的资源问题\n        return\n    }\n    if (SpriteFram != null) {\n        sprite.spriteFrame = SpriteFram;\n    }\n    else {\n        console.error(\"setTexture error :\" + path);\n    }\n}\n\n/* 从资源Map拿到资源数据 加载 */\nexport function loadByResMap(list: any, totalRes: number, progressCallback?: (progress: number) => void): Promise<any[]> {\n    let promiseArray = []\n    let completedRes = 0;\n\n    for (const key in list) {\n        const res = list[key];\n        let loadPromise = LoadResAsync(res.url, res.type);\n        promiseArray.push(loadPromise)\n        loadPromise.then(() => {\n            ++completedRes;\n            progressCallback && progressCallback(completedRes / totalRes)\n        })\n    }\n\n    return Promise.all(promiseArray);\n}"]}