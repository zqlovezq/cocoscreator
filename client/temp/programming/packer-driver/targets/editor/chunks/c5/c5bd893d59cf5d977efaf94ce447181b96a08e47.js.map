{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/base/move/AbsMove.ts"],"names":["AbsMove","BulletMove","MonsterMoveLine","ScreenUtil","Vec3","tab","FixedUtil","ViewSize","AbsMoveType","tempPos","tempPos1","constructor","sType","moveType","abs","setAbs","init","setAbsPos","v3","setPosition","updateFrame","dt","fly","checkComplete","onFlyComplete","onMoveComplete","lifeTime","passTime","setLiftTime","t","checkRotate","isDead","info","isRotate","addAngle","configTab","Rotate","isTimeDeath","isHitDeath","isOutOfScreenThird","getTruePosition","OutOfScreen","traceDirection","startPos","targetPos","subtract","normalize","setVelocityAndRatio","setVoAngle","angle","setVelocityAngle","velocity","isBeatBack","isReviceBeatBack","deltaTimeMovePostion","getPosition","attrData","getAttr","AttrType","AttrType_SpeedMoveAdd","BorderType","pos","Math","x","hirdSize","width","y","height","isOutOfScreen","halfSize","getOutOfScreenType","leftRight","upDown","empty"],"mappings":"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","sourcesContent":["import { Size, Vec3, math, view } from \"cc\";\nimport { AbsObj, AbsObjType } from \"../obj/AbsObj\"\nimport { Bullet } from \"../obj/bullet/Bullet\"\nimport { FrameControl } from \"../frame/FrameControl\";\nimport Fixed from \"../../../../framework/collision/Fixed\";\nimport { tab } from \"../../../../Table/table_gen\";\nimport { UIMgr } from \"../../../mgr/UIMgr\";\nimport { FixedUtil } from \"../../util/FixedUtil\";\nimport { MathAngle } from \"../../../../framework/collision/Maths\";\nimport { AbsRole } from \"../obj/role/AbsRole\";\nimport { FightMacro } from \"../../define/FightDefine\";\nimport { ViewSize } from \"../../../define/ViewDefine\";\n\n/** 状态机类型 */\nexport enum AbsMoveType {\n    /** 默认 */\n    default = 0,\n    /** 速率 */\n    velocity = 1,\n\n    //----------子弹相关 101-200--------------\n    /** 子弹直线 */\n    bulletMoveLine = 101,\n    /** 回旋直线 */\n    bulletMoveRound = 102,\n    /** 无轨迹  */\n    BulletMoveTarget = 103,\n}\nconst tempPos = new Vec3();\nconst tempPos1 = new Vec3();\n/** 移动 （默认就是速率移动） */\nexport abstract class AbsMove {\n    moveType: AbsMoveType\n    abs: AbsObj\n    constructor(sType: AbsMoveType) {\n        this.moveType = sType\n    }\n    setAbs(abs: AbsObj) {\n        this.abs = abs\n    }\n\n    init() {\n\n    }\n\n    setAbsPos(v3: Vec3) {\n        this.abs.setPosition(v3)\n    }\n\n    updateFrame(dt: number) {\n        this.fly(dt)\n        if (this.checkComplete()) {\n            this.onFlyComplete()\n        }\n    }\n    fly(dt: number) {\n\n    }\n    onFlyComplete() {\n        this.abs.onMoveComplete()\n    }\n    /** 检查是否完成 */\n    checkComplete() {\n        return false\n    }\n}\n\nexport class BulletMove extends AbsMove {\n    public lifeTime: number = 0\n    protected passTime: number = 0\n\n    abs: Bullet\n    setLiftTime(t: number) {\n        this.lifeTime = t\n        this.passTime = 0\n    }\n\n    updateFrame(dt: number) {\n        this.passTime = this.passTime + dt\n        super.updateFrame(dt)\n        this.checkRotate()\n    }\n\n    checkRotate() {\n        if (this.abs == null || this.abs && this.abs.isDead) {\n            return\n        }\n        if (this.abs.info.isRotate()) {\n            this.abs.addAngle(this.abs.info.configTab.Rotate)\n        }\n    }\n\n    checkComplete(): boolean {\n        if (this.abs.info.isTimeDeath()) {\n            if (this.passTime >= this.lifeTime) {\n                return true\n            }\n        } else if (this.abs.info.isHitDeath()) {\n            if (ScreenUtil.isOutOfScreenThird(this.abs.getTruePosition())) {\n                this.abs.OutOfScreen = true\n                return true\n            }\n        }\n        //判定是否到达目标\n        return false\n    }\n\n    traceDirection(startPos: Vec3, targetPos: Vec3) {\n        Vec3.subtract(tempPos, targetPos, startPos);\n        tempPos.normalize()\n        this.abs.setVelocityAndRatio(tempPos, 1)\n    }\n\n    setVoAngle(angle: number) {\n        this.abs.setVelocityAngle(angle)\n    }\n}\n\nexport class MonsterMoveLine extends AbsMove {\n\n    constructor() {\n        super(AbsMoveType.velocity)\n    }\n\n    abs: AbsRole\n    updateFrame(dt: number) {\n        super.updateFrame(dt)\n    }\n\n    fly(dt: number) {\n        if (this.abs.isBeatBack || this.abs.isReviceBeatBack) {\n            return\n        }\n        //计算新位置\n        FixedUtil.deltaTimeMovePostion(tempPos, this.abs.getPosition(), this.abs.velocity, dt, this.abs.info.attrData.getAttr(tab.AttrType.AttrType_SpeedMoveAdd))\n        this.setAbsPos(tempPos);\n    }\n\n    checkComplete(): boolean {\n        //判定是否到达目标\n        return false\n    }\n}\n\nexport enum BorderType {\n    empty = 0,\n    leftRight = 1,\n    upDown = 2,\n}\n\n/** 满屏再三分之一 */\nexport class ScreenUtil {\n    /** 是否超出屏幕三分之一 */\n    static isOutOfScreenThird(pos: Vec3): boolean {\n        if (Math.abs(pos.x) > ViewSize.hirdSize.width || Math.abs(pos.y) > ViewSize.hirdSize.height) {\n            return true\n        }\n        return false\n    }\n\n    /** 是否超出屏幕 */\n    static isOutOfScreen(pos: Vec3): boolean {\n        if (Math.abs(pos.x) > ViewSize.halfSize.width || Math.abs(pos.y) > ViewSize.halfSize.height) {\n            return true\n        }\n        return false\n    }\n\n    /** 获取超出屏幕的类型 */\n    static getOutOfScreenType(pos: Vec3): BorderType {\n        if (Math.abs(pos.x) > ViewSize.halfSize.width) {\n            return BorderType.leftRight\n        } else if (Math.abs(pos.y) > ViewSize.halfSize.height) {\n            return BorderType.upDown\n        }\n        return BorderType.empty\n    }\n}"]}