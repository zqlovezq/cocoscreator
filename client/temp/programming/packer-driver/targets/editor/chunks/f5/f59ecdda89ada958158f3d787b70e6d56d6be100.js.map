{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/FightTestView.ts"],"names":["_decorator","Component","EditBox","js","Label","Node","profiler","Toggle","FightRootControl","FightState","PlayerControl","AbsObjType","FrameControl","Func","tab","BuffControl","DropControl","FightTestAttr","SkillControl","FightMsgControl","ViewName","UIMgr","FightRenderSort","FightData","ShakeAction","PvpTest","PvpControl","PvpObjType","ccclass","property","FightTestView","shakeAc","onLoad","skillId","string","getItem","skillGroupId","buffId","useSkillId","monsterId","monsterCount","onmonsterToggle","boundToggleToggle","onTimeToggle","onSkillEdit","onSkillGroupEdit","ontestToggle","onDamageToggle","schedule","updateCount","pvpInit","start","ins","isTime","timeToggle","isChecked","isTest","register","onMonsterAttackToggle","scheduleOnce","monsterAttack","monsterAttackToggle","onmonsterMove","monsterMove","damageToggle","DamageToggle","onClickShowBullet","onClickBorder","isPvp","monsterNum","formatStr","getObjList","role","length","bullet","getCount","enemy","lateUpdate","dt","isTestChuguai","monsterToggle","str","replace","count","checkInt","max","setItem","isBound","boundToggle","updateAllBound","id","testBulletId","testSkillGroupId","getLeader","info","resetTestGroupId","onAddHero","addDropItem","onAddYuMao","onExitFight","exitFight","addBuff","e","cusData","leader","isDead","buff","getData","BuffTableById","getValue","list","buffTab","skillPowers","createTypeAnyId","PowerType","PowerType_BuffTable","objId","getRoles","index","v","isActive","isLeader","onWinClick","console","log","setState","end","onPicClick","show","viewName","DynamicAtlas","onLookAttr","create","testNode","active","testToggle","onUseSkill","SkillTableById","skillTab","PowerType_SkillTable","addSkill","isPassiveSkill","useSkillAndBullet","onAddMonster","MonsterTableById","createEnemy","onInvincibleClick","roles","attrData","addAttr","AttrType","AttrType_Invincible","onPause","pause","onSort","sort","getRootView","objects","bullets","onSort1","ySort","onshake","runActions","rootNode","delay","duration","onFps","isShowingStats","hideStats","showStats","pvpToggle","pvpBulletBox","onClickCreateHero","createHero","onPvpUseSkill","useSkill","onPvpAddBuff","onPvpUpdateBuff","updateBuff","onPvpSkillCD","skillCD","onPvpSkillCDEnd","skillCDEnd","onPvpDead","onDead","onPvpRevive","onRevive","onPvpBullet","bulletTab","BulletTableById","createBullet","WalkAnimationId","onPvpRemoveObj","removeObj","bulletIndex","onPvpPause","dataPause","onPvpNext","onNextFrame","onPvpNextStep","pvpLine","recycle","onPvpDrawLine","drawLine","onCopy","dd","JSON","parse","stringify","fightInfo","bufferList","copyText"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, EditBox, EventTouch, game, js, Label, Layers, Node, profiler, Size, Sprite, SpriteFrame, Toggle, Tween, tween, UIOpacity, UITransform, v2, v3, Vec3, view } from 'cc';\nimport { FightRootControl, FightState } from './FightRootControl';\nimport { PlayerControl } from './base/obj/role/role/PlayerControl';\nimport { AbsObjType } from './base/obj/AbsObj';\nimport { FrameControl } from './base/frame/FrameControl';\nimport { Func } from '../utils/Func';\nimport { tab } from '../../Table/table_gen';\nimport { BuffControl } from './base/buff/BuffControl';\nimport { DropControl } from './drop/DropControl';\nimport { Random } from './util/Random';\nimport { FightTestAttr } from './view/test/FightTestAttr';\nimport { BuffTab } from './power/powerTab/BuffTab';\nimport { SkillTab } from './power/powerTab/SkillTab';\nimport { SkillControl } from './base/skill/SkillControl';\nimport { DamageData, DamageSource } from './base/damage/DamageData';\nimport { AbsRole } from './base/obj/role/AbsRole';\nimport { FightMsgControl } from './FightMsgControl';\nimport { DamageLab } from './base/damage/DamageLab';\nimport { ViewName } from '../define/ViewDefine';\nimport { UIMgr } from '../mgr/UIMgr';\nimport { FightRenderSort } from './define/FightRenderSort';\nimport { FightDamageRankItem } from './view/damage/FightDamageRankItem';\nimport { FightData } from './data/FightData';\nimport { Net } from '../net/Net';\nimport { ShakeAction } from '../../framework/action/ShakeAction';\nimport { proto } from 'client_protocol';\nimport { PvpTest } from './pvp/PvpTest';\nimport { PvpControl } from './pvp/PvpControl';\nimport { PvpObjType } from './pvp/obj/PvpObj';\nconst { ccclass, property } = _decorator;\n\n@ccclass('FightTestView')\nexport class FightTestView extends Component {\n    @property(Node)\n    testNode: Node = null\n\n    @property(Toggle)\n    testToggle: Toggle = null\n\n    @property(Toggle)\n    boundToggle: Toggle = null\n\n    @property(Toggle)\n    timeToggle: Toggle = null\n\n    @property(Toggle)\n    monsterAttackToggle: Toggle = null\n\n    @property(Toggle)\n    monsterMove: Toggle = null\n\n    @property(Toggle)\n    monsterToggle: Toggle = null\n\n    @property(Toggle)\n    DamageToggle: Toggle = null\n\n    @property(Label)\n    monsterNum: Label = null\n\n    @property(EditBox)\n    skillId: EditBox = null\n\n    @property(EditBox)\n    skillGroupId: EditBox = null\n\n    @property(EditBox)\n    monsterCount: EditBox = null\n\n    @property(EditBox)\n    buffId: EditBox = null\n\n    @property(EditBox)\n    useSkillId: EditBox = null\n\n    @property(EditBox)\n    monsterId: EditBox = null\n\n    protected onLoad(): void {\n        // super.onLoad()\n\n        this.skillId.string = Func.getItem(\"test_bulletid\") || \"\";\n        this.skillGroupId.string = Func.getItem(\"test_skillgroupid\") || \"\";\n        this.buffId.string = Func.getItem(\"test_buffId\") || \"\";\n        this.useSkillId.string = Func.getItem(\"test_useSkillId\") || \"\";\n        this.monsterId.string = Func.getItem(\"test_monsterId\") || \"\";\n\n        this.monsterCount.string = Func.getItem(\"test_monsterCount\") || \"\";\n\n        this.onmonsterToggle()\n        this.boundToggleToggle()\n        this.onTimeToggle()\n        this.onSkillEdit()\n        this.onSkillGroupEdit()\n        this.ontestToggle()\n        this.onDamageToggle()\n\n        this.schedule(() => {\n            this.updateCount()\n        }, 0.1)\n        this.pvpInit()\n\n\n    }\n    protected start(): void {\n        FightRootControl.ins.isTime = this.timeToggle.isChecked = (!FightMsgControl.ins.isTest)\n    }\n\n    register(): void {\n\n    }\n\n    onMonsterAttackToggle() {\n        this.scheduleOnce(() => {\n            FightRootControl.ins.monsterAttack = this.monsterAttackToggle.isChecked\n        })\n    }\n\n    onmonsterMove() {\n        this.scheduleOnce(() => {\n            FightRootControl.ins.monsterMove = this.monsterMove.isChecked\n        })\n    }\n\n    onDamageToggle() {\n        this.scheduleOnce(() => {\n            FightRootControl.ins.damageToggle = this.DamageToggle.isChecked\n        })\n    }\n\n\n\n    onTimeToggle() {\n        this.scheduleOnce(() => {\n            FightRootControl.ins.isTime = this.timeToggle.isChecked\n        })\n    }\n\n    onClickShowBullet() {\n    }\n\n    onClickBorder() {\n        this.boundToggleToggle()\n    }\n    updateCount() {\n        if (FightData.ins.isPvp) {\n            this.monsterNum.string = js.formatStr(\"怪：%s 子弹:%s 渲染:%s\", PvpControl.ins.getObjList(PvpObjType.role).length, PvpControl.ins.getObjList(PvpObjType.bullet).length, FightRootControl.ins.getCount())\n        } else {\n            this.monsterNum.string = js.formatStr(\"怪：%s 子弹:%s 渲染:%s\", FrameControl.ins.getObjList(AbsObjType.enemy).length, FrameControl.ins.getObjList(AbsObjType.bullet).length, FightRootControl.ins.getCount())\n        }\n\n    }\n\n\n    protected lateUpdate(dt: number): void {\n\n    }\n\n    onmonsterToggle() {\n        this.scheduleOnce(() => {\n            FightRootControl.ins.isTestChuguai = this.monsterToggle.isChecked\n\n            var str = this.monsterCount.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n            let count = Func.checkInt(str)\n            FightRootControl.ins.max = count\n            Func.setItem(\"test_monsterCount\", str)\n        })\n    }\n\n    boundToggleToggle() {\n        this.scheduleOnce(() => {\n            FightRootControl.ins.isBound = this.boundToggle.isChecked\n            FrameControl.ins.updateAllBound()\n        })\n    }\n\n    onSkillEdit() {\n        var str = this.skillId.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n        let id = Func.checkInt(str)\n        FightRootControl.ins.testBulletId = id\n        Func.setItem(\"test_bulletid\", str)\n    }\n\n    onSkillGroupEdit() {\n        var str = this.skillGroupId.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n        let id = Func.checkInt(str)\n        FightRootControl.ins.testSkillGroupId = id\n        Func.setItem(\"test_skillgroupid\", str)\n        if (PlayerControl.ins.getLeader() && id > 0) {\n            PlayerControl.ins.getLeader().info.resetTestGroupId(id)\n        }\n    }\n\n\n    onAddHero() {\n        DropControl.ins.addDropItem(1)\n    }\n    onAddYuMao() {\n        DropControl.ins.addDropItem(2)\n        // PlayerControl.ins.getLeader().onDead()\n    }\n\n\n    onExitFight() {\n        FightRootControl.ins.exitFight()\n    }\n\n\n    addBuff(e: EventTouch, cusData: string) {\n        let leader = PlayerControl.ins.getLeader() as AbsRole\n        if (leader == null || (leader && leader.isDead)) {\n            return\n        }\n\n        var str = this.buffId.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n\n\n        let buff: number = Func.checkInt(str)\n\n        if (!tab.getData().BuffTableById.getValue(buff)) {\n            return\n        }\n        Func.setItem(\"test_buffId\", str)\n        if (cusData == \"2\") {\n            let list = FrameControl.ins.getObjList(AbsObjType.enemy)\n            let enemy = list[0] as AbsRole\n\n            let buffTab = leader.info.skillPowers.createTypeAnyId(tab.PowerType.PowerType_BuffTable, buff) as BuffTab\n            BuffControl.ins.addBuff(buffTab, leader.objId, enemy)\n        } else if (cusData == \"3\") {\n            let list = PlayerControl.ins.getRoles()\n            for (let index = 0; index < list.length; index++) {\n                const v = list[index];\n                if (v.isActive && !v.isDead && !v.info.isLeader) {\n                    leader = v\n                    let buffTab = leader.info.skillPowers.createTypeAnyId(tab.PowerType.PowerType_BuffTable, buff) as BuffTab\n                    BuffControl.ins.addBuff(buffTab, leader.objId, leader)\n                }\n            }\n            return\n        }\n        if (leader == null) {\n            return\n        }\n        let buffTab = leader.info.skillPowers.createTypeAnyId(tab.PowerType.PowerType_BuffTable, buff) as BuffTab\n        BuffControl.ins.addBuff(buffTab, leader.objId, leader)\n    }\n\n\n    onWinClick() {\n        console.log(\"一键胜利\")\n        FightRootControl.ins.setState(FightState.end, true)\n        // \n        // let dd = DamageData.get()\n        // dd.damage = 1000000000\n\n        // PlayerControl.ins.getLeader().info.onHitDamage(dd)\n    }\n    onPicClick() {\n        UIMgr.ins.show({ viewName: ViewName.DynamicAtlas })\n    }\n\n    onLookAttr() {\n        FightTestAttr.create()\n        // let damageData = DamageData.get()\n        // damageData.source = DamageSource.bullet\n        // damageData.damage = 5000000\n        // let leader = PlayerControl.ins.getLeader()\n        // if (leader == null || (leader && leader.isDead)) {\n        //     return\n        // }\n        // leader.info.onHitDamage(damageData)\n        // DamageLab.addShowDamageNum(damageData, leader)\n\n    }\n\n\n\n    ontestToggle() {\n        this.scheduleOnce(() => {\n            this.testNode.active = this.testToggle.isChecked\n        })\n    }\n\n    onUseSkill() {\n        let leader = PlayerControl.ins.getLeader()\n        if (leader == null || (leader && leader.isDead)) {\n            return\n        }\n\n        var str = this.useSkillId.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n\n\n        let buff: number = Func.checkInt(str)\n\n        if (!tab.getData().SkillTableById.getValue(buff)) {\n            return\n        }\n        Func.setItem(\"test_useSkillId\", str)\n        let skillTab = leader.info.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillTable, buff) as SkillTab\n        SkillControl.ins.addSkill(skillTab, leader)\n        if (!skillTab.isPassiveSkill()) {\n            SkillControl.ins.useSkillAndBullet(skillTab, leader)\n        }\n    }\n\n\n    onAddMonster() {\n        let leader = PlayerControl.ins.getLeader()\n        if (leader == null || (leader && leader.isDead)) {\n            return\n        }\n\n        var str = this.monsterId.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n\n\n        let buff: number = Func.checkInt(str)\n\n        if (!tab.getData().MonsterTableById.getValue(buff)) {\n            return\n        }\n        Func.setItem(\"test_monsterId\", str)\n        FightRootControl.ins.createEnemy(buff)\n\n    }\n\n    onInvincibleClick() {\n        let list = PlayerControl.ins.roles\n        for (let index = 0; index < list.length; index++) {\n            const v = list[index];\n            v.info.attrData.addAttr(tab.AttrType.AttrType_Invincible, 2)\n        }\n    }\n\n\n    onPause() {\n        FightData.ins.pause = !FightData.ins.pause\n    }\n\n\n    onSort() {\n        FightRenderSort.sort(FightRootControl.ins.getRootView().objects, FightRootControl.ins.getRootView().bullets)\n    }\n    onSort1() {\n        FightRenderSort.ySort(FightRootControl.ins.getRootView().objects)\n    }\n\n    onshake() {\n        this.shakeAc.runActions(FightRootControl.ins.getRootView().rootNode, [{ delay: 0, duration: 0.4 }])\n    }\n    shakeAc = new ShakeAction()\n\n\n    onFps() {\n        if (profiler.isShowingStats()) {\n            profiler.hideStats()\n        } else {\n            profiler.showStats()\n        }\n    }\n\n\n\n    @property(Toggle)\n    pvpToggle: Toggle = null\n    @property(EditBox)\n    pvpBulletBox: EditBox = null\n\n    pvpInit() {\n        this.pvpToggle.isChecked = FightData.ins.isPvp\n        this.pvpBulletBox.string = Func.getItem(\"test_pvp_bulletId\") || \"\";\n    }\n\n    onClickCreateHero() {\n        PvpTest.createHero(0)\n    }\n\n    onPvpUseSkill() {\n        PvpTest.useSkill()\n    }\n\n    onPvpAddBuff() {\n        PvpTest.addBuff()\n    }\n    onPvpUpdateBuff() {\n        PvpTest.updateBuff()\n    }\n    onPvpSkillCD() {\n        PvpTest.skillCD()\n    }\n\n    onPvpSkillCDEnd() {\n        PvpTest.skillCDEnd()\n    }\n\n    onPvpDead() {\n        PvpTest.onDead()\n    }\n\n    onPvpRevive() {\n        PvpTest.onRevive()\n    }\n\n\n    onPvpBullet() {\n        var str = this.pvpBulletBox.string.replace(/(^\\s*)|(\\s*$)/g, \"\")\n        let id = Func.checkInt(str)\n        Func.setItem(\"test_pvp_bulletId\", str)\n        let bulletTab = tab.getData().BulletTableById.getValue(id)\n        if (bulletTab) {\n            PvpTest.createBullet(id, bulletTab.WalkAnimationId)\n        } else {\n            console.log(\"子弹不存在\", id)\n        }\n    }\n\n    onPvpRemoveObj() {\n        PvpTest.removeObj(PvpTest.bulletIndex)\n    }\n\n    onPvpPause() {\n        PvpControl.ins.dataPause = !PvpControl.ins.dataPause\n    }\n\n    onPvpNext() {\n        PvpControl.ins.onNextFrame()\n    }\n\n    onPvpNextStep() {\n        // PvpControl.ins.onNextStep()\n        PvpControl.ins.pvpLine.recycle()\n    }\n\n\n    onPvpDrawLine() {\n        PvpTest.drawLine()\n    }\n\n    onCopy() {\n        let dd = JSON.parse(JSON.stringify(FightData.ins.fightInfo))\n        dd.bufferList = [700000, 900001]\n        Func.copyText(JSON.stringify(dd))\n    }\n}\n"]}