{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/startScrpit/UpdateScene.ts"],"names":["_decorator","assetManager","Component","director","DynamicAtlasManager","Game","game","macro","profiler","sys","view","DEBUG","UpdateView","Bridge","ccclass","property","UpdateScene","_am","_loadDone","onLoad","console","log","CLEANUP_IMAGE_CACHE","instance","enabled","showStats","start","presets","maxConcurrency","maxRequestsPerFrame","on","EVENT_ENGINE_INITED","setOrientation","ORIENTATION_LANDSCAPE","isNative","updateView","setCb","loadScript","check","schedule","bind","init","loadBundle","err","bundle","unscheduleAllCallbacks","loadGames","loadScene"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA0BC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,mB,OAAAA,mB;AAAqBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAAaC,MAAAA,Q,OAAAA,Q;AAA6CC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,I,OAAAA,I;;AAG7JC,MAAAA,K,UAAAA,K;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBf,U;;6BAKjBgB,W,WADZF,OAAO,CAAC,aAAD,C,UAIHC,QAAQ;AAAA;AAAA,mC,2BAJb,MACaC,WADb,SACiCd,SADjC,CAC2C;AAAA;AAAA;AAAA,eAC/Be,GAD+B;AAAA,eAE/BC,SAF+B,GAEnB,KAFmB;;AAAA;AAAA;;AAM7BC,QAAAA,MAAM,GAAS;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAd,UAAAA,KAAK,CAACe,mBAAN,GAA4B,KAA5B;AACAlB,UAAAA,mBAAmB,CAACmB,QAApB,CAA6BC,OAA7B,GAAuC,IAAvC;AACAhB,UAAAA,QAAQ,CAACiB,SAAT;AAEH;;AACDC,QAAAA,KAAK,GAAG;AACJzB,UAAAA,YAAY,CAAC0B,OAAb,CAAqB,QAArB,EAA+BC,cAA/B,GAAgD,IAAhD;AACA3B,UAAAA,YAAY,CAAC0B,OAAb,CAAqB,QAArB,EAA+BE,mBAA/B,GAAqD,IAArD;;AACA,cAAIlB,KAAJ,EAAW;AACPL,YAAAA,IAAI,CAACwB,EAAL,CAAQzB,IAAI,CAAC0B,mBAAb,EAAkC,MAAM;AACpCrB,cAAAA,IAAI,CAACsB,cAAL,CAAoBzB,KAAK,CAAC0B,qBAA1B;AACH,aAFD;AAGH;;AACD,cAAIxB,GAAG,CAACyB,QAAR,EAAkB;AACd;AACA,iBAAKC,UAAL,CAAgBC,KAAhB,CAAsB,MAAI;AACtB,mBAAKC,UAAL;AACH,aAFD;AAGA,iBAAKF,UAAL,CAAgBG,KAAhB;AACH,WAND,MAMO;AACH;AACA,iBAAKD,UAAL;AACA,iBAAKE,QAAL,CAAc,KAAKF,UAAL,CAAgBG,IAAhB,CAAqB,IAArB,CAAd,EAA0C,GAA1C;AACH;AACJ;;AAEDH,QAAAA,UAAU,GAAG;AACT;AAAA;AAAA,gCAAOI,IAAP;AACAxC,UAAAA,YAAY,CAACyC,UAAb,CAAwB,SAAxB,EAAmC,CAACC,GAAD,EAAaC,MAAb,KAA6C;AAC5E,gBAAID,GAAJ,EAAS;AACL;AACH;;AAED,iBAAKE,sBAAL;;AACA,gBAAI,KAAK3B,SAAT,EAAoB;AAChB;AACH;;AACD,iBAAKA,SAAL,GAAiB,IAAjB;AAEA,iBAAK4B,SAAL;AACH,WAZD;AAaH;;AAEDA,QAAAA,SAAS,GAAG;AACR,eAAK5B,SAAL,GAAiB,KAAjB;AACAjB,UAAAA,YAAY,CAACyC,UAAb,CAAwB,SAAxB,EAAmC,CAACC,GAAD,EAAaC,MAAb,KAA6C;AAC5E,gBAAID,GAAJ,EAAS;AACL;AACH;;AAED,iBAAKE,sBAAL;;AACA,gBAAI,KAAK3B,SAAT,EAAoB;AAChB;AACH;;AACD,iBAAKA,SAAL,GAAiB,IAAjB;AAEAf,YAAAA,QAAQ,CAAC4C,SAAT,CAAmB,YAAnB,EAAiC,MAAM,CACtC,CADD;AAEH,WAbD;AAcH;;AAnEsC,O;;;;;iBAIf,I","sourcesContent":["import { _decorator, AssetManager, assetManager, Component, director, DynamicAtlasManager, Game, game, macro, Node, profiler, ResolutionPolicy, setDisplayStats, sys, view } from 'cc';\nimport { MathAngle } from '../scripts/framework/collision/Maths';\nimport { Random } from '../scripts/logic/fight/util/Random';\nimport { DEBUG } from 'cc/env';\nimport { UpdateView } from './UpdateView';\nimport { Bridge } from './Bridge';\nconst { ccclass, property } = _decorator;\n\n\n\n@ccclass('UpdateScene')\nexport class UpdateScene extends Component {\n    private _am: jsb.AssetsManager\n    private _loadDone = false;\n    @property(UpdateView)\n    updateView:UpdateView = null\n\n    protected onLoad(): void {\n        console.log(\"updatescene   onload\")\n        macro.CLEANUP_IMAGE_CACHE = false;\n        DynamicAtlasManager.instance.enabled = true\n        profiler.showStats()\n       \n    }\n    start() {\n        assetManager.presets['bundle'].maxConcurrency = 1024;\n        assetManager.presets['bundle'].maxRequestsPerFrame = 1024;\n        if (DEBUG) {\n            game.on(Game.EVENT_ENGINE_INITED, () => {\n                view.setOrientation(macro.ORIENTATION_LANDSCAPE);\n            });\n        }\n        if (sys.isNative) {\n            // game.frameRate = 60\n            this.updateView.setCb(()=>{\n                this.loadScript()\n            })\n            this.updateView.check()\n        } else {\n            // game.frameRate = 45\n            this.loadScript()\n            this.schedule(this.loadScript.bind(this), 5.0)\n        }\n    }\n\n    loadScript() {\n        Bridge.init()\n        assetManager.loadBundle(\"scripts\", (err: Error, bundle: AssetManager.Bundle) => {\n            if (err) {\n                return;\n            }\n\n            this.unscheduleAllCallbacks();\n            if (this._loadDone) {\n                return;\n            }\n            this._loadDone = true;\n\n            this.loadGames()\n        })\n    }\n\n    loadGames() {\n        this._loadDone = false\n        assetManager.loadBundle(\"gameRes\", (err: Error, bundle: AssetManager.Bundle) => {\n            if (err) {\n                return;\n            }\n\n            this.unscheduleAllCallbacks();\n            if (this._loadDone) {\n                return;\n            }\n            this._loadDone = true;\n\n            director.loadScene(\"LoginScene\", () => {\n            })\n        })\n    }\n}\n\n\n\n\n"]}