{"version":3,"sources":["file:///C:/chickenStarClient/client/assets/scripts/logic/fight/data/FightData.ts"],"names":["FightData","JsonAsset","_decorator","director","js","resources","Leveljson","tab","SkillPowers","EventMgr","FightEvent","FightGainBuffControl","SettingsManager","ccclass","property","State_Json_Path","isDestory","stageJsonPath","frameTime","stageId","stageTab","levelJson","reviceCount","advertReviceCount","_pause","_timeScale","fightInfo","skills","skillPowers","isPvp","fightPvp","fincaBattleFightRsp","ins","_instance","time","purge","clear","timeScale","length","init","addReviceCount","isAdvert","emitFight","Change_Revice_Count","maxReviceCount","ReviveNumber","setFightInfo","info","getData","PveStageTableByStageId","getValue","addIds","bufferList","formatStr","LevelArrange","load","setPvpInfo","getPvpFightInfoByGroup","group","loadLevelJson","create","initSkill","index","skillList","skillId","skill","createTypeAnyId","PowerType","PowerType_SkillTable","push","isStageType","_type","StageType","isDropByType","EggDropType","pause","bool","Pause","value","getScheduler","setTimeScale","Time_Scale","iFightUpdate","dt","isWorlBoss","PveStageType","PveStageType_WorldBoss","isGuild","PveStageType_GuildBoss","isWorldAndGuildBoss","isClimbTower","PveStageType_ClimbTower","isMainLine","PveStageType_MainChapter","isDamage","getSetting"],"mappings":"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","sourcesContent":["import { JsonAsset, _decorator, director, js, resources } from \"cc\";\nimport { IClear } from \"../../../framework/base/IAbs\";\nimport { Leveljson } from \"../table/Leveljson\";\nimport { tab } from \"../../../Table/table_gen\";\nimport { SkillPowers } from \"../power/SkillPowers\";\nimport { EventMgr } from \"../../mgr/EventMgr\";\nimport { FightEvent } from \"../define/FightEvent\";\nimport { proto } from \"client_protocol\";\nimport { SkillTab } from \"../power/powerTab/SkillTab\";\nimport { DamageStatisticsData } from \"../base/damage/DamageStatisticsData\";\nimport { Func } from \"../../utils/Func\";\nimport { IFightUpdate } from \"../define/FightDefine\";\nimport { FightGainBuffControl } from \"../gainBuff/FightGainBuffControl\";\nimport { SettingsManager } from \"../../model/role/SettingsManager\";\nimport { GuideController } from \"../../guide/GuideController\";\nimport { BattleMainDataControl } from \"../../model/home/battle/BattleMainDataControl\";\n\n\nconst { ccclass, property } = _decorator;\nconst State_Json_Path = 'leveljson/%s'\n/** 战斗数据 */\nexport class FightData implements IClear, IFightUpdate {\n\n    private static _instance: FightData;\n    public static get ins() {\n        if (null == this._instance) {\n            this._instance = new FightData();\n        }\n        return this._instance;\n    }\n    static get time() {\n        return FightData.ins.frameTime\n    }\n\n    /** 战斗已销毁 */\n    isDestory: boolean = false\n\n    stageJsonPath: string = \"\"\n    frameTime: number = 0 //帧时间\n\n    /** 关卡id */\n    stageId: number = 0\n    /** 关卡配置 */\n    stageTab: tab.PveStageTable\n    /** 关卡Json配置 */\n    levelJson: Leveljson = null\n\n    /** 复活次数 */\n    reviceCount: number = 0\n    /** 观看广告复活次数 */\n    advertReviceCount: number = 0\n    /** 复活次数 */\n    private _pause: boolean = false\n    /** 时间 */\n    private _timeScale: number = 1\n\n    fightInfo: proto.FightInfo\n\n\n    /** 全局技能 战场携带*/\n    skills: SkillTab[] = []\n    /** 全局技能增强 */\n    skillPowers: SkillPowers = new SkillPowers()\n\n    isPvp: boolean = false\n    fightPvp: proto.FightPvP\n    fincaBattleFightRsp: proto.Msg_FincaBattleFightRsp\n    purge(): void {\n        this.isPvp = false\n        this.skillPowers.clear()\n        this.reviceCount = 0\n        this.advertReviceCount = 0;\n        this.timeScale = 1\n        this.stageId = 0\n        this.stageTab = null\n        this.levelJson = null\n        this._pause = false\n        this.fightInfo = null\n        this.skills.length = 0\n        this.frameTime = 0\n        this.fincaBattleFightRsp = null\n    }\n\n    init() {\n        this.purge()\n    }\n\n    addReviceCount(isAdvert: boolean = false) {\n        this.reviceCount += 1;\n        if (isAdvert) {\n            this.advertReviceCount += 1;\n        }\n        EventMgr.emitFight(FightEvent.Change_Revice_Count);\n    }\n\n\n    maxReviceCount() {\n        return this.stageTab.ReviveNumber;\n    }\n\n    setFightInfo(info: proto.FightInfo) {\n        this.isPvp = false\n        this.fightInfo = info\n\n        this.stageId = this.fightInfo.stageId\n        this.stageTab = tab.getData().PveStageTableByStageId.getValue(this.fightInfo.stageId)\n\n        // if(BattleMainDataControl.ins.getStageClearIds().length === 0){\n        //     if(this.stageId===101){\n        // this.stageTab.LevelArrange = tab.getData().GetKeyValue_ConfigTable().GuideStage;\n        // this.stageTab.LevelBUFF = tab.getData().GetKeyValue_ConfigTable().GuideStageBuff;\n        // this.stageTab.EggDropGroup =  tab.getData().GetKeyValue_ConfigTable().GuideStageFeatherGroup;\n        // this.stageTab.RougeGroupId =  tab.getData().GetKeyValue_ConfigTable().GuideStageRogueGroup;\n        // }\n        // }else{\n        //     if(this.stageId===101){\n        //         this.stageTab.LevelArrange = \"main_001-1\";\n        //         this.stageTab.LevelBUFF = [];\n        //         this.stageTab.EggDropGroup = 1;\n        //         this.stageTab.RougeGroupId = 1;\n        //     }\n        // }\n\n        FightGainBuffControl.ins.init()\n        // FightGainBuffControl.ins.addIds(this.stageTab.LevelBUFF)\n        // if (this.isClimbTower()){\n        //     let conf = tab.getData().ClimbTowerTableByStageId.getValue(this.fightInfo.stageId)\n        //     if (conf){\n        //         info.bufferList = info.bufferList.concat(conf.SkillShow)\n        //     }\n        // }\n        FightGainBuffControl.ins.addIds(info.bufferList)\n\n\n        this.stageJsonPath = js.formatStr(State_Json_Path, this.stageTab.LevelArrange)\n        resources.load(this.stageJsonPath, JsonAsset)\n    }\n\n    setPvpInfo(info: proto.FightPvP) {\n        this.fightPvp = info\n        this.isPvp = true\n        this.stageId = this.fightPvp.fightInfo[0].fightInfo.stageId\n        this.stageTab = tab.getData().PveStageTableByStageId.getValue(this.stageId)\n    }\n\n    getPvpFightInfoByGroup(group: number) {\n        return this.fightPvp.fightInfo[group]\n    }\n\n    loadLevelJson() {\n        this.levelJson = Leveljson.create(this.stageTab.LevelArrange)\n    }\n\n    initSkill() {\n        for (let index = 0; index < this.fightInfo.skillList.length; index++) {\n            const skillId = this.fightInfo.skillList[index];\n            let skill = this.skillPowers.createTypeAnyId(tab.PowerType.PowerType_SkillTable, skillId) as SkillTab\n            this.skills.push(skill)\n        }\n    }\n\n    /** 战斗类型 */\n    isStageType(_type: tab.PveStageType) {\n        return this.stageTab.StageType == _type\n    }\n\n    isDropByType(_type: tab.EggDropType) {\n        return this.stageTab.EggDropType == _type\n    }\n\n    /** 暂停 */\n    get pause() {\n        return this._pause\n    }\n    set pause(bool: boolean) {\n        if (this._pause == bool) {\n            return\n        }\n        this._pause = bool\n        EventMgr.emitFight(FightEvent.Pause, bool)\n    }\n\n    get timeScale() {\n        return this._timeScale\n    }\n    set timeScale(value: number) {\n        this._timeScale = value\n        director.getScheduler().setTimeScale(value)\n        EventMgr.emitFight(FightEvent.Time_Scale, this._timeScale)\n    }\n\n    iFightUpdate(dt: number): void {\n        this.frameTime += dt\n    }\n\n    /** 世界boss战斗类型 */\n    isWorlBoss() {\n        return this.isStageType(tab.PveStageType.PveStageType_WorldBoss)\n    }\n    /** 公会boss战斗类型 */\n    isGuild() {\n        return this.isStageType(tab.PveStageType.PveStageType_GuildBoss)\n    }\n\n    isWorldAndGuildBoss() {\n        return this.isWorlBoss() || this.isGuild()\n    }\n\n    /** 爬塔 */\n    isClimbTower() {\n        return this.isStageType(tab.PveStageType.PveStageType_ClimbTower)\n    }\n\n    isMainLine(){\n        return this.isStageType(tab.PveStageType.PveStageType_MainChapter)\n    }\n\n    /** 是否伤害飘字 */\n    isDamage() {\n        return SettingsManager.ins.getSetting(\"damage_flag\");\n    }\n\n}"]}