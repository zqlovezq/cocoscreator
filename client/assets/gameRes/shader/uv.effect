// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        angle:          { value: 0.0, editor: { type: float, min: -360.0, max: 360.0, step: 1.0 } }
        repeat:         { value: 1, editor: { type: vec2, min: 1.0, max: 100.0, step: 1 } }
        speed:          { value: 1, editor: { type: vec2, min: -10.0, max: 10.0, step: 1 } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;


  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;



    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;
  in vec2 v_texCoord;
  

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform Constant {
    float repeat;
    float angle;
    float speed;
  };

  vec2 rotateUV(vec2 uv, float rotation, float repeat) {
    uv -= 0.5;
    float r = length(uv);
    float s = sin(rotation);
    float c = cos(rotation);
    mat2 m = mat2(c, -s, s, c);
    uv = m * uv;
    uv += 0.5;
    uv.y += speed * cc_time.x;
    return uv * repeat;
  }


  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = rotateUV(uv0, radians(angle), repeat);
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
