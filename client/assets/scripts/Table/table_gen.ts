// Generated by github.com/greatwing/tabtoy
// DO NOT EDIT!!
// Version: 
export namespace tab {
    var Data:Table = null;    export function getData():Table { return Data; }

	export function InitData(json: Object|string) {
		Data = Table.FromJSON(json);
	}

	
	export enum ViewType { 
		ViewType_Diy = 0, // 不处理 
		ViewType_View = 1, // 全屏 
		ViewType_Pop = 2, // 弹窗 
		ViewType_Persist = 3, // 常驻 
		ViewType_Box = 4, // 宝箱 
		ViewType_Tips = 5, // 提示 
		ViewType_Award = 6, // 奖励 
	}
	export enum ViewZIndex { 
		ViewZIndex_View = 100, // View 
		ViewZIndex_Pop = 200, // Pop 
		ViewZIndex_Box = 300, // Box 
		ViewZIndex_Tips = 400, // Tips 
		ViewZIndex_Award = 500, // Award 
		ViewZIndex_Loading = 600, // Loading 
		ViewZIndex_Reconnect = 700, // Reconnect 
	}
	export enum Module { 
		Module_Unknown = 0, // 无效值 
		Module_LoginView = 1, // 登录界面 
		Module_HomeMainView = 2, // 主界面 
		Module_ConfirmPop = 3, // ConfirmPop 
		Module_DynamicAtlas = 4, // DynamicAtlas 
		Module_Reconnect = 5, // Reconnect 
		Module_AzheGmPop = 6, // AzheGmPop 
		Module_FightUIView = 7, // FightUIView 
		Module_BattleMainView = 8, // 主线关卡主界面 
		Module_CongratulationPop = 9, // 恭喜获得弹窗 
		Module_BattleMainRewardPop = 10, // 通关奖励弹窗 
		Module_HeroBagView = 11, // 英雄背包界面 
		Module_BagPop = 12, // 背包弹窗 
		Module_DrugView = 13, // 丹药界面 
		Module_PaintingView = 14, // 绘卷界面 
		Module_RareBookView = 15, // 秘籍主界面 
		Module_TalentView = 16, // 天赋界面 
		Module_EquipmentView = 17, // 装备主界面 
		Module_EquipResolvePop = 18, // 装备分解界面 
		Module_EquipMasterPop = 19, // 装备大师界面 
		Module_RecruitView = 20, // 英雄招募界面 
		Module_JadeDetailPop = 21, // 玉佩详情界面 
		Module_JadeSelectPop = 22, // 玉佩选择界面 
		Module_JadeRecastPop = 23, // 玉佩重铸界面 
		Module_JadeSkillPreviewPop = 24, // 玉佩技能预览界面 
		Module_JadePreviewPop = 25, // 玉佩预览界面 
		Module_SkinPreviewPop = 26, // 皮肤预览界面 
		Module_RareBookDetailView = 27, // 秘籍详情界面 
		Module_RareBookRewardPreviewPop = 28, // 秘籍奖励预览弹窗 
		Module_RareBookGuaranteedPop = 29, // 秘籍保底界面弹窗 
		Module_RareBookLevelPreviewPop = 30, // 秘籍参悟预览弹窗 
		Module_RareBookEquipPop = 31, // 秘籍装备弹窗 
		Module_RareBookGroupPop = 32, // 秘籍组合弹窗 
		Module_RareBookExchangePop = 33, // 秘籍残卷转换弹窗 
		Module_HeroDetailView = 34, // 英雄详情界面 
		Module_HeroResolvePop = 35, // 英雄遣散弹窗 
		Module_HeroResonancePop = 36, // 英雄共鸣弹窗 
		Module_HeroSkillPop = 37, // 英雄技能弹窗 
		Module_HeroRecommendPop = 38, // 英雄阵容推荐弹窗 
		Module_HeroAutoAscendPop = 39, // 英雄一键升星弹窗 
		Module_HeroResetPop = 40, // 英雄重置弹窗 
		Module_GameplayView = 41, // 游戏玩法界面 
		Module_InstanceZonesView = 42, // 副本界面 
		Module_InstanceRewardPop = 43, // 副本奖励弹窗 
		Module_PatrolPop = 44, // 巡逻弹窗 
		Module_EquipmentDetailPop = 45, // 装备详情弹窗 
		Module_CrazyChickenPop = 46, // 疯狂砸鸡弹窗 
		Module_LimitedBenefitsPop = 47, // 限时福利弹窗 
		Module_FirstRechargePop = 48, // 首充弹窗 
		Module_NewPlayerSignInView = 49, // 新服签到界面 
		Module_SignInView = 50, // 七日签到界面 
		Module_HeroRoadView = 51, // 侠客之路界面 
		Module_HeroMaterialPop = 52, // 升星材料弹窗 
		Module_HandbookPop = 53, // 进化指南弹窗 
		Module_MailPop = 54, // 邮件弹窗 
		Module_MailDeletePop = 55, // 删除邮件弹窗 
		Module_CommonTipsPop = 56, // 通用提示弹窗 
		Module_ItemInfoPop = 57, // 背包兑换弹窗 
		Module_Hero7GiftPackPop = 58, // 英雄七日直升礼包弹窗 
		Module_SecretBook14GiftPackPop = 59, // 秘籍七日直升礼包弹窗 
		Module_PaintingAttributePop = 60, // 绘卷属性弹窗 
		Module_PaintingLvupPop = 61, // 绘卷升级弹窗 
		Module_FengyunRankingMainView = 62, // 风云碑界面 
		Module_FengyunRankingView = 63, // 风云排行界面 
		Module_MonthlyCardView = 64, // 月卡界面 
		Module_WelfareActivityMainView = 65, // 超值福利界面 
		Module_VipPrivilegeView = 66, // Vip界面 
		Module_ChatPop = 67, // 聊天 
		Module_ServerChoosePop = 68, // 服务器选择界面 
		Module_FriendPop = 69, // 好友界面 
		Module_TopWarView = 70, // 冠绝一战界面 
		Module_TopWarRankRewardPop = 71, // 冠绝一战排行奖励弹窗 
		Module_PrestigePop = 72, // 江湖名望弹窗 
		Module_RankPop = 73, // 排行榜弹窗 
		Module_RoleInfoPop = 74, // 个人设置弹窗 
		Module_HomeSkinPop = 75, // 更换主界面背景弹窗 
		Module_RoleInfoDecorationsPop = 76, // 更换形象弹窗 
		Module_AssociationView = 77, // 舰队界面 
		Module_NewHandGiftView = 78, // 新手礼包 
		Module_CycleGiftView = 79, // 超值礼包 
		Module_ChapterGiftView = 80, // 章节礼包 
		Module_EveryDayChallengeView = 81, // 每日挑战 
		Module_EveryDayChallengeHelpPop = 82, // 每日挑战帮助弹窗 
		Module_CommonHelpPop = 83, // 通用帮助弹窗 
		Module_HeroAttrPop = 84, // 英雄属性弹窗 
		Module_ForceUpPop = 85, // 战力提升提示 
		Module_CommonBlackTipsPop = 86, // 通用黑色提示弹窗 
		Module_JadeSkillDetailPop = 87, // 玉佩技能弹窗 
		Module_HeroStarSpecialPop = 88, // 英雄高级升星界面 
		Module_PlayerLvUpPop = 89, // 玩家升级弹窗 
		Module_MutationView = 90, // 突变界面 
		Module_RareBookInfoItemPop = 91, // 秘籍详情弹窗 
		Module_WeaponPop = 92, // 武器图鉴弹窗 
		Module_RecruitProbabilityPop = 93, // 招募概率预览弹窗 
		Module_RecruitGetPop = 94, // 招募结果弹窗 
		Module_StarUpPop = 95, // 升星弹窗 
		Module_RoleInfoRedemptionCodePop = 96, // 礼包兑换弹窗 
		Module_RoleInfoChangeNamePop = 97, // 改名弹窗 
		Module_RoleInfoHomeSkinPop = 98, // 更换主界面背景弹窗 
		Module_RoleInfoNoticePop = 99, // 公告界面 
		Module_TaskView = 100, // 任务界面 
		Module_RecruitGuaranteePop = 101, // 抽卡保底弹窗 
		Module_RareBookGetPop = 102, // 武器获得弹窗 
		Module_NewHeroPop = 103, // 新英雄获得弹窗 
		Module_CommonBoxTipsPop = 104, // 任务宝箱道具弹窗 
		Module_CheckRoleInfoPop = 105, // 其他玩家信息弹窗 
		Module_CheckRoleInfoReportPop = 106, // 其他玩家举报弹窗 
		Module_CheckRoleInfoHeroPop = 107, // 其他玩家英雄弹窗 
		Module_ResourceBuyPop = 108, // 购买资源弹窗 
		Module_EnergyAccumulatePop = 109, // 累计体力弹窗 
		Module_MallMainView = 110, // 商店主界面 
		Module_WarningPop = 111, // 战斗警告弹窗 
		Module_RoguePop = 112, // 战斗升级弹窗 
		Module_FightWinPop = 113, // 战斗胜利界面 
		Module_FightLosePop = 114, // 战斗失败界面 
		Module_DiamondBuyPop = 115, // 快捷购买钻石界面 
		Module_ActivityMainView = 116, // 活动中心界面 
		Module_BattlePassView = 117, // 战令界面 
		Module_ClimbingTowerMainView = 118, // 爬塔界面 
		Module_RookieTaskPop = 119, // 试炼活动界面 
		Module_ClimbingTowerTowerEveryDayRewardPop = 120, // 爬塔每日奖励弹窗 
		Module_ClimbingTowerRewardPop = 121, // 爬塔阶段奖励弹窗 
		Module_JobMallShopView = 122, // 职业特卖界面 
		Module_EquipFettersPop = 123, // 装备大师升星弹窗 
		Module_FunctionUnlockPop = 124, // 功能解锁弹窗 
		Module_RecruitProProbabilityPop = 125, // 职业扭蛋概率展示弹窗 
		Module_RecruitFriendProbabilityPop = 126, // 好友扭蛋概率展示弹窗 
		Module_RareBookProbabilityPop = 127, // 秘籍抽奖概率展示弹窗 
		Module_RareBookSrProbabilityPop = 128, // sr秘籍抽奖概率展示弹窗 
		Module_RecruitMustProbabilityPop = 129, // 必出SSR概率公示弹窗 
		Module_CommunityPop = 130, // 社群弹窗 
		Module_InspirePop = 131, // 五星好评弹窗 
		Module_EveryDayBuffPop = 132, // 日常挑战buff弹窗 
		Module_AssociationMainView = 133, // 舰队详情界面 
		Module_AssociationApplyView = 134, // 舰队申请界面 
		Module_AssociationOperatePop = 135, // 舰队处理弹窗 
		Module_AssociationInfoPop = 136, // 舰队详情弹窗 
		Module_AssociationChangeFlagPop = 137, // 舰队修改旗帜弹窗 
		Module_AssociationLogPop = 138, // 舰队日志弹窗 
		Module_AssociationApplyListPop = 139, // 舰队申请列表弹窗 
		Module_AssociationGiftPop = 140, // 舰队礼包弹窗 
		Module_AssociationSkillPop = 141, // 舰队技能弹窗 
		Module_AssociationTaskPop = 142, // 舰队任务弹窗 
		Module_AssociationAttrPop = 143, // 舰队技能属性弹窗 
		Module_AssociationBossView = 144, // 舰队BOSS界面 
		Module_AssociationRankPop = 145, // 舰队BOSS排行榜弹窗 
		Module_AssociationRankRewardPop = 146, // 舰队BOSS排行奖励弹窗 
		Module_AssociationMainPop = 147, // 舰队申请详情弹窗 
		Module_AssociationCreatePop = 148, // 创建舰队弹窗 
		Module_AssociationChangeNoticePop = 149, // 舰队更换公告弹窗 
		Module_AssociationChangeInfoPop = 150, // 舰队更换信息弹窗 
		Module_AssociationDonatePop = 151, // 舰队捐献弹窗 
		Module_AssociationSkillResetPop = 152, // 舰队技能重置弹窗 
		Module_AssociationBossRewardPop = 153, // 舰队BOSS宝箱奖励弹窗 
		Module_FightAssociationBossResultPop = 154, // 舰队BOSS伤害结算弹窗 
		Module_NewPlayerSignInPop = 155, // 萌新签到弹窗 
		Module_ReviveTipsPop = 156, // 复活弹窗 
		Module_SignInGiftPop = 157, // 签到送抽弹窗 
		Module_CombineActivityMainView = 158, // 活动组界面 
		Module_RecruitLimitView = 159, // 限定卡池界面 
		Module_BannerPop = 160, // banner图弹窗 
		Module_RecruitLimitProbabilityPop1000 = 161, // 活动组1000概率公示 
		Module_FincaFightView = 162, // 庄园战主界面 
		Module_FincaFightStageView = 163, // 庄园战布阵界面 
		Module_FincaFightRankRewardPop = 164, // 庄园战排行奖励弹窗 
		Module_FincaFightLogPop = 165, // 庄园战战报弹窗 
		Module_ItemBuyPop = 166, // 道具购买弹窗 
		Module_BattleMainRecordPop = 167, // 通关纪录弹窗 
		Module_ItemGetWayPop = 168, // 获取途径弹窗 
	}
	export enum AttrType { 
		AttrType_None = 0, // 无效值 
		AttrType_Attack = 1, // 攻击 
		AttrType_Hp = 2, // 生命 
		AttrType_Defence = 3, // 防御 
		AttrType_BreakDefenceFixed = 4, // 破防固定值 
		AttrType_BreakDefencePer = 5, // 破防百分比 
		AttrType_Block = 6, // 格挡 
		AttrType_Critical = 7, // 会心 
		AttrType_CriticalDamageAdd = 8, // 会心增伤 
		AttrType_CriticalPoint = 9, // 暴击点数 
		AttrType_ResistCriticalPoint = 10, // 暴击抵抗 
		AttrType_CriticalPer = 11, // 暴击率 
		AttrType_ResistCriticalPer = 12, // 暴抗率 
		AttrType_CriticalDamage = 13, // 暴击伤害 
		AttrType_ResistCriticalDamage = 14, // 暴击减免 
		AttrType_BulletSpeed = 15, // 子弹倍率 
		AttrType_DamagePer1 = 16, // 攻击百分比1 
		AttrType_DefencePer1 = 17, // 防御百分比1 
		AttrType_HpPer = 18, // 生命百分比 
		AttrType_DamagePer2 = 19, // 攻击百分比2 
		AttrType_DefencePer2 = 20, // 防御百分比2 
		AttrType_DamagePer3 = 21, // 攻击百分比3 
		AttrType_DefencePer3 = 22, // 防御百分比3 
		AttrType_DamageAdd = 23, // 伤害增加 
		AttrType_DamageReduce = 24, // 伤害减免 
		AttrType_FinalDamage = 25, // 最终伤害 
		AttrType_FinalDamageReduce = 26, // 最终减免 
		AttrType_DamageResult = 27, // 伤害结果 
		AttrType_HeroStar = 28, // 英雄星级 
		AttrType_EquipSkill = 29, // 装备技能 
		AttrType_AttackHeal = 30, // 攻击治疗 
		AttrType_HealDeep = 31, // 治疗效果加成 
		AttrType_AttackTear = 32, // 攻击撕裂 
		AttrType_TearCoe = 33, // 撕裂系数修正 
		AttrType_TearDeep = 34, // 撕裂伤害加深 
		AttrType_BigHpHeal = 35, // 最大生命百分比回血 
		AttrType_NowHpHeal = 36, // 当前生命百分比掉血 
		AttrType_InitialScroll = 37, // 初始卷轴 
		AttrType_AddScroll = 38, // 额外卷轴 
		AttrType_RefreshCount = 39, // 刷新次数 
		AttrType_BreathTimePercent = 40, // 调息时间百分比 
		AttrType_AttackNum = 41, // 攻击次数 
		AttrType_AttackSpeed = 42, // 攻击速度 
		AttrType_RogueLevel = 43, // 重数 
		AttrType_TargetHpDamageAdd = 44, // 目标生命比例伤害增加 
		AttrType_TearEffect = 45, // 撕裂效果 
		AttrType_SpeedMoveAdd = 46, // 移速加成 
		AttrType_Stealth = 47, // 隐身 
		AttrType_Invincible = 48, // 无敌 
		AttrType_AttackShield = 49, // 攻击护盾 
		AttrType_BigHpShield = 50, // 最大生命护盾 
		AttrType_ShieldDeep = 51, // 护盾效果加成 
		AttrType_TransferDamage = 52, // 连带伤害 
		AttrType_VertigoPer = 53, // 眩晕概率 
		AttrType_Vertigo = 54, // 眩晕效果 
		AttrType_BreathPer = 55, // 调息速度百分比 
		AttrType_IgnorePer = 56, // 无视防御 
		AttrType_BigHpLoss = 57, // 最大生命百分比掉血 
		AttrType_DamageResultReduce = 58, // 结果减免 
		AttrType_BossDamageAdd = 59, // Boss增伤 
		AttrType_HpHealShieldPer = 60, // 生命回复护盾增益 
		AttrType_NegativeBuffImmunity = 61, // 负面buff免疫 
		AttrType_CriticalEffect = 62, // 会心效果 
		AttrType_BeCriticalEffect = 63, // 被会心效果 
		AttrType_CriticalPerEffect = 64, // 暴击效果 
		AttrType_BeCriticalPerEffect = 65, // 被暴击效果 
		AttrType_DamageReduceCoefficientFix = 66, // 怪物减伤系数修正 
		AttrType_ShieldLimit = 67, // 护盾上限 
		AttrType_CriticalTimes = 68, // 会心倍率 
		AttrType_HitBackChance = 69, // 击退概率 
		AttrType_HoldTimePercent = 70, // 蓄力时间百分比 
		AttrType_HpPer2 = 71, // 生命百分比2 
		AttrType_TotalAttack = 101, // 总攻击 
		AttrType_TotalDefence = 102, // 总防御 
		AttrType_TotalHp = 103, // 总生命 
	}
	export enum ItemType { 
		ItemType_UnknownItem = 0, // 无效值 
		ItemType_Currency = 1, // 货币 
		ItemType_Hero = 2, // 英雄 
		ItemType_IdleReward = 3, // 挂机奖励 
		ItemType_Piece = 4, // 碎片 
		ItemType_Material = 5, // 材料 
		ItemType_Equip = 6, // 装备 
		ItemType_Gift = 7, // 礼包 
		ItemType_HeroCommonCost = 8, // 英雄耗材 
		ItemType_Head = 10, // 头像 
		ItemType_HeadFrame = 11, // 头像框 
		ItemType_ChatBubble = 12, // 聊天框 
		ItemType_LimitTimeItem = 13, // 限时道具 
		ItemType_MainScene = 14, // 主城场景 
		ItemType_Book = 15, // 秘籍 
		ItemType_Box = 16, // 随机宝箱 
		ItemType_Elixir = 17, // 丹药 
		ItemType_ChoiceBox = 18, // 自选宝箱 
	}
	export enum ItemQuality { 
		ItemQuality_Green = 1, // 绿 
		ItemQuality_Blue = 2, // 蓝 
		ItemQuality_Purple = 3, // 紫 
		ItemQuality_Gold = 4, // 金 
		ItemQuality_Red = 5, // 红 
		ItemQuality_White = 6, // 白 
		ItemQuality_Colourful = 7, // 天蓝 
	}
	export enum BagType { 
		BagType_None = 0, // 不显示 
		BagType_Goods = 1, // 道具 
		BagType_Fragment = 2, // 碎片 
		BagType_Consumable = 3, // 材料 
		BagType_Equip = 4, // 装备 
		BagType_Jade = 5, // 羽毛 
	}
	export enum CurrencyType { 
		CurrencyType_UnknownCurrency = 0, // 无效值 
		CurrencyType_Diamond = 1, // 钻石 
		CurrencyType_Gold = 2, // 金币 
		CurrencyType_RoleExp = 3, // 角色经验 
		CurrencyType_VipExp = 4, // Vip经验 
		CurrencyType_ResolveCurrency = 5, // 遣散券 
		CurrencyType_Stamina = 6, // 体力 
		CurrencyType_DailyActivity = 7, // 日活跃度 
		CurrencyType_WeeklyActivity = 8, // 周活跃度 
		CurrencyType_Friendship = 9, // 友情点 
		CurrencyType_FastTravel = 10, // 快速游历 
		CurrencyType_Voucher = 11, // 代金券 
		CurrencyType_GuildCurrency = 84, // 鸡舍建材 
		CurrencyType_FincaFightTicket = 85, // 庄园挑战券 
		CurrencyType_ReviveCurrency = 202, // 复活币 
		CurrencyType_Feed = 1001, // 饲料 
	}
	export enum PrivilegedType { 
		PrivilegedType_None = 0, // 无 
		PrivilegedType_MonthlyPass = 1, // 普通月卡 
		PrivilegedType_PremiumMonthlyPass = 2, // 至尊月卡 
		PrivilegedType_BattlePassStamina = 3, // 体力战令 
		PrivilegedType_WorldBossPass = 4, // 生化危机战令 
	}
	export enum FunctionType { 
		FunctionType_Function = 0, // 功能 
		FunctionType_Activity = 1, // 活动 
	}
	export enum OpenFunctionName { 
		OpenFunctionName_None = 0, // 无 
		OpenFunctionName_Drug = 1, // 丹药 
		OpenFunctionName_ScrollPainting = 2, // 绘卷 
		OpenFunctionName_RareBook = 3, // 武器库 
		OpenFunctionName_Gene = 4, // 基因 
		OpenFunctionName_Equipment = 5, // 装备 
		OpenFunctionName_Jade = 6, // 装备-羽毛 
		OpenFunctionName_Patrol = 7, // 巡逻 
		OpenFunctionName_HeroLevelResonance = 8, // 英雄等级共鸣 
		OpenFunctionName_HeroStarResonanceTable = 9, // 英雄星级共鸣 
		OpenFunctionName_GachaHero = 10, // 高级扭蛋 
		OpenFunctionName_GachaHeroClass = 11, // 职业扭蛋 
		OpenFunctionName_GachaFriendHero = 12, // 好友扭蛋 
		OpenFunctionName_GachaBook = 13, // 武器库扭蛋 
		OpenFunctionName_MainChapter = 14, // 主线关卡 
		OpenFunctionName_DailyTask = 15, // 每日任务 
		OpenFunctionName_WeeklyTask = 16, // 每周任务 
		OpenFunctionName_AchievementTask = 17, // 成就任务 
		OpenFunctionName_GachaBookSR = 18, // SR武器扭蛋 
		OpenFunctionName_GachaHeroSSR = 19, // SSR英雄扭蛋 
		OpenFunctionName_DismissalShop = 20, // 遣散商店 
		OpenFunctionName_AssassinShop = 21, // 战士商店 
		OpenFunctionName_ArcherShop = 22, // 法师商店 
		OpenFunctionName_PriestShop = 23, // 刺客商店 
		OpenFunctionName_CasterShop = 24, // 射手商店 
		OpenFunctionName_WarriorShop = 25, // 牧师商店 
		OpenFunctionName_DiamondShop = 26, // 钻石商店 
		OpenFunctionName_BossShop = 27, // Boss商店 
		OpenFunctionName_HeroCollection = 28, // 舰队启航 
		OpenFunctionName_NewServerSignIn = 29, // 新服签到 
		OpenFunctionName_DailySignIn = 30, // 7日签到 
		OpenFunctionName_DailyShop = 31, // 每日商店 
		OpenFunctionName_FightSpeed2 = 32, // 战斗2倍速 
		OpenFunctionName_FightSpeed3 = 33, // 战斗3倍速 
		OpenFunctionName_FightAuto = 34, // 自动战斗 
		OpenFunctionName_SkipAd = 35, // 跳过广告 
		OpenFunctionName_Guide = 36, // 进化指南 
		OpenFunctionName_Mail = 37, // 邮件 
		OpenFunctionName_Rank = 38, // 排行榜入口 
		OpenFunctionName_Friend = 39, // 好友 
		OpenFunctionName_CrazyChicken = 40, // 疯狂砸鸡 
		OpenFunctionName_LimitBenifit = 41, // 限时奖励 
		OpenFunctionName_Prestage = 42, // 冒险日志 
		OpenFunctionName_Chat = 43, // 聊天入口 
		OpenFunctionName_FirstRecharge = 44, // 首充 
		OpenFunctionName_Welfare = 45, // 福利入口 
		OpenFunctionName_Challenge = 46, // 挑战入口 
		OpenFunctionName_Recruit = 47, // 扭蛋入口 
		OpenFunctionName_Association = 48, // 舰队 
		OpenFunctionName_PvpShop = 49, // 竞赛商店 
		OpenFunctionName_MonthlyPass = 50, // 月卡 
		OpenFunctionName_BattlePassMainChapter1 = 51, // 主线战令1 
		OpenFunctionName_BattlePassMainChapter2 = 52, // 主线战令2 
		OpenFunctionName_BattlePassMainChapter3 = 53, // 主线战令3 
		OpenFunctionName_BattlePassMainChapter4 = 54, // 主线战令4 
		OpenFunctionName_BattlePassMainChapter5 = 55, // 主线战令5 
		OpenFunctionName_BattlePassMainChapter6 = 56, // 主线战令6 
		OpenFunctionName_BattlePassMainChapter7 = 57, // 主线战令7 
		OpenFunctionName_BattlePassMainChapter8 = 58, // 主线战令8 
		OpenFunctionName_BattlePassMainChapter9 = 59, // 主线战令9 
		OpenFunctionName_BattlePassMainChapter10 = 60, // 主线战令10 
		OpenFunctionName_BattlePassMainChapter11 = 61, // 主线战令11 
		OpenFunctionName_BattlePassPlayerLv1 = 62, // 等级战令1 
		OpenFunctionName_BattlePassPlayerLv2 = 63, // 等级战令2 
		OpenFunctionName_BattlePassPlayerLv3 = 64, // 等级战令3 
		OpenFunctionName_BattlePassPlayerLv4 = 65, // 等级战令4 
		OpenFunctionName_BattlePassPlayerLv5 = 66, // 等级战令5 
		OpenFunctionName_BattlePassPlayerLv6 = 67, // 等级战令6 
		OpenFunctionName_BattlePassPlayerLv7 = 68, // 等级战令7 
		OpenFunctionName_BattlePassPlayerLv8 = 69, // 等级战令8 
		OpenFunctionName_BattlePassPlayerLv9 = 70, // 等级战令9 
		OpenFunctionName_BattlePassStamina = 71, // 体力战令 
		OpenFunctionName_BattlePassSignIn1 = 72, // 活动战令 
		OpenFunctionName_DailyStageSweepAll = 73, // 日常探险一键扫荡 
		OpenFunctionName_DailyShopBuyAll = 74, // 每日商店一键购买 
		OpenFunctionName_Vip = 75, // VIP特权 
		OpenFunctionName_WorldBossSweepAll = 78, // 生化危鸡一键扫荡 
		OpenFunctionName_WorldBossFreeBuyCount = 79, // 免费购买生化危鸡次数 
		OpenFunctionName_WorldBoss = 80, // 生化危鸡 
		OpenFunctionName_WorldBossPass = 81, // 生化危鸡战令 
		OpenFunctionName_NewPlayerDailyGift = 82, // 创角每日礼包 
		OpenFunctionName_SpecialGiftDaily = 83, // 日礼包 
		OpenFunctionName_SpecialGiftWeekly = 84, // 周礼包 
		OpenFunctionName_SpecialGiftMonthly = 85, // 月礼包 
		OpenFunctionName_ActivityNewPlayerTask = 86, // 新手试炼 
		OpenFunctionName_MainChapterGift = 87, // 章节礼包 
		OpenFunctionName_ActivityNewPlayerTask2 = 88, // 精英试炼 
		OpenFunctionName_DailyChallenge = 89, // 每日挑战 
		OpenFunctionName_DailyChallengeSweepAll = 90, // 每日挑战一键扫荡 
		OpenFunctionName_Hero7GiftPack = 91, // 英雄七日直升礼包入口 
		OpenFunctionName_SecretBook14GiftPack = 92, // 秘籍七日直升礼包入口 
		OpenFunctionName_ClimbTower = 93, // 爬塔 
		OpenFunctionName_Weapon = 94, // 武器图鉴入口 
		OpenFunctionName_QuestLogPass = 95, // 军衔战令1 
		OpenFunctionName_ClimbTowerPass1 = 96, // 爬塔战令1 
		OpenFunctionName_ClimbTowerPass2 = 97, // 爬塔战令2 
		OpenFunctionName_ClimbTowerPass3 = 98, // 爬塔战令3 
		OpenFunctionName_ActivityRank = 99, // 排行活动 
		OpenFunctionName_QuestLogPass2 = 100, // 军衔战令2 
		OpenFunctionName_NewPlayerMall = 101, // 新手商城 
		OpenFunctionName_NewPlayerMall2 = 102, // 精英商城 
		OpenFunctionName_WinResultDoubleReward = 103, // 胜利结算奖励双倍 
		OpenFunctionName_Skin = 104, // 皮肤 
		OpenFunctionName_Handbook = 105, // 英雄图鉴 
		OpenFunctionName_NewPlayerTaskShow = 106, // 新手试炼显示 
		OpenFunctionName_ActivityGachaUp = 107, // UP池和累抽活动 
		OpenFunctionName_ActivityShowGroup = 108, // 活动显示分组 
		OpenFunctionName_ActivityHeroGrow = 109, // 英雄养成计划 
		OpenFunctionName_BuyGold = 110, // 购买金币 
		OpenFunctionName_SignInGift = 111, // 签到777抽 
		OpenFunctionName_MainChapterReward = 112, // 主线通关奖励 
		OpenFunctionName_AutoSelectRogue = 113, // 自动选肉鸽 
		OpenFunctionName_ActivityMall = 114, // 限时商店活动 
		OpenFunctionName_FincaFight = 115, // 庄园竞赛 
		OpenFunctionName_QuestLogPass3 = 116, // 军衔战令3 
		OpenFunctionName_ClimbTowerPass4 = 117, // 爬塔战令4 
		OpenFunctionName_EliteChapter = 118, // 精英关卡 
		OpenFunctionName_ActivityCumulativeRecharge = 119, // 累充活动 
	}
	export enum ItemSource { 
		ItemSource_None = 0, // 未知 
		ItemSource_HeroLvlUp = 1, // 英雄升级 
		ItemSource_HeroStarUpgrade = 2, // 英雄升星 
		ItemSource_HeroResetLv = 3, // 英雄重置等级 
		ItemSource_HeroResetStar = 4, // 英雄重置星级 
		ItemSource_HeroDisband = 5, // 英雄遣散 
		ItemSource_HeroAlbumActivation = 6, // 英雄图鉴激活 
		ItemSource_EquipmentEnhance = 7, // 装备强化 
		ItemSource_EquipmentRefine = 8, // 装备淬炼 
		ItemSource_EquipmentDecompose = 9, // 装备分解 
		ItemSource_FeatherRecast = 10, // 羽毛技能重铸 
		ItemSource_HeroStarStepUpgrade = 11, // 英雄星级升阶 
		ItemSource_SmallGeneUpgrade = 12, // 小基因升级 
		ItemSource_BigGeneUpgrade = 13, // 大基因升级 
		ItemSource_UpgradeBookStar = 14, // 武器强化升星 
		ItemSource_UpgradeBookLevel = 15, // 武器打磨升级 
		ItemSource_SwitchBookFragment = 16, // 零件转换 
		ItemSource_CombineBookFragment = 17, // 武器零件合成 
		ItemSource_GachaHeroToOne = 18, // 高级扭蛋-单抽 
		ItemSource_GachaHeroToTen = 19, // 高级扭蛋-十连 
		ItemSource_GachaArcherHeroToOne = 20, // 射手扭蛋-单抽 
		ItemSource_GachaArcherHeroToTen = 21, // 射手扭蛋-十连 
		ItemSource_GachaAssassinHeroToOne = 22, // 刺客扭蛋-单抽 
		ItemSource_GachaAssassinHeroToTen = 23, // 刺客扭蛋-十连 
		ItemSource_GachaCasterHeroToOne = 24, // 法师扭蛋-单抽 
		ItemSource_GachaCasterHeroToTen = 25, // 法师扭蛋-十连 
		ItemSource_GachaPriestHeroToOne = 26, // 牧师扭蛋-单抽 
		ItemSource_GachaPriestHeroToTen = 27, // 牧师扭蛋-十连 
		ItemSource_GachaWarriorHeroToOne = 28, // 战士扭蛋-单抽 
		ItemSource_GachaWarriorHeroToTen = 29, // 战士扭蛋-十连 
		ItemSource_GachaFriendHeroToOne = 30, // 好友扭蛋-单抽 
		ItemSource_GachaFriendHeroToTen = 31, // 好友扭蛋-十连 
		ItemSource_GachaHeroSSR = 32, // SSR英雄扭蛋 
		ItemSource_GachaBookToOne = 33, // 武器扭蛋-单抽 
		ItemSource_GachaBookToTen = 34, // 武器扭蛋-十连 
		ItemSource_GachaBookSR = 35, // SR武器扭蛋 
		ItemSource_UseElixir = 36, // 捕虫食用 
		ItemSource_DailyGift = 37, // 每日礼物 
		ItemSource_LimitedReward = 38, // 限时奖励 
		ItemSource_DailyReward = 39, // 每日签到 
		ItemSource_DismissalShop = 40, // 遣散商店购买 
		ItemSource_AssassinShop = 41, // 战士商店购买 
		ItemSource_ArcherShop = 42, // 法师商店购买 
		ItemSource_PriestShop = 43, // 刺客商店购买 
		ItemSource_CasterShop = 44, // 射手商店购买 
		ItemSource_WarriorShop = 45, // 牧师商店购买 
		ItemSource_DiamondShop = 46, // 钻石直购 
		ItemSource_BossShop = 47, // Boss商店购买 
		ItemSource_HeroCollection = 48, // 舰队启航 
		ItemSource_DailyShop = 49, // 每日商店购买 
		ItemSource_BreakEgg = 50, // 砸金蛋 
		ItemSource_PvpShop = 51, // 庄园竞赛商店 
		ItemSource_BuyMonthlyPass = 52, // 购买月卡 
		ItemSource_MonthlyPassReward = 53, // 领取月卡奖励 
		ItemSource_BuyGold = 54, // 购买金币 
		ItemSource_NewPlayerDailyGift = 55, // 创角每日礼包 
		ItemSource_SpecialGiftDaily = 56, // 日礼包 
		ItemSource_SpecialGiftWeekly = 57, // 周礼包 
		ItemSource_SpecialGiftMonthly = 58, // 月礼包 
		ItemSource_ActivityNewPlayerTask = 59, // 新手任务活动 
		ItemSource_MainChapterGift = 60, // 章节礼包 
		ItemSource_WorldBoss = 61, // 生化危鸡 
		ItemSource_DailyChallenge = 62, // 每日挑战 
		ItemSource_BattlePass = 63, // 战令 
		ItemSource_StartClimbTower = 64, // 开始爬塔关卡 
		ItemSource_ResetCyclicalTask = 65, // 重置周期任务 
		ItemSource_ReceiveDailyActivityRewards = 66, // 领取每日活跃度奖励 
		ItemSource_ReceiveWeeklyActivityRewards = 67, // 领取每周活跃度奖励 
		ItemSource_StartExploreStage = 68, // 开始探险关卡 
		ItemSource_UpHeroBagCapacityLevel = 69, // 升级英雄背包等级 
		ItemSource_ReceiveRecommendTeamRewards = 70, // 领取推荐阵容奖励 
		ItemSource_ReceiveHeroAlbumRewards = 71, // 领取英雄图鉴奖励 
		ItemSource_StartMainStage = 72, // 开始主线关卡 
		ItemSource_ReceiveMainStageDoubleWinRewards = 73, // 领取主线关卡双倍奖励 
		ItemSource_ReceiveMainFirstReward = 74, // 领取主线关卡首通将领 
		ItemSource_ReceiveNewPlayerTrialScoreRewards = 75, // 领取新手试炼评分奖励 
		ItemSource_ReceiveOpenFunctionReward = 76, // 领取功能开启奖励 
		ItemSource_ReceivePatrolRewards = 77, // 领取巡逻奖励 
		ItemSource_QuickPatrol = 78, // 快速巡逻奖励 
		ItemSource_AdQuickPatrol = 79, // 广告快速巡逻 
		ItemSource_RefreshQuickPatrolTimes = 80, // 刷新快速巡逻次数 
		ItemSource_BuyDiamonds = 81, // 购买钻石 
		ItemSource_FirstRecharge = 82, // 购买首充奖励 
		ItemSource_RechargeRewards = 83, // 充值奖励 
		ItemSource_PayByVoucher = 84, // 通过代金券支付 
		ItemSource_BuyPremiumMonthlyPass = 85, // 购买至尊月卡 
		ItemSource_PremiumMonthlyPassReward = 86, // 至尊月卡每日奖励 
		ItemSource_ReceiveMontylyPassAddtionalRewards = 87, // 领取月卡加码奖励 
		ItemSource_UpRoleLevelRewards = 88, // 角色升级奖励 
		ItemSource_ReceiveMailRewards = 89, // 领取邮件奖励 
		ItemSource_ReviveOnStage = 90, // 在关卡中复活 
		ItemSource_RefreshStamina = 91, // 刷新体力 
		ItemSource_BuyStamina = 92, // 购买体力 
		ItemSource_BuyVipGift = 93, // 购买VIP礼包 
		ItemSource_ReceiveVipDailyGift = 94, // 领取VIP每日礼包 
		ItemSource_ClearExpiredLimitItem = 95, // 清理过期限时道具 
		ItemSource_FinishStage = 96, // 结束关卡 
		ItemSource_CreateRole = 97, // 创建角色 
		ItemSource_GmModify = 98, // GM修改 
		ItemSource_UseItem = 99, // 使用道具 
		ItemSource_UseRedeemCode = 100, // 使用兑换码 
		ItemSource_ReceiveBattlePassTaskRewards = 101, // 领取战令任务奖励 
		ItemSource_ReceiveNewPlayerTrialTaskRewards = 102, // 领取新手试炼任务奖励 
		ItemSource_ReceiveDailyTaskRewards = 103, // 领取每日任务奖励 
		ItemSource_ReceiveWeeklyTaskRewards = 104, // 领取每周任务奖励 
		ItemSource_ReceiveAchievementRewards = 105, // 领取成就任务奖励 
		ItemSource_ReceiveQuestLogTaskRewards = 106, // 领取冒险日志任务奖励 
		ItemSource_SweepExploreStage = 107, // 扫荡日常探险关卡 
		ItemSource_ReceiveClimbTowerDailyRewards = 108, // 领取爬塔每日奖励 
		ItemSource_ReceiveHonorRollTasksRewards = 109, // 领取荣耀榜任务奖励 
		ItemSource_NewPlayerMall = 110, // 新手商城 
		ItemSource_NewPlayerMall2 = 111, // 精英商城 
		ItemSource_ReceiveClearExploreStageRewards = 112, // 领取日常探险通关奖励 
		ItemSource_ReceiveClearClimbTowerStageRewards = 113, // 领取森林迷踪通关奖励 
		ItemSource_ChangeRoleName = 114, // 修改角色名称 
		ItemSource_RefreshVipBonus = 115, // 更新VIP加成 
		ItemSource_GuildShop = 116, // 鸡舍宝库购买 
		ItemSource_CreateGuild = 117, // 创建公会 
		ItemSource_GuildSign = 118, // 公会签到 
		ItemSource_BuyGuildGift = 119, // 购买公会礼包 
		ItemSource_UpGuildSkill = 120, // 升级公会技能 
		ItemSource_ResetGuildSkill = 121, // 重置公会技能 
		ItemSource_ReceiveGuildTaskRewards = 122, // 领取公会任务奖励 
		ItemSource_ReceiveGuildTaskChestRewards = 123, // 领取公会任务宝箱奖励 
		ItemSource_SetGuildNameAndFlag = 124, // 修改公会名称和旗帜 
		ItemSource_GuildBoss = 125, // 工会BOSS 
		ItemSource_GachaHeroUpToOne = 126, // UP池-单抽 
		ItemSource_GachaHeroUpToTen = 127, // UP池-十连 
		ItemSource_SignInGift = 128, // 签到礼包 
		ItemSource_ActivityMall = 129, // 限时商店活动 
		ItemSource_ReceiveActivityGachaUpTasksRewards = 130, // 领取卡池up活动任务奖励 
		ItemSource_ReceiveFreeHeroGrowReward = 131, // 领取英雄养成活动免费奖励 
		ItemSource_BuyHeroGrowReward = 132, // 购买英雄养成活动奖励 
		ItemSource_RefundOrder = 133, // 退款 
		ItemSource_FinishVoidStage = 134, // 结束虚空关卡 
		ItemSource_PVPBuyCount = 135, // 庄园竞赛买券 
		ItemSource_FightFincaBattle = 136, // 庄园战对战 
	}
	export enum GoodsType { 
		GoodsType_FirstRecharge = 0, // 首充 
		GoodsType_BuyDiamonds = 1, // 购买钻石 
		GoodsType_Mall = 2, // 商店购买 
		GoodsType_BreakEgg = 3, // 砸金蛋 
		GoodsType_MonthlyPass = 4, // 月卡 
		GoodsType_BuyBattlePass = 5, // 购买战令 
		GoodsType_NewPlayerDailyGift = 6, // 创角每日礼包 
		GoodsType_ThirdPartyRechargeP800 = 7, // 第三方充值(P800) 
		GoodsType_ThirdPartyRecharge37JP = 8, // 第三方充值(37JP) 
		GoodsType_ActivityHeroGrow = 9, // 英雄养成计划 
	}
	export enum ChannelType { 
		ChannelType_None = 0, // 浏览器登录测试 
		ChannelType_PlayTW = 1, // Play800TW 
		ChannelType_G37JP = 2, // 37JP 
	}
	export enum ServerState { 
		ServerState_Crowded = 0, // 拥挤 
		ServerState_Maintain = 1, // 维护 
		ServerState_Hot = 2, // 火爆 
		ServerState_New = 3, // 新服 
	}
	export enum LanguageType { 
		LanguageType_Zh_tw = 0, // 中文 
		LanguageType_En_us = 1, // 英文 
		LanguageType_Jp_jp = 2, // 日文 
	}
	export enum AnimationType { 
		AnimationType_SpriteFrame = 0, // 静态图 
		AnimationType_SkeletonData = 1, // 骨骼动画 
		AnimationType_AnimationClip = 2, // 预制体 
		AnimationType_Plist = 3, // Plist 
	}
	export enum Builds { 
		Builds_None = 0, // 无 
		Builds_Core = 1, // 核心 
		Builds_Skill = 2, // 技能 
		Builds_HeavyStrike1 = 101, // 重击1 
		Builds_Rage1 = 102, // 狂暴1 
		Builds_LightDark1 = 103, // 光暗1 
		Builds_Aim1 = 104, // 瞄准1 
		Builds_Bleed1 = 105, // 流血1 
		Builds_HeavyStrike2 = 201, // 重击2 
		Builds_Rage2 = 202, // 狂暴2 
		Builds_LightDark2 = 203, // 光暗2 
		Builds_Aim2 = 204, // 瞄准2 
		Builds_Bleed2 = 205, // 流血2 
	}
	export enum HeroClass { 
		HeroClass_Any = 0, // 任意 
		HeroClass_Assassin = 1, // 刺客 
		HeroClass_Archer = 2, // 射手 
		HeroClass_Priest = 3, // 牧师 
		HeroClass_Caster = 4, // 法师 
		HeroClass_Warrior = 5, // 战士 
		HeroClass_Max = 6, // 最大值 
	}
	export enum HeroAptitude { 
		HeroAptitude_None = 0, // 无效值 
		HeroAptitude_N = 1, // N 
		HeroAptitude_R = 2, // R 
		HeroAptitude_SR = 3, // SR 
		HeroAptitude_SSR = 4, // SSR 
	}
	export enum HeroStarUpType { 
		HeroStarUpType_AnyHero = 0, // 任意 
		HeroStarUpType_SameNameHero = 1, // 同名 
		HeroStarUpType_SameClassHero = 2, // 同职业 
	}
	export enum HeroStarDescType { 
		HeroStarDescType_None = 0, // 无效值 
		HeroStarDescType_First = 1, // 招式 
		HeroStarDescType_Second = 2, // 天赋 
		HeroStarDescType_Third = 3, // 觉醒 
	}
	export enum ExtraAttrTarget { 
		ExtraAttrTarget_Mine = 0, // 自身 
		ExtraAttrTarget_All = 1, // 全体 
	}
	export enum MonsterType { 
		MonsterType_None = 0, // 无 
		MonsterType_CommonMonster = 1, // 普通 
		MonsterType_EliteMonster = 2, // 精英 
		MonsterType_BossMonster = 3, // BOSS 
	}
	export enum AttackType { 
		AttackType_Attack = 0, // 普攻 
		AttackType_ActionAttack = 1, // 招式 
	}
	export enum SkillType { 
		SkillType_None = 0, // 无 
		SkillType_NormalAttack = 1, // 普通攻击 
		SkillType_SpecialAttack = 2, // 特殊攻击 
		SkillType_holdAttack = 3, // 蓄力攻击 
		SkillType_MovesAttack = 4, // 招式攻击 
		SkillType_PassiveSkill = 5, // 被动技能 
		SkillType_TimePush = 6, // 时间释放 
	}
	export enum EffectUnit { 
		EffectUnit_Mine = 0, // 自身 
		EffectUnit_Friend = 1, // 我方 
		EffectUnit_Enemy = 2, // 敌方 
		EffectUnit_FriendNome = 3, // 友方 
	}
	export enum RunningShotBulletType { 
		RunningShotBulletType_SameEnemy = 0, // 固定索敌 
		RunningShotBulletType_RuleEnemy = 1, // 规则索敌 
	}
	export enum BulletType { 
		BulletType_SeekingBullet = 0, // 索敌子弹 
		BulletType_FollowingBullet = 1, // 跟随子弹 
	}
	export enum Trajectory { 
		Trajectory_StraightLine = 0, // 直线 
		Trajectory_Trackless = 1, // 无轨迹 
		Trajectory_Parabola = 2, // 抛物线 
		Trajectory_TrackingTarget = 3, // 追踪目标 
		Trajectory_Laser = 4, // 激光 
		Trajectory_Trajectory = 5, // 直线轨迹 
	}
	export enum BulletBorn { 
		BulletBorn_Me = 0, // 自身 
		BulletBorn_She = 1, // 目标 
		BulletBorn_Inherit = 2, // 继承 
	}
	export enum SearchEnemy { 
		SearchEnemy_None = 0, // 无 
		SearchEnemy_LowBlood = 1, // 血量最少 
		SearchEnemy_Near = 2, // 最近 
		SearchEnemy_Behind = 3, // 后排 
		SearchEnemy_RandomGoal = 4, // 随机 
		SearchEnemy_Mine = 5, // 自身 
		SearchEnemy_Assassin = 6, // 刺客 
		SearchEnemy_Archer = 7, // 射手 
		SearchEnemy_Priest = 8, // 牧师 
		SearchEnemy_Caster = 9, // 法师 
		SearchEnemy_Warrior = 10, // 战士 
		SearchEnemy_All = 11, // 全部 
		SearchEnemy_LowBloodShield = 12, // 血盾最少 
	}
	export enum EnemyFiltrate { 
		EnemyFiltrate_CanSelectlast = 0, // 可选已攻击目标 
		EnemyFiltrate_Ignorelast = 1, // 忽略上一个目标 
		EnemyFiltrate_NoSelectSame = 2, // 忽略已攻击目标 
	}
	export enum DeathType { 
		DeathType_HitDeath = 0, // 命中死亡 
		DeathType_TimeDeath = 1, // 时间死亡 
		DeathType_OwnDeath = 2, // 释放者死亡 
	}
	export enum CommonShow { 
		CommonShow_None = 0, // 无 
		CommonShow_LaunchMask = 1, // 发射遮罩 
	}
	export enum BuffType { 
		BuffType_None = 0, // 无 
		BuffType_Gain = 1, // 增益 
		BuffType_Loss = 2, // 减益 
	}
	export enum Rule { 
		Rule_TimeNoneEffectNone = 0, // 时间不变，效果不变 
		Rule_TimeRefreshEffectNone = 1, // 时间重置，效果不变 
		Rule_TimeRefreshEffectadd = 2, // 时间重置，效果叠加 
		Rule_TimeAddEffectNone = 3, // 时间叠加，效果不变 
		Rule_SingleCount = 4, // 独立计数 
	}
	export enum BuffGroup { 
		BuffGroup_None = 0, // 无 
		BuffGroup_TearEffect = 1, // 撕裂 
		BuffGroup_TransferDamage = 2, // 连带伤害 
		BuffGroup_StrongWind = 3, // 疾风 
		BuffGroup_RolesBuffLayerNum = 4, // 角色之间共享层数 
		BuffGroup_FiveRollOne = 5, // 词条随机5/1 
		BuffGroup_MonsterAttackHalo = 6, // 怪物加攻光环 
		BuffGroup_MonsterSpeedHalo = 7, // 怪物加速光环 
		BuffGroup_MonsterReduceTreatHalo = 8, // 怪物减疗光环 
		BuffGroup_MonsterReduceDamHalo = 9, // 怪物减伤光环 
		BuffGroup_MaxFeatherHeal = 10, // 满毛回血 
	}
	export enum ClearType { 
		ClearType_None = 0, // 不清除 
		ClearType_Die = 1, // 死亡 
		ClearType_BeDamaged = 2, // 受伤 
		ClearType_Breath = 3, // 调息 
		ClearType_Attack = 4, // 攻击 
		ClearType_StackFull = 5, // 叠满 
		ClearType_BulletMadeDamage = 6, // 子弹造成伤害 
		ClearType_CriticalDamage = 7, // 暴击 
		ClearType_DeadlyDamage = 8, // 会心 
	}
	export enum Triggertype { 
		Triggertype_Born = 0, // 英雄出生 
		Triggertype_PreAttack = 1, // 攻击发动前 
		Triggertype_Attack = 2, // 攻击中 
		Triggertype_AttackEnd = 3, // 攻击结束后 
		Triggertype_BeHitFront = 4, // 被攻击前 
		Triggertype_BeHitBack = 5, // 被攻击后 
		Triggertype_BreathStart = 6, // 调息开始 
		Triggertype_BreathEnd = 7, // 调息结束 
		Triggertype_AttackCount = 8, // 技能组攻击次数 
		Triggertype_NowHp = 9, // 当前血量 
		Triggertype_TotalLostHp = 10, // 生命变更 
		Triggertype_HarmTest = 11, // 伤害计算 
		Triggertype_Rogue = 12, // 肉鸽 
		Triggertype_BeHit = 13, // 受伤 
		Triggertype_Kill = 14, // 击杀 
		Triggertype_Dead = 15, // 死亡 
		Triggertype_AtHIT = 16, // 命中 
		Triggertype_Revive = 17, // 复活 
		Triggertype_SearchEnemy = 18, // 寻找敌人 
		Triggertype_BuffExpiration = 19, // buff到期 
		Triggertype_BackJumpFinish = 20, // 后跳完成 
		Triggertype_warning = 21, // 警告 
		Triggertype_BossDied = 22, // Boss死亡 
		Triggertype_AddBuff = 23, // 添加buff 
		Triggertype_CriticalPer = 24, // 暴击率 
		Triggertype_DamageAdd = 25, // 伤害增加 
		Triggertype_DamageReduce = 26, // 伤害减免 
		Triggertype_DetectionSkill = 27, // 使用技能 
		Triggertype_DamageResult = 28, // 伤害结果 
		Triggertype_TargetHpDamageAdd = 29, // 目标生命比例伤害增加 
		Triggertype_DamageResultReduce = 30, // 结果减免 
	}
	export enum TriggerCondition { 
		TriggerCondition_AttackNum = 0, // 攻击次数 
		TriggerCondition_HoldTime = 1, // 蓄力时间 
		TriggerCondition_TimeRefresh = 2, // 时间间隔 
		TriggerCondition_SkillId = 3, // 使用普攻技能id 
		TriggerCondition_SkillGroup = 4, // 检测技能组 
		TriggerCondition_HpLostPer = 5, // 本次损失生命比例 
		TriggerCondition_Critical = 6, // 会心 
		TriggerCondition_HpPer = 7, // 生命比例低于 
		TriggerCondition_CriticalPoint = 8, // 暴击 
		TriggerCondition_BeCriticalPoint = 9, // 被暴击 
		TriggerCondition_BeCritical = 10, // 被会心 
		TriggerCondition_RogueId = 11, // 肉鸽id 
		TriggerCondition_TotalHpLostPer = 12, // 总累计损失生命比例 
		TriggerCondition_TimeInterval = 13, // 时间间隔 
		TriggerCondition_Distance = 14, // 距离 
		TriggerCondition_Level = 15, // 等级 
		TriggerCondition_BuffId = 16, // buffid 
		TriggerCondition_BuffLayerNum = 17, // buff层数 
		TriggerCondition_WarnType = 18, // 警告类型 
		TriggerCondition_HpRatio = 19, // 生命比例高于 
		TriggerCondition_CheckAttr = 20, // 属性检测 
		TriggerCondition_EveryHpLostPer = 21, // 每累计损失生命比例 
		TriggerCondition_DetectionSkillId = 22, // 技能id 
	}
	export enum Behavior { 
		Behavior_UseSkill = 0, // 使用技能 
		Behavior_SwitchGroup = 1, // 切换技能组 
		Behavior_SwitchSkill = 2, // 替换普攻 
		Behavior_AddBuff = 3, // 行为目标给行为目标加buff 
		Behavior_HarmPer = 4, // 伤害比例 
		Behavior_UseEffect = 5, // 使用效果 
		Behavior_AddAttackNum = 6, // 增加攻击次数 
		Behavior_Dead = 7, // 死亡 
		Behavior_Revive = 8, // 复活 
		Behavior_BackJump = 9, // 后跳 
		Behavior_Summon = 10, // 召唤 
		Behavior_AddSkill = 11, // 添加技能 
		Behavior_BuffClear = 12, // 清除buff 
		Behavior_ConditionAddBuff = 13, // 条件目标给行为目标加buff 
		Behavior_ReplaceMonsterAnimation = 14, // 替换怪物动画为该怪物ID 
		Behavior_ModifyLogicParameter = 15, // 修改本次逻辑计算参数 
		Behavior_BuffClearType = 16, // 清除buff类型 
		Behavior_ModifyLogicParameterRange = 17, // 修改本次逻辑计算参数区间 
	}
	export enum TriggerTarget { 
		TriggerTarget_Mine = 0, // 自身 
		TriggerTarget_Enemy = 1, // 目标 
	}
	export enum TriggerGoal { 
		TriggerGoal_Mine = 0, // 自身 
		TriggerGoal_Enemy = 1, // 目标 
	}
	export enum BoundType { 
		BoundType_Circle = 0, // 圆 
		BoundType_Rectangle = 1, // 矩形 
	}
	export enum PowerType { 
		PowerType_SkillGroupTable = 0, // 技能组 
		PowerType_SkillTable = 1, // 技能 
		PowerType_BuffTable = 2, // buff 
		PowerType_EffectTable = 3, // 效果 
		PowerType_BulletTable = 4, // 子弹 
		PowerType_TriggerTable = 5, // 触发器 
	}
	export enum PveStageType { 
		PveStageType_MainChapter = 0, // 主线 
		PveStageType_GoldStage = 1, // 黄金矿洞 
		PveStageType_FeedStage = 2, // 饲料工厂 
		PveStageType_DailyChallenge = 3, // 每日挑战 
		PveStageType_ClimbTower = 4, // 爬塔 
		PveStageType_WorldBoss = 5, // 世界boss 
		PveStageType_GuildBoss = 6, // 公会boss 
		PveStageType_VoidStage = 7, // 虚空关 
		PveStageType_PVPBattle = 8, // PVP对战 
		PveStageType_EliteChapter = 9, // 精英 
	}
	export enum EggDropType { 
		EggDropType_None = 0, // 无 
		EggDropType_TimeDrop = 1, // 时间掉 
		EggDropType_ExperienceDrop = 2, // 经验掉 
	}
	export enum RobotType { 
		RobotType_None = 0, // 无 
		RobotType_PVP = 1, // PVP 
	}
	export enum VirtualItemType { 
		VirtualItemType_None = 0, // 无 
		VirtualItemType_Eggs = 1, // 蛋 
		VirtualItemType_Feathers = 2, // 毛 
	}
	export enum EffectTarget { 
		EffectTarget_None = 0, // 无 
		EffectTarget_Hero = 1, // 英雄 
		EffectTarget_Monster = 2, // 怪物 
		EffectTarget_Rogue = 3, // 肉鸽 
		EffectTarget_Book = 4, // 秘籍 
	}
	export enum OwnClass { 
		OwnClass_All = 0, // 全体 
		OwnClass_Assassin = 1, // 刺客 
		OwnClass_Archer = 2, // 射手 
		OwnClass_Priest = 3, // 牧师 
		OwnClass_Caster = 4, // 法师 
		OwnClass_Warrior = 5, // 战士 
		OwnClass_TeamLeader = 6, // 队长 
	}
	export enum RogueActivationCondition { 
		RogueActivationCondition_Default = 0, // 默认激活 
		RogueActivationCondition_WearBook = 1, // 佩戴秘籍 
	}
	export enum SoundType { 
		SoundType_Music = 0, // 音乐 
		SoundType_SoundEffect = 1, // 音效 
	}
	export enum EquipType { 
		EquipType_None = 0, // 无效值 
		EquipType_Gloves = 1, // 手套 
		EquipType_Clothing = 2, // 衣服 
		EquipType_Cloak = 3, // 披风 
		EquipType_Hat = 4, // 帽子 
		EquipType_Feather = 5, // 羽毛 
		EquipType_Max = 6, // 最大值 
	}
	export enum EquipGroupType { 
		EquipGroupType_None = 0, // 无效值 
		EquipGroupType_Attr = 1, // 装备属性 
		EquipGroupType_SkillGroup = 2, // 装备技能组 
		EquipGroupType_Group = 3, // 分组嵌套 
	}
	export enum EquipGroupMode { 
		EquipGroupMode_None = 0, // 无效值 
		EquipGroupMode_Repeat = 1, // 重复 
		EquipGroupMode_Only = 2, // 排除 
		EquipGroupMode_All = 3, // 全部 
	}
	export enum MasterType { 
		MasterType_None = 0, // 无效值 
		MasterType_Quality = 1, // 品质大师 
		MasterType_Enhance = 2, // 强化大师 
		MasterType_Refine = 3, // 淬炼大师 
	}
	export enum EquipUpgradeType { 
		EquipUpgradeType_None = 0, // 无效值 
		EquipUpgradeType_Enhance = 1, // 装备强化 
		EquipUpgradeType_Refine = 2, // 装备淬炼 
		EquipUpgradeType_Recast = 3, // 羽毛重铸 
	}
	export enum GeneType { 
		GeneType_None = 0, // 无效值 
		GeneType_SmallGene = 1, // 小基因 
		GeneType_BigGene = 2, // 大基因 
	}
	export enum GeneUnlockType { 
		GeneUnlockType_None = 0, // 无效值 
		GeneUnlockType_RoleLevel = 1, // 玩家等级 
		GeneUnlockType_SmallGeneLevel = 2, // 小基因等级 
	}
	export enum BookSlotType { 
		BookSlotType_None = 0, // 无效值 
		BookSlotType_Slot1 = 1, // 槽位1 
		BookSlotType_Slot2 = 2, // 槽位2 
		BookSlotType_Slot3 = 3, // 槽位3 
		BookSlotType_Slot4 = 4, // 槽位4 
		BookSlotType_Slot5 = 5, // 槽位5 
		BookSlotType_Max = 6, // 最大值 
	}
	export enum BookSlotUnlockType { 
		BookSlotUnlockType_None = 0, // 无效值 
		BookSlotUnlockType_Experience = 1, // 冒险等级 
	}
	export enum LimitTimeItemType { 
		LimitTimeItemType_Duration = 0, // 持续 
		LimitTimeItemType_FixedTime = 1, // 固定 
	}
	export enum LimitTimeItemReplace { 
		LimitTimeItemReplace_None = 0, // 无 
		LimitTimeItemReplace_AccumulatedTime = 1, // 时间累计 
		LimitTimeItemReplace_DeadLine = 2, // 按截止时间替换 
	}
	export enum DropType { 
		DropType_None = 0, // 无效值 
		DropType_Odds = 1, // 概率掉落 
		DropType_Weight = 2, // 权重掉落 
		DropType_GroupOdds = 3, // 复合概率掉落 
		DropType_GroupWeight = 4, // 复合权重掉落 
	}
	export enum DropEventType { 
		DropEventType_None = 0, // 无效值 
		DropEventType_Sum = 1, // 掉落计数 
		DropEventType_ReplaceDropId = 2, // 掉落ID替换 
		DropEventType_HitResetSum = 3, // 命中掉落ID清零计数 
		DropEventType_SumAddOdds = 4, // 计数增加概率 
		DropEventType_MissCheckByItemId = 5, // 掉落物未命中检查 
		DropEventType_ReplaceDropIdByDropId = 6, // 掉落ID命中替换 
	}
	export enum AdType { 
		AdType_None = 0, // 无 
		AdType_MainChapterReward = 1, // 主线通关奖励双倍 
		AdType_Gacha101 = 2, // 高级扭蛋单抽 
		AdType_Gacha301 = 3, // 好友扭蛋单抽 
		AdType_Gacha1001 = 4, // 武器扭蛋单抽 
		AdType_BuyStamina = 5, // 购买体力 
		AdType_QuickPatrol = 6, // 免费快速游历 
		AdType_LimitedReward = 7, // 限时奖励领取 
		AdType_BuyDailyShop = 8, // 每日商店购买 
		AdType_FightReviveByAdvert = 9, // 看广告复活 
		AdType_BuyGold = 10, // 购买金币 
		AdType_SpecialGiftDaily = 11, // 日礼包 
		AdType_SpecialGiftWeekly = 12, // 周礼包 
		AdType_SpecialGiftMonthly = 13, // 月礼包 
		AdType_DailyChallenge = 14, // 每日挑战 
		AdType_RogueRefreshByAdvert = 15, // 看广告刷新肉鸽 
		AdType_ActivityMallDailyGift = 16, // 活动商店每日广告 
	}
	export enum RefreshType { 
		RefreshType_Daily = 0, // 每日 
		RefreshType_Weekly = 1, // 每周 
		RefreshType_Monthly = 2, // 每月 
		RefreshType_Unable = 3, // 不刷新 
		RefreshType_Max = 4, // 最大值 
	}
	export enum FinishTaskType { 
		FinishTaskType_CumulativeLogin = 0, // 累计登录{1}天 
		FinishTaskType_CumulativeAptitudeHero = 1, // 累计获得{1}名资质为{2}的英雄 
		FinishTaskType_CumulativeConsumeDiamonds = 2, // 累计消耗{1}钻石 
		FinishTaskType_CumulativeConsumeGold = 3, // 累计消耗{1}金币 
		FinishTaskType_CumulativeConsumeStamina = 4, // 累计消耗{1}体力 
		FinishTaskType_CumulativeMainChapterCount = 5, // 累计挑战主线{1}次 
		FinishTaskType_PlayerLevel = 6, // 玩家等级大于等于{1}级 
		FinishTaskType_PassedPveStage = 7, // 是否已通关ID为{2}的关卡 
		FinishTaskType_PassedMainChapter = 8, // 是否已通关章节ID为{2}的主线章节 
		FinishTaskType_GeneCount = 9, // 已激活{1}个基因 
		FinishTaskType_EnhancedEquipCount = 10, // 强化装备{1}次 
		FinishTaskType_ConsumeStamina = 11, // 消耗{1}体力 
		FinishTaskType_Login = 12, // 登录{1}天 
		FinishTaskType_ViaPveStageType = 13, // 挑战{1}次关卡类型为{2}的关卡 
		FinishTaskType_OwnHeroLevel = 14, // 拥有{1}个等级大于等于{2}的上阵英雄 
		FinishTaskType_GetPatrolReward = 15, // 领取{1}次巡逻收益 
		FinishTaskType_QuickPatrolCount = 16, // 快速巡逻{1}次 
		FinishTaskType_GiveFriendship = 17, // 赠送友情点{1}次 
		FinishTaskType_GetFriendship = 18, // 领取友情点{1}次 
		FinishTaskType_DrawCardByFunction = 19, // 进行{1}次功能ID为{2}的抽卡 
		FinishTaskType_HeroUpgrade = 20, // 英雄升级{1}次 
		FinishTaskType_HeroStarUpgrade = 21, // 英雄升星{1}次 
		FinishTaskType_MallPurchaseByMallType = 22, // 在商店ID为{2}购买商品{1}次 
		FinishTaskType_QuestLogLevel = 23, // 军衔达到{1}级 
		FinishTaskType_ActivityRecharge = 24, // 是否累计充值金额大于等于{2}元 
		FinishTaskType_FeatherCollect = 25, // 在关卡中获得{1}个羽毛 
		FinishTaskType_BossKill = 26, // 在关卡中击杀{1}个BOSS 
		FinishTaskType_WorldBossHarmMax = 27, // 生化危鸡中单次最大伤害达到{1} 
		FinishTaskType_PlayerPowerScore = 28, // 玩家战力大于等于{1} 
		FinishTaskType_DailyChallengeScore = 29, // 在每日挑战难度大于等于{2}中至少获得{1}分 
		FinishTaskType_GuildDonateCount = 31, // 进行{1}次公会捐献 
		FinishTaskType_GuildAttrLevelUp = 32, // 升级{1}次公会技能 
		FinishTaskType_ConsumeDiamonds = 33, // 消耗{1}钻石 
		FinishTaskType_FinishTaskTypeCount = 34, // 完成{1}个任务类型为{2}任务 
		FinishTaskType_CumulativeGacha = 2001, // 累计进行{1}次功能ID为{2}的抽卡 
		FinishTaskType_CumulativePveStage = 2002, // 累计挑战{1}次关卡类型为{2}的关卡 
		FinishTaskType_CumulativeFeatherCollect = 2004, // 累计在关卡获得{1}个羽毛 
		FinishTaskType_CumulativeBossKill = 2005, // 累计击杀{1}个BOSS 
	}
	export enum TaskType { 
		TaskType_None = 0, // 无 
		TaskType_DailyTask = 1, // 每日任务 
		TaskType_WeeklyTask = 2, // 每周任务 
		TaskType_AchievementTask = 3, // 成就任务 
		TaskType_QuestLog = 4, // 冒险日志 
		TaskType_BattlePass = 5, // 战令任务 
		TaskType_ActivityNewPlayerTask = 6, // 新手任务活动 
		TaskType_GuildDailyTask = 7, // 公会任务 
	}
	export enum RankType { 
		RankType_Unknown = 0, // 未知 
		RankType_Stage = 1, // 闯关榜 
		RankType_Level = 2, // 等级榜 
		RankType_PowerScore = 3, // 战力榜 
		RankType_Assassin = 4, // 刺客榜 
		RankType_Archer = 5, // 射手榜 
		RankType_Priest = 6, // 牧师榜 
		RankType_Caster = 7, // 法师榜 
		RankType_Warrior = 8, // 战士榜 
		RankType_WorldBoss = 9, // 世界BOSS伤害榜 
		RankType_Guild = 10, // 工会榜 
		RankType_GuildBoss = 11, // 首领入侵工会榜 
		RankType_GuildBossPlayer = 12, // 首领入侵个人榜 
		RankType_FincaFight = 13, // 庄园竞赛榜 
		RankType_EliteChapter = 14, // 精英关卡榜 
	}
	export enum RankRewardType { 
		RankRewardType_None = 0, // 不结算 
		RankRewardType_DailyReward = 1, // 每日结算 
		RankRewardType_CloseReward = 2, // 关榜结算 
		RankRewardType_SpecifyReward = 3, // 开榜定时 
		RankRewardType_CodeReward = 4, // 代码控制 
	}
	export enum RankClearType { 
		RankClearType_None = 0, // 不清榜 
		RankClearType_SettleClear = 1, // 结算清榜 
		RankClearType_OpenClear = 2, // 开榜清榜 
		RankClearType_CloseClear = 3, // 关榜清榜 
	}
	export enum NoticeType { 
		NoticeType_GetItemAptitude = 0, // 通过变化原因{1}获得资质为{2}的物品 
		NoticeType_GetItemQuality = 1, // 通过变化原因{1}获得品质为{2}的物品 
	}
	export enum BuyStaminaType { 
		BuyStaminaType_WatchAdverts = 0, // 看广告 
		BuyStaminaType_UseCurrency = 1, // 使用钻石 
		BuyStaminaType_BuyMissStamina = 2, // 购买错过体力 
	}
	export enum LimitedRewardType { 
		LimitedRewardType_None = 0, // 无 
		LimitedRewardType_ItemBelow = 1, // 道具数量小于 
	}
	export enum DailyRewardType { 
		DailyRewardType_Unknown = 0, // 未知 
		DailyRewardType_NewServer = 1, // 新服签到 
		DailyRewardType_Daily = 2, // 每日签到 
	}
	export enum MallType { 
		MallType_None = 0, // 无 
		MallType_BaseShop = 1, // 商城 
		MallType_SpecialGift = 2, // 特惠礼包 
		MallType_ActivityNewPlayerTask = 3, // 新手任务活动 
		MallType_MainChapterGift = 4, // 章节礼包 
		MallType_NewPlayerMall = 5, // 新手商城 
		MallType_NewPlayerMall2 = 6, // 精英商城 
		MallType_ActivityMall = 7, // 限时商店活动 
	}
	export enum MallTab { 
		MallTab_None = 0, // 无 
		MallTab_Tab1 = 1, // 每日 
		MallTab_Tab2 = 2, // 遣散 
		MallTab_Tab3 = 3, // 职业 
		MallTab_Tab4 = 4, // 挑战 
		MallTab_Tab5 = 5, // 钻石 
		MallTab_SpecialGiftTab1 = 11, // 超值礼包 
		MallTab_NewPlayerMall = 12, // 新手商城 
		MallTab_NewPlayerMall2 = 13, // 精英商城 
	}
	export enum MallCostType { 
		MallCostType_CostItem = 0, // 物品 
		MallCostType_Recharge = 1, // 充值 
		MallCostType_Advert = 2, // 广告 
	}
	export enum HeroCollectionType { 
		HeroCollectionType_Unknown = 0, // 未知 
		HeroCollectionType_SumSR = 1, // SR英雄累积获得 
	}
	export enum VipBonus { 
		VipBonus_Unknown = 0, // 未知 
		VipBonus_OpenFunction = 1, // 功能开启 
		VipBonus_StaminaLimit = 2, // 体力上限增加 
		VipBonus_PatrolMoneyRatio = 3, // 巡逻金币增加万分比 
		VipBonus_PatrolFoodRatio = 4, // 巡逻饲料增加万分比 
		VipBonus_PatrolIdleTime = 5, // 巡逻挂机时间增加秒数 
		VipBonus_QuickPatrolDailyCount = 6, // 快速巡逻增加次数 
		VipBonus_DailyStageBuySweepCount = 7, // 日常探险增加购买次数 
		VipBonus_DailyShopRefresh = 8, // 每日商店增加刷新次数 
		VipBonus_HeroBagAddCount = 9, // 英雄背包增加数量 
		VipBonus_RefreshCount = 12, // 羽毛刷新次数 
		VipBonus_Max = 13, // 最大值 
	}
	export enum BattlePassType { 
		BattlePassType_BaseBattlePass = 0, // 常驻战令 
		BattlePassType_LoopBattlePass = 1, // 周期战令 
		BattlePassType_ActivityBattlePass = 2, // 活动战令 
	}
	export enum BattlePassTab { 
		BattlePassTab_MainChapterPass = 1, // 主线战令 
		BattlePassTab_PlayerLvPass = 2, // 等级战令 
		BattlePassTab_StaminaPass = 3, // 挑战战令 
		BattlePassTab_QuestLogPass = 4, // 军衔战令 
		BattlePassTab_ClimbTowerPass = 5, // 爬塔战令 
		BattlePassTab_WorldBossPass = 6, // 危鸡战令 
	}
	export enum BuyGoldType { 
		BuyGoldType_Buy1 = 0, // 2小时金币 
		BuyGoldType_Buy2 = 1, // 8小时金币 
		BuyGoldType_Buy3 = 2, // 24小时金币 
	}
	export enum MailTemplate { 
		MailTemplate_MainStageQuite = 0, // 主线异常 
		MailTemplate_FullyHeroBag = 1, // 英雄背包已满 
		MailTemplate_NewServerReward = 2, // 新服签到补发 
		MailTemplate_WorldBoss = 3, // 世界BOSS排行榜奖励 
		MailTemplate_ActivityRank = 4, // 新服排行活动奖励 
		MailTemplate_WorldBoss2 = 5, // 世界BOSS排行榜奖励2 
		MailTemplate_NewServerLvRank = 6, // 荣耀等级榜 
		MailTemplate_NewServerLvRank2 = 7, // 荣耀等级榜2 
		MailTemplate_NewServerStageRank = 8, // 荣耀闯关榜 
		MailTemplate_NewServerStageRank2 = 9, // 荣耀闯关榜2 
		MailTemplate_NewServerWorldBossRank = 10, // 荣耀生化榜 
		MailTemplate_NewServerWorldBossRank2 = 11, // 荣耀生化榜2 
		MailTemplate_NewServerCPRank = 12, // 荣耀战力榜 
		MailTemplate_NewServerCPRank2 = 13, // 荣耀战力榜2 
		MailTemplate_P800ThirdPartyRechargeMail = 14, // 第三方额外奖励 
		MailTemplate_kickedOutGuild = 15, // 被踢出公会 
		MailTemplate_Gift37Default = 16, // 37礼包模板 
		MailTemplate_FincaFightDailyReward = 17, // 庄园竞赛日奖励 
		MailTemplate_FincaFightWeekReward = 18, // 庄园竞赛周奖励 
		MailTemplate_GuildBossRank = 19, // 怪物入侵鸡舍奖励 
		MailTemplate_GuildBossRank2 = 20, // 怪物入侵鸡舍奖励2 
		MailTemplate_GuildBossPlayerRank = 21, // 怪物入侵个人奖励 
		MailTemplate_GuildBossPlayerRank2 = 22, // 怪物入侵个人奖励2 
	}
	export enum GuideType { 
		GuideType_Trunk = 0, // 主线 
		GuideType_Branch = 1, // 支线 
	}
	export enum SceneType { 
		SceneType_MainScene = 0, // 主场景 
		SceneType_BattleScene = 1, // 战斗场景 
	}
	export enum HeadUnlockType { 
		HeadUnlockType_None = 0, // 无 
		HeadUnlockType_GetHero = 1, // 获得英雄 
	}
	export enum GuildPosition { 
		GuildPosition_None = 0, // 无 
		GuildPosition_President = 1, // 会长 
		GuildPosition_VicePresident = 2, // 副会长 
		GuildPosition_Elite = 30, // 精英 
		GuildPosition_Member = 50, // 成员 
	}
	export enum GuildGiftCond { 
		GuildGiftCond_None = 0, // 无 
		GuildGiftCond_GuildLevel = 1, // 公会大于等于{1}级 
	}
	export enum GuildGiftType { 
		GuildGiftType_None = 0, // 无 
		GuildGiftType_LoopGift = 1, // 周期礼包 
		GuildGiftType_LevelGift = 2, // 升级礼包 
	}
	export enum ChatBreviaryType { 
		ChatBreviaryType_GuildGiftBargain = 0, // 鸡多多砍价分享 
		ChatBreviaryType_GuildGiftLow = 1, // 鸡多多低价分享 
	}
	export enum GuildOFName { 
		GuildOFName_None = 0, // 无 
		GuildOFName_GuildTask = 1, // 公会任务 
		GuildOFName_GuildAttr = 2, // 公会技能 
		GuildOFName_GuildGift = 3, // 公会周期礼包 
		GuildOFName_GuildBoss = 4, // 公会BOSS 
	}
	export enum PvpType { 
		PvpType_None = 0, // 无 
		PvpType_PvP = 1, // 1v1 
	}

	
	export class ItemTable { 
		Id : number // ID 
		Name : string // 道具名称 
		Type : ItemType // 道具类型 
		Quality : ItemQuality // 品质 
		Desc : string // 道具描述 
		Icon : string // 道具图标 
		MarkTopLeft : string // 左上角标 
		MarkBottomLeft : string // 左下角标 
		MarkTopRight : string // 右上角标 
		BagType : BagType // 背包栏位 
		Sort : number // 排序 
		SimpleItem : boolean // 简单道具 
		DropId : number[] // 掉落ID 
		AcquireWay : OpenFunctionName[] // 获取途径 
	}
	
	export class ModuleTable { 
		ModuleType : Module // 模块枚举 
		ViewName : string // UI名称 
		Path : string // 路径 
		ViewType : ViewType // 类型 
		ZIndex : ViewZIndex // 层级 
		OpenFunctionId : OpenFunctionName[] // 功能名称 
		GuildOpenFunction : GuildOFName // 公会功能 
	}
	
	export class OpenFunctionTable { 
		Name : OpenFunctionName // 功能名称 
		Type : FunctionType // 类型 
		BattleLv : number // 通关关卡 
		PlayerLv : number // 玩家等级 
		CreateDay : number // 创角天数 
		VipLv : number // VIP等级 
		Privileged : PrivilegedType // 特权 
		TipsKey : string // 提示文本 
		Icon : string // 功能图标 
		ShowType : number // 指南类型 
		RewardItemId : number[] // 指南奖励道具ID 
		RewardItemNum : number[] // 指南奖励数量 
		FunctionUnlockAnimation : string // 开启动画节点 
		JumpUI : Module // 跳转界面 
		JumpParam : number[] // 跳转参数 
	}
	
	export class RechargeTable { 
		Id : number // 充值ID 
		Price : number // 价格(元) 
		PriceDollar : number // 价格(美分) 
		PriceTWD : number // 价格(台币) 
		PriceHKD : number // 价格(港币) 
		PriceJPY : number // 价格(日元) 
		Type : GoodsType // 充值类型 
		Desc : string // 描述 
		GoodsID : number // 商品ID 
		RewardItemIds : number[] // 赠送物品ID 
		RewardItemNum : number[] // 赠送物品数量 
		RefundPenalty : number // 退款扣钻石 
		ProductIdP800 : string // 商品ID(P800) 
		ProductId37JP : string // 商品ID(37JP) 
	}
	
	export class ActivityCumulativeRechargeTable { 
		IndexId : number // 索引 
		ActivityId : number // 活动参数 
		ShowId : number // 显示档位 
		RewardItemIds : number[] // 奖励道具 
		RewardItemNum : number[] // 奖励数量 
		Total : number // 累充(元) 
		TotalDollar : number // 累充(美分) 
		TotalTWD : number // 累充(台币) 
		TotalHKD : number // 累充(港币) 
		TotalJPY : number // 累充(日元) 
	}
	
	export class ServerlistTable { 
		ID : number // ID 
		Name : string // 名称 
		Address : string // 登录地址 
		SvcGroup : string // 服务器分组 
		ReviewSvcGroup : string // 提审服分组 
		GMAddress : string // GM服务器地址 
		NoticeAddr : string // 公告地址 
		NoticeVerAddr : string // 公告版本地址 
		PayVerification : string // 支付验证 
		RefreshSessionKey : string // 刷新sessionkey 
		AllowCORS : boolean // 是否允许跨域 
		SelectServerUrl : string // 选服地址 
	}
	
	export class ChannelTable { 
		ChannelType : ChannelType // 渠道类型 
		BaseUrl : string // 基础URL 
		HotUpdateUrl : string // 热更地址 
		BaseUrlTest : string // 基础URL-测试 
		HotUpdateUrlTest : string // 热更地址-测试 
		BaseLanguage : LanguageType // 默认语言 
		LanguageList : LanguageType[] // 可切换语言组 
		DefultID : number // 默认服务器ID 
		TestSeverID : number // 测试服务器ID 
		Currency : string // 币种类型 
		ProductType : string // 商品ID字段名 
		IosStoreUrl : string // 苹果商店地址 
		AndroidStoreUrl : string // 谷歌商店地址 
		FaceBookUrl : string // FaceBook地址 
	}
	
	export class AnimationTable { 
		Id : number // ID 
		NextAnimation : number // 下一个动画 
		Type : AnimationType // 类型 
		Path : string // 资源路径 
		AnimationName : string // 动画名称 
		FPS : number // 每秒帧数 
		AnimationSpeed : number // 动作速度 
		FrameCount : number // 总帧数 
		Loop : boolean // 循环播放 
		Offset : number[] // 偏移 
		Scale : number[] // 缩放 
		SoundId : number // 音效ID 
		AttackPoint : string // 攻击点 
	}
	
	export class HeroTable { 
		Id : number // ID 
		Class : HeroClass // 职业 
		Aptitude : HeroAptitude // 资质 
		Builds : Builds[] // 流派 
		Speciality : string // 特性 
		DefaultStar : number // 初始星级 
		BaseHeroAttrId : number // 初始属性 
		Image : string // 立绘 
		WeaponHead : string // 武器图鉴头像 
		SkillIcon1 : string // 技能图标 
		SkillIcon2 : string // 天赋图标 
		SkillIcon3 : string // 觉醒图标 
		Shadow : number // 阴影 
		Bounds : number[] // 包围盒组 
		Born : number // 入场动画 
		Idle : number // 待机动画 
		Dead : number // 死亡动画 
		Revive : number // 复活动画 
		Idle2 : number // 调息动画 
		ShotPos : number[] // 攻击点 
		HitPos : number[] // 受击点 
		RadarChart : string // 雷达图 
		RadarHighlight : number[] // 雷达高亮 
		HeroScore : string // 评分 
	}
	
	export class HeroLevelUpTable { 
		Level : number // 等级 
		MaterialIds : number[] // 消耗材料组 
		MaterialNum : number[] // 消耗数量组 
		MinTeamLevel : number // 队友最低等级 
	}
	
	export class HeroStarUpTable { 
		Id : number // ID 
		HeroId : number // 英雄ID 
		HeroStar : number // 英雄星级 
		NeedStarSteps : number[] // 升星满足阶段 
		HeroStarUpType : HeroStarUpType[] // 升星消耗类型 
		CostHeroStar : number[] // 升星消耗星级 
		CostHeroNum : number[] // 升星消耗数量 
		CostItemId : number[] // 升星消耗道具 
		CostItemNum : number[] // 道具消耗数量 
		ResetCostItem : number // 重置消耗道具 
		ResetCostNum : number // 重置消耗数量 
		MaxLevel : number // 等级上限 
		AttrPerLevel : number // 星级升级属性 
		ExtraAttrTarget : ExtraAttrTarget[] // 额外属性类型 
		ExtraAttrList : number[] // 额外属性值 
		SkillGroupIds : number // 技能组ID 
		SkillId : number[] // 技能ID 
		DescType : HeroStarDescType[] // 描述类型 
		StarName : string[] // 名称 
		StarDesc : string[] // 描述 
		RogueId : number[] // 肉鸽池 
	}
	
	export class HeroStarStepTable { 
		Id : number // 阶段ID 
		HeroId : number // 英雄ID 
		HeroStarUpType : HeroStarUpType[] // 当前阶段消耗类型 
		CostHeroStar : number[] // 当前阶段消耗星级 
		CostHeroNum : number[] // 当前阶段消耗数量 
		CostItemId : number[] // 阶段消耗道具 
		CostItemNum : number[] // 道具消耗数量 
		ExtraAttrTarget : ExtraAttrTarget[] // 额外属性类型 
		ExtraAttrList : number[] // 额外属性值 
		SkillGroupIds : number[] // 技能组ID 
		SkillEnhanceIds : number[] // 技能增强ID 
		StepDesc : string // 描述 
	}
	
	export class HeroAttrTable { 
		Id : number // 属性ID 
		HeroAttrType : AttrType[] // 属性类型 
		HeroAttrValue : number[] // 属性值 
	}
	
	export class HeroCommonCostTable { 
		Id : number // ID 
		HeroClass : HeroClass // 等价职业 
		HeroStar : number // 等价星级 
	}
	
	export class HeroLevelResonanceTable { 
		Id : number // 共鸣等级 
		NeedLv : number // 升级需求等级 
		AttrTypes : AttrType[] // 获得属性类型 
		AttrValue : number[] // 获得属性值 
	}
	
	export class HeroStarResonanceTable { 
		Id : number // 共鸣等级 
		NeedStar : number // 升级需求星级 
		AttrTypes : AttrType[] // 获得属性类型 
		AttrValue : number[] // 获得属性值 
	}
	
	export class RecommendTeamTable { 
		Id : number // 阵容ID 
		Name : string // 阵容名称 
		HeroIdList : number[] // 英雄ID 
		IsCore : boolean[] // 是否核心 
		Desc : string // 阵容描述 
		ItemId : number // 激活奖励ID 
		ItemNum : number // 激活奖励数量 
	}
	
	export class HeroAlbumTable { 
		HeroAptitude : HeroAptitude // 英雄资质 
		ItemId : number // 激活奖励ID 
		ItemNum : number // 激活奖励数量 
	}
	
	export class HeroClassTable { 
		HeroClass : HeroClass // 英雄职业 
		Icon : string // 职业图标 
	}
	
	export class HeroAptitudeTable { 
		HeroAptitude : HeroAptitude // 英雄资质 
		Icon : string // 资质图标 
		SkillBg : string // 英雄资质技能背景底 
		BookBg : string // 秘籍资质背景底 
		BookTitle : string // 秘籍资质名称底 
		BookBgSmall : string // 秘籍资质背景小底 
	}
	
	export class MonsterTable { 
		Id : number // ID 
		Name : string // 名称 
		Speed : number // 速度 
		BornAnimationId : number // 出生动画 
		IdleAnimationId : number // 待机动画 
		WalkAnimationId : number // 移动动画 
		BeHitAnimationId : number // 受击动画 
		DeadAnimationId : number // 死亡动画 
		Bounds : number[] // 包围盒组 
		MonsterType : MonsterType // 怪物类型 
		SearchRules : SearchEnemy // 索敌规则 
		AttackRange : number // 攻击范围 
		SkillIds : number[] // 技能id 
		ReviveDefeatDistance : number // 复活被右移距离 
		IsDefeat : boolean // 是否会被击退 
		IsHitBack : boolean // 是否命中击退 
		Shadow : number // 阴影 
		BuffLocation : number[] // buff位置偏移 
		BuffVFX : number // buff特效缩放 
		MonsterDieSound : number // 怪物死亡音效 
	}
	
	export class SkillGroupTable { 
		Id : number // ID 
		Icon : string // 技能图标 
		AttackType : AttackType // 攻击类型 
		NormalAttack : number[] // 普攻技能 
		AttackCount : number // 出手次数 
		BreathTime : number // 调息时间 
	}
	
	export class SkillTable { 
		Id : number // ID 
		SkillType : SkillType // 技能类型 
		Priority : number // 发动优先级 
		Trigger : number[] // 触发器 
		ActionPriority : number // 动作优先级 
		ActionID : number // 动作ID 
		Expend : number // 出手消耗 
		SkillEnhanceIds : number[] // 技能增强 
		Effect : number[] // 效果 
		EffectUnit : EffectUnit // 作用目标 
		SearchEnemy : SearchEnemy // 作用规则 
		SearchNum : number // 作用数量 
		AddBuff : number[] // 加buff 
		HandEnemy : boolean // 手动目标 
		AddBuffChance : number[] // buff触发概率 
		CoolTime : number[] // 冷却时间 
		SkillConflict : number[] // 技能互斥 
		BulletTime : number // 子弹发射时间 
		RunningShot : number[] // 连射 
		Bullet : number // 子弹ID 
		RunningShotBullet : number // 连射子弹 
		RunningShotBulletType : RunningShotBulletType // 连射类型 
	}
	
	export class BulletTable { 
		Id : number // ID 
		BulletType : BulletType // 子弹类型 
		BulletOffset : number[] // 跟随子弹偏移 
		Speed : number // 速度 
		Rating : number // 子弹层级 
		BornAnimationId : number // 出生动画 
		WalkAnimationId : number // 移动动画 
		DeadAnimationId : number // 死亡动画 
		Bounds : number[] // 包围盒组 
		BulletBorn : BulletBorn // 子弹出生点 
		EnemyUnit : EffectUnit // 索敌单位 
		SearchEnemy : SearchEnemy // 索敌规则 
		EnemyFiltrate : EnemyFiltrate // 索敌筛选 
		EffectUnit : EffectUnit // 作用单位 
		Trajectory : Trajectory // 子弹轨迹 
		ForwardArrow : number[] // 正向箭 
		Fission : number[] // 分裂 
		Penetration : number // 穿透 
		Catapult : number // 弹射 
		Round : number[] // 回旋 
		Rotate : number // 自旋 
		Centrifugation : number[] // 离心 
		ScreenBounce : number // 屏幕反弹 
		CommonShow : CommonShow // 通用表现 
		IntervalEffect : number[] // 间隔时间效果 
		LiveTime : number[] // 生存时间 
		DamageTick : number // 伤害间隔 
		DamageScale : number[] // 子弹伤害系数 
		AddEffect : number[] // 子弹额外效果 
		DamageAmount : number // 子弹多段伤害 
		SameLow : number // 相同子弹衰减 
		HitChance : number // 命中触发概率 
		HitTrigger : number[] // 命中触发效果 
		HitEffect : number[] // 命中特效 
		HitShake : number // 命中抖动 
		HitBack : number[] // 命中击退 
		AddBuffChance : number[] // buff触发概率 
		AddBuff : number[] // 加buff 
		CollisionInterval : number // 触碰间隔 
		DeathType : DeathType // 死亡方式 
		DeathTrigger : number[] // 死亡触发子弹 
		OlnyOne : boolean // 相同子弹唯一 
		NoHarm : boolean // 子系忽视父系 
		OlnyOneSon : boolean // 子系伤害唯一 
		IsReviveClean : boolean // 复活清除 
		SoundId : number[] // 子弹音效 
	}
	
	export class BuffTable { 
		Id : number // ID 
		BuffType : BuffType // buff类型 
		VFXID : number // 特效id 
		Duration : number // 持续时间 
		Effect : number[] // 效果 
		Trigger : number // 持续时间内触发间隔 
		Addbuff : number[] // 加buff 
		BuffGroup : BuffGroup // buff分组 
		Rule : Rule // 叠加规则 
		CheckAttr : number[] // 属性检测 
		Number : number // 叠加数量 
		ClearType : ClearType[] // 清除buff的条件 
		NoOneMemory : boolean // 非独立内存 
	}
	
	export class EffectTable { 
		Id : number // ID 
		EffectType : AttrType // 效果类型 
		Parameters : number[] // 效果参数 
		RandomWave : number[] // 效果基础值波动参数 
	}
	
	export class TriggerTable { 
		Id : number // ID 
		Chance : number // 概率 
		Triggertype : Triggertype // 触发类型 
		TriggerNumber : number // 触发次数 
		TriggerCd : number // 触发CD 
		TriggerCondition : TriggerCondition // 触发条件 
		Parameters : number[] // 条件参数 
		Behavior : Behavior[] // 触发行为 
		Argument : number[] // 行为参数 
		TriggerTarget : TriggerTarget // 条件目标 
		TriggerGoal : TriggerGoal // 行为目标 
	}
	
	export class SkillSummonTable { 
		SummonId : number // 召唤ID 
		Summon : number[] // 召唤内容 
	}
	
	export class PRBTable { 
		Id : number // ID 
		CValue : number // C值 
	}
	
	export class BoundTable { 
		Id : number // ID 
		Type : BoundType // 类型 
		Parameters : number[] // 参数 
	}
	
	export class SkillPowerTable { 
		Id : number // ID 
		PowerType : PowerType // 增强类型 
		PowerId : number // 增强id 
		PowerMent : string // 增强字段 
		PowerValue : number[] // 增强值 
	}
	
	export class MainChapterTable { 
		Id : number // 章节ID 
		StageIds : number[] // 主线关卡ID 
		EliteStageIds : number[] // 可解锁精英关卡ID 
		Name : string // 章节名称 
		Introduction : string // 章节介绍 
		ComicID : number // 开始前播放漫画ID 
		Icon : string // 章节图标路径 
		IconSelect : string // 章节图标选中背景路径 
		DailyTaskReward1 : number[] // 任务奖励1 
		DailyTaskNum1 : number[] // 奖励数量1 
		DailyTaskReward2 : number[] // 任务奖励2 
		DailyTaskNum2 : number[] // 奖励数量2 
		DailyTaskReward3 : number[] // 任务奖励3 
		DailyTaskNum3 : number[] // 奖励数量3 
		DailyTaskReward4 : number[] // 任务奖励4 
		DailyTaskNum4 : number[] // 奖励数量4 
		DailyTaskReward5 : number[] // 任务奖励5 
		DailyTaskNum5 : number[] // 奖励数量5 
	}
	
	export class PveStageTable { 
		StageId : number // 关卡ID 
		StageName : string // 关卡名 
		StageType : PveStageType // 关卡类型 
		NextLevelId : number // 下一关ID 
		RecommendFight : number // 推荐战力 
		LevelArrange : string // 关卡配置 
		Time : number // 关卡时长 
		LevelBUFF : number[] // 关卡buff 
		EggDropType : EggDropType // 掉毛类型 
		EggDropGroup : number // 掉毛组 
		RougeGroupId : number // 肉鸽组 
		ReviveNumber : number // 复活次数 
		CostItemId : number[] // 关卡消耗道具ID 
		CostItemNum : number[] // 关卡消耗数量 
		RewardItemId : number[] // 通关奖励ID 
		RewardItemNum : number[] // 通关奖励数量 
		LostRewardId : number[] // 失败奖励ID 
		LostRewardNum : number[] // 失败奖励数量 
		Background : string // 战斗背景 
		MonsterDieDrop : number[] // 怪死掉落 
	}
	
	export class RobotTable { 
		Id : number // ID 
		RobotType : RobotType // 类型 
		Name : string // 名字 
		Power : number // 战力 
		Core : number // 积分 
		PlayerLevel : number // 玩家等级 
		Image : number // 形象id 
		Head : number // 头像id 
		Hero : number[] // 英雄id 
		HeroStar : number[] // 英雄星级 
		HeroLevel : number[] // 英雄等级 
		Book : number[] // 秘籍id 
		BookStar : number[] // 秘籍星级 
		BookLevel : number[] // 秘籍等级 
		Experience : number // 冒险等级 
		AddAttrId : number // 额外属性 
	}
	
	export class VoidStageTable { 
		Id : number // ID 
		StageID : number // 关卡ID 
		HeroID : number // 英雄id 
		HeroLevel : number // 等级 
		HeroStar : number // 星级 
	}
	
	export class FeatherEggDrop { 
		Id : number // ID 
		EggDropGroup : number // 掉毛组 
		EggDropLevel : number // 掉毛等级 
		EggDropExp : number // 掉毛经验 
		EggDropContent : number // 掉落ID 
	}
	
	export class MapBlock { 
		Id : number // ID 
		CoordinateX : number // 位置X 
		CoordinateY : number // 位置Y 
		Long : number // 长 
		High : number // 高 
	}
	
	export class PveStageDropTable { 
		DropId : number // 战斗掉落ID 
		DropItem : number[] // 掉落道具ID 
		DropItemCount : number[] // 掉落道具数量 
	}
	
	export class VirtualItem { 
		VirtualItemId : number // 道具ID 
		VirtualItemType : VirtualItemType // 类型 
		VirtualAnimationId : number // 图标动画ID 
		VirtualItemIcon : string // 图标 
	}
	
	export class PveTimeDropTable { 
		StageId : number // 关卡ID 
		DropTime : number[] // 掉落时间 
		DropCount : number[] // 掉落 
	}
	
	export class PveStageBuffTable { 
		Id : number // 战斗初始增益ID 
		CorrespondingId : number[] // 对应ID 
		EffectTarget : EffectTarget // 生效目标 
		Own : OwnClass // 归属 
		Show : string // 前端技能说明 
		ShowIcon : string // 前端技能图标 
	}
	
	export class PveAddFeatherDropTable { 
		Count : number // 数量 
		Times : number[] // 掉落时间点 
	}
	
	export class WorldBossRewardTable { 
		Id : number // ID 
		StageId : number // 关卡ID 
		Damage : number // 伤害值 
		ItemId : number[] // 奖励道具 
		ItemNum : number[] // 奖励道具数量 
	}
	
	export class WorldBossDamTable { 
		Id : number // ID 
		StageId : number // 关卡ID 
		Damage : number // 伤害值 
		EffectId : number[] // 伤害效果 
	}
	
	export class DailyChallengeBuffTable { 
		Id : number // ID 
		HeroBuff : number // 英雄增益 
		MonsterBuff : number // 怪物增益 
	}
	
	export class DailyChallengeLevelTable { 
		Level : number // 难度 
		MainStageLimit : number // 主线通关需求 
		IsEasier : boolean // 能否下降难度 
		StageId : number // 关卡ID 
		Require : number[] // 奖励领取条件 
		DropId : number[] // 掉落ID 
	}
	
	export class ClimbTowerTable { 
		StageId : number // 关卡ID 
		Floor : number // 米 
		OpenTime : number // 开启天数 
		DailyReward : number[] // 每日奖励ID 
		DailyRewardNum : number[] // 奖励数量 
		SkillShow : number[] // 关卡技能 
		CrushedValue : number // 碾压系数 
		BackgroundUrl : string // 关卡背景 
		AnimationId : string // BOSS动画ID 
	}
	
	export class RogueTable { 
		Id : number // ID 
		Condition : number // 前置条件 
		Sort : VirtualItemType // 分类 
		Own : OwnClass // 归属 
		Level : number // 重数 
		Stage : number // 阶段 
		Skill : number[] // 技能id 
		SkillGroup : number // 技能组id 
		Weight : number // 权重 
		Mutex : boolean // 互斥 
		Backlimit : number // 放回上限 
		BookId : number // 对应秘籍ID 
		ActivationCondition : RogueActivationCondition // 激活条件 
		Description : string // 技能说明 
	}
	
	export class RogueGroupTable { 
		Id : number // ID 
		RogueGroup : number[] // 肉鸽内容ID 
		IsHaveHeroLevelUp : boolean // 是否存在英雄升级 
	}
	
	export class TipsTable { 
		Id : number // 提示枚举 
		TipsKey : string // 提示文本 
	}
	
	export class SoundTable { 
		Id : number // ID 
		Type : SoundType // 类型 
		Path : string // 路径 
		Loop : boolean // 是否循环 
		volume : number // 音量大小 
	}
	
	export class EquipTable { 
		Id : number // ID 
		Type : EquipType // 槽位 
		Class : HeroClass // 职业 
		EquipStar : number // 星级 
		MasterLevel : number // 大师等级 
		BaseAttrGroupId : string // 基础属性分组ID 
		ExtraAttrGroupId : string // 附加属性分组ID 
		SkillGroupId : string // 技能分组ID 
		EnhanceLimit : number // 强化上限 
		RefineLimit : number // 淬炼上限 
		Materials : number[] // 分解材料 
	}
	
	export class EquipAttrTable { 
		Id : number // ID 
		AttrType : AttrType // 属性类型 
		Base : number // 属性基值 
		Growth : number // 成长系数 
	}
	
	export class EquipAttrGroupTable { 
		Id : string // 分组ID 
		Type : EquipGroupType // 类型 
		Count : number // 随机条目数 
		Mode : EquipGroupMode // 随机方式 
		List : string // 随机值列表 
	}
	
	export class EquipSkillTable { 
		Id : number // ID 
		Group : string // 分组 
		Quality : ItemQuality // 品质 
		Playstyle : string // 流派名称 
		SkillIcon : string // 技能图标 
		SkillName : string // 技能名称 
		SkillDesc : string // 技能描述 
	}
	
	export class HeroMasterTable { 
		Id : number // ID 
		Type : MasterType // 类型 
		Level : number // 等级 
		Require : number // 等级需求 
		AttrList : number[] // 属性列表 
		Desc : string // 条件描述 
	}
	
	export class EquipUpgradeTable { 
		Id : number // ID 
		Type : EquipUpgradeType // 类型 
		Level : number // 等级 
		Moneys : number[] // 货币消耗 
		Materials : number[] // 材料消耗 
		Odds : number // 概率 
		Amount : number // 累积次数 
		GroupId : string // 分组ID 
	}
	
	export class WordTable { 
		Key : string // Key 
		Zh_tw : string // zh_tw 
		En_us : string // 英文 
		Jp_jp : string // 日文 
	}
	
	export class ItemStarClientTable { 
		Id : number // 星级 
		AnimationId : number // 显示动画ID 
		Number : number // 数量 
	}
	
	export class ItemQualityTable { 
		Quality : ItemQuality // 道具品质 
		HeroStar : number[] // 英雄星级 
		QualityFrame : string // 品质框 
		HeroBagQuality : string // 英雄背包品质底 
		HeroBagGrowthQuality : string // 英雄背包养成品质底 
		HeroBagLevelQuality : string // 英雄背包等级品质底 
		HeroStarBg : string // 英雄和装备星级职业底 
		QualityColor : string // 名字颜色 
	}
	
	export class HeroPowerScore { 
		Id : number // ID 
		Type : AttrType // 类型 
		Args : number // 参数 
		Score : number // 评分 
	}
	
	export class HeroAttrClientTable { 
		Type : AttrType // 属性类型 
		Icon : string // 属性图标 
		IsBase : boolean // 是否基础属性 
		ShowPercent : boolean // 是否百分比 
		ShowHeroAttr : boolean // 英雄面板是否显示 
	}
	
	export class GeneLevelTable { 
		Id : number // ID 
		Type : GeneType // 类型 
		Level : number // 等级 
		UnlockType : GeneUnlockType // 解锁条件 
		UnlockArgs : number // 解锁参数 
		AttrType : AttrType // 属性类型 
		AttrValue : number // 属性值 
		MaterialIdList : number[] // 消耗道具 
		MaterialCountList : number[] // 消耗道具数量 
		Name : string // 名称 
		Desc : string // 描述 
		EnableIcon : string // 已激活图标 
		DisableIcon : string // 未激活图标 
	}
	
	export class BookTable { 
		Id : number // 秘籍ID 
		Class : HeroClass // 职业 
		Aptitude : HeroAptitude // 资质 
		Builds : Builds // 流派 
		IsWear : boolean // 是否可穿戴 
		PlaystyleName : string // 效果简介 
		MaterialIdList : number[] // 分解道具ID 
		MaterialCountList : number[] // 分解道具数量 
	}
	
	export class BookStarTable { 
		Id : number // ID 
		BookId : number // 秘籍ID 
		Level : number // 星级 
		MaxLevel : number // 研习等级上限 
		MaterialIdList : number[] // 消耗道具ID 
		MaterialCountList : number[] // 消耗道具数量 
		SkillId : number[] // 技能ID 
		AttrType : AttrType[] // 初始属性类型 
		AttrValue : number[] // 初始属性值 
		ExtraAttrType : AttrType[] // 升星额外属性类型 
		ExtraAttrValue : number[] // 升星额外属性值 
		Description : string // 升星效果描述 
		BookDescription : string // 秘籍效果描述 
	}
	
	export class BookLevelTable { 
		Id : number // ID 
		Aptitude : HeroAptitude // 资质 
		Level : number // 等级 
		Class : HeroClass // 职业 
		MaterialIdList : number[] // 消耗道具ID 
		MaterialCountList : number[] // 消耗道具数量 
		Ratio : number // 研习比例 
	}
	
	export class BookFragmentTable { 
		BookId : number // 秘籍ID 
		Id : number // 残卷ID 
		Count : number // 修复所需数量 
		BaseAmount : number // 转换基数 
		MaterialIdList : number[] // 转换后道具ID 
		MaterialCountList : number[] // 转换后道具数量 
	}
	
	export class BookSeriesTable { 
		Id : number // ID 
		BookId : number[] // 秘籍ID 
		GroupId : number // 分组ID 
		Level : number // 星级 
		Skill : number[] // 技能ID 
		AttrType : AttrType[] // 属性类型 
		AttrValue : number[] // 属性值 
		Name : string // 名称配置 
		SkillShow : string[] // 技能说明 
	}
	
	export class BookSlotTable { 
		Id : number // ID 
		Class : HeroClass // 职业 
		Slot : BookSlotType // 槽位 
		UnlockType : BookSlotUnlockType // 解锁条件 
		UnlockArgs : number // 解锁参数 
	}
	
	export class BookDictionary { 
		PhaseOneBook : number // 一阶秘籍ID 
		PhaseTwoBook : number[] // 二阶秘籍ID 
		PhaseThreeBook : number[] // 三阶秘籍ID 
	}
	
	export class PlayerLvTable { 
		PlayerLv : number // 等级 
		Exp : number // 累计经验 
		ItemId : number[] // 奖励道具ID 
		ItemNum : number[] // 奖励道具数量 
	}
	
	export class ScrollPaintingTable { 
		Id : number // 索引ID 
		Aptitude : HeroAptitude // 资质 
		HeroStar : number // 星级 
		SPAttrTypes : AttrType[] // 属性类型 
		SPAttrValue : number[] // 属性值 
	}
	
	export class LimitTimeItemTable { 
		ItemId : number // 限时道具ID 
		GetItemId : number // 获得真实道具ID 
		LimitTimeType : LimitTimeItemType // 限时类型 
		LimitTimeValue : number // 限时参数 
		ReplaceType : LimitTimeItemReplace // 替换类型 
		TransformItemId : number[] // 转换道具ID 
		TransformItemCount : number[] // 转换道具数量 
	}
	
	export class DropTable { 
		Id : number // ID 
		Type : DropType // 掉落类型 
		Count : number // 执行参数 
		ItemList : number[] // 掉落组 
		ItemCount : number[] // 道具数量 
		Args : number[] // 掉落参数 
	}
	
	export class DropEventTable { 
		Id : number // ID 
		Type : DropEventType // 事件类型 
		NumVal : number[] // 数值参数 
		StrVal : string[] // 字串参数 
	}
	
	export class ChapterFristRewardTable { 
		Id : number // 关卡ID 
		Time : number[] // 目标时间 
		RewardItemIds1 : number[] // 目标1奖励ID 
		RewardItemNum1 : number[] // 目标1奖励数量 
		RewardItemIds2 : number[] // 目标2奖励ID 
		RewardItemNum2 : number[] // 目标2奖励数量 
		RewardItemIds3 : number[] // 目标3奖励ID 
		RewardItemNum3 : number[] // 目标3奖励数量 
	}
	
	export class AdvertPosTable { 
		AdType : AdType // 广告点类型 
		RefreshType : RefreshType // 刷新周期 
		AdvertCount : number // 广告次数 
	}
	
	export class GachaTable { 
		Id : number // ID 
		ItemSource : ItemSource // 物品变化原因 
		DropId : number // 掉落ID 
		DropCount : number // 掉落次数 
		ItemId : number // 消耗道具ID 
		ItemCount : number // 消耗道具数量 
		SubItemId : number // 替代道具ID 
		SubItemBaseCount : number // 替代物消耗基数 
		ShowCount : number // 显示保底次数 
		AdType : AdType // 广告类型 
		Function : OpenFunctionName // 功能开启条件 
		AutoDisband : boolean // 自动遣散 
	}
	
	export class ElixirTable { 
		Id : number // ID 
		AttrType : AttrType[] // 属性类型 
		AttrValue : number[] // 属性值 
		PlayerLv : number[] // 玩家等级 
		MaxCount : number[] // 吃药上限 
	}
	
	export class TaskTable { 
		Id : number // 任务ID 
		TaskType : TaskType // 任务类型 
		Revision : number // 版本号 
		FinishType : FinishTaskType // 任务条件 
		CanAcceptEarly : boolean // 提前接任务 
		FinishParam1 : number // 参数1 
		FinishParam2 : number // 参数2 
		FinishParam3 : number // 参数3 
		RewardItemIds : number[] // 奖励道具ID 
		RewardItemNum : number[] // 奖励道具数量 
		BattlePassRewardIds : number[] // 战令奖励ID 
		BattlePassRewardNum : number[] // 战令奖励数量 
		Title : string // 任务标题 
		Describe : string // 任务描述 
		JumpUI : Module // 跳转界面 
		JumpParam : number[] // 跳转参数 
	}
	
	export class WeeklyTaskBoxTable { 
		Id : number // 周活跃度 
		BoxRewardItemIds : number[] // 奖励道具 
		BoxRewardItemNum : number[] // 奖励数量 
	}
	
	export class AchievementTaskTable { 
		Id : number // 任务ID 
		PreTaskId : number // 前置任务ID 
	}
	
	export class QuestLogTable { 
		Level : number // 军衔等级 
		TaskIds : number[] // 任务组 
		ShowLv : number // 预览等级 
		Name : string // 名称 
		QuestLogAttrType : AttrType[] // 属性类型 
		QuestLogAttrValue : number[] // 属性值 
	}
	
	export class RankTable { 
		Id : number // ID 
		Type : RankType // 排行榜类型 
		Length : number // 上榜人数 
		Range : number // 显示人数 
		IsStatic : boolean // 是否常驻 
	}
	
	export class RankRewardTable { 
		Id : number // 排行榜ID 
		Type : RankRewardType // 结算类型 
		Args : number // 结算参数 
		ClearType : RankClearType // 清榜类型 
		SpecialCount : number // 特殊名次 
		MailType : MailTemplate // 邮件类型1 
		MailType2 : MailTemplate // 邮件类型2 
		Ranking : string[] // 榜单 
		DropId : number[] // 奖品 
	}
	
	export class RankCycleRewardTable { 
		IndexId : number // 索引ID 
		Id : number // 排行榜ID 
		Refresh : RefreshType // 发奖周期 
		Args : number // 发奖时间 
		SpecialCount : number // 特殊名次 
		MailType : MailTemplate // 邮件类型1 
		MailType2 : MailTemplate // 邮件类型2 
		CycleRanking : string[] // 榜单 
		CycleDropId : number[] // 奖品 
	}
	
	export class NoticeTable { 
		Id : number // 通知ID 
		WordKey : string // 关联文本 
		Texts : string[] // 文本定义 
		NoticeType : NoticeType // 公告触发类型 
		Param1 : number[] // 参数1 
		Param2 : number[] // 参数2 
		Param3 : number[] // 参数3 
	}
	
	export class BuyStaminaTable { 
		Type : BuyStaminaType // 购买类型 
		GetItemId : number[] // 获得物品 
		GetItemNum : number[] // 获得数量 
		CostItemId : number // 消耗物品 
		CostItemNum : number // 消耗数量 
		AdType : AdType // 看广告 
		DailyCount : number // 每日次数 
		MaxCount : number // 上限次数 
		ShowIcon : string // 显示图标 
	}
	
	export class PatrolTable { 
		PveStageId : number // 关卡ID 
		BaseTimes : number[] // 基础奖励时间 
		BaseItemIds : number[] // 基础奖励ID 
		BaseItemNum : number[] // 基础奖励数量 
		ExtraTimes : number[] // 进阶奖励时间 
		ExtraItemIds : number[] // 进阶奖励ID 
		ExtraItemNum : number[] // 进阶奖励数量 
	}
	
	export class ChoiceBoxTable { 
		ChoiceBoxId : number // 自选ID 
		ChoiceItemIds : number[] // 可选ID 
		ChoiceItemNum : number[] // 可选数量 
	}
	
	export class PveClearStageTable { 
		StageId : number // 关卡ID 
		StageType : PveStageType // 关卡类型 
		ClearRewardItemIds : number[] // 通关奖励道具 
		ClearRewardItemNum : number[] // 通关奖励数量 
	}
	
	export class PveSweepTable { 
		StageId : number // 关卡ID 
		SweepRewardItemIds : number[] // 扫荡奖励道具 
		SweepRewardItemNum : number[] // 扫荡奖励数量 
	}
	
	export class LimitedRewardTable { 
		TriggerHour : number // 触发时间 
		TriggerType : LimitedRewardType // 触发条件 
		TriggerParam : number[] // 触发参数 
		TriggerRewardId : number // 触发奖励ID 
		TriggerRewardCount : number // 触发奖励数量 
		RewardId : number // 未触发奖励ID 
		RewardCount : number // 未触发奖励数量 
		FirstTriggerInterval : number[] // 首次触发间隔 
		TriggerInterval : number[] // 奖励补发间隔 
	}
	
	export class FirstRechargeTable { 
		Id : number // ID 
		RechargeId : number // 充值表ID 
		ContainGoodsId : number[] // 包含商品ID 
		FRItemIds : number[] // 奖励道具ID 
		FRItemNum : number[] // 奖励道具数量 
		RateShow : string // 返利显示 
		WordKey : string // 显示文本 
		AnimationId : number // 显示动画 
		ButtonIcon : string // 入口图标 
		IconAnimationId : number // 图标扫光 
	}
	
	export class ChallengeButtonTable { 
		Id : number // 序号 
		PveStageType : PveStageType[] // 包含关卡类型 
		Background : string // 背景图 
		Name : string // 名称 
		ShowItemId : number[] // 显示道具图标 
		JumpUI : Module // 跳转界面 
	}
	
	export class DailyRewardTable { 
		Id : number // 签到ID 
		Type : DailyRewardType // 签到类型 
		NextId : number // 下轮签到ID 
		OpenTime : number // 持续时间 
	}
	
	export class DailyRewardItemTable { 
		Id : number // 签到ID 
		Index : number // 天数 
		ItemId : number // 物品ID 
		ItemCount : number // 物品数量 
	}
	
	export class MallTable { 
		MallId : number // 商店ID 
		IsDefinite : boolean // 商品是否固定 
		MallType : MallType // 商店类型 
		MallTab : MallTab // 页签 
		PrefabUrl : string // 关联prefab 
		BackgroundUrl : string // 背景图 
		AnimationId : number // 动画ID 
		ItemSource : ItemSource // 变化原因 
		Function : OpenFunctionName // 开启条件 
		Duration : number // 持续时间 
		Version : number // 版本号 
	}
	
	export class MallItemTabe { 
		Id : number // 商品ID 
		MallId : number // 商店ID 
		GetItemIds : number[] // 获得物品 
		GetItemNum : number[] // 物品数量 
		CostType : MallCostType // 购买类型 
		CostItemIds : number[] // 购买消耗 
		CostItemNum : number[] // 消耗数量 
		RechargeId : number // 充值ID 
		AdType : AdType // 广告类型 
		LimitCount : number // 限购次数 
		RefreshType : RefreshType // 刷新周期 
		OpenFunction : OpenFunctionName // 开启条件 
		IconUrl : string // 显示图标 
	}
	
	export class BuyDiamondsTable { 
		GoodsId : number // 商品ID 
		RechargeId : number // 充值ID 
		GetItemId : number // 获得物品 
		GetItemNum : number // 获得数量 
		FirstAdd : number // 首充赠送 
		Add : number // 后续赠送 
		Icon : string // 显示图标 
		ViewSpecial : boolean // 仅在提审显示 
	}
	
	export class DailyShopTable { 
		ShopId : number // 栏位序号 
		ItemGroupId : number[] // 商品组 
		BuyCout : number[] // 购买次数 
	}
	
	export class DailyShopItemTable { 
		Id : number // 商品ID 
		ItemGroupId : number // 商品组 
		Weight : number // 刷新权重 
		GetItemId : number // 获得物品 
		GetItemNum : number // 物品数量 
		CostItemId : number // 购买消耗 
		CostItemNum : number // 消耗数量 
		Advert : AdType // 广告类型 
		OpenFunction : OpenFunctionName // 开启条件 
		DiscountIcon : string // 折扣图标 
	}
	
	export class HeroCollectionTable { 
		Id : number // ID 
		Type : HeroCollectionType // 类型 
		Params : number // 参数 
		ItemId : number // 物品ID 
		ItemCount : number // 物品数量 
	}
	
	export class BreakEggTable { 
		Id : number // ID 
		RechargeId : number // 充值ID 
		ItemId : number // 奖励道具 
		ItemCount : number // 奖励数量 
		Params : number[] // 计算参数 
		MaxScore : number // 总进度 
	}
	
	export class VipTable { 
		VipLv : number // VIP等级 
		VipExp : number // 累计VIP积分 
		ShowVipLv : number // 可预览等级 
		VipDailyRewardIds : number[] // 每日奖励道具ID 
		VipDailyRewardNum : number[] // 每日奖励数量 
		VipRewardIds : number[] // 专属奖励道具ID 
		VipRewardNum : number[] // 专属奖励数量 
		VipCostItemIds : number // 专属奖励消耗 
		VipCostItemNum : number // 专属奖励消耗数量 
		ShowCost : number // 显示原价 
	}
	
	export class VipBonusTable { 
		IndexId : number // 索引ID 
		VipLv : number // VIP等级 
		VipBonus : VipBonus // 加成类型 
		AddValue : number // 加成值 
	}
	
	export class MonthlyPassTable { 
		Type : PrivilegedType // 月卡类型 
		RechargeId : number // 充值ID 
		Duration : number // 持续时间 
		BuyRewardIds : number[] // 购买奖励ID 
		BuyRewardNum : number[] // 购买奖励数量 
		RewardIds : number[] // 每日奖励ID 
		RewardNum : number[] // 每日奖励数量 
		MonthlyPassBonus : VipBonus[] // 特权加成 
		MonthlyPassValue : number[] // 加成值 
		WordKey : string[] // 显示文本 
	}
	
	export class BattlePassTable { 
		Id : number // 战令ID 
		RechargeId : number // 充值ID 
		OpenFunction : OpenFunctionName // 开启条件 
		PassType : BattlePassType // 战令类型 
		PassValue : number // 参数 
		BuyLvCostId : number // 买等级消耗道具ID 
		BuyLvCostNum : number // 买等级消耗道具数量 
		Privileged : PrivilegedType // 购买后激活特权 
		TaskIds : number[] // 任务ID列表 
		IsBattleBtn : boolean // 是否在战令页签 
		BattlePassTab : BattlePassTab // 页签名 
		PrefabUrl : string // prefab路径 
		AnimationId : number // 动画ID 
	}
	
	export class BuyGoldTable { 
		Type : BuyGoldType // 购买类型 
		ItemId : number[] // 获得物品 
		ItemCount : number[] // 获得数量 
		CostItemId : number // 消耗物品 
		CostItemCount : number // 消耗数量 
		AdType : AdType // 广告类型 
		PurchaseCount : number // 限购次数 
		ShowIcon : string // 显示图标 
	}
	
	export class NewPlayerDailyGiftTable { 
		Id : number // ID 
		Group : number // 分组 
		CreateDay : number // 可购买天数 
		RechargeId : number // 充值ID 
		RewardItemIds : number[] // 奖励道具 
		RewardItemNum : number[] // 奖励数量 
		DiscountIcon : string // 折扣图标 
		ShowStar : number // 显示星级 
	}
	
	export class ActivityNewPlayerTaskTable { 
		Id : number // ID 
		Group : OpenFunctionName // 分组 
		CreateDay : number // 创角时间 
		TaskIds1 : number[] // 任务ID列表1 
		TaskIds2 : number[] // 任务ID列表2 
		MallId : number // 商店ID 
	}
	
	export class ActivityNewPlayerTaskScoreTable { 
		Id : number // ID 
		Group : OpenFunctionName // 分组 
		Score : number // 累计积分 
		RewardId : number // 奖励道具ID 
		RewardNum : number // 奖励数量 
	}
	
	export class MainChapterGiftTable { 
		MallId : number // 商店ID 
		MainChapterId : number // 通关主线章节 
		DiscountIcon : string // 折扣图标 
		AnimationId : number // 显示动画ID 
	}
	
	export class ServerMailTable { 
		Type : MailTemplate // 邮件类型 
		Title : string // 标题 
		Sender : string // 发送者 
		Content : string // 邮件内容 
		ExpireTime : number // 过期时间 
		ExistsTime : number // 存续时间 
		AttachmentID : number[] // 物品ID 
		AttachmentCount : number[] // 物品数量 
	}
	
	export class ActivityTable { 
		ActivityId : number // 活动ID 
		ActivityName : string // 活动名称 
		Type : OpenFunctionName // 活动类型 
		Param1 : number // 参数1 
		Param2 : number // 参数2 
		Param3 : number // 参数3 
		ActivityIds : number[] // 活动ID列表 
		ButtonIconUrl : string // 活动入口 
		WordKey : string // 活动页签文本 
	}
	
	export class ActivityNewServerTable { 
		ActivityId : number // 活动ID 
		OpenDay : number // 开启天数 
		EndDay : number // 结束天数 
	}
	
	export class ItemClientJumpTable { 
		ItemId : number // 道具ID 
		JumpUI : Module // 跳转界面 
		JumpParam : number[] // 跳转参数 
	}
	
	export class ActivityRankTable { 
		Id : number // 索引ID 
		ActivityId : number // 活动ID 
		RankId : number // 排行榜ID 
		EndTimes : number // 排行榜结算时间 
		TaskIds : number[] // 任务ID列表 
		WordKey : string // 活动名称文本 
	}
	
	export class RandomNameTable { 
		Id : number // 索引ID 
		FirstName : string // 前缀 
		LastName : string // 后缀 
	}
	
	export class GuideTable { 
		Id : number // 引导ID 
		GuideType : GuideType // 引导类型 
		PreGuide : number // 前置引导 
		ScriptName : string // 脚本名 
		GuideScene : SceneType // 引导所在场景 
	}
	
	export class GuideDialogueTable { 
		Id : string // 对话ID 
		IsLeft : boolean // 是否在左侧 
		PosX : number // x坐标 
		PosY : number // y坐标 
		IsMask : boolean // 是否遮黑 
		Head : string // 对话头像 
		Sound : number // 播放语音 
	}
	
	export class HeadTable { 
		Id : number // 头像ID 
		UnlockType : HeadUnlockType // 解锁方式 
		UnlockParam : number // 解锁参数 
		AttrTypes : AttrType[] // 属性类型 
		AttrValue : number[] // 属性值 
	}
	
	export class HeadFramTable { 
		Id : number // 头像框ID 
		AttrTypes : AttrType[] // 属性类型 
		AttrValue : number[] // 属性值 
	}
	
	export class CheatStageTable { 
		Id : number // 关卡ID 
		DropId : number // 战斗掉落ID 
		BossIdList : number[] // Boss列表 
		RollCountList : number[] // Boss战卷轴激活列表 
		BossHpList : number[] // Boss血量列表 
		BossDPSList : number[] // BossDPS列表 
	}
	
	export class GuildLevelTable { 
		Id : number // 公会等级 
		Exp : number // 累计经验 
		MaxCount : number // 最大人数 
		TaskBoxReward1 : number[] // 任务宝箱1 
		TaskRewardNum1 : number[] // 奖励数量1 
		TaskBoxReward2 : number[] // 任务宝箱2 
		TaskRewardNum2 : number[] // 奖励数量2 
		TaskBoxReward3 : number[] // 任务宝箱3 
		TaskRewardNum3 : number[] // 奖励数量3 
		TaskBoxReward4 : number[] // 任务宝箱4 
		TaskRewardNum4 : number[] // 奖励数量4 
		TaskBoxReward5 : number[] // 任务宝箱5 
		TaskRewardNum5 : number[] // 奖励数量5 
	}
	
	export class GuildPositionTable { 
		Position : GuildPosition // 职位 
		MaxCount : number // 最大数量 
		KickOut : number // 踢人/天 
		Appoint : boolean // 任职 
		WriteNotification : boolean // 写公告 
		Proces : boolean // 处理申请 
		Setting : boolean // 公会设置 
	}
	
	export class GuildSignInTable { 
		Id : number // 签到次数 
		RewardItemIds : number[] // 签到奖励道具 
		RewardCount : number[] // 签到奖励数量 
		SignInCostDiamond : number // 签到消耗钻石 
	}
	
	export class GuildAttrTable { 
		Id : number // ID 
		Level : number // 等级 
		HeroClass : HeroClass // 职业 
		ShowLevel : number // 显示等级 
		AttrTypes : AttrType[] // 属性类型 
		AttrValue : number[] // 属性值 
		CostItemIds : number[] // 消耗道具 
		CostItemCount : number[] // 消耗数量 
	}
	
	export class GuildBossPointTable { 
		Id : number // ID 
		StageId : number // 关卡ID 
		Damage : number // 伤害值 
		PointRaito : number // 积分比率 
		DropId : number // 掉落ID 
	}
	
	export class GuildFlagTable { 
		Id : number // 旗帜ID 
		IconUrl : string // 旗帜路径 
	}
	
	export class GuildGiftTable { 
		Id : number // 礼包ID 
		NextId : number // 下一个ID 
		Type : GuildGiftType // 礼包类型 
		ActivationCond : GuildGiftCond // 激活条件 
		ActivationParams : number[] // 激活参数 
		RewardItemId : number // 礼包道具 
		ItemCount : number // 道具数量 
		DiamondPrice : number // 钻石售价 
		MinPrice : number // 最低售价 
		BargainingRange : number[] // 砍价范围 
		Duration : number // 持续时间 
		Button : string // 入口 
	}
	
	export class ChatBreviaryTable { 
		Type : ChatBreviaryType // 类型 
		Text : string // 消息文本 
		JumpUI : Module // 跳转界面 
		JumpParam : number[] // 跳转参数 
	}
	
	export class GuildOpenFunctionTable { 
		Name : GuildOFName // 功能名称 
		Level : number // 公会等级 
		WordKey : string // 提示文本 
	}
	
	export class Comic { 
		ComicID : number // 漫画ID 
		prefabName : string // 预制体路径 
		NodeName : string[] // 节点名字 
		AnimationName : string[] // 动画名字 
		ComicName : string // 漫画名字 
		ComicUnlock : number // 解锁条件 
	}
	
	export class GachaUpTable { 
		Id : number // 索引ID 
		GachaIds : number[] // 卡池ID 
		TaskIds : number[] // 任务ID 
		IconUrl : string // 扭蛋入口图片 
		TabUrl : string[] // 页签图标 
		AnimationId : number // 动画ID 
		LoginShowUrl : string // 登录展示图 
		PrefabUrl : string // 概率显示prefab 
	}
	
	export class ActivityHeroGrowTable { 
		Id : number // 索引ID 
		HeroId : number // 英雄ID 
		HeroStar : number // 英雄星级 
		FreeRewardId : number // 免费奖励ID 
		FreeRewardCount : number // 免费奖励数量 
		RechargeId : number // 充值ID 
		LimitCount : number // 限购次数 
		RewardIds : number[] // 付费奖励ID 
		RewardCount : number[] // 付费奖励数量 
		BackgroundUrl : string // 活动背景图 
		AnimationId : number // 动画ID 
	}
	
	export class SignInGiftTable { 
		Day : number // 登录天数 
		ItemId : number // 道具ID 
		ItemCount : number // 道具数量 
		IsGrand : boolean // 是否大奖 
	}
	
	export class PopWindowMechanism { 
		ID : number // 索引ID 
		PopPriority : number // 弹出优先级 
		MutexID : number[] // 互斥弹出 
	}
	
	export class PvPStageTable { 
		ID : number // 关卡ID 
		Type : PvpType // 战斗类型 
		SceneWidth : number // 场景宽度 
		SceneHeight : number // 场景高度 
		Position : number[] // 英雄站点 
	}
	
	export class PvPStagePositionTable { 
		ID : number // 分组ID 
		HeroClass : HeroClass // 英雄 
		X : number // X 
		Y : number // Y 
		location : number // 对应阵容位置 
	}
	
	export class FincaFightTeam { 
		Level : number // 日志等级 
		UnlockHero : number // 解锁英雄数量 
		UnlockWeapon : number // 解锁武器数量 
	}
	
	export class ConfigTable { 
		InitialItems : number[] //  
		InitialQuantities : number[] //  
		EquipMaxNum : number //  
		ChangeNameCost : number[] //  
		InitialStaminaMaxCount : number //  
		StaminaResumeTime : number //  
		MainChapterQuiteCount : number //  
		InterfaceTxtGreen : string //  
		InterfaceTxtRed : string //  
		DailyTaskRewardNeedCount : number[] //  
		InitialPatrolMaxTime : number //  
		QuickPatrolUseItem : number[] //  
		QuickPatrolDailyCount : number //  
		QuickPatrolTime : number //  
		PatrolRewardCd : number //  
		PatrolTipsTime : number //  
		GoldStageSweepFreeCount : number //  
		GoldStageSweepBuyCount : number //  
		GoldStageSweepBuyCost : number[] //  
		FeedStageSweepFreeCount : number //  
		FeedStageSweepBuyCount : number //  
		FeedStageSweepBuyCost : number[] //  
		HeroCollectionExistsSec : number //  
		NewPlayerTask1Duration : number //  
		NewPlayerTask2Duration : number //  
		HeroBagNum : number //  
		HeroBagExpansion : number[] //  
		HeroRecycleReward : number[] //  
		HeroOneClickUpgradeStars : number //  
		HeroOneClickUpgradeStarMax : number //  
		BookStarUniversalMaterial : number //  
		BookStarUniversalMaterialQuality : ItemQuality //  
		weaponLimit : number //  
		FightDefConstant : number //  
		FightDefHeroStarConstant : number //  
		FightDefHeroLevelConstant : number //  
		FightCriticalConstant : number //  
		FightCriticalPointTop : number //  
		FightCriticalCurvature : number //  
		FightCriticalInflection : number //  
		FightBaseThumpDamage : number //  
		FightBaseVertigo : number //  
		FightDamageColor_0 : string[] //  
		FightDamageColor_1 : string[] //  
		FightDamageColor_2 : string[] //  
		FightDamageColor_3 : string[] //  
		FightDamageColor_4 : string[] //  
		TimeScale : string[] //  
		FightRogueRefreshCount : number //  
		CaptainSkill : number //  
		FrontSkill : number //  
		FightReviveCountByAd : number //  
		Deatheffect : number[] //  
		Resurrectioneffect : number //  
		Holding : number //  
		HoldFull : number //  
		BulletBaseTarget : number[] //  
		FinalBuffId : number[] //  
		TapTipsTimes : number[] //  
		ShieldLimit : number //  
		NormalHitBack : number[] //  
		WanDaoLocation : number[] //  
		RogueHeroRankScore : number[] //  
		RogueCaptainScore : number //  
		RogueWarriorScore : number //  
		RogueBookBuildsScore : number[] //  
		RogueBookCoreScore : number //  
		RogueBookSkillScore : number //  
		RogueBookBaseScore : number //  
		RogueBookKeyScore : number //  
		RogueCaptainUpMul : number //  
		RogueSeparatedScore : number[] //  
		FriendMaxCount : number //  
		ApplyFriendMaxCount : number //  
		BlackListMaxCount : number //  
		RecommendMaxCount : number //  
		RecommendTimeLimit : number //  
		RecommendOfflineLimit : number //  
		GiftMaxCount : number //  
		GiftRecvMaxCount : number //  
		GiftGivingMaxCount : number //  
		GiftItemId : number //  
		GiftAmount : number //  
		DailyShopFreeRefreshCount : number //  
		DailyShopFreeRefreshCD : number //  
		DailyShopBuyRefreshCount : number //  
		DailyShopBuyCostDiamonds : number[] //  
		ChatCd : number //  
		RankUpdateInterval : number //  
		DailyRewardId : number //  
		MonthlyPassBothRewardItemIds : number[] //  
		MonthlyPassBothRewardItemNum : number[] //  
		WorldBossStageId : number //  
		WorldBossDailyCount : number //  
		WorldBossDailyBuyCount : number //  
		WorldBossDailyBuyCostDiamonds : number[] //  
		WorldBossShowSkillIds : number[] //  
		DailyChallengeCD : number //  
		DailyChallengeCount : number //  
		DailyChallengeFreeCount : number //  
		ClimbTowerDefeatCount : number //  
		InitialDropFeather : number //  
		AddDropFeather : number //  
		RogueFullBackupOption : number //  
		MailExpireTime : number //  
		MailMaxCount : number //  
		GuideStage : string //  
		GuideStageBuff : number[] //  
		GuideStageFeatherGroup : number //  
		GuideStageRogueGroup : number //  
		LoadingTipsTime : number //  
		CreateGuildCostDiamond : number //  
		GuildChangeNameCost : number //  
		GuildAttrResetCost : number //  
		GuildDailyTaskRewardNeedCount : number[] //  
		GuildGiftPhase : number[] //  
		GuildGiftRefreshWeekday : number[] //  
		GuildRankSyncInterval : number //  
		GuildJoinCd : number //  
		GuildBossStageId : number //  
		GuildBossDailyCount : number //  
		GuildBossDailyBuyCount : number //  
		GuildBossDailyBuyCostDiamonds : number[] //  
		GuildBossShowSkillIds : number[] //  
		FincaFightDefaultScore : number //  
		FincaFightFreeTimes : number //  
		FincaFightBattleSkip : number //  
		PvPRogueTick : number[] //  
		PveStageDifficultyTag : number[] //  
	}
	

	// Combine struct
	export class Table { 
		AchievementTaskTable : AchievementTaskTable[] // table: AchievementTaskTable 
		ActivityCumulativeRechargeTable : ActivityCumulativeRechargeTable[] // table: ActivityCumulativeRechargeTable 
		ActivityHeroGrowTable : ActivityHeroGrowTable[] // table: ActivityHeroGrowTable 
		ActivityNewPlayerTaskScoreTable : ActivityNewPlayerTaskScoreTable[] // table: ActivityNewPlayerTaskScoreTable 
		ActivityNewPlayerTaskTable : ActivityNewPlayerTaskTable[] // table: ActivityNewPlayerTaskTable 
		ActivityRankTable : ActivityRankTable[] // table: ActivityRankTable 
		ActivityTable : ActivityTable[] // table: ActivityTable 
		AdvertPosTable : AdvertPosTable[] // table: AdvertPosTable 
		AnimationTable : AnimationTable[] // table: AnimationTable 
		BattlePassTable : BattlePassTable[] // table: BattlePassTable 
		BookDictionary : BookDictionary[] // table: BookDictionary 
		BookFragmentTable : BookFragmentTable[] // table: BookFragmentTable 
		BookLevelTable : BookLevelTable[] // table: BookLevelTable 
		BookSeriesTable : BookSeriesTable[] // table: BookSeriesTable 
		BookSlotTable : BookSlotTable[] // table: BookSlotTable 
		BookStarTable : BookStarTable[] // table: BookStarTable 
		BookTable : BookTable[] // table: BookTable 
		BoundTable : BoundTable[] // table: BoundTable 
		BreakEggTable : BreakEggTable[] // table: BreakEggTable 
		BuffTable : BuffTable[] // table: BuffTable 
		BulletTable : BulletTable[] // table: BulletTable 
		BuyDiamondsTable : BuyDiamondsTable[] // table: BuyDiamondsTable 
		BuyGoldTable : BuyGoldTable[] // table: BuyGoldTable 
		BuyStaminaTable : BuyStaminaTable[] // table: BuyStaminaTable 
		ChallengeButtonTable : ChallengeButtonTable[] // table: ChallengeButtonTable 
		ChannelTable : ChannelTable[] // table: ChannelTable 
		ChapterFristRewardTable : ChapterFristRewardTable[] // table: ChapterFristRewardTable 
		ChatBreviaryTable : ChatBreviaryTable[] // table: ChatBreviaryTable 
		ChoiceBoxTable : ChoiceBoxTable[] // table: ChoiceBoxTable 
		ClimbTowerTable : ClimbTowerTable[] // table: ClimbTowerTable 
		Comic : Comic[] // table: Comic 
		DailyChallengeBuffTable : DailyChallengeBuffTable[] // table: DailyChallengeBuffTable 
		DailyChallengeLevelTable : DailyChallengeLevelTable[] // table: DailyChallengeLevelTable 
		DailyRewardItemTable : DailyRewardItemTable[] // table: DailyRewardItemTable 
		DailyRewardTable : DailyRewardTable[] // table: DailyRewardTable 
		DailyShopItemTable : DailyShopItemTable[] // table: DailyShopItemTable 
		DailyShopTable : DailyShopTable[] // table: DailyShopTable 
		DropTable : DropTable[] // table: DropTable 
		EffectTable : EffectTable[] // table: EffectTable 
		ElixirTable : ElixirTable[] // table: ElixirTable 
		EquipAttrGroupTable : EquipAttrGroupTable[] // table: EquipAttrGroupTable 
		EquipAttrTable : EquipAttrTable[] // table: EquipAttrTable 
		EquipSkillTable : EquipSkillTable[] // table: EquipSkillTable 
		EquipTable : EquipTable[] // table: EquipTable 
		EquipUpgradeTable : EquipUpgradeTable[] // table: EquipUpgradeTable 
		FeatherEggDrop : FeatherEggDrop[] // table: FeatherEggDrop 
		FincaFightTeam : FincaFightTeam[] // table: FincaFightTeam 
		FirstRechargeTable : FirstRechargeTable[] // table: FirstRechargeTable 
		GachaTable : GachaTable[] // table: GachaTable 
		GachaUpTable : GachaUpTable[] // table: GachaUpTable 
		GeneLevelTable : GeneLevelTable[] // table: GeneLevelTable 
		GuideDialogueTable : GuideDialogueTable[] // table: GuideDialogueTable 
		GuideTable : GuideTable[] // table: GuideTable 
		GuildAttrTable : GuildAttrTable[] // table: GuildAttrTable 
		GuildBossPointTable : GuildBossPointTable[] // table: GuildBossPointTable 
		GuildFlagTable : GuildFlagTable[] // table: GuildFlagTable 
		GuildGiftTable : GuildGiftTable[] // table: GuildGiftTable 
		GuildLevelTable : GuildLevelTable[] // table: GuildLevelTable 
		GuildOpenFunctionTable : GuildOpenFunctionTable[] // table: GuildOpenFunctionTable 
		GuildPositionTable : GuildPositionTable[] // table: GuildPositionTable 
		GuildSignInTable : GuildSignInTable[] // table: GuildSignInTable 
		HeadFramTable : HeadFramTable[] // table: HeadFramTable 
		HeadTable : HeadTable[] // table: HeadTable 
		HeroAlbumTable : HeroAlbumTable[] // table: HeroAlbumTable 
		HeroAptitudeTable : HeroAptitudeTable[] // table: HeroAptitudeTable 
		HeroAttrClientTable : HeroAttrClientTable[] // table: HeroAttrClientTable 
		HeroAttrTable : HeroAttrTable[] // table: HeroAttrTable 
		HeroClassTable : HeroClassTable[] // table: HeroClassTable 
		HeroCollectionTable : HeroCollectionTable[] // table: HeroCollectionTable 
		HeroCommonCostTable : HeroCommonCostTable[] // table: HeroCommonCostTable 
		HeroLevelResonanceTable : HeroLevelResonanceTable[] // table: HeroLevelResonanceTable 
		HeroLevelUpTable : HeroLevelUpTable[] // table: HeroLevelUpTable 
		HeroMasterTable : HeroMasterTable[] // table: HeroMasterTable 
		HeroPowerScore : HeroPowerScore[] // table: HeroPowerScore 
		HeroStarResonanceTable : HeroStarResonanceTable[] // table: HeroStarResonanceTable 
		HeroStarStepTable : HeroStarStepTable[] // table: HeroStarStepTable 
		HeroStarUpTable : HeroStarUpTable[] // table: HeroStarUpTable 
		HeroTable : HeroTable[] // table: HeroTable 
		ItemClientJumpTable : ItemClientJumpTable[] // table: ItemClientJumpTable 
		ItemQualityTable : ItemQualityTable[] // table: ItemQualityTable 
		ItemStarClientTable : ItemStarClientTable[] // table: ItemStarClientTable 
		ItemTable : ItemTable[] // table: ItemTable 
		LimitTimeItemTable : LimitTimeItemTable[] // table: LimitTimeItemTable 
		MainChapterGiftTable : MainChapterGiftTable[] // table: MainChapterGiftTable 
		MainChapterTable : MainChapterTable[] // table: MainChapterTable 
		MallItemTabe : MallItemTabe[] // table: MallItemTabe 
		MallTable : MallTable[] // table: MallTable 
		MapBlock : MapBlock[] // table: MapBlock 
		ModuleTable : ModuleTable[] // table: ModuleTable 
		MonsterTable : MonsterTable[] // table: MonsterTable 
		MonthlyPassTable : MonthlyPassTable[] // table: MonthlyPassTable 
		NewPlayerDailyGiftTable : NewPlayerDailyGiftTable[] // table: NewPlayerDailyGiftTable 
		NoticeTable : NoticeTable[] // table: NoticeTable 
		OpenFunctionTable : OpenFunctionTable[] // table: OpenFunctionTable 
		PRBTable : PRBTable[] // table: PRBTable 
		PatrolTable : PatrolTable[] // table: PatrolTable 
		PlayerLvTable : PlayerLvTable[] // table: PlayerLvTable 
		PopWindowMechanism : PopWindowMechanism[] // table: PopWindowMechanism 
		PvPStagePositionTable : PvPStagePositionTable[] // table: PvPStagePositionTable 
		PvPStageTable : PvPStageTable[] // table: PvPStageTable 
		PveAddFeatherDropTable : PveAddFeatherDropTable[] // table: PveAddFeatherDropTable 
		PveClearStageTable : PveClearStageTable[] // table: PveClearStageTable 
		PveStageBuffTable : PveStageBuffTable[] // table: PveStageBuffTable 
		PveStageDropTable : PveStageDropTable[] // table: PveStageDropTable 
		PveStageTable : PveStageTable[] // table: PveStageTable 
		PveSweepTable : PveSweepTable[] // table: PveSweepTable 
		PveTimeDropTable : PveTimeDropTable[] // table: PveTimeDropTable 
		QuestLogTable : QuestLogTable[] // table: QuestLogTable 
		RandomNameTable : RandomNameTable[] // table: RandomNameTable 
		RankCycleRewardTable : RankCycleRewardTable[] // table: RankCycleRewardTable 
		RankRewardTable : RankRewardTable[] // table: RankRewardTable 
		RechargeTable : RechargeTable[] // table: RechargeTable 
		RecommendTeamTable : RecommendTeamTable[] // table: RecommendTeamTable 
		RobotTable : RobotTable[] // table: RobotTable 
		RogueGroupTable : RogueGroupTable[] // table: RogueGroupTable 
		RogueTable : RogueTable[] // table: RogueTable 
		ScrollPaintingTable : ScrollPaintingTable[] // table: ScrollPaintingTable 
		ServerlistTable : ServerlistTable[] // table: ServerlistTable 
		SignInGiftTable : SignInGiftTable[] // table: SignInGiftTable 
		SkillGroupTable : SkillGroupTable[] // table: SkillGroupTable 
		SkillPowerTable : SkillPowerTable[] // table: SkillPowerTable 
		SkillSummonTable : SkillSummonTable[] // table: SkillSummonTable 
		SkillTable : SkillTable[] // table: SkillTable 
		SoundTable : SoundTable[] // table: SoundTable 
		TaskTable : TaskTable[] // table: TaskTable 
		TipsTable : TipsTable[] // table: TipsTable 
		TriggerTable : TriggerTable[] // table: TriggerTable 
		VipBonusTable : VipBonusTable[] // table: VipBonusTable 
		VipTable : VipTable[] // table: VipTable 
		VirtualItem : VirtualItem[] // table: VirtualItem 
		VoidStageTable : VoidStageTable[] // table: VoidStageTable 
		WeeklyTaskBoxTable : WeeklyTaskBoxTable[] // table: WeeklyTaskBoxTable 
		WorldBossDamTable : WorldBossDamTable[] // table: WorldBossDamTable 
		WorldBossRewardTable : WorldBossRewardTable[] // table: WorldBossRewardTable 
		ConfigTable : ConfigTable[] // table: ConfigTable 

		// Indices 
		AchievementTaskTableById : Dictionary<number, AchievementTaskTable> // table: AchievementTaskTable 
		ActivityCumulativeRechargeTableByIndexId : Dictionary<number, ActivityCumulativeRechargeTable> // table: ActivityCumulativeRechargeTable 
		ActivityHeroGrowTableById : Dictionary<number, ActivityHeroGrowTable> // table: ActivityHeroGrowTable 
		ActivityNewPlayerTaskScoreTableById : Dictionary<number, ActivityNewPlayerTaskScoreTable> // table: ActivityNewPlayerTaskScoreTable 
		ActivityNewPlayerTaskTableById : Dictionary<number, ActivityNewPlayerTaskTable> // table: ActivityNewPlayerTaskTable 
		ActivityRankTableById : Dictionary<number, ActivityRankTable> // table: ActivityRankTable 
		ActivityTableByActivityId : Dictionary<number, ActivityTable> // table: ActivityTable 
		AdvertPosTableByAdType : Dictionary<AdType, AdvertPosTable> // table: AdvertPosTable 
		AnimationTableById : Dictionary<number, AnimationTable> // table: AnimationTable 
		BattlePassTableById : Dictionary<number, BattlePassTable> // table: BattlePassTable 
		BookDictionaryByPhaseOneBook : Dictionary<number, BookDictionary> // table: BookDictionary 
		BookFragmentTableById : Dictionary<number, BookFragmentTable> // table: BookFragmentTable 
		BookLevelTableById : Dictionary<number, BookLevelTable> // table: BookLevelTable 
		BookSeriesTableById : Dictionary<number, BookSeriesTable> // table: BookSeriesTable 
		BookSlotTableById : Dictionary<number, BookSlotTable> // table: BookSlotTable 
		BookStarTableById : Dictionary<number, BookStarTable> // table: BookStarTable 
		BookTableById : Dictionary<number, BookTable> // table: BookTable 
		BoundTableById : Dictionary<number, BoundTable> // table: BoundTable 
		BreakEggTableById : Dictionary<number, BreakEggTable> // table: BreakEggTable 
		BuffTableById : Dictionary<number, BuffTable> // table: BuffTable 
		BulletTableById : Dictionary<number, BulletTable> // table: BulletTable 
		BuyDiamondsTableByGoodsId : Dictionary<number, BuyDiamondsTable> // table: BuyDiamondsTable 
		BuyGoldTableByType : Dictionary<BuyGoldType, BuyGoldTable> // table: BuyGoldTable 
		BuyStaminaTableByType : Dictionary<BuyStaminaType, BuyStaminaTable> // table: BuyStaminaTable 
		ChallengeButtonTableById : Dictionary<number, ChallengeButtonTable> // table: ChallengeButtonTable 
		ChannelTableByChannelType : Dictionary<ChannelType, ChannelTable> // table: ChannelTable 
		ChapterFristRewardTableById : Dictionary<number, ChapterFristRewardTable> // table: ChapterFristRewardTable 
		ChatBreviaryTableByType : Dictionary<ChatBreviaryType, ChatBreviaryTable> // table: ChatBreviaryTable 
		ChoiceBoxTableByChoiceBoxId : Dictionary<number, ChoiceBoxTable> // table: ChoiceBoxTable 
		ClimbTowerTableByStageId : Dictionary<number, ClimbTowerTable> // table: ClimbTowerTable 
		ComicByComicID : Dictionary<number, Comic> // table: Comic 
		DailyChallengeBuffTableById : Dictionary<number, DailyChallengeBuffTable> // table: DailyChallengeBuffTable 
		DailyChallengeLevelTableByLevel : Dictionary<number, DailyChallengeLevelTable> // table: DailyChallengeLevelTable 
		DailyRewardTableById : Dictionary<number, DailyRewardTable> // table: DailyRewardTable 
		DailyShopItemTableById : Dictionary<number, DailyShopItemTable> // table: DailyShopItemTable 
		DailyShopTableByShopId : Dictionary<number, DailyShopTable> // table: DailyShopTable 
		DropTableById : Dictionary<number, DropTable> // table: DropTable 
		EffectTableById : Dictionary<number, EffectTable> // table: EffectTable 
		ElixirTableById : Dictionary<number, ElixirTable> // table: ElixirTable 
		EquipAttrGroupTableById : Dictionary<string, EquipAttrGroupTable> // table: EquipAttrGroupTable 
		EquipAttrTableById : Dictionary<number, EquipAttrTable> // table: EquipAttrTable 
		EquipSkillTableById : Dictionary<number, EquipSkillTable> // table: EquipSkillTable 
		EquipTableById : Dictionary<number, EquipTable> // table: EquipTable 
		EquipUpgradeTableById : Dictionary<number, EquipUpgradeTable> // table: EquipUpgradeTable 
		FeatherEggDropById : Dictionary<number, FeatherEggDrop> // table: FeatherEggDrop 
		FincaFightTeamByLevel : Dictionary<number, FincaFightTeam> // table: FincaFightTeam 
		FirstRechargeTableById : Dictionary<number, FirstRechargeTable> // table: FirstRechargeTable 
		GachaTableById : Dictionary<number, GachaTable> // table: GachaTable 
		GachaUpTableById : Dictionary<number, GachaUpTable> // table: GachaUpTable 
		GeneLevelTableById : Dictionary<number, GeneLevelTable> // table: GeneLevelTable 
		GuideDialogueTableById : Dictionary<string, GuideDialogueTable> // table: GuideDialogueTable 
		GuideTableById : Dictionary<number, GuideTable> // table: GuideTable 
		GuildAttrTableById : Dictionary<number, GuildAttrTable> // table: GuildAttrTable 
		GuildBossPointTableById : Dictionary<number, GuildBossPointTable> // table: GuildBossPointTable 
		GuildFlagTableById : Dictionary<number, GuildFlagTable> // table: GuildFlagTable 
		GuildGiftTableById : Dictionary<number, GuildGiftTable> // table: GuildGiftTable 
		GuildLevelTableById : Dictionary<number, GuildLevelTable> // table: GuildLevelTable 
		GuildOpenFunctionTableByName : Dictionary<GuildOFName, GuildOpenFunctionTable> // table: GuildOpenFunctionTable 
		GuildPositionTableByPosition : Dictionary<GuildPosition, GuildPositionTable> // table: GuildPositionTable 
		GuildSignInTableById : Dictionary<number, GuildSignInTable> // table: GuildSignInTable 
		HeadFramTableById : Dictionary<number, HeadFramTable> // table: HeadFramTable 
		HeadTableById : Dictionary<number, HeadTable> // table: HeadTable 
		HeroAlbumTableByHeroAptitude : Dictionary<HeroAptitude, HeroAlbumTable> // table: HeroAlbumTable 
		HeroAptitudeTableByHeroAptitude : Dictionary<HeroAptitude, HeroAptitudeTable> // table: HeroAptitudeTable 
		HeroAttrClientTableByType : Dictionary<AttrType, HeroAttrClientTable> // table: HeroAttrClientTable 
		HeroAttrTableById : Dictionary<number, HeroAttrTable> // table: HeroAttrTable 
		HeroClassTableByHeroClass : Dictionary<HeroClass, HeroClassTable> // table: HeroClassTable 
		HeroCollectionTableById : Dictionary<number, HeroCollectionTable> // table: HeroCollectionTable 
		HeroCommonCostTableById : Dictionary<number, HeroCommonCostTable> // table: HeroCommonCostTable 
		HeroLevelResonanceTableById : Dictionary<number, HeroLevelResonanceTable> // table: HeroLevelResonanceTable 
		HeroLevelUpTableByLevel : Dictionary<number, HeroLevelUpTable> // table: HeroLevelUpTable 
		HeroMasterTableById : Dictionary<number, HeroMasterTable> // table: HeroMasterTable 
		HeroPowerScoreById : Dictionary<number, HeroPowerScore> // table: HeroPowerScore 
		HeroStarResonanceTableById : Dictionary<number, HeroStarResonanceTable> // table: HeroStarResonanceTable 
		HeroStarStepTableById : Dictionary<number, HeroStarStepTable> // table: HeroStarStepTable 
		HeroStarUpTableById : Dictionary<number, HeroStarUpTable> // table: HeroStarUpTable 
		HeroTableById : Dictionary<number, HeroTable> // table: HeroTable 
		ItemClientJumpTableByItemId : Dictionary<number, ItemClientJumpTable> // table: ItemClientJumpTable 
		ItemQualityTableByQuality : Dictionary<ItemQuality, ItemQualityTable> // table: ItemQualityTable 
		ItemStarClientTableById : Dictionary<number, ItemStarClientTable> // table: ItemStarClientTable 
		ItemTableById : Dictionary<number, ItemTable> // table: ItemTable 
		LimitTimeItemTableByItemId : Dictionary<number, LimitTimeItemTable> // table: LimitTimeItemTable 
		MainChapterGiftTableByMallId : Dictionary<number, MainChapterGiftTable> // table: MainChapterGiftTable 
		MainChapterTableById : Dictionary<number, MainChapterTable> // table: MainChapterTable 
		MallItemTabeById : Dictionary<number, MallItemTabe> // table: MallItemTabe 
		MallTableByMallId : Dictionary<number, MallTable> // table: MallTable 
		MapBlockById : Dictionary<number, MapBlock> // table: MapBlock 
		ModuleTableByModuleType : Dictionary<Module, ModuleTable> // table: ModuleTable 
		MonsterTableById : Dictionary<number, MonsterTable> // table: MonsterTable 
		MonthlyPassTableByType : Dictionary<PrivilegedType, MonthlyPassTable> // table: MonthlyPassTable 
		NewPlayerDailyGiftTableById : Dictionary<number, NewPlayerDailyGiftTable> // table: NewPlayerDailyGiftTable 
		NoticeTableById : Dictionary<number, NoticeTable> // table: NoticeTable 
		OpenFunctionTableByName : Dictionary<OpenFunctionName, OpenFunctionTable> // table: OpenFunctionTable 
		PRBTableById : Dictionary<number, PRBTable> // table: PRBTable 
		PatrolTableByPveStageId : Dictionary<number, PatrolTable> // table: PatrolTable 
		PlayerLvTableByPlayerLv : Dictionary<number, PlayerLvTable> // table: PlayerLvTable 
		PopWindowMechanismByID : Dictionary<number, PopWindowMechanism> // table: PopWindowMechanism 
		PvPStageTableByID : Dictionary<number, PvPStageTable> // table: PvPStageTable 
		PveAddFeatherDropTableByCount : Dictionary<number, PveAddFeatherDropTable> // table: PveAddFeatherDropTable 
		PveClearStageTableByStageId : Dictionary<number, PveClearStageTable> // table: PveClearStageTable 
		PveStageBuffTableById : Dictionary<number, PveStageBuffTable> // table: PveStageBuffTable 
		PveStageDropTableByDropId : Dictionary<number, PveStageDropTable> // table: PveStageDropTable 
		PveStageTableByStageId : Dictionary<number, PveStageTable> // table: PveStageTable 
		PveSweepTableByStageId : Dictionary<number, PveSweepTable> // table: PveSweepTable 
		PveTimeDropTableByStageId : Dictionary<number, PveTimeDropTable> // table: PveTimeDropTable 
		QuestLogTableByLevel : Dictionary<number, QuestLogTable> // table: QuestLogTable 
		RandomNameTableById : Dictionary<number, RandomNameTable> // table: RandomNameTable 
		RankCycleRewardTableByIndexId : Dictionary<number, RankCycleRewardTable> // table: RankCycleRewardTable 
		RankRewardTableById : Dictionary<number, RankRewardTable> // table: RankRewardTable 
		RechargeTableById : Dictionary<number, RechargeTable> // table: RechargeTable 
		RecommendTeamTableById : Dictionary<number, RecommendTeamTable> // table: RecommendTeamTable 
		RobotTableById : Dictionary<number, RobotTable> // table: RobotTable 
		RogueGroupTableById : Dictionary<number, RogueGroupTable> // table: RogueGroupTable 
		RogueTableById : Dictionary<number, RogueTable> // table: RogueTable 
		ScrollPaintingTableById : Dictionary<number, ScrollPaintingTable> // table: ScrollPaintingTable 
		ServerlistTableByID : Dictionary<number, ServerlistTable> // table: ServerlistTable 
		SignInGiftTableByDay : Dictionary<number, SignInGiftTable> // table: SignInGiftTable 
		SkillGroupTableById : Dictionary<number, SkillGroupTable> // table: SkillGroupTable 
		SkillPowerTableById : Dictionary<number, SkillPowerTable> // table: SkillPowerTable 
		SkillSummonTableBySummonId : Dictionary<number, SkillSummonTable> // table: SkillSummonTable 
		SkillTableById : Dictionary<number, SkillTable> // table: SkillTable 
		SoundTableById : Dictionary<number, SoundTable> // table: SoundTable 
		TaskTableById : Dictionary<number, TaskTable> // table: TaskTable 
		TipsTableById : Dictionary<number, TipsTable> // table: TipsTable 
		TriggerTableById : Dictionary<number, TriggerTable> // table: TriggerTable 
		VipBonusTableByIndexId : Dictionary<number, VipBonusTable> // table: VipBonusTable 
		VipTableByVipLv : Dictionary<number, VipTable> // table: VipTable 
		VirtualItemByVirtualItemId : Dictionary<number, VirtualItem> // table: VirtualItem 
		VoidStageTableById : Dictionary<number, VoidStageTable> // table: VoidStageTable 
		WeeklyTaskBoxTableById : Dictionary<number, WeeklyTaskBoxTable> // table: WeeklyTaskBoxTable 
		WorldBossDamTableById : Dictionary<number, WorldBossDamTable> // table: WorldBossDamTable 
		WorldBossRewardTableById : Dictionary<number, WorldBossRewardTable> // table: WorldBossRewardTable 

		
		// table: ConfigTable
		GetKeyValue_ConfigTable(): ConfigTable{
			return this.ConfigTable[0]
		}
		

		//根据json创建Table
		static FromJSON(json: Object|string): Table {
			let result: Table;
            if (typeof json === 'string') {
                // if it's a string, parse it first
                result= JSON.parse(json, Table.reviver);
            } else {
                // create an instance of the Table class
                let tbl = new Table()
                // copy all the fields from the json object
                result = Object.assign(tbl, json);
            }
			result.BuildData();
			return result;
		}

        static reviver(key: string, value: any): any {
            return key === "" ? Table.FromJSON(value) : value;
        }

		// 清除索引和数据
		ResetData() {
			
			this.AchievementTaskTable = [] 
			this.ActivityCumulativeRechargeTable = [] 
			this.ActivityHeroGrowTable = [] 
			this.ActivityNewPlayerTaskScoreTable = [] 
			this.ActivityNewPlayerTaskTable = [] 
			this.ActivityRankTable = [] 
			this.ActivityTable = [] 
			this.AdvertPosTable = [] 
			this.AnimationTable = [] 
			this.BattlePassTable = [] 
			this.BookDictionary = [] 
			this.BookFragmentTable = [] 
			this.BookLevelTable = [] 
			this.BookSeriesTable = [] 
			this.BookSlotTable = [] 
			this.BookStarTable = [] 
			this.BookTable = [] 
			this.BoundTable = [] 
			this.BreakEggTable = [] 
			this.BuffTable = [] 
			this.BulletTable = [] 
			this.BuyDiamondsTable = [] 
			this.BuyGoldTable = [] 
			this.BuyStaminaTable = [] 
			this.ChallengeButtonTable = [] 
			this.ChannelTable = [] 
			this.ChapterFristRewardTable = [] 
			this.ChatBreviaryTable = [] 
			this.ChoiceBoxTable = [] 
			this.ClimbTowerTable = [] 
			this.Comic = [] 
			this.DailyChallengeBuffTable = [] 
			this.DailyChallengeLevelTable = [] 
			this.DailyRewardItemTable = [] 
			this.DailyRewardTable = [] 
			this.DailyShopItemTable = [] 
			this.DailyShopTable = [] 
			this.DropTable = [] 
			this.EffectTable = [] 
			this.ElixirTable = [] 
			this.EquipAttrGroupTable = [] 
			this.EquipAttrTable = [] 
			this.EquipSkillTable = [] 
			this.EquipTable = [] 
			this.EquipUpgradeTable = [] 
			this.FeatherEggDrop = [] 
			this.FincaFightTeam = [] 
			this.FirstRechargeTable = [] 
			this.GachaTable = [] 
			this.GachaUpTable = [] 
			this.GeneLevelTable = [] 
			this.GuideDialogueTable = [] 
			this.GuideTable = [] 
			this.GuildAttrTable = [] 
			this.GuildBossPointTable = [] 
			this.GuildFlagTable = [] 
			this.GuildGiftTable = [] 
			this.GuildLevelTable = [] 
			this.GuildOpenFunctionTable = [] 
			this.GuildPositionTable = [] 
			this.GuildSignInTable = [] 
			this.HeadFramTable = [] 
			this.HeadTable = [] 
			this.HeroAlbumTable = [] 
			this.HeroAptitudeTable = [] 
			this.HeroAttrClientTable = [] 
			this.HeroAttrTable = [] 
			this.HeroClassTable = [] 
			this.HeroCollectionTable = [] 
			this.HeroCommonCostTable = [] 
			this.HeroLevelResonanceTable = [] 
			this.HeroLevelUpTable = [] 
			this.HeroMasterTable = [] 
			this.HeroPowerScore = [] 
			this.HeroStarResonanceTable = [] 
			this.HeroStarStepTable = [] 
			this.HeroStarUpTable = [] 
			this.HeroTable = [] 
			this.ItemClientJumpTable = [] 
			this.ItemQualityTable = [] 
			this.ItemStarClientTable = [] 
			this.ItemTable = [] 
			this.LimitTimeItemTable = [] 
			this.MainChapterGiftTable = [] 
			this.MainChapterTable = [] 
			this.MallItemTabe = [] 
			this.MallTable = [] 
			this.MapBlock = [] 
			this.ModuleTable = [] 
			this.MonsterTable = [] 
			this.MonthlyPassTable = [] 
			this.NewPlayerDailyGiftTable = [] 
			this.NoticeTable = [] 
			this.OpenFunctionTable = [] 
			this.PRBTable = [] 
			this.PatrolTable = [] 
			this.PlayerLvTable = [] 
			this.PopWindowMechanism = [] 
			this.PvPStagePositionTable = [] 
			this.PvPStageTable = [] 
			this.PveAddFeatherDropTable = [] 
			this.PveClearStageTable = [] 
			this.PveStageBuffTable = [] 
			this.PveStageDropTable = [] 
			this.PveStageTable = [] 
			this.PveSweepTable = [] 
			this.PveTimeDropTable = [] 
			this.QuestLogTable = [] 
			this.RandomNameTable = [] 
			this.RankCycleRewardTable = [] 
			this.RankRewardTable = [] 
			this.RechargeTable = [] 
			this.RecommendTeamTable = [] 
			this.RobotTable = [] 
			this.RogueGroupTable = [] 
			this.RogueTable = [] 
			this.ScrollPaintingTable = [] 
			this.ServerlistTable = [] 
			this.SignInGiftTable = [] 
			this.SkillGroupTable = [] 
			this.SkillPowerTable = [] 
			this.SkillSummonTable = [] 
			this.SkillTable = [] 
			this.SoundTable = [] 
			this.TaskTable = [] 
			this.TipsTable = [] 
			this.TriggerTable = [] 
			this.VipBonusTable = [] 
			this.VipTable = [] 
			this.VirtualItem = [] 
			this.VoidStageTable = [] 
			this.WeeklyTaskBoxTable = [] 
			this.WorldBossDamTable = [] 
			this.WorldBossRewardTable = [] 
			this.ConfigTable = [] 
			
			this.AchievementTaskTableById = new Dictionary<number, AchievementTaskTable>() 
			this.ActivityCumulativeRechargeTableByIndexId = new Dictionary<number, ActivityCumulativeRechargeTable>() 
			this.ActivityHeroGrowTableById = new Dictionary<number, ActivityHeroGrowTable>() 
			this.ActivityNewPlayerTaskScoreTableById = new Dictionary<number, ActivityNewPlayerTaskScoreTable>() 
			this.ActivityNewPlayerTaskTableById = new Dictionary<number, ActivityNewPlayerTaskTable>() 
			this.ActivityRankTableById = new Dictionary<number, ActivityRankTable>() 
			this.ActivityTableByActivityId = new Dictionary<number, ActivityTable>() 
			this.AdvertPosTableByAdType = new Dictionary<AdType, AdvertPosTable>() 
			this.AnimationTableById = new Dictionary<number, AnimationTable>() 
			this.BattlePassTableById = new Dictionary<number, BattlePassTable>() 
			this.BookDictionaryByPhaseOneBook = new Dictionary<number, BookDictionary>() 
			this.BookFragmentTableById = new Dictionary<number, BookFragmentTable>() 
			this.BookLevelTableById = new Dictionary<number, BookLevelTable>() 
			this.BookSeriesTableById = new Dictionary<number, BookSeriesTable>() 
			this.BookSlotTableById = new Dictionary<number, BookSlotTable>() 
			this.BookStarTableById = new Dictionary<number, BookStarTable>() 
			this.BookTableById = new Dictionary<number, BookTable>() 
			this.BoundTableById = new Dictionary<number, BoundTable>() 
			this.BreakEggTableById = new Dictionary<number, BreakEggTable>() 
			this.BuffTableById = new Dictionary<number, BuffTable>() 
			this.BulletTableById = new Dictionary<number, BulletTable>() 
			this.BuyDiamondsTableByGoodsId = new Dictionary<number, BuyDiamondsTable>() 
			this.BuyGoldTableByType = new Dictionary<BuyGoldType, BuyGoldTable>() 
			this.BuyStaminaTableByType = new Dictionary<BuyStaminaType, BuyStaminaTable>() 
			this.ChallengeButtonTableById = new Dictionary<number, ChallengeButtonTable>() 
			this.ChannelTableByChannelType = new Dictionary<ChannelType, ChannelTable>() 
			this.ChapterFristRewardTableById = new Dictionary<number, ChapterFristRewardTable>() 
			this.ChatBreviaryTableByType = new Dictionary<ChatBreviaryType, ChatBreviaryTable>() 
			this.ChoiceBoxTableByChoiceBoxId = new Dictionary<number, ChoiceBoxTable>() 
			this.ClimbTowerTableByStageId = new Dictionary<number, ClimbTowerTable>() 
			this.ComicByComicID = new Dictionary<number, Comic>() 
			this.DailyChallengeBuffTableById = new Dictionary<number, DailyChallengeBuffTable>() 
			this.DailyChallengeLevelTableByLevel = new Dictionary<number, DailyChallengeLevelTable>() 
			this.DailyRewardTableById = new Dictionary<number, DailyRewardTable>() 
			this.DailyShopItemTableById = new Dictionary<number, DailyShopItemTable>() 
			this.DailyShopTableByShopId = new Dictionary<number, DailyShopTable>() 
			this.DropTableById = new Dictionary<number, DropTable>() 
			this.EffectTableById = new Dictionary<number, EffectTable>() 
			this.ElixirTableById = new Dictionary<number, ElixirTable>() 
			this.EquipAttrGroupTableById = new Dictionary<string, EquipAttrGroupTable>() 
			this.EquipAttrTableById = new Dictionary<number, EquipAttrTable>() 
			this.EquipSkillTableById = new Dictionary<number, EquipSkillTable>() 
			this.EquipTableById = new Dictionary<number, EquipTable>() 
			this.EquipUpgradeTableById = new Dictionary<number, EquipUpgradeTable>() 
			this.FeatherEggDropById = new Dictionary<number, FeatherEggDrop>() 
			this.FincaFightTeamByLevel = new Dictionary<number, FincaFightTeam>() 
			this.FirstRechargeTableById = new Dictionary<number, FirstRechargeTable>() 
			this.GachaTableById = new Dictionary<number, GachaTable>() 
			this.GachaUpTableById = new Dictionary<number, GachaUpTable>() 
			this.GeneLevelTableById = new Dictionary<number, GeneLevelTable>() 
			this.GuideDialogueTableById = new Dictionary<string, GuideDialogueTable>() 
			this.GuideTableById = new Dictionary<number, GuideTable>() 
			this.GuildAttrTableById = new Dictionary<number, GuildAttrTable>() 
			this.GuildBossPointTableById = new Dictionary<number, GuildBossPointTable>() 
			this.GuildFlagTableById = new Dictionary<number, GuildFlagTable>() 
			this.GuildGiftTableById = new Dictionary<number, GuildGiftTable>() 
			this.GuildLevelTableById = new Dictionary<number, GuildLevelTable>() 
			this.GuildOpenFunctionTableByName = new Dictionary<GuildOFName, GuildOpenFunctionTable>() 
			this.GuildPositionTableByPosition = new Dictionary<GuildPosition, GuildPositionTable>() 
			this.GuildSignInTableById = new Dictionary<number, GuildSignInTable>() 
			this.HeadFramTableById = new Dictionary<number, HeadFramTable>() 
			this.HeadTableById = new Dictionary<number, HeadTable>() 
			this.HeroAlbumTableByHeroAptitude = new Dictionary<HeroAptitude, HeroAlbumTable>() 
			this.HeroAptitudeTableByHeroAptitude = new Dictionary<HeroAptitude, HeroAptitudeTable>() 
			this.HeroAttrClientTableByType = new Dictionary<AttrType, HeroAttrClientTable>() 
			this.HeroAttrTableById = new Dictionary<number, HeroAttrTable>() 
			this.HeroClassTableByHeroClass = new Dictionary<HeroClass, HeroClassTable>() 
			this.HeroCollectionTableById = new Dictionary<number, HeroCollectionTable>() 
			this.HeroCommonCostTableById = new Dictionary<number, HeroCommonCostTable>() 
			this.HeroLevelResonanceTableById = new Dictionary<number, HeroLevelResonanceTable>() 
			this.HeroLevelUpTableByLevel = new Dictionary<number, HeroLevelUpTable>() 
			this.HeroMasterTableById = new Dictionary<number, HeroMasterTable>() 
			this.HeroPowerScoreById = new Dictionary<number, HeroPowerScore>() 
			this.HeroStarResonanceTableById = new Dictionary<number, HeroStarResonanceTable>() 
			this.HeroStarStepTableById = new Dictionary<number, HeroStarStepTable>() 
			this.HeroStarUpTableById = new Dictionary<number, HeroStarUpTable>() 
			this.HeroTableById = new Dictionary<number, HeroTable>() 
			this.ItemClientJumpTableByItemId = new Dictionary<number, ItemClientJumpTable>() 
			this.ItemQualityTableByQuality = new Dictionary<ItemQuality, ItemQualityTable>() 
			this.ItemStarClientTableById = new Dictionary<number, ItemStarClientTable>() 
			this.ItemTableById = new Dictionary<number, ItemTable>() 
			this.LimitTimeItemTableByItemId = new Dictionary<number, LimitTimeItemTable>() 
			this.MainChapterGiftTableByMallId = new Dictionary<number, MainChapterGiftTable>() 
			this.MainChapterTableById = new Dictionary<number, MainChapterTable>() 
			this.MallItemTabeById = new Dictionary<number, MallItemTabe>() 
			this.MallTableByMallId = new Dictionary<number, MallTable>() 
			this.MapBlockById = new Dictionary<number, MapBlock>() 
			this.ModuleTableByModuleType = new Dictionary<Module, ModuleTable>() 
			this.MonsterTableById = new Dictionary<number, MonsterTable>() 
			this.MonthlyPassTableByType = new Dictionary<PrivilegedType, MonthlyPassTable>() 
			this.NewPlayerDailyGiftTableById = new Dictionary<number, NewPlayerDailyGiftTable>() 
			this.NoticeTableById = new Dictionary<number, NoticeTable>() 
			this.OpenFunctionTableByName = new Dictionary<OpenFunctionName, OpenFunctionTable>() 
			this.PRBTableById = new Dictionary<number, PRBTable>() 
			this.PatrolTableByPveStageId = new Dictionary<number, PatrolTable>() 
			this.PlayerLvTableByPlayerLv = new Dictionary<number, PlayerLvTable>() 
			this.PopWindowMechanismByID = new Dictionary<number, PopWindowMechanism>() 
			this.PvPStageTableByID = new Dictionary<number, PvPStageTable>() 
			this.PveAddFeatherDropTableByCount = new Dictionary<number, PveAddFeatherDropTable>() 
			this.PveClearStageTableByStageId = new Dictionary<number, PveClearStageTable>() 
			this.PveStageBuffTableById = new Dictionary<number, PveStageBuffTable>() 
			this.PveStageDropTableByDropId = new Dictionary<number, PveStageDropTable>() 
			this.PveStageTableByStageId = new Dictionary<number, PveStageTable>() 
			this.PveSweepTableByStageId = new Dictionary<number, PveSweepTable>() 
			this.PveTimeDropTableByStageId = new Dictionary<number, PveTimeDropTable>() 
			this.QuestLogTableByLevel = new Dictionary<number, QuestLogTable>() 
			this.RandomNameTableById = new Dictionary<number, RandomNameTable>() 
			this.RankCycleRewardTableByIndexId = new Dictionary<number, RankCycleRewardTable>() 
			this.RankRewardTableById = new Dictionary<number, RankRewardTable>() 
			this.RechargeTableById = new Dictionary<number, RechargeTable>() 
			this.RecommendTeamTableById = new Dictionary<number, RecommendTeamTable>() 
			this.RobotTableById = new Dictionary<number, RobotTable>() 
			this.RogueGroupTableById = new Dictionary<number, RogueGroupTable>() 
			this.RogueTableById = new Dictionary<number, RogueTable>() 
			this.ScrollPaintingTableById = new Dictionary<number, ScrollPaintingTable>() 
			this.ServerlistTableByID = new Dictionary<number, ServerlistTable>() 
			this.SignInGiftTableByDay = new Dictionary<number, SignInGiftTable>() 
			this.SkillGroupTableById = new Dictionary<number, SkillGroupTable>() 
			this.SkillPowerTableById = new Dictionary<number, SkillPowerTable>() 
			this.SkillSummonTableBySummonId = new Dictionary<number, SkillSummonTable>() 
			this.SkillTableById = new Dictionary<number, SkillTable>() 
			this.SoundTableById = new Dictionary<number, SoundTable>() 
			this.TaskTableById = new Dictionary<number, TaskTable>() 
			this.TipsTableById = new Dictionary<number, TipsTable>() 
			this.TriggerTableById = new Dictionary<number, TriggerTable>() 
			this.VipBonusTableByIndexId = new Dictionary<number, VipBonusTable>() 
			this.VipTableByVipLv = new Dictionary<number, VipTable>() 
			this.VirtualItemByVirtualItemId = new Dictionary<number, VirtualItem>() 
			this.VoidStageTableById = new Dictionary<number, VoidStageTable>() 
			this.WeeklyTaskBoxTableById = new Dictionary<number, WeeklyTaskBoxTable>() 
			this.WorldBossDamTableById = new Dictionary<number, WorldBossDamTable>() 
			this.WorldBossRewardTableById = new Dictionary<number, WorldBossRewardTable>() 
		}

		// 构建索引
		BuildData() {
			
			this.AchievementTaskTableById = new Dictionary<number, AchievementTaskTable>()
			if(this.AchievementTaskTable) {
				for(let v of this.AchievementTaskTable) {
					this.AchievementTaskTableById.setValue(v.Id, v)
				}
			}
			this.ActivityCumulativeRechargeTableByIndexId = new Dictionary<number, ActivityCumulativeRechargeTable>()
			if(this.ActivityCumulativeRechargeTable) {
				for(let v of this.ActivityCumulativeRechargeTable) {
					this.ActivityCumulativeRechargeTableByIndexId.setValue(v.IndexId, v)
				}
			}
			this.ActivityHeroGrowTableById = new Dictionary<number, ActivityHeroGrowTable>()
			if(this.ActivityHeroGrowTable) {
				for(let v of this.ActivityHeroGrowTable) {
					this.ActivityHeroGrowTableById.setValue(v.Id, v)
				}
			}
			this.ActivityNewPlayerTaskScoreTableById = new Dictionary<number, ActivityNewPlayerTaskScoreTable>()
			if(this.ActivityNewPlayerTaskScoreTable) {
				for(let v of this.ActivityNewPlayerTaskScoreTable) {
					this.ActivityNewPlayerTaskScoreTableById.setValue(v.Id, v)
				}
			}
			this.ActivityNewPlayerTaskTableById = new Dictionary<number, ActivityNewPlayerTaskTable>()
			if(this.ActivityNewPlayerTaskTable) {
				for(let v of this.ActivityNewPlayerTaskTable) {
					this.ActivityNewPlayerTaskTableById.setValue(v.Id, v)
				}
			}
			this.ActivityRankTableById = new Dictionary<number, ActivityRankTable>()
			if(this.ActivityRankTable) {
				for(let v of this.ActivityRankTable) {
					this.ActivityRankTableById.setValue(v.Id, v)
				}
			}
			this.ActivityTableByActivityId = new Dictionary<number, ActivityTable>()
			if(this.ActivityTable) {
				for(let v of this.ActivityTable) {
					this.ActivityTableByActivityId.setValue(v.ActivityId, v)
				}
			}
			this.AdvertPosTableByAdType = new Dictionary<AdType, AdvertPosTable>()
			if(this.AdvertPosTable) {
				for(let v of this.AdvertPosTable) {
					this.AdvertPosTableByAdType.setValue(v.AdType, v)
				}
			}
			this.AnimationTableById = new Dictionary<number, AnimationTable>()
			if(this.AnimationTable) {
				for(let v of this.AnimationTable) {
					this.AnimationTableById.setValue(v.Id, v)
				}
			}
			this.BattlePassTableById = new Dictionary<number, BattlePassTable>()
			if(this.BattlePassTable) {
				for(let v of this.BattlePassTable) {
					this.BattlePassTableById.setValue(v.Id, v)
				}
			}
			this.BookDictionaryByPhaseOneBook = new Dictionary<number, BookDictionary>()
			if(this.BookDictionary) {
				for(let v of this.BookDictionary) {
					this.BookDictionaryByPhaseOneBook.setValue(v.PhaseOneBook, v)
				}
			}
			this.BookFragmentTableById = new Dictionary<number, BookFragmentTable>()
			if(this.BookFragmentTable) {
				for(let v of this.BookFragmentTable) {
					this.BookFragmentTableById.setValue(v.Id, v)
				}
			}
			this.BookLevelTableById = new Dictionary<number, BookLevelTable>()
			if(this.BookLevelTable) {
				for(let v of this.BookLevelTable) {
					this.BookLevelTableById.setValue(v.Id, v)
				}
			}
			this.BookSeriesTableById = new Dictionary<number, BookSeriesTable>()
			if(this.BookSeriesTable) {
				for(let v of this.BookSeriesTable) {
					this.BookSeriesTableById.setValue(v.Id, v)
				}
			}
			this.BookSlotTableById = new Dictionary<number, BookSlotTable>()
			if(this.BookSlotTable) {
				for(let v of this.BookSlotTable) {
					this.BookSlotTableById.setValue(v.Id, v)
				}
			}
			this.BookStarTableById = new Dictionary<number, BookStarTable>()
			if(this.BookStarTable) {
				for(let v of this.BookStarTable) {
					this.BookStarTableById.setValue(v.Id, v)
				}
			}
			this.BookTableById = new Dictionary<number, BookTable>()
			if(this.BookTable) {
				for(let v of this.BookTable) {
					this.BookTableById.setValue(v.Id, v)
				}
			}
			this.BoundTableById = new Dictionary<number, BoundTable>()
			if(this.BoundTable) {
				for(let v of this.BoundTable) {
					this.BoundTableById.setValue(v.Id, v)
				}
			}
			this.BreakEggTableById = new Dictionary<number, BreakEggTable>()
			if(this.BreakEggTable) {
				for(let v of this.BreakEggTable) {
					this.BreakEggTableById.setValue(v.Id, v)
				}
			}
			this.BuffTableById = new Dictionary<number, BuffTable>()
			if(this.BuffTable) {
				for(let v of this.BuffTable) {
					this.BuffTableById.setValue(v.Id, v)
				}
			}
			this.BulletTableById = new Dictionary<number, BulletTable>()
			if(this.BulletTable) {
				for(let v of this.BulletTable) {
					this.BulletTableById.setValue(v.Id, v)
				}
			}
			this.BuyDiamondsTableByGoodsId = new Dictionary<number, BuyDiamondsTable>()
			if(this.BuyDiamondsTable) {
				for(let v of this.BuyDiamondsTable) {
					this.BuyDiamondsTableByGoodsId.setValue(v.GoodsId, v)
				}
			}
			this.BuyGoldTableByType = new Dictionary<BuyGoldType, BuyGoldTable>()
			if(this.BuyGoldTable) {
				for(let v of this.BuyGoldTable) {
					this.BuyGoldTableByType.setValue(v.Type, v)
				}
			}
			this.BuyStaminaTableByType = new Dictionary<BuyStaminaType, BuyStaminaTable>()
			if(this.BuyStaminaTable) {
				for(let v of this.BuyStaminaTable) {
					this.BuyStaminaTableByType.setValue(v.Type, v)
				}
			}
			this.ChallengeButtonTableById = new Dictionary<number, ChallengeButtonTable>()
			if(this.ChallengeButtonTable) {
				for(let v of this.ChallengeButtonTable) {
					this.ChallengeButtonTableById.setValue(v.Id, v)
				}
			}
			this.ChannelTableByChannelType = new Dictionary<ChannelType, ChannelTable>()
			if(this.ChannelTable) {
				for(let v of this.ChannelTable) {
					this.ChannelTableByChannelType.setValue(v.ChannelType, v)
				}
			}
			this.ChapterFristRewardTableById = new Dictionary<number, ChapterFristRewardTable>()
			if(this.ChapterFristRewardTable) {
				for(let v of this.ChapterFristRewardTable) {
					this.ChapterFristRewardTableById.setValue(v.Id, v)
				}
			}
			this.ChatBreviaryTableByType = new Dictionary<ChatBreviaryType, ChatBreviaryTable>()
			if(this.ChatBreviaryTable) {
				for(let v of this.ChatBreviaryTable) {
					this.ChatBreviaryTableByType.setValue(v.Type, v)
				}
			}
			this.ChoiceBoxTableByChoiceBoxId = new Dictionary<number, ChoiceBoxTable>()
			if(this.ChoiceBoxTable) {
				for(let v of this.ChoiceBoxTable) {
					this.ChoiceBoxTableByChoiceBoxId.setValue(v.ChoiceBoxId, v)
				}
			}
			this.ClimbTowerTableByStageId = new Dictionary<number, ClimbTowerTable>()
			if(this.ClimbTowerTable) {
				for(let v of this.ClimbTowerTable) {
					this.ClimbTowerTableByStageId.setValue(v.StageId, v)
				}
			}
			this.ComicByComicID = new Dictionary<number, Comic>()
			if(this.Comic) {
				for(let v of this.Comic) {
					this.ComicByComicID.setValue(v.ComicID, v)
				}
			}
			this.DailyChallengeBuffTableById = new Dictionary<number, DailyChallengeBuffTable>()
			if(this.DailyChallengeBuffTable) {
				for(let v of this.DailyChallengeBuffTable) {
					this.DailyChallengeBuffTableById.setValue(v.Id, v)
				}
			}
			this.DailyChallengeLevelTableByLevel = new Dictionary<number, DailyChallengeLevelTable>()
			if(this.DailyChallengeLevelTable) {
				for(let v of this.DailyChallengeLevelTable) {
					this.DailyChallengeLevelTableByLevel.setValue(v.Level, v)
				}
			}
			this.DailyRewardTableById = new Dictionary<number, DailyRewardTable>()
			if(this.DailyRewardTable) {
				for(let v of this.DailyRewardTable) {
					this.DailyRewardTableById.setValue(v.Id, v)
				}
			}
			this.DailyShopItemTableById = new Dictionary<number, DailyShopItemTable>()
			if(this.DailyShopItemTable) {
				for(let v of this.DailyShopItemTable) {
					this.DailyShopItemTableById.setValue(v.Id, v)
				}
			}
			this.DailyShopTableByShopId = new Dictionary<number, DailyShopTable>()
			if(this.DailyShopTable) {
				for(let v of this.DailyShopTable) {
					this.DailyShopTableByShopId.setValue(v.ShopId, v)
				}
			}
			this.DropTableById = new Dictionary<number, DropTable>()
			if(this.DropTable) {
				for(let v of this.DropTable) {
					this.DropTableById.setValue(v.Id, v)
				}
			}
			this.EffectTableById = new Dictionary<number, EffectTable>()
			if(this.EffectTable) {
				for(let v of this.EffectTable) {
					this.EffectTableById.setValue(v.Id, v)
				}
			}
			this.ElixirTableById = new Dictionary<number, ElixirTable>()
			if(this.ElixirTable) {
				for(let v of this.ElixirTable) {
					this.ElixirTableById.setValue(v.Id, v)
				}
			}
			this.EquipAttrGroupTableById = new Dictionary<string, EquipAttrGroupTable>()
			if(this.EquipAttrGroupTable) {
				for(let v of this.EquipAttrGroupTable) {
					this.EquipAttrGroupTableById.setValue(v.Id, v)
				}
			}
			this.EquipAttrTableById = new Dictionary<number, EquipAttrTable>()
			if(this.EquipAttrTable) {
				for(let v of this.EquipAttrTable) {
					this.EquipAttrTableById.setValue(v.Id, v)
				}
			}
			this.EquipSkillTableById = new Dictionary<number, EquipSkillTable>()
			if(this.EquipSkillTable) {
				for(let v of this.EquipSkillTable) {
					this.EquipSkillTableById.setValue(v.Id, v)
				}
			}
			this.EquipTableById = new Dictionary<number, EquipTable>()
			if(this.EquipTable) {
				for(let v of this.EquipTable) {
					this.EquipTableById.setValue(v.Id, v)
				}
			}
			this.EquipUpgradeTableById = new Dictionary<number, EquipUpgradeTable>()
			if(this.EquipUpgradeTable) {
				for(let v of this.EquipUpgradeTable) {
					this.EquipUpgradeTableById.setValue(v.Id, v)
				}
			}
			this.FeatherEggDropById = new Dictionary<number, FeatherEggDrop>()
			if(this.FeatherEggDrop) {
				for(let v of this.FeatherEggDrop) {
					this.FeatherEggDropById.setValue(v.Id, v)
				}
			}
			this.FincaFightTeamByLevel = new Dictionary<number, FincaFightTeam>()
			if(this.FincaFightTeam) {
				for(let v of this.FincaFightTeam) {
					this.FincaFightTeamByLevel.setValue(v.Level, v)
				}
			}
			this.FirstRechargeTableById = new Dictionary<number, FirstRechargeTable>()
			if(this.FirstRechargeTable) {
				for(let v of this.FirstRechargeTable) {
					this.FirstRechargeTableById.setValue(v.Id, v)
				}
			}
			this.GachaTableById = new Dictionary<number, GachaTable>()
			if(this.GachaTable) {
				for(let v of this.GachaTable) {
					this.GachaTableById.setValue(v.Id, v)
				}
			}
			this.GachaUpTableById = new Dictionary<number, GachaUpTable>()
			if(this.GachaUpTable) {
				for(let v of this.GachaUpTable) {
					this.GachaUpTableById.setValue(v.Id, v)
				}
			}
			this.GeneLevelTableById = new Dictionary<number, GeneLevelTable>()
			if(this.GeneLevelTable) {
				for(let v of this.GeneLevelTable) {
					this.GeneLevelTableById.setValue(v.Id, v)
				}
			}
			this.GuideDialogueTableById = new Dictionary<string, GuideDialogueTable>()
			if(this.GuideDialogueTable) {
				for(let v of this.GuideDialogueTable) {
					this.GuideDialogueTableById.setValue(v.Id, v)
				}
			}
			this.GuideTableById = new Dictionary<number, GuideTable>()
			if(this.GuideTable) {
				for(let v of this.GuideTable) {
					this.GuideTableById.setValue(v.Id, v)
				}
			}
			this.GuildAttrTableById = new Dictionary<number, GuildAttrTable>()
			if(this.GuildAttrTable) {
				for(let v of this.GuildAttrTable) {
					this.GuildAttrTableById.setValue(v.Id, v)
				}
			}
			this.GuildBossPointTableById = new Dictionary<number, GuildBossPointTable>()
			if(this.GuildBossPointTable) {
				for(let v of this.GuildBossPointTable) {
					this.GuildBossPointTableById.setValue(v.Id, v)
				}
			}
			this.GuildFlagTableById = new Dictionary<number, GuildFlagTable>()
			if(this.GuildFlagTable) {
				for(let v of this.GuildFlagTable) {
					this.GuildFlagTableById.setValue(v.Id, v)
				}
			}
			this.GuildGiftTableById = new Dictionary<number, GuildGiftTable>()
			if(this.GuildGiftTable) {
				for(let v of this.GuildGiftTable) {
					this.GuildGiftTableById.setValue(v.Id, v)
				}
			}
			this.GuildLevelTableById = new Dictionary<number, GuildLevelTable>()
			if(this.GuildLevelTable) {
				for(let v of this.GuildLevelTable) {
					this.GuildLevelTableById.setValue(v.Id, v)
				}
			}
			this.GuildOpenFunctionTableByName = new Dictionary<GuildOFName, GuildOpenFunctionTable>()
			if(this.GuildOpenFunctionTable) {
				for(let v of this.GuildOpenFunctionTable) {
					this.GuildOpenFunctionTableByName.setValue(v.Name, v)
				}
			}
			this.GuildPositionTableByPosition = new Dictionary<GuildPosition, GuildPositionTable>()
			if(this.GuildPositionTable) {
				for(let v of this.GuildPositionTable) {
					this.GuildPositionTableByPosition.setValue(v.Position, v)
				}
			}
			this.GuildSignInTableById = new Dictionary<number, GuildSignInTable>()
			if(this.GuildSignInTable) {
				for(let v of this.GuildSignInTable) {
					this.GuildSignInTableById.setValue(v.Id, v)
				}
			}
			this.HeadFramTableById = new Dictionary<number, HeadFramTable>()
			if(this.HeadFramTable) {
				for(let v of this.HeadFramTable) {
					this.HeadFramTableById.setValue(v.Id, v)
				}
			}
			this.HeadTableById = new Dictionary<number, HeadTable>()
			if(this.HeadTable) {
				for(let v of this.HeadTable) {
					this.HeadTableById.setValue(v.Id, v)
				}
			}
			this.HeroAlbumTableByHeroAptitude = new Dictionary<HeroAptitude, HeroAlbumTable>()
			if(this.HeroAlbumTable) {
				for(let v of this.HeroAlbumTable) {
					this.HeroAlbumTableByHeroAptitude.setValue(v.HeroAptitude, v)
				}
			}
			this.HeroAptitudeTableByHeroAptitude = new Dictionary<HeroAptitude, HeroAptitudeTable>()
			if(this.HeroAptitudeTable) {
				for(let v of this.HeroAptitudeTable) {
					this.HeroAptitudeTableByHeroAptitude.setValue(v.HeroAptitude, v)
				}
			}
			this.HeroAttrClientTableByType = new Dictionary<AttrType, HeroAttrClientTable>()
			if(this.HeroAttrClientTable) {
				for(let v of this.HeroAttrClientTable) {
					this.HeroAttrClientTableByType.setValue(v.Type, v)
				}
			}
			this.HeroAttrTableById = new Dictionary<number, HeroAttrTable>()
			if(this.HeroAttrTable) {
				for(let v of this.HeroAttrTable) {
					this.HeroAttrTableById.setValue(v.Id, v)
				}
			}
			this.HeroClassTableByHeroClass = new Dictionary<HeroClass, HeroClassTable>()
			if(this.HeroClassTable) {
				for(let v of this.HeroClassTable) {
					this.HeroClassTableByHeroClass.setValue(v.HeroClass, v)
				}
			}
			this.HeroCollectionTableById = new Dictionary<number, HeroCollectionTable>()
			if(this.HeroCollectionTable) {
				for(let v of this.HeroCollectionTable) {
					this.HeroCollectionTableById.setValue(v.Id, v)
				}
			}
			this.HeroCommonCostTableById = new Dictionary<number, HeroCommonCostTable>()
			if(this.HeroCommonCostTable) {
				for(let v of this.HeroCommonCostTable) {
					this.HeroCommonCostTableById.setValue(v.Id, v)
				}
			}
			this.HeroLevelResonanceTableById = new Dictionary<number, HeroLevelResonanceTable>()
			if(this.HeroLevelResonanceTable) {
				for(let v of this.HeroLevelResonanceTable) {
					this.HeroLevelResonanceTableById.setValue(v.Id, v)
				}
			}
			this.HeroLevelUpTableByLevel = new Dictionary<number, HeroLevelUpTable>()
			if(this.HeroLevelUpTable) {
				for(let v of this.HeroLevelUpTable) {
					this.HeroLevelUpTableByLevel.setValue(v.Level, v)
				}
			}
			this.HeroMasterTableById = new Dictionary<number, HeroMasterTable>()
			if(this.HeroMasterTable) {
				for(let v of this.HeroMasterTable) {
					this.HeroMasterTableById.setValue(v.Id, v)
				}
			}
			this.HeroPowerScoreById = new Dictionary<number, HeroPowerScore>()
			if(this.HeroPowerScore) {
				for(let v of this.HeroPowerScore) {
					this.HeroPowerScoreById.setValue(v.Id, v)
				}
			}
			this.HeroStarResonanceTableById = new Dictionary<number, HeroStarResonanceTable>()
			if(this.HeroStarResonanceTable) {
				for(let v of this.HeroStarResonanceTable) {
					this.HeroStarResonanceTableById.setValue(v.Id, v)
				}
			}
			this.HeroStarStepTableById = new Dictionary<number, HeroStarStepTable>()
			if(this.HeroStarStepTable) {
				for(let v of this.HeroStarStepTable) {
					this.HeroStarStepTableById.setValue(v.Id, v)
				}
			}
			this.HeroStarUpTableById = new Dictionary<number, HeroStarUpTable>()
			if(this.HeroStarUpTable) {
				for(let v of this.HeroStarUpTable) {
					this.HeroStarUpTableById.setValue(v.Id, v)
				}
			}
			this.HeroTableById = new Dictionary<number, HeroTable>()
			if(this.HeroTable) {
				for(let v of this.HeroTable) {
					this.HeroTableById.setValue(v.Id, v)
				}
			}
			this.ItemClientJumpTableByItemId = new Dictionary<number, ItemClientJumpTable>()
			if(this.ItemClientJumpTable) {
				for(let v of this.ItemClientJumpTable) {
					this.ItemClientJumpTableByItemId.setValue(v.ItemId, v)
				}
			}
			this.ItemQualityTableByQuality = new Dictionary<ItemQuality, ItemQualityTable>()
			if(this.ItemQualityTable) {
				for(let v of this.ItemQualityTable) {
					this.ItemQualityTableByQuality.setValue(v.Quality, v)
				}
			}
			this.ItemStarClientTableById = new Dictionary<number, ItemStarClientTable>()
			if(this.ItemStarClientTable) {
				for(let v of this.ItemStarClientTable) {
					this.ItemStarClientTableById.setValue(v.Id, v)
				}
			}
			this.ItemTableById = new Dictionary<number, ItemTable>()
			if(this.ItemTable) {
				for(let v of this.ItemTable) {
					this.ItemTableById.setValue(v.Id, v)
				}
			}
			this.LimitTimeItemTableByItemId = new Dictionary<number, LimitTimeItemTable>()
			if(this.LimitTimeItemTable) {
				for(let v of this.LimitTimeItemTable) {
					this.LimitTimeItemTableByItemId.setValue(v.ItemId, v)
				}
			}
			this.MainChapterGiftTableByMallId = new Dictionary<number, MainChapterGiftTable>()
			if(this.MainChapterGiftTable) {
				for(let v of this.MainChapterGiftTable) {
					this.MainChapterGiftTableByMallId.setValue(v.MallId, v)
				}
			}
			this.MainChapterTableById = new Dictionary<number, MainChapterTable>()
			if(this.MainChapterTable) {
				for(let v of this.MainChapterTable) {
					this.MainChapterTableById.setValue(v.Id, v)
				}
			}
			this.MallItemTabeById = new Dictionary<number, MallItemTabe>()
			if(this.MallItemTabe) {
				for(let v of this.MallItemTabe) {
					this.MallItemTabeById.setValue(v.Id, v)
				}
			}
			this.MallTableByMallId = new Dictionary<number, MallTable>()
			if(this.MallTable) {
				for(let v of this.MallTable) {
					this.MallTableByMallId.setValue(v.MallId, v)
				}
			}
			this.MapBlockById = new Dictionary<number, MapBlock>()
			if(this.MapBlock) {
				for(let v of this.MapBlock) {
					this.MapBlockById.setValue(v.Id, v)
				}
			}
			this.ModuleTableByModuleType = new Dictionary<Module, ModuleTable>()
			if(this.ModuleTable) {
				for(let v of this.ModuleTable) {
					this.ModuleTableByModuleType.setValue(v.ModuleType, v)
				}
			}
			this.MonsterTableById = new Dictionary<number, MonsterTable>()
			if(this.MonsterTable) {
				for(let v of this.MonsterTable) {
					this.MonsterTableById.setValue(v.Id, v)
				}
			}
			this.MonthlyPassTableByType = new Dictionary<PrivilegedType, MonthlyPassTable>()
			if(this.MonthlyPassTable) {
				for(let v of this.MonthlyPassTable) {
					this.MonthlyPassTableByType.setValue(v.Type, v)
				}
			}
			this.NewPlayerDailyGiftTableById = new Dictionary<number, NewPlayerDailyGiftTable>()
			if(this.NewPlayerDailyGiftTable) {
				for(let v of this.NewPlayerDailyGiftTable) {
					this.NewPlayerDailyGiftTableById.setValue(v.Id, v)
				}
			}
			this.NoticeTableById = new Dictionary<number, NoticeTable>()
			if(this.NoticeTable) {
				for(let v of this.NoticeTable) {
					this.NoticeTableById.setValue(v.Id, v)
				}
			}
			this.OpenFunctionTableByName = new Dictionary<OpenFunctionName, OpenFunctionTable>()
			if(this.OpenFunctionTable) {
				for(let v of this.OpenFunctionTable) {
					this.OpenFunctionTableByName.setValue(v.Name, v)
				}
			}
			this.PRBTableById = new Dictionary<number, PRBTable>()
			if(this.PRBTable) {
				for(let v of this.PRBTable) {
					this.PRBTableById.setValue(v.Id, v)
				}
			}
			this.PatrolTableByPveStageId = new Dictionary<number, PatrolTable>()
			if(this.PatrolTable) {
				for(let v of this.PatrolTable) {
					this.PatrolTableByPveStageId.setValue(v.PveStageId, v)
				}
			}
			this.PlayerLvTableByPlayerLv = new Dictionary<number, PlayerLvTable>()
			if(this.PlayerLvTable) {
				for(let v of this.PlayerLvTable) {
					this.PlayerLvTableByPlayerLv.setValue(v.PlayerLv, v)
				}
			}
			this.PopWindowMechanismByID = new Dictionary<number, PopWindowMechanism>()
			if(this.PopWindowMechanism) {
				for(let v of this.PopWindowMechanism) {
					this.PopWindowMechanismByID.setValue(v.ID, v)
				}
			}
			this.PvPStageTableByID = new Dictionary<number, PvPStageTable>()
			if(this.PvPStageTable) {
				for(let v of this.PvPStageTable) {
					this.PvPStageTableByID.setValue(v.ID, v)
				}
			}
			this.PveAddFeatherDropTableByCount = new Dictionary<number, PveAddFeatherDropTable>()
			if(this.PveAddFeatherDropTable) {
				for(let v of this.PveAddFeatherDropTable) {
					this.PveAddFeatherDropTableByCount.setValue(v.Count, v)
				}
			}
			this.PveClearStageTableByStageId = new Dictionary<number, PveClearStageTable>()
			if(this.PveClearStageTable) {
				for(let v of this.PveClearStageTable) {
					this.PveClearStageTableByStageId.setValue(v.StageId, v)
				}
			}
			this.PveStageBuffTableById = new Dictionary<number, PveStageBuffTable>()
			if(this.PveStageBuffTable) {
				for(let v of this.PveStageBuffTable) {
					this.PveStageBuffTableById.setValue(v.Id, v)
				}
			}
			this.PveStageDropTableByDropId = new Dictionary<number, PveStageDropTable>()
			if(this.PveStageDropTable) {
				for(let v of this.PveStageDropTable) {
					this.PveStageDropTableByDropId.setValue(v.DropId, v)
				}
			}
			this.PveStageTableByStageId = new Dictionary<number, PveStageTable>()
			if(this.PveStageTable) {
				for(let v of this.PveStageTable) {
					this.PveStageTableByStageId.setValue(v.StageId, v)
				}
			}
			this.PveSweepTableByStageId = new Dictionary<number, PveSweepTable>()
			if(this.PveSweepTable) {
				for(let v of this.PveSweepTable) {
					this.PveSweepTableByStageId.setValue(v.StageId, v)
				}
			}
			this.PveTimeDropTableByStageId = new Dictionary<number, PveTimeDropTable>()
			if(this.PveTimeDropTable) {
				for(let v of this.PveTimeDropTable) {
					this.PveTimeDropTableByStageId.setValue(v.StageId, v)
				}
			}
			this.QuestLogTableByLevel = new Dictionary<number, QuestLogTable>()
			if(this.QuestLogTable) {
				for(let v of this.QuestLogTable) {
					this.QuestLogTableByLevel.setValue(v.Level, v)
				}
			}
			this.RandomNameTableById = new Dictionary<number, RandomNameTable>()
			if(this.RandomNameTable) {
				for(let v of this.RandomNameTable) {
					this.RandomNameTableById.setValue(v.Id, v)
				}
			}
			this.RankCycleRewardTableByIndexId = new Dictionary<number, RankCycleRewardTable>()
			if(this.RankCycleRewardTable) {
				for(let v of this.RankCycleRewardTable) {
					this.RankCycleRewardTableByIndexId.setValue(v.IndexId, v)
				}
			}
			this.RankRewardTableById = new Dictionary<number, RankRewardTable>()
			if(this.RankRewardTable) {
				for(let v of this.RankRewardTable) {
					this.RankRewardTableById.setValue(v.Id, v)
				}
			}
			this.RechargeTableById = new Dictionary<number, RechargeTable>()
			if(this.RechargeTable) {
				for(let v of this.RechargeTable) {
					this.RechargeTableById.setValue(v.Id, v)
				}
			}
			this.RecommendTeamTableById = new Dictionary<number, RecommendTeamTable>()
			if(this.RecommendTeamTable) {
				for(let v of this.RecommendTeamTable) {
					this.RecommendTeamTableById.setValue(v.Id, v)
				}
			}
			this.RobotTableById = new Dictionary<number, RobotTable>()
			if(this.RobotTable) {
				for(let v of this.RobotTable) {
					this.RobotTableById.setValue(v.Id, v)
				}
			}
			this.RogueGroupTableById = new Dictionary<number, RogueGroupTable>()
			if(this.RogueGroupTable) {
				for(let v of this.RogueGroupTable) {
					this.RogueGroupTableById.setValue(v.Id, v)
				}
			}
			this.RogueTableById = new Dictionary<number, RogueTable>()
			if(this.RogueTable) {
				for(let v of this.RogueTable) {
					this.RogueTableById.setValue(v.Id, v)
				}
			}
			this.ScrollPaintingTableById = new Dictionary<number, ScrollPaintingTable>()
			if(this.ScrollPaintingTable) {
				for(let v of this.ScrollPaintingTable) {
					this.ScrollPaintingTableById.setValue(v.Id, v)
				}
			}
			this.ServerlistTableByID = new Dictionary<number, ServerlistTable>()
			if(this.ServerlistTable) {
				for(let v of this.ServerlistTable) {
					this.ServerlistTableByID.setValue(v.ID, v)
				}
			}
			this.SignInGiftTableByDay = new Dictionary<number, SignInGiftTable>()
			if(this.SignInGiftTable) {
				for(let v of this.SignInGiftTable) {
					this.SignInGiftTableByDay.setValue(v.Day, v)
				}
			}
			this.SkillGroupTableById = new Dictionary<number, SkillGroupTable>()
			if(this.SkillGroupTable) {
				for(let v of this.SkillGroupTable) {
					this.SkillGroupTableById.setValue(v.Id, v)
				}
			}
			this.SkillPowerTableById = new Dictionary<number, SkillPowerTable>()
			if(this.SkillPowerTable) {
				for(let v of this.SkillPowerTable) {
					this.SkillPowerTableById.setValue(v.Id, v)
				}
			}
			this.SkillSummonTableBySummonId = new Dictionary<number, SkillSummonTable>()
			if(this.SkillSummonTable) {
				for(let v of this.SkillSummonTable) {
					this.SkillSummonTableBySummonId.setValue(v.SummonId, v)
				}
			}
			this.SkillTableById = new Dictionary<number, SkillTable>()
			if(this.SkillTable) {
				for(let v of this.SkillTable) {
					this.SkillTableById.setValue(v.Id, v)
				}
			}
			this.SoundTableById = new Dictionary<number, SoundTable>()
			if(this.SoundTable) {
				for(let v of this.SoundTable) {
					this.SoundTableById.setValue(v.Id, v)
				}
			}
			this.TaskTableById = new Dictionary<number, TaskTable>()
			if(this.TaskTable) {
				for(let v of this.TaskTable) {
					this.TaskTableById.setValue(v.Id, v)
				}
			}
			this.TipsTableById = new Dictionary<number, TipsTable>()
			if(this.TipsTable) {
				for(let v of this.TipsTable) {
					this.TipsTableById.setValue(v.Id, v)
				}
			}
			this.TriggerTableById = new Dictionary<number, TriggerTable>()
			if(this.TriggerTable) {
				for(let v of this.TriggerTable) {
					this.TriggerTableById.setValue(v.Id, v)
				}
			}
			this.VipBonusTableByIndexId = new Dictionary<number, VipBonusTable>()
			if(this.VipBonusTable) {
				for(let v of this.VipBonusTable) {
					this.VipBonusTableByIndexId.setValue(v.IndexId, v)
				}
			}
			this.VipTableByVipLv = new Dictionary<number, VipTable>()
			if(this.VipTable) {
				for(let v of this.VipTable) {
					this.VipTableByVipLv.setValue(v.VipLv, v)
				}
			}
			this.VirtualItemByVirtualItemId = new Dictionary<number, VirtualItem>()
			if(this.VirtualItem) {
				for(let v of this.VirtualItem) {
					this.VirtualItemByVirtualItemId.setValue(v.VirtualItemId, v)
				}
			}
			this.VoidStageTableById = new Dictionary<number, VoidStageTable>()
			if(this.VoidStageTable) {
				for(let v of this.VoidStageTable) {
					this.VoidStageTableById.setValue(v.Id, v)
				}
			}
			this.WeeklyTaskBoxTableById = new Dictionary<number, WeeklyTaskBoxTable>()
			if(this.WeeklyTaskBoxTable) {
				for(let v of this.WeeklyTaskBoxTable) {
					this.WeeklyTaskBoxTableById.setValue(v.Id, v)
				}
			}
			this.WorldBossDamTableById = new Dictionary<number, WorldBossDamTable>()
			if(this.WorldBossDamTable) {
				for(let v of this.WorldBossDamTable) {
					this.WorldBossDamTableById.setValue(v.Id, v)
				}
			}
			this.WorldBossRewardTableById = new Dictionary<number, WorldBossRewardTable>()
			if(this.WorldBossRewardTable) {
				for(let v of this.WorldBossRewardTable) {
					this.WorldBossRewardTableById.setValue(v.Id, v)
				}
			}
		}
	}

	// Used internally by dictionary
	export interface IDictionaryPair<K, V> {
		key: K;
		value: V;
	}
	
	export class Dictionary<K, V> {
	
		/**
		 * Object holding the key-value pairs.
		 * @type {Object}
		 * @private
		 */
		protected table: { [key: string]: IDictionaryPair<K, V> };
		//: [key: K] will not work since indices can only by strings in javascript and typescript enforces this.
	
		/**
		 * Number of elements in the list.
		 * @type {number}
		 * @private
		 */
		protected nElements: number;
	
		/**
		 * Function used to convert keys to strings.
		 * @type {function(Object):string}
		 * @protected
		 */
		protected toStr: (key: K) => string;
	
	
		/**
		 * Creates an empty dictionary.
		 * @class <p>Dictionaries map keys to values; each key can map to at most one value.
		 * This implementation accepts any kind of objects as keys.</p>
		 *
		 * <p>If the keys are custom objects a function which converts keys to unique
		 * strings must be provided. Example:</p>
		 * <pre>
		 * function petToString(pet) {
		 *  return pet.name;
		 * }
		 * </pre>
		 * @constructor
		 * @param {function(Object):string=} toStrFunction optional function used
		 * to convert keys to strings. If the keys aren't strings or if toString()
		 * is not appropriate, a custom function which receives a key and returns a
		 * unique string must be provided.
		 */
		constructor(toStrFunction?: (key: K) => string) {
			this.table = {};
			this.nElements = 0;
			this.toStr = toStrFunction || defaultToString;
		}
	
	
		/**
		 * Returns the value to which this dictionary maps the specified key.
		 * Returns undefined if this dictionary contains no mapping for this key.
		 * @param {Object} key key whose associated value is to be returned.
		 * @return {*} the value to which this dictionary maps the specified key or
		 * undefined if the map contains no mapping for this key.
		 */
		getValue(key: K): V | undefined {
			const pair: IDictionaryPair<K, V> = this.table['$' + this.toStr(key)];
			if (isUndefined(pair)) {
				return undefined;
			}
			return pair.value;
		}
	
	
		/**
		 * Associates the specified value with the specified key in this dictionary.
		 * If the dictionary previously contained a mapping for this key, the old
		 * value is replaced by the specified value.
		 * @param {Object} key key with which the specified value is to be
		 * associated.
		 * @param {Object} value value to be associated with the specified key.
		 * @return {*} previous value associated with the specified key, or undefined if
		 * there was no mapping for the key or if the key/value are undefined.
		 */
		setValue(key: K, value: V): V | undefined {
	
			if (isUndefined(key) || isUndefined(value)) {
				return undefined;
			}
	
			let ret: V | undefined;
			const k = '$' + this.toStr(key);
			const previousElement: IDictionaryPair<K, V> = this.table[k];
			if (isUndefined(previousElement)) {
				this.nElements++;
				ret = undefined;
			} else {
				ret = previousElement.value;
			}
			this.table[k] = {
				key: key,
				value: value
			};
			return ret;
		}
	
		/**
		 * Removes the mapping for this key from this dictionary if it is present.
		 * @param {Object} key key whose mapping is to be removed from the
		 * dictionary.
		 * @return {*} previous value associated with specified key, or undefined if
		 * there was no mapping for key.
		 */
		remove(key: K): V | undefined {
			const k = '$' + this.toStr(key);
			const previousElement: IDictionaryPair<K, V> = this.table[k];
			if (!isUndefined(previousElement)) {
				delete this.table[k];
				this.nElements--;
				return previousElement.value;
			}
			return undefined;
		}
	
		/**
		 * Returns an array containing all of the keys in this dictionary.
		 * @return {Array} an array containing all of the keys in this dictionary.
		 */
		keys(): K[] {
			const array: K[] = [];
			for (const name in this.table) {
				if (has(this.table, name)) {
					const pair: IDictionaryPair<K, V> = this.table[name];
					array.push(pair.key);
				}
			}
			return array;
		}
	
		/**
		 * Returns an array containing all of the values in this dictionary.
		 * @return {Array} an array containing all of the values in this dictionary.
		 */
		values(): V[] {
			const array: V[] = [];
			for (const name in this.table) {
				if (has(this.table, name)) {
					const pair: IDictionaryPair<K, V> = this.table[name];
					array.push(pair.value);
				}
			}
			return array;
		}
	
		/**
		 * Executes the provided function once for each key-value pair
		 * present in this dictionary.
		 * @param {function(Object,Object):*} callback function to execute, it is
		 * invoked with two arguments: key and value. To break the iteration you can
		 * optionally return false.
		 */
		forEach(callback: (key: K, value: V) => any): void {
			for (const name in this.table) {
				if (has(this.table, name)) {
					const pair: IDictionaryPair<K, V> = this.table[name];
					const ret = callback(pair.key, pair.value);
					if (ret === false) {
						return;
					}
				}
			}
		}
	
		/**
		 * Returns true if this dictionary contains a mapping for the specified key.
		 * @param {Object} key key whose presence in this dictionary is to be
		 * tested.
		 * @return {boolean} true if this dictionary contains a mapping for the
		 * specified key.
		 */
		containsKey(key: K): boolean {
			return !isUndefined(this.getValue(key));
		}
	
		/**
		 * Removes all mappings from this dictionary.
		 * @this {collections.Dictionary}
		 */
		clear() {
			this.table = {};
			this.nElements = 0;
		}
	
		/**
		 * Returns the number of keys in this dictionary.
		 * @return {number} the number of key-value mappings in this dictionary.
		 */
		size(): number {
			return this.nElements;
		}
	
		/**
		 * Returns true if this dictionary contains no mappings.
		 * @return {boolean} true if this dictionary contains no mappings.
		 */
		isEmpty(): boolean {
			return this.nElements <= 0;
		}
	
		toString(): string {
			let toret = '{';
			this.forEach((k, v) => {
				toret += "\n\t" + k.toString() + " : " + v.toString();
			});
			return toret + '\n}';
		}
	} // End of dictionary

	function defaultToString(item: any): string {
		if (item === null) {
			return 'COLLECTION_NULL';
		} else if (isUndefined(item)) {
			return 'COLLECTION_UNDEFINED';
		} else if (isString(item)) {
			return '$s' + item;
		} else {
			return '$o' + item.toString();
		}
	}

	const _hasOwnProperty = Object.prototype.hasOwnProperty;
	const has = function(obj: any, prop: any) {
		return _hasOwnProperty.call(obj, prop);
	};

	function isUndefined(obj: any): obj is undefined {
		return (typeof obj) === 'undefined';
	}

	function isString(obj: any): boolean {
		return Object.prototype.toString.call(obj) === '[object String]';
	}

	//Polyfill
    if (typeof Object.assign !== 'function') {
        // Must be writable: true, enumerable: false, configurable: true
		Object.defineProperty(Object, "assign", {
			value: function assign(target, varArgs) { // .length of function is 2
            	'use strict';
            	if (target === null || target === undefined) {
              		throw new TypeError('Cannot convert undefined or null to object');
            	}
      
            	var to = Object(target);
      
            	for (var index = 1; index < arguments.length; index++) {
              		var nextSource = arguments[index];
      
              		if (nextSource !== null && nextSource !== undefined) { 
                		for (var nextKey in nextSource) {
                  			// Avoid bugs when hasOwnProperty is shadowed
                  			if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                    			to[nextKey] = nextSource[nextKey];
                  			}
						}
              		}
            	}
            	return to;
			},
			writable: true,
			configurable: true
        });
    }
}
